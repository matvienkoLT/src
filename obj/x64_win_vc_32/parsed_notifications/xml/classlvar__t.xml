<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="classlvar__t" kind="class" language="C++" prot="public">
    <compoundname>lvar_t</compoundname>
    <basecompoundref refid="structlvar__locator__t" prot="public" virt="non-virtual">lvar_locator_t</basecompoundref>
    <includes refid="hexrays_8hpp" local="no">hexrays.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classlvar__t_1a31bf04b28b583f77ec228da59611b596" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class mbl_array_t</definition>
        <argsstring></argsstring>
        <name>mbl_array_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1226" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1226" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classlvar__t_1a75050763df191638df8e1089009f0648" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int lvar_t::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group___c_v_a_r__" kindref="compound">Local variable property bits</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1227" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classlvar__t_1a8aa1bd5d77e3822af117193ad1b84b63" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref></type>
        <definition>qstring lvar_t::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>variable name. use mbl_array_t::set_nice_lvar_name() and mbl_array_t::set_user_lvar_name() to modify it </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1254" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlvar__t_1a51dcb58d595565bf328163cae23daffb" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref></type>
        <definition>qstring lvar_t::cmt</definition>
        <argsstring></argsstring>
        <name>cmt</name>
        <briefdescription>
<para>variable comment string </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1257" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlvar__t_1a2963a6281d004d2868728ec8c8c04fd6" prot="public" static="no" mutable="no">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref></type>
        <definition>tinfo_t lvar_t::tif</definition>
        <argsstring></argsstring>
        <name>tif</name>
        <briefdescription>
<para>variable type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1258" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlvar__t_1af91bb76aca72d83c870381727d24fc78" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int lvar_t::width</definition>
        <argsstring></argsstring>
        <name>width</name>
        <briefdescription>
<para>variable size in bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1259" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1259" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlvar__t_1a3ab7b7a2166affb3667192bce4264a1b" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int lvar_t::defblk</definition>
        <argsstring></argsstring>
        <name>defblk</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>first block defining the variable. 0 for args, -1 if unknown </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1260" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classlvar__t_1a1564676fa350830f5409af129081ca06" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
        <definition>uint64 lvar_t::divisor</definition>
        <argsstring></argsstring>
        <name>divisor</name>
        <briefdescription>
<para>max known divisor of the variable </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1262" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1262" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classlvar__t_1a03c39b6a0e65e3daf57a7ed99a4514fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lvar_t::lvar_t</definition>
        <argsstring>(void)</argsstring>
        <name>lvar_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1264" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1264" bodyend="1264"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a586f467eae608df0c0777c4efc4e4dc8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>lvar_t::lvar_t</definition>
        <argsstring>(const qstring &amp;n, const vdloc_t &amp;l, ea_t e, const tinfo_t &amp;t, int w, int db)</argsstring>
        <name>lvar_t</name>
        <param>
          <type>const <ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classvdloc__t" kindref="compound">vdloc_t</ref> &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>e</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>db</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1265" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1265" bodyend="1267"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a7a8ed339c91dc9c993c4d92632ecf1c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>lvar_t::lvar_t</definition>
        <argsstring>(mreg_t reg, int width, const tinfo_t &amp;type, int nblock, ea_t defea)</argsstring>
        <name>lvar_t</name>
        <param>
          <type>mreg_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nblock</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>defea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a198caf410932ea2e9c0b155be413ed4d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *hexapi</type>
        <definition>const char * lvar_t::dstr</definition>
        <argsstring>(void) const</argsstring>
        <name>dstr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1270" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9339" bodyend="9342"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a7a1a6d721a15870a6fcc4ba400c113cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::used</definition>
        <argsstring>(void) const</argsstring>
        <name>used</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is the variable used in the code? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1273" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1273" bodyend="1273"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a64ef051cc8d5ff2eedadc74daa707686" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::typed</definition>
        <argsstring>(void) const</argsstring>
        <name>typed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Has the variable a type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1275" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1275" bodyend="1275"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a7bd546f605095aec7c4ef0f7f4461f17" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::mreg_done</definition>
        <argsstring>(void) const</argsstring>
        <name>mreg_done</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Have corresponding microregs been replaced by references to this variable? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1277" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1277" bodyend="1277"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a25a6541c1f099fede3dca436e4677db9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::has_nice_name</definition>
        <argsstring>(void) const</argsstring>
        <name>has_nice_name</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Does the variable have a nice name? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1279" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1279" bodyend="1279"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1af1f2b53b30b088ca1def7ab1117fe320" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::is_unknown_width</definition>
        <argsstring>(void) const</argsstring>
        <name>is_unknown_width</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Do we know the width of the variable? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1281" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1281" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1af8bcb5aff5c3e9f3387bfe193962b2e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::has_user_info</definition>
        <argsstring>(void) const</argsstring>
        <name>has_user_info</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Has any user-defined information? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1283" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1283" bodyend="1283"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1ad6eea08fe03f7c1598670e400670bcfc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::has_user_name</definition>
        <argsstring>(void) const</argsstring>
        <name>has_user_name</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Has user-defined name? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1285" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1285" bodyend="1285"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a90569f1e0945290ffb1e9e135d239147" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::has_user_type</definition>
        <argsstring>(void) const</argsstring>
        <name>has_user_type</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Has user-defined type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1287" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1287" bodyend="1287"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1af19c03ca96ebac306bcd049ce6ba2893" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::is_result_var</definition>
        <argsstring>(void) const</argsstring>
        <name>is_result_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is the function result? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1289" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1289" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a81a498f2b027a6ea190da90a7fdd829d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::is_arg_var</definition>
        <argsstring>(void) const</argsstring>
        <name>is_arg_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is the function argument? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1291" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1291" bodyend="1291"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1ae0ff580d0a1e448bcdadd6962aad2821" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool lvar_t::is_promoted_arg</definition>
        <argsstring>(void) const</argsstring>
        <name>is_promoted_arg</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is the promoted function argument? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1293" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9345" bodyend="9348"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1ad03cc7aa86f533cbe495a2ee22b23260" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::is_fake_var</definition>
        <argsstring>(void) const</argsstring>
        <name>is_fake_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is fake return variable? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1295" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1295" bodyend="1295"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a67b5d27647eddc9329d50ff4a8056e1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::is_overlapped_var</definition>
        <argsstring>(void) const</argsstring>
        <name>is_overlapped_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is overlapped variable? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1297" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1297" bodyend="1297"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1ae1668fb9e3af2579985ef666fbbbd628" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::is_floating_var</definition>
        <argsstring>(void) const</argsstring>
        <name>is_floating_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Used by a fpu insn? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1299" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1299" bodyend="1299"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a658a1741bbbbfd28cada92ddb20019ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::is_spoiled_var</definition>
        <argsstring>(void) const</argsstring>
        <name>is_spoiled_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is spoiled var? (meaningful only during lvar allocation) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1301" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1301" bodyend="1301"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a7b854ff263dc66b22b6f8c920eeea7dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::is_partialy_typed</definition>
        <argsstring>(void) const</argsstring>
        <name>is_partialy_typed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Variable type should be handled as a partial one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1303" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1303" bodyend="1303"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1ac6207c74a5ebae8ba4cfdf4d87531c97" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::is_noptr_var</definition>
        <argsstring>(void) const</argsstring>
        <name>is_noptr_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Variable type should not be a pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1305" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1305" bodyend="1305"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a6d39395861d5d975f038f891ec4e4e66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::is_mapdst_var</definition>
        <argsstring>(void) const</argsstring>
        <name>is_mapdst_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Other variable(s) map to this var? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1307" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1307" bodyend="1307"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1ae9c55e87bfefe428d4d418702c10dcf3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::is_thisarg</definition>
        <argsstring>(void) const</argsstring>
        <name>is_thisarg</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is &apos;this&apos; argument of a C++ member function? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1309" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1309" bodyend="1309"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1af253351d2d1f1b1ef8456e13c01f37c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::is_forced_var</definition>
        <argsstring>(void) const</argsstring>
        <name>is_forced_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is a forced variable? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1311" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1311" bodyend="1311"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a8dae3007d05c19b226f2280fca5aa3a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::has_regname</definition>
        <argsstring>(void) const</argsstring>
        <name>has_regname</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Has a register name? (like _RAX) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1313" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1313" bodyend="1313"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a41f8a33e1ed51cf7437344d197db1536" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_used</definition>
        <argsstring>(void)</argsstring>
        <name>set_used</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1314" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1314" bodyend="1314"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a436680b8d34c97b4ac97f475eaf4bb7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clear_used</definition>
        <argsstring>(void)</argsstring>
        <name>clear_used</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1315" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1315" bodyend="1315"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a34d38457c7e197c99c14ddce9d04578f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_typed</definition>
        <argsstring>(void)</argsstring>
        <name>set_typed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1316" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1316" bodyend="1316"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a964c708136effcdd811ae1433ca27bdb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_non_typed</definition>
        <argsstring>(void)</argsstring>
        <name>set_non_typed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1317" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1317" bodyend="1317"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1aac3f1e6d56951b26e3ad63ebd7c5f3b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clr_user_info</definition>
        <argsstring>(void)</argsstring>
        <name>clr_user_info</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1318" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1318" bodyend="1318"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a3b6ad9001c1575e71280af79a69b57e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_user_name</definition>
        <argsstring>(void)</argsstring>
        <name>set_user_name</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1319" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1319" bodyend="1319"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a5eb9c2c85a7682e563d1c8d54de7373c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_user_type</definition>
        <argsstring>(void)</argsstring>
        <name>set_user_type</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1320" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1320" bodyend="1320"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1aa8a8e7cde56158b56bc9d51e0ad99ea2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clr_user_type</definition>
        <argsstring>(void)</argsstring>
        <name>clr_user_type</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1321" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1321" bodyend="1321"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1aefb6fcc4506b68a5c9ceff10cfa66fb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clr_user_name</definition>
        <argsstring>(void)</argsstring>
        <name>clr_user_name</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1322" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1322" bodyend="1322"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a7afedd838cbfeb895d6b0f22c529c677" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_mreg_done</definition>
        <argsstring>(void)</argsstring>
        <name>set_mreg_done</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1323" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1323" bodyend="1323"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a95df375921f8a0081a3e3b57ecc18348" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clr_mreg_done</definition>
        <argsstring>(void)</argsstring>
        <name>clr_mreg_done</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1324" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1324" bodyend="1324"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a28d94271d522614969a329273dcf7629" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_unknown_width</definition>
        <argsstring>(void)</argsstring>
        <name>set_unknown_width</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1325" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1325" bodyend="1325"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a4094d764c5156d4e670c00cffe0749b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clr_unknown_width</definition>
        <argsstring>(void)</argsstring>
        <name>clr_unknown_width</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1326" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1326" bodyend="1326"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a654089163e6dc06626f8cee61dbf3522" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_arg_var</definition>
        <argsstring>(void)</argsstring>
        <name>set_arg_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1327" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1327" bodyend="1327"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a9228b8a3b966a237a3e41cb8a03dcdff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clr_arg_var</definition>
        <argsstring>(void)</argsstring>
        <name>clr_arg_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1328" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1328" bodyend="1328"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1af49778b62ba0a4136d038508a17a4db1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_fake_var</definition>
        <argsstring>(void)</argsstring>
        <name>set_fake_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1329" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1329" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1ae8879bc8b89f8bb9518591f8818818b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clr_fake_var</definition>
        <argsstring>(void)</argsstring>
        <name>clr_fake_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1330" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1330" bodyend="1330"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1abd1313ef124254295ada2f99c289642f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_overlapped_var</definition>
        <argsstring>(void)</argsstring>
        <name>set_overlapped_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1331" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1331" bodyend="1331"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a2d8fb4f4d6c21c568b55b7a5f52cb950" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clr_overlapped_var</definition>
        <argsstring>(void)</argsstring>
        <name>clr_overlapped_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1332" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1332" bodyend="1332"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a741e53f63d359749f50a39802cc0f58f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_floating_var</definition>
        <argsstring>(void)</argsstring>
        <name>set_floating_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1333" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1333" bodyend="1333"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a681ad03688a603f0974449b5d64a010f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clr_floating_var</definition>
        <argsstring>(void)</argsstring>
        <name>clr_floating_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1334" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1334" bodyend="1334"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a6fab59d74f1423301f52b4a16d431f44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_spoiled_var</definition>
        <argsstring>(void)</argsstring>
        <name>set_spoiled_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1335" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1335" bodyend="1335"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a8c0ca41290170293e1854746204b3a4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clr_spoiled_var</definition>
        <argsstring>(void)</argsstring>
        <name>clr_spoiled_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1336" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1336" bodyend="1336"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1ac903870ac08e30672e7f3a0775d116f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_mapdst_var</definition>
        <argsstring>(void)</argsstring>
        <name>set_mapdst_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1337" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1337" bodyend="1337"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1ab1181cde3a6026dca3064f04c456e30c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clr_mapdst_var</definition>
        <argsstring>(void)</argsstring>
        <name>clr_mapdst_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1338" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1338" bodyend="1338"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1abc2fed594bfc73dd06d638bd976f9c53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_partialy_typed</definition>
        <argsstring>(void)</argsstring>
        <name>set_partialy_typed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1339" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1339" bodyend="1339"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a25e97babf30ed4635ddec46ce2ab9f64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clr_partialy_typed</definition>
        <argsstring>(void)</argsstring>
        <name>clr_partialy_typed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1340" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1340" bodyend="1340"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1adaae034ec153e1cd7553cb5f0cbe1602" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_noptr_var</definition>
        <argsstring>(void)</argsstring>
        <name>set_noptr_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1341" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1341" bodyend="1341"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a474e305a58c8a3122a3612bf794f68f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clr_noptr_var</definition>
        <argsstring>(void)</argsstring>
        <name>clr_noptr_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1342" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1342" bodyend="1342"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1ab46330e1480d7424c0c8792b2b94a86e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_thisarg</definition>
        <argsstring>(void)</argsstring>
        <name>set_thisarg</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1343" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1343" bodyend="1343"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a17840d3561b263ad3f7fa7459381c114" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clr_thisarg</definition>
        <argsstring>(void)</argsstring>
        <name>clr_thisarg</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1344" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1344" bodyend="1344"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1ace5ed77305470edb88e75a4649884288" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_forced_var</definition>
        <argsstring>(void)</argsstring>
        <name>set_forced_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1345" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1345" bodyend="1345"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a02644f1742aed7fac74bc448c997a40d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::clr_forced_var</definition>
        <argsstring>(void)</argsstring>
        <name>clr_forced_var</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1346" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1346" bodyend="1346"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a7c8812023e0c1fe9ef2cb3e8e52eace2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::has_common</definition>
        <argsstring>(const lvar_t &amp;v) const</argsstring>
        <name>has_common</name>
        <param>
          <type>const <ref refid="classlvar__t" kindref="compound">lvar_t</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Do variables overlap? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1349" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1349" bodyend="1352"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a75825ca6837d6ef491f2f9169ec60ecc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::has_common_bit</definition>
        <argsstring>(const vdloc_t &amp;loc, asize_t width2) const</argsstring>
        <name>has_common_bit</name>
        <param>
          <type>const <ref refid="classvdloc__t" kindref="compound">vdloc_t</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>width2</declname>
        </param>
        <briefdescription>
<para>Does the variable overlap with the specified location? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1354" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1354" bodyend="1357"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a2aef6b024c85413caa5e2226477dbd2f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
        <definition>const tinfo_t&amp; lvar_t::type</definition>
        <argsstring>(void) const</argsstring>
        <name>type</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get variable type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1359" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1359" bodyend="1359"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a5b07eb573e04f46f64dbfb51661bb7ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
        <definition>tinfo_t&amp; lvar_t::type</definition>
        <argsstring>(void)</argsstring>
        <name>type</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1360" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1360" bodyend="1360"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1ac0733846b9b91ccfecf57e140e131f15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool lvar_t::accepts_type</definition>
        <argsstring>(const tinfo_t &amp;t, bool may_change_thisarg=false)</argsstring>
        <name>accepts_type</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>may_change_thisarg</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the variable accept the specified type. Some types are forbidden (void, function types, wrong arrays, etc) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1364" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9351" bodyend="9354"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1ae19a168a0931bae5705b171f7fe996cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::force_lvar_type</definition>
        <argsstring>(const tinfo_t &amp;t)</argsstring>
        <name>force_lvar_type</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Set variable type without any validation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a5c55a560b130c57b7a208e436b44c292" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool lvar_t::set_lvar_type</definition>
        <argsstring>(const tinfo_t &amp;t, bool may_fail=false)</argsstring>
        <name>set_lvar_type</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>may_fail</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set variable type Note: this function does not modify the idb, only the lvar instance in the memory. for permanent changes see modify_user_lvars() <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>new type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>may_fail</parametername>
</parameternamelist>
<parameterdescription>
<para>if false and type is bad, interr </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1375" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9357" bodyend="9360"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1aff6d9488f72a57ce7b57bb138126963c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void lvar_t::set_final_lvar_type</definition>
        <argsstring>(const tinfo_t &amp;t)</argsstring>
        <name>set_final_lvar_type</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Set final variable type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1378" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1378" bodyend="1382"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a8c8bf82785f1fc43fc017e943daeb116" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool lvar_t::set_width</definition>
        <argsstring>(int w, int svw_flags=0)</argsstring>
        <name>set_width</name>
        <param>
          <type>int</type>
          <declname>w</declname>
        </param>
        <param>
          <type>int</type>
          <declname>svw_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the variable width. We call the variable size &apos;width&apos;, it is represents the number of bytes. This function also changes the variable type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>new width </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>svw_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of SVW_... bits </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1390" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9363" bodyend="9366"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1adea148039ab1c669a83115aa05cd3821" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void lvar_t::append_list</definition>
        <argsstring>(mlist_t *lst, bool pad_if_scattered=false) const</argsstring>
        <name>append_list</name>
        <param>
          <type><ref refid="structmlist__t" kindref="compound">mlist_t</ref> *</type>
          <declname>lst</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pad_if_scattered</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append local variable to mlist. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lst</parametername>
</parameternamelist>
<parameterdescription>
<para>list to append to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>if</parametername>
</parameternamelist>
<parameterdescription>
<para>true, append padding bytes in case of scattered lvar </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1399" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9369" bodyend="9372"/>
      </memberdef>
      <memberdef kind="function" id="classlvar__t_1a6d7cd704a11c5ae3067b988178231b6c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool lvar_t::is_aliasable</definition>
        <argsstring>(const mbl_array_t *mba) const</argsstring>
        <name>is_aliasable</name>
        <param>
          <type>const <ref refid="classmbl__array__t" kindref="compound">mbl_array_t</ref> *</type>
          <declname>mba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the variable aliasable? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mba</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to the current <ref refid="classmbl__array__t" kindref="compound">mbl_array_t</ref> Aliasable variables may be modified indirectly (through a pointer) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1404" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1404" bodyend="1407"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Definition of a local variable (register or stack) #var #lvar. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2041">
        <label>lvar_locator_t</label>
        <link refid="structlvar__locator__t"/>
      </node>
      <node id="2040">
        <label>lvar_t</label>
        <link refid="classlvar__t"/>
        <childnode refid="2041" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2050">
        <label>tinfo_t</label>
        <link refid="classtinfo__t"/>
      </node>
      <node id="2043">
        <label>lvar_locator_t</label>
        <link refid="structlvar__locator__t"/>
        <childnode refid="2044" relation="usage">
          <edgelabel>location</edgelabel>
        </childnode>
      </node>
      <node id="2049">
        <label>_qstring&lt; char &gt;</label>
        <link refid="class__qstring"/>
      </node>
      <node id="2042">
        <label>lvar_t</label>
        <link refid="classlvar__t"/>
        <childnode refid="2043" relation="public-inheritance">
        </childnode>
        <childnode refid="2049" relation="usage">
          <edgelabel>cmt</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="2050" relation="usage">
          <edgelabel>tif</edgelabel>
        </childnode>
      </node>
      <node id="2046">
        <label>scattered_aloc_t</label>
        <link refid="classscattered__aloc__t"/>
        <childnode refid="2047" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2047">
        <label>qvector&lt; argpart_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2044">
        <label>vdloc_t</label>
        <link refid="classvdloc__t"/>
        <childnode refid="2045" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2045">
        <label>argloc_t</label>
        <link refid="classargloc__t"/>
        <childnode refid="2046" relation="usage">
          <edgelabel>dist</edgelabel>
        </childnode>
        <childnode refid="2048" relation="usage">
          <edgelabel>rrel</edgelabel>
        </childnode>
      </node>
      <node id="2048">
        <label>rrel_t</label>
        <link refid="structrrel__t"/>
      </node>
    </collaborationgraph>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1225" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1224" bodyend="1409"/>
    <listofallmembers>
      <member refid="classlvar__t_1ac0733846b9b91ccfecf57e140e131f15" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>accepts_type</name></member>
      <member refid="classlvar__t_1adea148039ab1c669a83115aa05cd3821" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>append_list</name></member>
      <member refid="classlvar__t_1a436680b8d34c97b4ac97f475eaf4bb7e" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clear_used</name></member>
      <member refid="classlvar__t_1a9228b8a3b966a237a3e41cb8a03dcdff" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clr_arg_var</name></member>
      <member refid="classlvar__t_1ae8879bc8b89f8bb9518591f8818818b2" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clr_fake_var</name></member>
      <member refid="classlvar__t_1a681ad03688a603f0974449b5d64a010f" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clr_floating_var</name></member>
      <member refid="classlvar__t_1a02644f1742aed7fac74bc448c997a40d" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clr_forced_var</name></member>
      <member refid="classlvar__t_1ab1181cde3a6026dca3064f04c456e30c" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clr_mapdst_var</name></member>
      <member refid="classlvar__t_1a95df375921f8a0081a3e3b57ecc18348" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clr_mreg_done</name></member>
      <member refid="classlvar__t_1a474e305a58c8a3122a3612bf794f68f9" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clr_noptr_var</name></member>
      <member refid="classlvar__t_1a2d8fb4f4d6c21c568b55b7a5f52cb950" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clr_overlapped_var</name></member>
      <member refid="classlvar__t_1a25e97babf30ed4635ddec46ce2ab9f64" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clr_partialy_typed</name></member>
      <member refid="classlvar__t_1a8c0ca41290170293e1854746204b3a4e" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clr_spoiled_var</name></member>
      <member refid="classlvar__t_1a17840d3561b263ad3f7fa7459381c114" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clr_thisarg</name></member>
      <member refid="classlvar__t_1a4094d764c5156d4e670c00cffe0749b2" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clr_unknown_width</name></member>
      <member refid="classlvar__t_1aac3f1e6d56951b26e3ad63ebd7c5f3b6" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clr_user_info</name></member>
      <member refid="classlvar__t_1aefb6fcc4506b68a5c9ceff10cfa66fb7" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clr_user_name</name></member>
      <member refid="classlvar__t_1aa8a8e7cde56158b56bc9d51e0ad99ea2" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>clr_user_type</name></member>
      <member refid="classlvar__t_1a51dcb58d595565bf328163cae23daffb" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>cmt</name></member>
      <member refid="classlvar__t_1a3ab7b7a2166affb3667192bce4264a1b" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>defblk</name></member>
      <member refid="structlvar__locator__t_1a4bf842abf6f90deb40b0ef14ef7e3465" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>defea</name></member>
      <member refid="classlvar__t_1a1564676fa350830f5409af129081ca06" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>divisor</name></member>
      <member refid="classlvar__t_1a198caf410932ea2e9c0b155be413ed4d" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>dstr</name></member>
      <member refid="classlvar__t_1a75050763df191638df8e1089009f0648" prot="private" virt="non-virtual"><scope>lvar_t</scope><name>flags</name></member>
      <member refid="classlvar__t_1ae19a168a0931bae5705b171f7fe996cb" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>force_lvar_type</name></member>
      <member refid="structlvar__locator__t_1a244616d5b83e7f17c1643fd99272aa47" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>get_reg1</name></member>
      <member refid="structlvar__locator__t_1a54bb449797ce86d2e218903e5b172ffb" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>get_reg2</name></member>
      <member refid="structlvar__locator__t_1aadfad502407be0eba39a8c4bc34d169c" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>get_scattered</name></member>
      <member refid="structlvar__locator__t_1adc56b1150e24698569887c9dfbee7341" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>get_scattered</name></member>
      <member refid="structlvar__locator__t_1ae39546f1d5cce624bf90f885e9313c89" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>get_stkoff</name></member>
      <member refid="classlvar__t_1a7c8812023e0c1fe9ef2cb3e8e52eace2" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>has_common</name></member>
      <member refid="classlvar__t_1a75825ca6837d6ef491f2f9169ec60ecc" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>has_common_bit</name></member>
      <member refid="classlvar__t_1a25a6541c1f099fede3dca436e4677db9" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>has_nice_name</name></member>
      <member refid="classlvar__t_1a8dae3007d05c19b226f2280fca5aa3a2" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>has_regname</name></member>
      <member refid="classlvar__t_1af8bcb5aff5c3e9f3387bfe193962b2e5" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>has_user_info</name></member>
      <member refid="classlvar__t_1ad6eea08fe03f7c1598670e400670bcfc" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>has_user_name</name></member>
      <member refid="classlvar__t_1a90569f1e0945290ffb1e9e135d239147" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>has_user_type</name></member>
      <member refid="classlvar__t_1a6d7cd704a11c5ae3067b988178231b6c" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_aliasable</name></member>
      <member refid="classlvar__t_1a81a498f2b027a6ea190da90a7fdd829d" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_arg_var</name></member>
      <member refid="classlvar__t_1ad03cc7aa86f533cbe495a2ee22b23260" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_fake_var</name></member>
      <member refid="classlvar__t_1ae1668fb9e3af2579985ef666fbbbd628" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_floating_var</name></member>
      <member refid="classlvar__t_1af253351d2d1f1b1ef8456e13c01f37c9" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_forced_var</name></member>
      <member refid="classlvar__t_1a6d39395861d5d975f038f891ec4e4e66" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_mapdst_var</name></member>
      <member refid="classlvar__t_1ac6207c74a5ebae8ba4cfdf4d87531c97" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_noptr_var</name></member>
      <member refid="classlvar__t_1a67b5d27647eddc9329d50ff4a8056e1c" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_overlapped_var</name></member>
      <member refid="classlvar__t_1a7b854ff263dc66b22b6f8c920eeea7dc" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_partialy_typed</name></member>
      <member refid="classlvar__t_1ae0ff580d0a1e448bcdadd6962aad2821" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_promoted_arg</name></member>
      <member refid="structlvar__locator__t_1a0960d6e78010b8d788d6b1f94e9173ba" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_reg1</name></member>
      <member refid="structlvar__locator__t_1a2b44cfb583a46f055248118bab7f39bb" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_reg2</name></member>
      <member refid="structlvar__locator__t_1a93b03852717f6dd65fba4ccdbccc5313" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_reg_var</name></member>
      <member refid="classlvar__t_1af19c03ca96ebac306bcd049ce6ba2893" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_result_var</name></member>
      <member refid="structlvar__locator__t_1a2169dd0a535bea4e30d5288c1ee07078" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_scattered</name></member>
      <member refid="classlvar__t_1a658a1741bbbbfd28cada92ddb20019ac" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_spoiled_var</name></member>
      <member refid="structlvar__locator__t_1aec76fba438403c7c25bb4df5b4bc6c73" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_stk_var</name></member>
      <member refid="classlvar__t_1ae9c55e87bfefe428d4d418702c10dcf3" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_thisarg</name></member>
      <member refid="classlvar__t_1af1f2b53b30b088ca1def7ab1117fe320" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>is_unknown_width</name></member>
      <member refid="structlvar__locator__t_1ab8af8ff55da9d7ed7fda4011497203b9" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>location</name></member>
      <member refid="structlvar__locator__t_1a02f4a886acc497b3ef88fd0501f6e982" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>lvar_locator_t</name></member>
      <member refid="structlvar__locator__t_1ad2c7d33b0d5a64119b9a695c9151c62b" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>lvar_locator_t</name></member>
      <member refid="classlvar__t_1a03c39b6a0e65e3daf57a7ed99a4514fd" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>lvar_t</name></member>
      <member refid="classlvar__t_1a586f467eae608df0c0777c4efc4e4dc8" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>lvar_t</name></member>
      <member refid="classlvar__t_1a7a8ed339c91dc9c993c4d92632ecf1c7" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>lvar_t</name></member>
      <member refid="classlvar__t_1a31bf04b28b583f77ec228da59611b596" prot="private" virt="non-virtual"><scope>lvar_t</scope><name>mbl_array_t</name></member>
      <member refid="classlvar__t_1a7bd546f605095aec7c4ef0f7f4461f17" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>mreg_done</name></member>
      <member refid="classlvar__t_1a8aa1bd5d77e3822af117193ad1b84b63" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>name</name></member>
      <member refid="classlvar__t_1a654089163e6dc06626f8cee61dbf3522" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_arg_var</name></member>
      <member refid="classlvar__t_1af49778b62ba0a4136d038508a17a4db1" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_fake_var</name></member>
      <member refid="classlvar__t_1aff6d9488f72a57ce7b57bb138126963c" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_final_lvar_type</name></member>
      <member refid="classlvar__t_1a741e53f63d359749f50a39802cc0f58f" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_floating_var</name></member>
      <member refid="classlvar__t_1ace5ed77305470edb88e75a4649884288" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_forced_var</name></member>
      <member refid="classlvar__t_1a5c55a560b130c57b7a208e436b44c292" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_lvar_type</name></member>
      <member refid="classlvar__t_1ac903870ac08e30672e7f3a0775d116f2" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_mapdst_var</name></member>
      <member refid="classlvar__t_1a7afedd838cbfeb895d6b0f22c529c677" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_mreg_done</name></member>
      <member refid="classlvar__t_1a964c708136effcdd811ae1433ca27bdb" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_non_typed</name></member>
      <member refid="classlvar__t_1adaae034ec153e1cd7553cb5f0cbe1602" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_noptr_var</name></member>
      <member refid="classlvar__t_1abd1313ef124254295ada2f99c289642f" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_overlapped_var</name></member>
      <member refid="classlvar__t_1abc2fed594bfc73dd06d638bd976f9c53" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_partialy_typed</name></member>
      <member refid="classlvar__t_1a6fab59d74f1423301f52b4a16d431f44" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_spoiled_var</name></member>
      <member refid="classlvar__t_1ab46330e1480d7424c0c8792b2b94a86e" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_thisarg</name></member>
      <member refid="classlvar__t_1a34d38457c7e197c99c14ddce9d04578f" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_typed</name></member>
      <member refid="classlvar__t_1a28d94271d522614969a329273dcf7629" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_unknown_width</name></member>
      <member refid="classlvar__t_1a41f8a33e1ed51cf7437344d197db1536" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_used</name></member>
      <member refid="classlvar__t_1a3b6ad9001c1575e71280af79a69b57e9" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_user_name</name></member>
      <member refid="classlvar__t_1a5eb9c2c85a7682e563d1c8d54de7373c" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_user_type</name></member>
      <member refid="classlvar__t_1a8c8bf82785f1fc43fc017e943daeb116" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>set_width</name></member>
      <member refid="classlvar__t_1a2963a6281d004d2868728ec8c8c04fd6" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>tif</name></member>
      <member refid="classlvar__t_1a2aef6b024c85413caa5e2226477dbd2f" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>type</name></member>
      <member refid="classlvar__t_1a5b07eb573e04f46f64dbfb51661bb7ac" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>type</name></member>
      <member refid="classlvar__t_1a64ef051cc8d5ff2eedadc74daa707686" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>typed</name></member>
      <member refid="classlvar__t_1a7a1a6d721a15870a6fcc4ba400c113cf" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>used</name></member>
      <member refid="classlvar__t_1af91bb76aca72d83c870381727d24fc78" prot="public" virt="non-virtual"><scope>lvar_t</scope><name>width</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
