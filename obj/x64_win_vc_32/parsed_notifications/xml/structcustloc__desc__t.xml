<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="structcustloc__desc__t" kind="struct" language="C++" prot="public">
    <compoundname>custloc_desc_t</compoundname>
    <includes refid="typeinf_8hpp" local="no">typeinf.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structcustloc__desc__t_1a998e4dcd62ed83b0e0d4c14ca8ae4999" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t custloc_desc_t::cbsize</definition>
        <argsstring></argsstring>
        <name>cbsize</name>
        <briefdescription>
<para>size of this structure </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="832" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1a0decac039f85fd9e9818df240e3bbf63" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* custloc_desc_t::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>name of the custom argloc type. must be unique </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="833" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="833" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1aad4db290d3526856eb0bf3abec891bc3" prot="public" static="no" mutable="no">
        <type>void(idaapi *</type>
        <definition>void(idaapi * custloc_desc_t::copy) (argloc_t *empty_dst, const argloc_t &amp;src)</definition>
        <argsstring>)(argloc_t *empty_dst, const argloc_t &amp;src)</argsstring>
        <name>copy</name>
        <briefdescription>
<para>Copy src into empty_dst. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="836" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1a25e554e753432f8c52feaa501edbe56e" prot="public" static="no" mutable="no">
        <type>void(idaapi *</type>
        <definition>void(idaapi * custloc_desc_t::cleanup) (argloc_t *loc)</definition>
        <argsstring>)(argloc_t *loc)</argsstring>
        <name>cleanup</name>
        <briefdescription>
<para>Clear contents of loc before it is modified (may be NULL) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="839" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="839" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1a948dc8427cc7e8e0547b9746a5820eb1" prot="public" static="no" mutable="no">
        <type>bool(idaapi *</type>
        <definition>bool(idaapi * custloc_desc_t::verify) (const argloc_t &amp;loc, int size, const rangeset_t *gaps, bool part_of_scattered)</definition>
        <argsstring>)(const argloc_t &amp;loc, int size, const rangeset_t *gaps, bool part_of_scattered)</argsstring>
        <name>verify</name>
        <briefdescription>
<para>May be NULL. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="842" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="842" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1a77d4d56a7a0354d85e73a1e06147b845" prot="public" static="no" mutable="no">
        <type>int(idaapi *</type>
        <definition>int(idaapi * custloc_desc_t::compare) (const argloc_t &amp;a, const argloc_t &amp;b)</definition>
        <argsstring>)(const argloc_t &amp;a, const argloc_t &amp;b)</argsstring>
        <name>compare</name>
        <briefdescription>
<para>Lexical comparison of two arglocs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="849" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1a6ba9d448db2185d8385ec884d124a5c5" prot="public" static="no" mutable="no">
        <type>size_t(idaapi *</type>
        <definition>size_t(idaapi * custloc_desc_t::print) (char *buf, size_t bufsize, const argloc_t &amp;loc, asize_t size, int praloc_flags)</definition>
        <argsstring>)(char *buf, size_t bufsize, const argloc_t &amp;loc, asize_t size, int praloc_flags)</argsstring>
        <name>print</name>
        <briefdescription>
<para>Get textual description of the location (not the value at the location!) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="852" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="852" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1a5b1c873d4cc8f5bc1811f610e9b0b370" prot="public" static="no" mutable="no">
        <type>bool(idaapi *</type>
        <definition>bool(idaapi * custloc_desc_t::deref_field) (argloc_t *out, tinfo_t *tif, const argloc_t &amp;strloc, const tinfo_t &amp;struct_tif, asize_t off, const qstring &amp;name)</definition>
        <argsstring>)(argloc_t *out, tinfo_t *tif, const argloc_t &amp;strloc, const tinfo_t &amp;struct_tif, asize_t off, const qstring &amp;name)</argsstring>
        <name>deref_field</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dereference the struct/union pointed by &apos;strloc&apos;: take member at offset &apos;off&apos; (or use the field name), improve member &apos;tif&apos; if necessary </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="861" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="861" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1a9d97a2ac0a2f2927bd50d098c37fe4d5" prot="public" static="no" mutable="no">
        <type>bool(idaapi *</type>
        <definition>bool(idaapi * custloc_desc_t::deref_array) (argloc_t *out, tinfo_t *tif, const argloc_t &amp;arrloc, const tinfo_t &amp;array_tif, asize_t n, asize_t elsize)</definition>
        <argsstring>)(argloc_t *out, tinfo_t *tif, const argloc_t &amp;arrloc, const tinfo_t &amp;array_tif, asize_t n, asize_t elsize)</argsstring>
        <name>deref_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dereference the array pointed by &apos;arrloc&apos;: take member number &apos;n&apos; (element size is &apos;elsize&apos;), improve member &apos;tif&apos; if necessary </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="871" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="871" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1ad27c0af9cd6772369b2f75f143ffe872" prot="public" static="no" mutable="no">
        <type>bool(idaapi *</type>
        <definition>bool(idaapi * custloc_desc_t::deref_ptr) (argloc_t *out, tinfo_t *tif, const argloc_t &amp;ptrloc)</definition>
        <argsstring>)(argloc_t *out, tinfo_t *tif, const argloc_t &amp;ptrloc)</argsstring>
        <name>deref_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dereference the pointer at &apos;loc&apos;: retrieve location of the pointed object, improve &apos;tif&apos; of the pointed object if necessary </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="881" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="881" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1a6343b4d3f4ec795ec24ccb54c6e2688b" prot="public" static="no" mutable="no">
        <type>bool(idaapi *</type>
        <definition>bool(idaapi * custloc_desc_t::read_value) (value_u *value, const argloc_t &amp;loc, int size, const tinfo_t &amp;tif)</definition>
        <argsstring>)(value_u *value, const argloc_t &amp;loc, int size, const tinfo_t &amp;tif)</argsstring>
        <name>read_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the pointer at &apos;loc&apos;: retrieve value of a simple object. the object value must fit <ref refid="unionvalue__u" kindref="compound">value_u</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="888" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="888" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1a1fe6d2963262059191821e461135240f" prot="public" static="no" mutable="no">
        <type>bool(idaapi *</type>
        <definition>bool(idaapi * custloc_desc_t::write_value) (const argloc_t &amp;loc, const idc_value_t &amp;idcv, const value_u &amp;scalar_value, int size, qstring *errbuf)</definition>
        <argsstring>)(const argloc_t &amp;loc, const idc_value_t &amp;idcv, const value_u &amp;scalar_value, int size, qstring *errbuf)</argsstring>
        <name>write_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update value at &apos;loc&apos;. if idcv is VT_LONG/VT_INT64/VT_FLOAT, the value in native format is copied to &apos;scalar_value&apos; for your convenience. otherwise please use &apos;idcv&apos; and not &apos;scalar_value&apos;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="897" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="897" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1aeaec17be0e1c8af1657f597bc665d2d5" prot="public" static="no" mutable="no">
        <type>asize_t(idaapi *</type>
        <definition>asize_t(idaapi * custloc_desc_t::calc_string_length) (const argloc_t &amp;loc, const tinfo_t &amp;string_tif)</definition>
        <argsstring>)(const argloc_t &amp;loc, const tinfo_t &amp;string_tif)</argsstring>
        <name>calc_string_length</name>
        <briefdescription>
<para>Calc max natural string length at &apos;loc&apos; in the debugged process memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="905" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="905" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1a1afef611ab8e84702cc940958c410065" prot="public" static="no" mutable="no">
        <type>bool(idaapi *</type>
        <definition>bool(idaapi * custloc_desc_t::get_string) (qstring *out, tinfo_t *elem_tif, const argloc_t &amp;loc, const tinfo_t &amp;string_tif, size_t len)</definition>
        <argsstring>)(qstring *out, tinfo_t *elem_tif, const argloc_t &amp;loc, const tinfo_t &amp;string_tif, size_t len)</argsstring>
        <name>get_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve string at &apos;loc&apos; from the debugged process memory, returns quoted string value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="911" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="911" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1af847ba6c8b140e313420a545bc127b0b" prot="public" static="no" mutable="no">
        <type>asize_t(idaapi *</type>
        <definition>asize_t(idaapi * custloc_desc_t::guess_array_size) (const argloc_t &amp;loc, const tinfo_t &amp;array_tif)</definition>
        <argsstring>)(const argloc_t &amp;loc, const tinfo_t &amp;array_tif)</argsstring>
        <name>guess_array_size</name>
        <briefdescription>
<para>Retrieve size of array at &apos;loc&apos; (number of elements) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="919" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="919" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1a709ce4065ecb49c0a2bf5b9a7a9250b3" prot="public" static="no" mutable="no">
        <type>bool(idaapi *</type>
        <definition>bool(idaapi * custloc_desc_t::get_tinfo) (tinfo_t *out, const argloc_t &amp;loc)</definition>
        <argsstring>)(tinfo_t *out, const argloc_t &amp;loc)</argsstring>
        <name>get_tinfo</name>
        <briefdescription>
<para>Retrieve type of the object at &apos;loc&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="924" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="924" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1a4769d333db392ff2625dabf6e459bc8f" prot="public" static="no" mutable="no">
        <type>int(idaapi *</type>
        <definition>int(idaapi * custloc_desc_t::calc_number_of_children) (const argloc_t &amp;loc, const tinfo_t &amp;tif)</definition>
        <argsstring>)(const argloc_t &amp;loc, const tinfo_t &amp;tif)</argsstring>
        <name>calc_number_of_children</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the number of children for the given location. (arrays, structs, ptrs may have children and therefore be expanded) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="930" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="930" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcustloc__desc__t_1af17c312fc639e32ffde59442d1ad3c8a" prot="public" static="no" mutable="no">
        <type>size_t(idaapi *</type>
        <definition>size_t(idaapi * custloc_desc_t::print_ptr_value) (char *buf, size_t bufsize, bool *is_valid_ptr, const argloc_t &amp;loc, const tinfo_t &amp;tif)</definition>
        <argsstring>)(char *buf, size_t bufsize, bool *is_valid_ptr, const argloc_t &amp;loc, const tinfo_t &amp;tif)</argsstring>
        <name>print_ptr_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get string containing a printable representation of the pointer at &apos;loc&apos;. Returns the number of characters printed. May be NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="935" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="935" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Description of a custom argloc. Custom arglocs can be added by plugins in order to describe the locations unsupported by the ida kernel. </para>    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="831" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="830" bodyend="941"/>
    <listofallmembers>
      <member refid="structcustloc__desc__t_1a4769d333db392ff2625dabf6e459bc8f" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>calc_number_of_children</name></member>
      <member refid="structcustloc__desc__t_1aeaec17be0e1c8af1657f597bc665d2d5" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>calc_string_length</name></member>
      <member refid="structcustloc__desc__t_1a998e4dcd62ed83b0e0d4c14ca8ae4999" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>cbsize</name></member>
      <member refid="structcustloc__desc__t_1a25e554e753432f8c52feaa501edbe56e" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>cleanup</name></member>
      <member refid="structcustloc__desc__t_1a77d4d56a7a0354d85e73a1e06147b845" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>compare</name></member>
      <member refid="structcustloc__desc__t_1aad4db290d3526856eb0bf3abec891bc3" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>copy</name></member>
      <member refid="structcustloc__desc__t_1a9d97a2ac0a2f2927bd50d098c37fe4d5" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>deref_array</name></member>
      <member refid="structcustloc__desc__t_1a5b1c873d4cc8f5bc1811f610e9b0b370" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>deref_field</name></member>
      <member refid="structcustloc__desc__t_1ad27c0af9cd6772369b2f75f143ffe872" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>deref_ptr</name></member>
      <member refid="structcustloc__desc__t_1a1afef611ab8e84702cc940958c410065" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>get_string</name></member>
      <member refid="structcustloc__desc__t_1a709ce4065ecb49c0a2bf5b9a7a9250b3" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>get_tinfo</name></member>
      <member refid="structcustloc__desc__t_1af847ba6c8b140e313420a545bc127b0b" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>guess_array_size</name></member>
      <member refid="structcustloc__desc__t_1a0decac039f85fd9e9818df240e3bbf63" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>name</name></member>
      <member refid="structcustloc__desc__t_1a6ba9d448db2185d8385ec884d124a5c5" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>print</name></member>
      <member refid="structcustloc__desc__t_1af17c312fc639e32ffde59442d1ad3c8a" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>print_ptr_value</name></member>
      <member refid="structcustloc__desc__t_1a6343b4d3f4ec795ec24ccb54c6e2688b" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>read_value</name></member>
      <member refid="structcustloc__desc__t_1a948dc8427cc7e8e0547b9746a5820eb1" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>verify</name></member>
      <member refid="structcustloc__desc__t_1a1fe6d2963262059191821e461135240f" prot="public" virt="non-virtual"><scope>custloc_desc_t</scope><name>write_value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
