<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="classrangeset__t" kind="class" language="C++" prot="public">
    <compoundname>rangeset_t</compoundname>
    <includes refid="range_8hpp" local="no">range.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classrangeset__t_1ab06d5837fbeecc5715b26fb4872fbdc4" prot="public" static="no">
        <type>rangevec_t::iterator</type>
        <definition>typedef rangevec_t::iterator rangeset_t::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
<para>Iterator for rangesets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="245" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="245" bodyend="243"/>
      </memberdef>
      <memberdef kind="typedef" id="classrangeset__t_1a2bc56334c3295e883194a9aa23b72a9c" prot="public" static="no">
        <type>rangevec_t::const_iterator</type>
        <definition>typedef rangevec_t::const_iterator rangeset_t::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
<para>Const iterator for rangesets. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="246" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classrangeset__t_1a826ae534b8a08dce4edb5dd1a435c23c" prot="private" static="no" mutable="no">
        <type><ref refid="structrangevec__t" kindref="compound">rangevec_t</ref></type>
        <definition>rangevec_t rangeset_t::bag</definition>
        <argsstring></argsstring>
        <name>bag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="149" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classrangeset__t_1ab5dd703a314d7a677b05a45645589f70" prot="private" static="no" mutable="yes">
        <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> *</type>
        <definition>const range_t* rangeset_t::cache</definition>
        <argsstring></argsstring>
        <name>cache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="150" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classrangeset__t_1ab2dffc1c6bfd45cb9374adc8cf0408ca" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::verify</definition>
        <argsstring>(void) const</argsstring>
        <name>verify</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="153" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classrangeset__t_1a4d79c8912fb7b5ab16ee91927437b3e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rangeset_t::rangeset_t</definition>
        <argsstring>(void)</argsstring>
        <name>rangeset_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="156" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1abcdf5a5936a31cd8865dabe19c6ff709" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rangeset_t::rangeset_t</definition>
        <argsstring>(const range_t &amp;range)</argsstring>
        <name>rangeset_t</name>
        <param>
          <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Constructor - Initialize set with &apos;range&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="157" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="157" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a97c7b73cbf87127aee99349b70f6b93e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>rangeset_t::rangeset_t</definition>
        <argsstring>(const rangeset_t &amp;ivs)</argsstring>
        <name>rangeset_t</name>
        <param>
          <type>const <ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> &amp;</type>
          <declname>ivs</declname>
        </param>
        <briefdescription>
<para>Constructor - Initialize set with &apos;ivs&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="158" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="158" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a02f242d08f9facdc3765ac2e2251b5ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> &amp;</type>
        <definition>rangeset_t&amp; rangeset_t::operator=</definition>
        <argsstring>(const rangeset_t &amp;ivs)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> &amp;</type>
          <declname>ivs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="159" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a1fe4299ab2d9607c5c2013d2eb64c8a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rangeset_t::swap</definition>
        <argsstring>(rangeset_t &amp;r)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Set this = &apos;r&apos; and &apos;r&apos; = this. See <ref refid="classqvector_1a2006754f99fb324709ae0972ddb20bb4" kindref="member">qvector::swap()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="160" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1ae88f169af8d50924d6511875ec4dfda8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::add</definition>
        <argsstring>(const range_t &amp;range)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an address range to the set. If &apos;range&apos; intersects an existing element e, then e is extended to include &apos;range&apos;, and any superfluous elements (subsets of e) are removed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>address range to add. can not be empty </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if &apos;range&apos; was not added (the set was unchanged) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="167" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a0a09d3a859d4a2d561afc96738f062e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::add</definition>
        <argsstring>(ea_t start, ea_t _end)</argsstring>
        <name>add</name>
        <param>
          <type>ea_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>_end</declname>
        </param>
        <briefdescription>
<para>Create a new <ref refid="structrange__t" kindref="compound">range_t</ref> from &apos;start&apos; and &apos;end&apos; and add it to the set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="170" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1aaa533b9994d89c6a4df232e2bad8a1ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::add</definition>
        <argsstring>(const rangeset_t &amp;aset)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> &amp;</type>
          <declname>aset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add each element of &apos;aset&apos; to the set. <simplesect kind="return"><para>false if no elements were added (the set was unchanged) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="174" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1aa15561e5104b8021cd49a672181909ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::sub</definition>
        <argsstring>(const range_t &amp;range)</argsstring>
        <name>sub</name>
        <param>
          <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtract an address range from the set. All subsets of &apos;range&apos; will be removed, and all elements that intersect &apos;range&apos; will be truncated/split so they do not include &apos;range&apos;. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>address range to subtract. can not be empty. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if &apos;range&apos; was not subtracted (the set was unchanged) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="181" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a0906d00a5f6ef81f72d5e42ff363072c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::sub</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>sub</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Subtract an ea (an range of size 1) from the set. See <ref refid="classrangeset__t_1aa15561e5104b8021cd49a672181909ba" kindref="member">sub(const range_t &amp;)</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="184" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="184" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a95a19f7fdf71e321ddfe70f217e5be0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::sub</definition>
        <argsstring>(const rangeset_t &amp;aset)</argsstring>
        <name>sub</name>
        <param>
          <type>const <ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> &amp;</type>
          <declname>aset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtract each range in &apos;aset&apos; from the set <simplesect kind="return"><para>false if nothing was subtracted (the set was unchanged) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="188" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a76ba1b3f674215d265d442e092e38237" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::has_common</definition>
        <argsstring>(const range_t &amp;range) const</argsstring>
        <name>has_common</name>
        <param>
          <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Is there an ea in &apos;range&apos; that is also in the rangeset? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="191" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="191" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1ab226fe0bb55a3d53d63af5d1f50e498b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::includes</definition>
        <argsstring>(const range_t &amp;range) const</argsstring>
        <name>includes</name>
        <param>
          <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Is every ea in &apos;range&apos; contained in the rangeset? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="195" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="195" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a77da5b0408989de68317585a17712a40" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rangeset_t::print</definition>
        <argsstring>(char *buf, size_t bufsize) const</argsstring>
        <name>print</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
<para>Print each <ref refid="structrange__t" kindref="compound">range_t</ref> in the rangeset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="199" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="199" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a582cfa74254757f2ee9289c9574e4467" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>asize_t</type>
        <definition>asize_t rangeset_t::count</definition>
        <argsstring>(void) const</argsstring>
        <name>count</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Size in bytes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a4357ee084b5149ca163e4e6a55deca3d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> &amp;</type>
        <definition>const range_t&amp; rangeset_t::getrange</definition>
        <argsstring>(int idx) const</argsstring>
        <name>getrange</name>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get the <ref refid="structrange__t" kindref="compound">range_t</ref> at index &apos;idx&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="206" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="206" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a97dd0b9bab2aab062ddb9bb1f88b41c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> &amp;</type>
        <definition>const range_t&amp; rangeset_t::lastrange</definition>
        <argsstring>(void) const</argsstring>
        <name>lastrange</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the last <ref refid="structrange__t" kindref="compound">range_t</ref> in the set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="209" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="209" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a98e6e79a309baf16a9f6940db096069b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t rangeset_t::nranges</definition>
        <argsstring>(void) const</argsstring>
        <name>nranges</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the number of <ref refid="structrange__t" kindref="compound">range_t</ref> elements in the set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="212" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="212" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a72713e595731c99394b2975a476abdab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::empty</definition>
        <argsstring>(void) const</argsstring>
        <name>empty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Does the set have zero elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="215" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="215" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1ace87594fd51bf69416bb8183a38c22c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void rangeset_t::clear</definition>
        <argsstring>(void)</argsstring>
        <name>clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Delete all elements from the set. See <ref refid="classqvector_1a00ea674adc4b958966d78ba450621a46" kindref="member">qvector::clear()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="218" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="218" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a2845c63ab6f05f46f32396226b6df7e4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::has_common</definition>
        <argsstring>(const rangeset_t &amp;aset) const</argsstring>
        <name>has_common</name>
        <param>
          <type>const <ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> &amp;</type>
          <declname>aset</declname>
        </param>
        <briefdescription>
<para>Does any element of &apos;aset&apos; overlap with an element in this rangeset?. See <ref refid="structrange__t_1ac063ce03653e4456e408aea12ffa80e1" kindref="member">range_t::overlaps()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="221" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="221" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1aefe6e7ab9964868374b397612520bb09" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::contains</definition>
        <argsstring>(ea_t ea) const</argsstring>
        <name>contains</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Does an element of the rangeset contain &apos;ea&apos;? See range_t::contains(ea_t) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="225" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1ac328ae1e23fe6476f5a2cf375fde1d2e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::contains</definition>
        <argsstring>(const rangeset_t &amp;aset) const</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> &amp;</type>
          <declname>aset</declname>
        </param>
        <briefdescription>
<para>Is every element in &apos;aset&apos; contained in an element of this rangeset?. See range_t::contains(range_t) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="228" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="228" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a5871263286fd1cc53c20c1d75565c026" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::intersect</definition>
        <argsstring>(const rangeset_t &amp;aset)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> &amp;</type>
          <declname>aset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the rangeset to its intersection with &apos;aset&apos;. <simplesect kind="return"><para>false if the set was unchanged </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="233" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="233" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a2076e437f4034ddc54a0091bc14634fa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::is_subset_of</definition>
        <argsstring>(const rangeset_t &amp;aset) const</argsstring>
        <name>is_subset_of</name>
        <param>
          <type>const <ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> &amp;</type>
          <declname>aset</declname>
        </param>
        <briefdescription>
<para>Is every element in the rangeset contained in an element of &apos;aset&apos;? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="237" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="237" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a4086d91025218b5a3e17fe9396753cca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::is_equal</definition>
        <argsstring>(const rangeset_t &amp;aset) const</argsstring>
        <name>is_equal</name>
        <param>
          <type>const <ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> &amp;</type>
          <declname>aset</declname>
        </param>
        <briefdescription>
<para>Do this rangeset and &apos;aset&apos; have identical elements? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="240" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="240" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1afbb8f062c5dc9d4aa4a46bed3b10ce2e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::operator==</definition>
        <argsstring>(const rangeset_t &amp;aset) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> &amp;</type>
          <declname>aset</declname>
        </param>
        <briefdescription>
<para>Compare two rangesets with &apos;==&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="242" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a8507c1f0f12854e964f18bc170f73eed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool rangeset_t::operator!=</definition>
        <argsstring>(const rangeset_t &amp;aset) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> &amp;</type>
          <declname>aset</declname>
        </param>
        <briefdescription>
<para>Compare two rangesets with &apos;!=&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="243" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="243" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1aff990dd696f75b37313c0fef27e65849" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrangeset__t_1a2bc56334c3295e883194a9aa23b72a9c" kindref="member">const_iterator</ref></type>
        <definition>const_iterator rangeset_t::begin</definition>
        <argsstring>(void) const</argsstring>
        <name>begin</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get an iterator that points to the first element in the set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="247" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a1c66a130fbc247966d7da2c5cdb96405" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrangeset__t_1a2bc56334c3295e883194a9aa23b72a9c" kindref="member">const_iterator</ref></type>
        <definition>const_iterator rangeset_t::end</definition>
        <argsstring>(void) const</argsstring>
        <name>end</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get an iterator that points to the end of the set. (This is NOT the last element) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="248" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="248" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1ab0882403cd51f93a7ffc9b6e31c7cad3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrangeset__t_1ab06d5837fbeecc5715b26fb4872fbdc4" kindref="member">iterator</ref></type>
        <definition>iterator rangeset_t::begin</definition>
        <argsstring>(void)</argsstring>
        <name>begin</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get an iterator that points to the first element in the set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="249" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="249" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a300aba1fc64aad67489a67f5e05a3903" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrangeset__t_1ab06d5837fbeecc5715b26fb4872fbdc4" kindref="member">iterator</ref></type>
        <definition>iterator rangeset_t::end</definition>
        <argsstring>(void)</argsstring>
        <name>end</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get an iterator that points to the end of the set. (This is NOT the last element) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="250" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="250" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1ab854928073a3c6dbdef67d48ea836439" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrangeset__t_1a2bc56334c3295e883194a9aa23b72a9c" kindref="member">const_iterator</ref></type>
        <definition>const_iterator rangeset_t::lower_bound</definition>
        <argsstring>(ea_t ea) const</argsstring>
        <name>lower_bound</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Get the first range that contains at least one ea_t value greater than &apos;ea&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="253" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="253" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a0c24934cf14bbdeb5fa9edfb4e000df7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classrangeset__t_1a2bc56334c3295e883194a9aa23b72a9c" kindref="member">const_iterator</ref></type>
        <definition>const_iterator rangeset_t::upper_bound</definition>
        <argsstring>(ea_t ea) const</argsstring>
        <name>upper_bound</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Get the first range such that every ea_t value in this range is strictly greater than &apos;ea&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="256" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="256" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a2971d4175180b0fd933f5ea83392778d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> *</type>
        <definition>const range_t* rangeset_t::find_range</definition>
        <argsstring>(ea_t ea) const</argsstring>
        <name>find_range</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the element from the set that contains &apos;ea&apos;. <simplesect kind="return"><para>NULL if there is no such element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="260" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="260" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a8bfdc0e07948a5b04c32acf2cf30b8ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> *</type>
        <definition>const range_t* rangeset_t::cached_range</definition>
        <argsstring>(void) const</argsstring>
        <name>cached_range</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>When searching the rangeset, we keep a cached element to help speed up searches. <simplesect kind="return"><para>a pointer to the cached element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="265" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="265" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a9c60966e484b069cca7ed5f3a116b6f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t</type>
        <definition>ea_t rangeset_t::next_addr</definition>
        <argsstring>(ea_t ea) const</argsstring>
        <name>next_addr</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Get the smallest ea_t value greater than &apos;ea&apos; contained in the rangeset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="268" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="268" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1afb90694d3ae60a24fe0202277ed3cd3c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t</type>
        <definition>ea_t rangeset_t::prev_addr</definition>
        <argsstring>(ea_t ea) const</argsstring>
        <name>prev_addr</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Get the largest ea_t value less than &apos;ea&apos; contained in the rangeset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="271" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="271" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a97c290dda63c31280e5f54fc95c95ae3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t</type>
        <definition>ea_t rangeset_t::next_range</definition>
        <argsstring>(ea_t ea) const</argsstring>
        <name>next_range</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Get the smallest ea_t value greater than &apos;ea&apos; that is not in the same range as &apos;ea&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="274" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="274" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1ae3edbc3c28e6221e65c13ff74938087f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t</type>
        <definition>ea_t rangeset_t::prev_range</definition>
        <argsstring>(ea_t ea) const</argsstring>
        <name>prev_range</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Get the largest ea_t value less than &apos;ea&apos; that is not in the same range as &apos;ea&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="277" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1a74dede7f34687fb6a4cb9f2dcfe3bd34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rangeset_t::move_chunk</definition>
        <argsstring>(ea_t from, ea_t to, asize_t size)</argsstring>
        <name>move_chunk</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Subtract the address range (from, from+size) and add the range (to, to+size) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classrangeset__t_1aaf6d42362c50a31be9c36e16f91d236b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int rangeset_t::check_move_args</definition>
        <argsstring>(ea_t from, ea_t to, asize_t size)</argsstring>
        <name>check_move_args</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>TODO: return code borrowed from <ref refid="va_8hpp_source" kindref="compound">va.hpp</ref>, same with <ref refid="classrangeset__t_1a74dede7f34687fb6a4cb9f2dcfe3bd34" kindref="member">move_chunk()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="283" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An ordered set of non-overlapping address ranges. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="148" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="147" bodyend="284"/>
    <listofallmembers>
      <member refid="classrangeset__t_1ae88f169af8d50924d6511875ec4dfda8" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>add</name></member>
      <member refid="classrangeset__t_1a0a09d3a859d4a2d561afc96738f062e0" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>add</name></member>
      <member refid="classrangeset__t_1aaa533b9994d89c6a4df232e2bad8a1ef" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>add</name></member>
      <member refid="classrangeset__t_1a826ae534b8a08dce4edb5dd1a435c23c" prot="private" virt="non-virtual"><scope>rangeset_t</scope><name>bag</name></member>
      <member refid="classrangeset__t_1aff990dd696f75b37313c0fef27e65849" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>begin</name></member>
      <member refid="classrangeset__t_1ab0882403cd51f93a7ffc9b6e31c7cad3" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>begin</name></member>
      <member refid="classrangeset__t_1ab5dd703a314d7a677b05a45645589f70" prot="private" virt="non-virtual"><scope>rangeset_t</scope><name>cache</name></member>
      <member refid="classrangeset__t_1a8bfdc0e07948a5b04c32acf2cf30b8ac" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>cached_range</name></member>
      <member refid="classrangeset__t_1aaf6d42362c50a31be9c36e16f91d236b" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>check_move_args</name></member>
      <member refid="classrangeset__t_1ace87594fd51bf69416bb8183a38c22c6" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>clear</name></member>
      <member refid="classrangeset__t_1a2bc56334c3295e883194a9aa23b72a9c" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>const_iterator</name></member>
      <member refid="classrangeset__t_1aefe6e7ab9964868374b397612520bb09" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>contains</name></member>
      <member refid="classrangeset__t_1ac328ae1e23fe6476f5a2cf375fde1d2e" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>contains</name></member>
      <member refid="classrangeset__t_1a582cfa74254757f2ee9289c9574e4467" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>count</name></member>
      <member refid="classrangeset__t_1a72713e595731c99394b2975a476abdab" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>empty</name></member>
      <member refid="classrangeset__t_1a1c66a130fbc247966d7da2c5cdb96405" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>end</name></member>
      <member refid="classrangeset__t_1a300aba1fc64aad67489a67f5e05a3903" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>end</name></member>
      <member refid="classrangeset__t_1a2971d4175180b0fd933f5ea83392778d" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>find_range</name></member>
      <member refid="classrangeset__t_1a4357ee084b5149ca163e4e6a55deca3d" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>getrange</name></member>
      <member refid="classrangeset__t_1a76ba1b3f674215d265d442e092e38237" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>has_common</name></member>
      <member refid="classrangeset__t_1a2845c63ab6f05f46f32396226b6df7e4" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>has_common</name></member>
      <member refid="classrangeset__t_1ab226fe0bb55a3d53d63af5d1f50e498b" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>includes</name></member>
      <member refid="classrangeset__t_1a5871263286fd1cc53c20c1d75565c026" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>intersect</name></member>
      <member refid="classrangeset__t_1a4086d91025218b5a3e17fe9396753cca" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>is_equal</name></member>
      <member refid="classrangeset__t_1a2076e437f4034ddc54a0091bc14634fa" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>is_subset_of</name></member>
      <member refid="classrangeset__t_1ab06d5837fbeecc5715b26fb4872fbdc4" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>iterator</name></member>
      <member refid="classrangeset__t_1a97dd0b9bab2aab062ddb9bb1f88b41c5" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>lastrange</name></member>
      <member refid="classrangeset__t_1ab854928073a3c6dbdef67d48ea836439" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>lower_bound</name></member>
      <member refid="classrangeset__t_1a74dede7f34687fb6a4cb9f2dcfe3bd34" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>move_chunk</name></member>
      <member refid="classrangeset__t_1a9c60966e484b069cca7ed5f3a116b6f2" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>next_addr</name></member>
      <member refid="classrangeset__t_1a97c290dda63c31280e5f54fc95c95ae3" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>next_range</name></member>
      <member refid="classrangeset__t_1a98e6e79a309baf16a9f6940db096069b" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>nranges</name></member>
      <member refid="classrangeset__t_1a8507c1f0f12854e964f18bc170f73eed" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>operator!=</name></member>
      <member refid="classrangeset__t_1a02f242d08f9facdc3765ac2e2251b5ec" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>operator=</name></member>
      <member refid="classrangeset__t_1afbb8f062c5dc9d4aa4a46bed3b10ce2e" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>operator==</name></member>
      <member refid="classrangeset__t_1afb90694d3ae60a24fe0202277ed3cd3c" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>prev_addr</name></member>
      <member refid="classrangeset__t_1ae3edbc3c28e6221e65c13ff74938087f" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>prev_range</name></member>
      <member refid="classrangeset__t_1a77da5b0408989de68317585a17712a40" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>print</name></member>
      <member refid="classrangeset__t_1a4d79c8912fb7b5ab16ee91927437b3e1" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>rangeset_t</name></member>
      <member refid="classrangeset__t_1abcdf5a5936a31cd8865dabe19c6ff709" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>rangeset_t</name></member>
      <member refid="classrangeset__t_1a97c7b73cbf87127aee99349b70f6b93e" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>rangeset_t</name></member>
      <member refid="classrangeset__t_1aa15561e5104b8021cd49a672181909ba" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>sub</name></member>
      <member refid="classrangeset__t_1a0906d00a5f6ef81f72d5e42ff363072c" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>sub</name></member>
      <member refid="classrangeset__t_1a95a19f7fdf71e321ddfe70f217e5be0f" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>sub</name></member>
      <member refid="classrangeset__t_1a1fe4299ab2d9607c5c2013d2eb64c8a7" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>swap</name></member>
      <member refid="classrangeset__t_1a0c24934cf14bbdeb5fa9edfb4e000df7" prot="public" virt="non-virtual"><scope>rangeset_t</scope><name>upper_bound</name></member>
      <member refid="classrangeset__t_1ab2dffc1c6bfd45cb9374adc8cf0408ca" prot="private" virt="non-virtual"><scope>rangeset_t</scope><name>verify</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
