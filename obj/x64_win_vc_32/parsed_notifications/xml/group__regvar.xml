<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="group__regvar" kind="group">
    <compoundname>regvar</compoundname>
    <title>Register variables</title>
    <innerclass refid="structregvar__t" prot="public">regvar_t</innerclass>
    <innergroup refid="group___r_e_g_v_a_r___e_r_r_o_r__">Register variable error codes</innergroup>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__regvar_1ga5f77d2c231f8faeb5939be2bc8e2a298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export add_regvar</definition>
        <argsstring>(func_t *pfn, ea_t ea1, ea_t ea2, const char *canon, const char *user, const char *cmt)</argsstring>
        <name>add_regvar</name>
        <param>
          <type><ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea1</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>canon</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>user</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Define a register variable. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pfn</parametername>
</parameternamelist>
<parameterdescription>
<para>function in which the definition will be created </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea1</parametername>
<parametername>ea2</parametername>
</parameternamelist>
<parameterdescription>
<para>range of addresses within the function where the definition will be used </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>canon</parametername>
</parameternamelist>
<parameterdescription>
<para>name of a general register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>user-defined name for the register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmt</parametername>
</parameternamelist>
<parameterdescription>
<para>comment for the definition </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___r_e_g_v_a_r___e_r_r_o_r__" kindref="compound">Register variable error codes</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/frame.hpp" line="367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__regvar_1ga7125fa606d55badfcfb905bf0a40e2e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="structregvar__t" kindref="compound">regvar_t</ref> *ida_export</type>
        <definition>idaman regvar_t* ida_export find_regvar</definition>
        <argsstring>(func_t *pfn, ea_t ea1, ea_t ea2, const char *canon, const char *user)</argsstring>
        <name>find_regvar</name>
        <param>
          <type><ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea1</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>canon</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find a register variable definition (powerful version). One of &apos;canon&apos; and &apos;user&apos; should be NULL. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pfn</parametername>
</parameternamelist>
<parameterdescription>
<para>function in question </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea1</parametername>
<parametername>ea2</parametername>
</parameternamelist>
<parameterdescription>
<para>range of addresses to search. ea1==BADADDR means the entire function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>canon</parametername>
</parameternamelist>
<parameterdescription>
<para>name of a general register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>user-defined name for the register </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL-not found, otherwise ptr to <ref refid="structregvar__t" kindref="compound">regvar_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/frame.hpp" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__regvar_1gad1a35ab3f412436bc8e42980ebf119dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structregvar__t" kindref="compound">regvar_t</ref> *</type>
        <definition>regvar_t* find_regvar</definition>
        <argsstring>(func_t *pfn, ea_t ea, const char *canon)</argsstring>
        <name>find_regvar</name>
        <param>
          <type><ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>canon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find a register variable definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pfn</parametername>
</parameternamelist>
<parameterdescription>
<para>function in question </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>current address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>canon</parametername>
</parameternamelist>
<parameterdescription>
<para>name of a general register </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL-not found, otherwise ptr to <ref refid="structregvar__t" kindref="compound">regvar_t</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/frame.hpp" line="401" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/frame.hpp" bodystart="401" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="group__regvar_1ga28f5e5e05bd45253e8e546e8d7048e44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export rename_regvar</definition>
        <argsstring>(func_t *pfn, regvar_t *v, const char *user)</argsstring>
        <name>rename_regvar</name>
        <param>
          <type><ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <param>
          <type><ref refid="structregvar__t" kindref="compound">regvar_t</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rename a register variable. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pfn</parametername>
</parameternamelist>
<parameterdescription>
<para>function in question </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>variable to rename </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user</parametername>
</parameternamelist>
<parameterdescription>
<para>new user-defined name for the register </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___r_e_g_v_a_r___e_r_r_o_r__" kindref="compound">Register variable error codes</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/frame.hpp" line="413" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__regvar_1ga864c220a61416541dcbc6b0d35353b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export set_regvar_cmt</definition>
        <argsstring>(func_t *pfn, regvar_t *v, const char *cmt)</argsstring>
        <name>set_regvar_cmt</name>
        <param>
          <type><ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <param>
          <type><ref refid="structregvar__t" kindref="compound">regvar_t</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set comment for a register variable. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pfn</parametername>
</parameternamelist>
<parameterdescription>
<para>function in question </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>variable to rename </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmt</parametername>
</parameternamelist>
<parameterdescription>
<para>new comment </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___r_e_g_v_a_r___e_r_r_o_r__" kindref="compound">Register variable error codes</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/frame.hpp" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__regvar_1gae28b200b6ffb1dfe1dad1683ac87d112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export del_regvar</definition>
        <argsstring>(func_t *pfn, ea_t ea1, ea_t ea2, const char *canon)</argsstring>
        <name>del_regvar</name>
        <param>
          <type><ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea1</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>canon</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a register variable definition. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pfn</parametername>
</parameternamelist>
<parameterdescription>
<para>function in question </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea1</parametername>
<parametername>ea2</parametername>
</parameternamelist>
<parameterdescription>
<para>range of addresses within the function where the definition holds </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>canon</parametername>
</parameternamelist>
<parameterdescription>
<para>name of a general register </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___r_e_g_v_a_r___e_r_r_o_r__" kindref="compound">Register variable error codes</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/frame.hpp" line="431" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Definition of <ref refid="structregvar__t" kindref="compound">regvar_t</ref> and related functions </para>    </detaileddescription>
  </compounddef>
</doxygen>
