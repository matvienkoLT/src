<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="classmop__t" kind="class" language="C++" prot="public">
    <compoundname>mop_t</compoundname>
    <derivedcompoundref refid="classmcallarg__t" prot="public" virt="non-virtual">mcallarg_t</derivedcompoundref>
    <derivedcompoundref refid="classmop__addr__t" prot="public" virt="non-virtual">mop_addr_t</derivedcompoundref>
    <includes refid="hexrays_8hpp" local="no">hexrays.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmop__t_1a385b7b5b046d5fa02cebbda1e76eb2de" prot="public" static="no" mutable="no">
        <type>mopt_t</type>
        <definition>mopt_t mop_t::t</definition>
        <argsstring></argsstring>
        <name>t</name>
        <briefdescription>
<para>Operand type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2280" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1a2b7b895f585ef20c8619a27cc1f0d86c" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1adde6aaee8457bee49c2a92621fe22b79" kindref="member">uint8</ref></type>
        <definition>uint8 mop_t::oprops</definition>
        <argsstring></argsstring>
        <name>oprops</name>
        <briefdescription>
<para>Operand properties. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2283" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1a52a041c88bfe5e2667a6c247863aed4b" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a05f6b0ae8f6a6e135b0e290c25fe0e4e" kindref="member">uint16</ref></type>
        <definition>uint16 mop_t::valnum</definition>
        <argsstring></argsstring>
        <name>valnum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Value number. Zero means unknown. Operands with the same value number are equal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2293" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1a585cd63bfba6c3e163acd1d2d8f76395" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int mop_t::size</definition>
        <argsstring></argsstring>
        <name>size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Operand size. Usually it is 1,2,4,8 or NOSIZE but for UDTs other sizes are permitted </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2297" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1ac12ef82ce56ca86ed79ba993ba987c47" prot="public" static="no" mutable="no">
        <type>mreg_t</type>
        <definition>mreg_t mop_t::r</definition>
        <argsstring></argsstring>
        <name>r</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2305" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1a6911b91ebdbf633064f614b15a2d6a8b" prot="public" static="no" mutable="no">
        <type><ref refid="structmnumber__t" kindref="compound">mnumber_t</ref> *</type>
        <definition>mnumber_t* mop_t::nnn</definition>
        <argsstring></argsstring>
        <name>nnn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2306" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1ae288e62e6b2c13da66568bdd4130c5b2" prot="public" static="no" mutable="no">
        <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
        <definition>minsn_t* mop_t::d</definition>
        <argsstring></argsstring>
        <name>d</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2307" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1af009e1f551992bff7567a34c92b0f3b6" prot="public" static="no" mutable="no">
        <type><ref refid="structstkvar__ref__t" kindref="compound">stkvar_ref_t</ref> *</type>
        <definition>stkvar_ref_t* mop_t::s</definition>
        <argsstring></argsstring>
        <name>s</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2308" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1acd5a16f56a0dcedd315750f682f496f3" prot="public" static="no" mutable="no">
        <type>ea_t</type>
        <definition>ea_t mop_t::g</definition>
        <argsstring></argsstring>
        <name>g</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2309" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1a2577ac7519d9a9b2c8be9434c1cd2655" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int mop_t::b</definition>
        <argsstring></argsstring>
        <name>b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2310" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1a9e4c6a65a9f9f68958b64ddeca947930" prot="public" static="no" mutable="no">
        <type><ref refid="classmcallinfo__t" kindref="compound">mcallinfo_t</ref> *</type>
        <definition>mcallinfo_t* mop_t::f</definition>
        <argsstring></argsstring>
        <name>f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2311" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1af589a48b3645a6fffff771769479f82a" prot="public" static="no" mutable="no">
        <type><ref refid="structlvar__ref__t" kindref="compound">lvar_ref_t</ref> *</type>
        <definition>lvar_ref_t* mop_t::l</definition>
        <argsstring></argsstring>
        <name>l</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2312" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1a5e3e1b9b535e9a7a89f28ce62e81e22d" prot="public" static="no" mutable="no">
        <type><ref refid="classmop__addr__t" kindref="compound">mop_addr_t</ref> *</type>
        <definition>mop_addr_t* mop_t::a</definition>
        <argsstring></argsstring>
        <name>a</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2313" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1a601f86b113f1fd1ae4cde0baeebaeeed" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* mop_t::helper</definition>
        <argsstring></argsstring>
        <name>helper</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2314" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1addbb0f8f61046134352a0b5065482b89" prot="public" static="no" mutable="no">
        <type>char *</type>
        <definition>char* mop_t::cstr</definition>
        <argsstring></argsstring>
        <name>cstr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2315" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1a69b43e3785b6f7fbe8738e31c5b87989" prot="public" static="no" mutable="no">
        <type><ref refid="classmcases__t" kindref="compound">mcases_t</ref> *</type>
        <definition>mcases_t* mop_t::c</definition>
        <argsstring></argsstring>
        <name>c</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2316" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1acc2fc97f6b70f8f21972b0ff1084fbbb" prot="public" static="no" mutable="no">
        <type><ref refid="structfnumber__t" kindref="compound">fnumber_t</ref> *</type>
        <definition>fnumber_t* mop_t::fpc</definition>
        <argsstring></argsstring>
        <name>fpc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2317" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1ac0974a8f06f60c641dceeffe6017ead5" prot="public" static="no" mutable="no">
        <type><ref refid="classmop__pair__t" kindref="compound">mop_pair_t</ref> *</type>
        <definition>mop_pair_t* mop_t::pair</definition>
        <argsstring></argsstring>
        <name>pair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2318" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1a75d8c81abb7c6578ca4a77800734cb23" prot="public" static="no" mutable="no">
        <type><ref refid="structscif__t" kindref="compound">scif_t</ref> *</type>
        <definition>scif_t* mop_t::scif</definition>
        <argsstring></argsstring>
        <name>scif</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2319" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmop__t_1ab17dba64b710c465e25f9b3830d2d093" prot="public" static="no" mutable="no">
        <type>union mop_t::@107</type>
        <definition>union mop_t::@107 mop_t::@108</definition>
        <argsstring></argsstring>
        <name>@108</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The following union holds additional details about the operand. Depending on the operand type different kinds of info are stored. You should access these fields only after verifying the operand type. All pointers are owned by the operand and are freed by its destructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2320" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmop__t_1ac3ff9f87ac18efaae6ca9fd6f7834c23" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mop_t::copy</definition>
        <argsstring>(const mop_t &amp;rop)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>rop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2276" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9773" bodyend="9776"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1abfde8853c5c5f7a14534ae5f2d582584" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;hexapi</type>
        <definition>mop_t &amp; mop_t::assign</definition>
        <argsstring>(const mop_t &amp;rop)</argsstring>
        <name>assign</name>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>rop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2277" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9779" bodyend="9782"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmop__t_1ac4f624d71631622815f57c8b2a6c6fa2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::set_impptr_done</definition>
        <argsstring>(void)</argsstring>
        <name>set_impptr_done</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2323" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2323" bodyend="2323"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a69277a73b2bb542e7c0496f4392052f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::set_udt</definition>
        <argsstring>(void)</argsstring>
        <name>set_udt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2324" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2324" bodyend="2324"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1ab7192ff0c56c66beded3059abf602984" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::set_undef_val</definition>
        <argsstring>(void)</argsstring>
        <name>set_undef_val</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2325" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2325" bodyend="2325"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a1e6b695c0d8bd352d9cdd7b463ffe1c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_impptr_done</definition>
        <argsstring>(void) const</argsstring>
        <name>is_impptr_done</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2326" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2326" bodyend="2326"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a0aacb037b9092ccc3c731f9b94c9c2bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_udt</definition>
        <argsstring>(void) const</argsstring>
        <name>is_udt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2327" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2327" bodyend="2327"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1ad426c85f1ad7dae648e4185c36ff1483" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::probably_floating</definition>
        <argsstring>(void) const</argsstring>
        <name>probably_floating</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2328" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2328" bodyend="2328"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a6a50f794eeec98c8c3900d286956f95d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_ccflags</definition>
        <argsstring>(void) const</argsstring>
        <name>is_ccflags</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2329" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2329" bodyend="2329"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a93a6a7d7d8200b3c21d834b288939437" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_undef_val</definition>
        <argsstring>(void) const</argsstring>
        <name>is_undef_val</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2330" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2330" bodyend="2330"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1aaf6621b8c7aeea31f578cd158b2db688" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mop_t::mop_t</definition>
        <argsstring>(void)</argsstring>
        <name>mop_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2332" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2332" bodyend="2332"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a7888294971cee693f2fd461413c659bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mop_t::mop_t</definition>
        <argsstring>(const mop_t &amp;rop)</argsstring>
        <name>mop_t</name>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>rop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2333" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2333" bodyend="2333"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1ac4023cfa1a0287d74dc7b50f3d02360e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mop_t::mop_t</definition>
        <argsstring>(mreg_t _r, int _s)</argsstring>
        <name>mop_t</name>
        <param>
          <type>mreg_t</type>
          <declname>_r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2334" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2334" bodyend="2334"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a3cf75e25d303d91301f89402e7504ca2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
        <definition>mop_t&amp; mop_t::operator=</definition>
        <argsstring>(const mop_t &amp;rop)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>rop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2335" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2335" bodyend="2335"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1add8e2971658aad449da20ff47ccf722d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mop_t::~mop_t</definition>
        <argsstring>(void)</argsstring>
        <name>~mop_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2336" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2336" bodyend="2339"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a6e938bfb19e1052ac1311450d6cd2838" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::zero</definition>
        <argsstring>(void)</argsstring>
        <name>zero</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2341" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2341" bodyend="2341"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1aad58bce35dd47583889a34a39f7d93a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mop_t::swap</definition>
        <argsstring>(mop_t &amp;rop)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>rop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2342" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9785" bodyend="9788"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a1a6fd68a1f4f556e7e92d5d15f9d413a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mop_t::erase</definition>
        <argsstring>(void)</argsstring>
        <name>erase</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2343" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9791" bodyend="9794"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a1a622ee35a12f7659a09c93ecbf7ad8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::erase_but_keep_size</definition>
        <argsstring>(void)</argsstring>
        <name>erase_but_keep_size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2344" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2344" bodyend="2344"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a61e58ab91c876ddd81b86f6b8de46cd3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mop_t::print</definition>
        <argsstring>(qstring *vout, int shins_flags=SHINS_SHORT|SHINS_VALNUM) const</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>vout</declname>
        </param>
        <param>
          <type>int</type>
          <declname>shins_flags</declname>
          <defval><ref refid="group___s_h_i_n_s___1gaceb2cb41ad1c22fcbe9d6d3caff51193" kindref="member">SHINS_SHORT</ref>|<ref refid="group___s_h_i_n_s___1ga699be2c17dc5ee9b5a55edb8851d6825" kindref="member">SHINS_VALNUM</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2346" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9797" bodyend="9800"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a026b84d16b4dce5d7e56efc1dcb0e174" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *hexapi</type>
        <definition>const char * mop_t::dstr</definition>
        <argsstring>(void) const</argsstring>
        <name>dstr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2347" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9803" bodyend="9806"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a0acfe8803ca0f9a766eaee4963923f63" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::create_from_mlist</definition>
        <argsstring>(mbl_array_t *mba, const mlist_t &amp;lst, sval_t fullsize)</argsstring>
        <name>create_from_mlist</name>
        <param>
          <type><ref refid="classmbl__array__t" kindref="compound">mbl_array_t</ref> *</type>
          <declname>mba</declname>
        </param>
        <param>
          <type>const <ref refid="structmlist__t" kindref="compound">mlist_t</ref> &amp;</type>
          <declname>lst</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref></type>
          <declname>fullsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create operand from <ref refid="structmlist__t" kindref="compound">mlist_t</ref>. Example: if LST contains 4 bits for R0.4, our operand will be (t=mop_r, r=R0, size=4) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mba</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to microcode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lst</parametername>
</parameternamelist>
<parameterdescription>
<para>list of locations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullsize</parametername>
</parameternamelist>
<parameterdescription>
<para>mba-&gt;fullsize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2359" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9809" bodyend="9812"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a5217f353fd9bb6954d7cbc2c2b396270" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::create_from_ivlset</definition>
        <argsstring>(mbl_array_t *mba, const ivlset_t &amp;ivs, sval_t fullsize)</argsstring>
        <name>create_from_ivlset</name>
        <param>
          <type><ref refid="classmbl__array__t" kindref="compound">mbl_array_t</ref> *</type>
          <declname>mba</declname>
        </param>
        <param>
          <type>const <ref refid="structivlset__t" kindref="compound">ivlset_t</ref> &amp;</type>
          <declname>ivs</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref></type>
          <declname>fullsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create operand from <ref refid="structivlset__t" kindref="compound">ivlset_t</ref>. Example: if IVS contains [glbvar..glbvar+4), our operand will be (t=mop_v, g=&amp;glbvar, size=4) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mba</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to microcode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ivs</parametername>
</parameternamelist>
<parameterdescription>
<para>set of memory intervals </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullsize</parametername>
</parameternamelist>
<parameterdescription>
<para>mba-&gt;fullsize </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2368" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9815" bodyend="9818"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1ad850cf0dce5d02940d6fa6b6892b6489" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mop_t::create_from_vdloc</definition>
        <argsstring>(mbl_array_t *mba, const vdloc_t &amp;loc, int _size)</argsstring>
        <name>create_from_vdloc</name>
        <param>
          <type><ref refid="classmbl__array__t" kindref="compound">mbl_array_t</ref> *</type>
          <declname>mba</declname>
        </param>
        <param>
          <type>const <ref refid="classvdloc__t" kindref="compound">vdloc_t</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create operand from <ref refid="classvdloc__t" kindref="compound">vdloc_t</ref>. Example: if LOC contains (type=ALOC_REG1, r=R0), our operand will be (t=mop_r, r=R0, size=_SIZE) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mba</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to microcode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>location </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullsize</parametername>
</parameternamelist>
<parameterdescription>
<para>mba-&gt;fullsize Note: this function can not handle scattered locations. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2378" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9821" bodyend="9824"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1aa399f73b8e34a608101f00bc17b36a24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mop_t::create_from_scattered_vdloc</definition>
        <argsstring>(mbl_array_t *mba, const char *name, tinfo_t type, const vdloc_t &amp;loc)</argsstring>
        <name>create_from_scattered_vdloc</name>
        <param>
          <type><ref refid="classmbl__array__t" kindref="compound">mbl_array_t</ref> *</type>
          <declname>mba</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="classvdloc__t" kindref="compound">vdloc_t</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create operand from scattered <ref refid="classvdloc__t" kindref="compound">vdloc_t</ref>. Example: if LOC is (ALOC_DIST, {EAX.4, EDX.4}) and TYPE is _LARGE_INTEGER, our operand will be (t=mop_sc, scif={EAX.4, EDX.4}) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mba</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to microcode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the operand, if available </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the operand, must be present </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>a scattered location </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2389" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9827" bodyend="9830"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a3f35894898ab7b3dc2574918867ac167" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mop_t::create_from_insn</definition>
        <argsstring>(const minsn_t *m)</argsstring>
        <name>create_from_insn</name>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create operand from an instruction. This function creates a nested instruction that can be used as an operand. Example: if m=&quot;add x,y,z&quot;, our operand will be (t=mop_d,d=m). The destination operand of &apos;add&apos; (z) is lost. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>instruction to embed into operand. may not be NULL. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2400" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9833" bodyend="9836"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a75fe9ed93e424523835a90b6883fddcb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mop_t::make_number</definition>
        <argsstring>(uint64 _value, int _size, ea_t _ea=BADADDR, int opnum=0)</argsstring>
        <name>make_number</name>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>_value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_size</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>_ea</declname>
          <defval><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>opnum</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an integer constant operand. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to store in the operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the value in bytes (1,2,4,8) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the processor instruction that made the value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opnum</parametername>
</parameternamelist>
<parameterdescription>
<para>operand number of the processor instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2407" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9839" bodyend="9842"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a6cbb0f5d2f46820913437a976a2f5c2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::make_fpnum</definition>
        <argsstring>(const void *bytes, size_t _size)</argsstring>
        <name>make_fpnum</name>
        <param>
          <type>const void *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a floating point constant operand. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the floating point value as used by the current processor (e.g. for x86 it must be in IEEE 754) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes occupied by the constant. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2414" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9845" bodyend="9848"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a9745b7542b1ede0ac6e99e08d7741cf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::_make_reg</definition>
        <argsstring>(mreg_t reg)</argsstring>
        <name>_make_reg</name>
        <param>
          <type>mreg_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a register operand without erasing previous data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>micro register number Note: this function does not erase the previous contents of the operand; call erase() if necessary </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2420" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2420" bodyend="2424"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1af3aa9f24d3dc89d0b15cc394292fbe23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::_make_reg</definition>
        <argsstring>(mreg_t reg, int _size)</argsstring>
        <name>_make_reg</name>
        <param>
          <type>mreg_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2425" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2425" bodyend="2430"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1ab48e49bddc9259e2edddad6eb7b12194" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::make_reg</definition>
        <argsstring>(mreg_t reg)</argsstring>
        <name>make_reg</name>
        <param>
          <type>mreg_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
<para>Create a register operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2432" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2432" bodyend="2432"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a36aee79d755e891ff8f8b6adf90abf4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::make_reg</definition>
        <argsstring>(mreg_t reg, int _size)</argsstring>
        <name>make_reg</name>
        <param>
          <type>mreg_t</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2433" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2433" bodyend="2433"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a2badaebe06f8148deb673e0755b8f83d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::_make_lvar</definition>
        <argsstring>(mbl_array_t *mba, int idx, sval_t off=0)</argsstring>
        <name>_make_lvar</name>
        <param>
          <type><ref refid="classmbl__array__t" kindref="compound">mbl_array_t</ref> *</type>
          <declname>mba</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref></type>
          <declname>off</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a local variable operand. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mba</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to microcode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index into mba-&gt;vars </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>offset from the beginning of the variable Note: this function does not erase the previous contents of the operand; call erase() if necessary </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2441" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2441" bodyend="2445"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a128713ac8a556f8627cdbab86431f1ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::_make_gvar</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>_make_gvar</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a global variable operand without erasing previous data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the variable Note: this function does not erase the previous contents of the operand; call erase() if necessary </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2451" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2451" bodyend="2455"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1afc9d4afd477c1145a97d6e992d674dd2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::make_gvar</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>make_gvar</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Create a global variable operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2457" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2457" bodyend="2457"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a54c9ea639f5a178ed0e28d24eda4ae9f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::_make_stkvar</definition>
        <argsstring>(mbl_array_t *mba, sval_t off)</argsstring>
        <name>_make_stkvar</name>
        <param>
          <type><ref refid="classmbl__array__t" kindref="compound">mbl_array_t</ref> *</type>
          <declname>mba</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref></type>
          <declname>off</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a stack variable operand. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mba</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to microcode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>decompiler stkoff Note: this function does not erase the previous contents of the operand; call erase() if necessary </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2464" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2464" bodyend="2468"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a45a78acc504e21f45a563d54997fb4de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mop_t::make_reg_pair</definition>
        <argsstring>(int loreg, int hireg, int halfsize)</argsstring>
        <name>make_reg_pair</name>
        <param>
          <type>int</type>
          <declname>loreg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hireg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>halfsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create pair of registers. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loreg</parametername>
</parameternamelist>
<parameterdescription>
<para>register holding the low part of the value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hireg</parametername>
</parameternamelist>
<parameterdescription>
<para>register holding the high part of the value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>halfsize</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of each of loreg/hireg </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2474" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9851" bodyend="9854"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1aa1299111f6a2ca3341007d68dca9e791" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::_make_insn</definition>
        <argsstring>(minsn_t *ins)</argsstring>
        <name>_make_insn</name>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a nested instruction without erasing previous data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the nested instruction Note: this function does not erase the previous contents of the operand; call erase() if necessary See also create_from_insn, which is higher level </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2481" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4780" bodyend="4784"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a754d8cfbbfb5af57a6b701ab7e96398e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::make_insn</definition>
        <argsstring>(minsn_t *ins)</argsstring>
        <name>make_insn</name>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
<para>Create a nested instruction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2483" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2483" bodyend="2483"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a57d7538fdfc4308fe20c95cc784d7eea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::_make_blkref</definition>
        <argsstring>(int blknum)</argsstring>
        <name>_make_blkref</name>
        <param>
          <type>int</type>
          <declname>blknum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a block reference operand without erasing previous data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blknum</parametername>
</parameternamelist>
<parameterdescription>
<para>block number Note: this function does not erase the previous contents of the operand; call erase() if necessary </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2489" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2489" bodyend="2493"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1aeaa8eb96aae34d6b1a8c0fdb0cb87633" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::make_blkref</definition>
        <argsstring>(int blknum)</argsstring>
        <name>make_blkref</name>
        <param>
          <type>int</type>
          <declname>blknum</declname>
        </param>
        <briefdescription>
<para>Create a global variable operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2495" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2495" bodyend="2495"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1ade05a62a54864ee55ed416b5ef8d6dda" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mop_t::make_helper</definition>
        <argsstring>(const char *name)</argsstring>
        <name>make_helper</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a helper operand. A helper operand usually keeps a built-in function name like &quot;va_start&quot; It is essentially just an arbitrary identifier without any additional info. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2500" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9857" bodyend="9860"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1aa6be96a282d623a8f1a1fb62315dbc7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::_make_strlit</definition>
        <argsstring>(const char *str)</argsstring>
        <name>_make_strlit</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Create a constant string operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2503" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2503" bodyend="2507"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1ad18ec392c1a7900dce9c673fcaa75cf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::_make_strlit</definition>
        <argsstring>(qstring *str)</argsstring>
        <name>_make_strlit</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2508" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2508" bodyend="2512"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1aeccd86ef2641efe3da40abc8e9314cdd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::_make_callinfo</definition>
        <argsstring>(mcallinfo_t *fi)</argsstring>
        <name>_make_callinfo</name>
        <param>
          <type><ref refid="classmcallinfo__t" kindref="compound">mcallinfo_t</ref> *</type>
          <declname>fi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a call info operand without erasing previous data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fi</parametername>
</parameternamelist>
<parameterdescription>
<para>callinfo Note: this function does not erase the previous contents of the operand; call erase() if necessary </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2518" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2518" bodyend="2522"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a6dcf77562fa1a88927ce7693d275fa15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::_make_cases</definition>
        <argsstring>(mcases_t *_cases)</argsstring>
        <name>_make_cases</name>
        <param>
          <type><ref refid="classmcases__t" kindref="compound">mcases_t</ref> *</type>
          <declname>_cases</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a &apos;switch cases&apos; operand without erasing previous data. Note: this function does not erase the previous contents of the operand; call erase() if necessary </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2527" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2527" bodyend="2531"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1aff79b97db65d4e777eac6b26930663eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::_make_pair</definition>
        <argsstring>(mop_pair_t *_pair)</argsstring>
        <name>_make_pair</name>
        <param>
          <type><ref refid="classmop__pair__t" kindref="compound">mop_pair_t</ref> *</type>
          <declname>_pair</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a pair operand without erasing previous data. Note: this function does not erase the previous contents of the operand; call erase() if necessary </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2536" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2536" bodyend="2540"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1aff92f37aa63820e34b0b38b7f62eaed5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_reg</definition>
        <argsstring>(void) const</argsstring>
        <name>is_reg</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is a register operand? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2546" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2546" bodyend="2546"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a62643b4346bf7704c9e1f8658673754e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_reg</definition>
        <argsstring>(mreg_t _r) const</argsstring>
        <name>is_reg</name>
        <param>
          <type>mreg_t</type>
          <declname>_r</declname>
        </param>
        <briefdescription>
<para>Is the specified register? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2548" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2548" bodyend="2548"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1aad5603890b057cc6416a29d1b7ac69a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_reg</definition>
        <argsstring>(mreg_t _r, int _size) const</argsstring>
        <name>is_reg</name>
        <param>
          <type>mreg_t</type>
          <declname>_r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_size</declname>
        </param>
        <briefdescription>
<para>Is the specified register of the specified size? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2550" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2550" bodyend="2550"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a43dd3eb76bbaa47bde661905412c78dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_cc</definition>
        <argsstring>(void) const</argsstring>
        <name>is_cc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is a condition code? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2552" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2552" bodyend="2552"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1ad5e38485ae0f144115d56a4d262b45c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_bit_reg</definition>
        <argsstring>(void) const</argsstring>
        <name>is_bit_reg</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2556" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2556" bodyend="2556"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1af75752fdd6513cf348609c8dca2085c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_kreg</definition>
        <argsstring>(void) const</argsstring>
        <name>is_kreg</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is a kernel register? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2558" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4791" bodyend="4794"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a49915ca4dc30d530b2d8a01d38deabe9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_mob</definition>
        <argsstring>(int serial) const</argsstring>
        <name>is_mob</name>
        <param>
          <type>int</type>
          <declname>serial</declname>
        </param>
        <briefdescription>
<para>Is a block reference to the specified block? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2560" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2560" bodyend="2560"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1ae7e949fdd9e25e32c3f511fb8e24d474" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_scattered</definition>
        <argsstring>(void) const</argsstring>
        <name>is_scattered</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is a scattered operand? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2562" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2562" bodyend="2562"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a958810e9f7a7491126c8fb4a6b466267" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_glbaddr</definition>
        <argsstring>() const</argsstring>
        <name>is_glbaddr</name>
        <briefdescription>
<para>Is address of a global memory cell? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2564" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4810" bodyend="4813"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1aa173f8423e7cd02d7eef56993a1a4f30" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_glbaddr</definition>
        <argsstring>(ea_t ea) const</argsstring>
        <name>is_glbaddr</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Is address of the specified global memory cell? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2566" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4815" bodyend="4818"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1ac35e22c6c9eb57b75499fe6ed9d3724e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_stkaddr</definition>
        <argsstring>() const</argsstring>
        <name>is_stkaddr</name>
        <briefdescription>
<para>Is address of a stack variable? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2568" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4820" bodyend="4823"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a51c1a405ba81b09b22cd6f1fb6f739ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_insn</definition>
        <argsstring>(void) const</argsstring>
        <name>is_insn</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is a sub-instruction? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2570" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2570" bodyend="2570"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a404fbf68b1a9d7c620cd6fa17bb30987" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_insn</definition>
        <argsstring>(mcode_t code) const</argsstring>
        <name>is_insn</name>
        <param>
          <type>mcode_t</type>
          <declname>code</declname>
        </param>
        <briefdescription>
<para>Is a sub-instruction with the specified opcode? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2572" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4805" bodyend="4808"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a8e90cc3a8d96a963c22f812248b06142" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::has_side_effects</definition>
        <argsstring>(bool include_ldx=false) const</argsstring>
        <name>has_side_effects</name>
        <param>
          <type>bool</type>
          <declname>include_ldx</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Has any side effects? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>include_ldx</parametername>
</parameternamelist>
<parameterdescription>
<para>consider ldx as having side effects? </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2575" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4786" bodyend="4789"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a557e1d95582a5e7160856497b254240e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::may_use_aliased_memory</definition>
        <argsstring>(void) const</argsstring>
        <name>may_use_aliased_memory</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is it possible for the operand to use aliased memory? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2577" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9869" bodyend="9872"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a0dcb858eeff945b2ceb600d27bf46bb8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::is01</definition>
        <argsstring>(void) const</argsstring>
        <name>is01</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Are the possible values of the operand only 0 and 1? This function returns true for 0/1 constants, bit registers, the result of &apos;set&apos; insns, etc. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2582" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9875" bodyend="9878"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a86fbbc289ccf75892b50a08f58526df4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::is_sign_extended_from</definition>
        <argsstring>(int nbytes) const</argsstring>
        <name>is_sign_extended_from</name>
        <param>
          <type>int</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does the high part of the operand consist of the sign bytes? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes that were sign extended. the remaining size-nbytes high bytes must be sign bytes Example: is_sign_extended_from(xds.4(op.1), 1) -&gt; true because the high 3 bytes are certainly sign bits </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2589" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9881" bodyend="9884"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a38100bf39f346e41cd9254a9309d2eec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::is_zero_extended_from</definition>
        <argsstring>(int nbytes) const</argsstring>
        <name>is_zero_extended_from</name>
        <param>
          <type>int</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does the high part of the operand consist of zero bytes? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes that were zero extended. the remaining size-nbytes high bytes must be zero Example: is_zero_extended_from(xdu.8(op.1), 2) -&gt; true because the high 6 bytes are certainly zero </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2596" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9887" bodyend="9890"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1ab5f2adc195635db8a07f15aefa4330c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_extended_from</definition>
        <argsstring>(int nbytes, bool is_signed) const</argsstring>
        <name>is_extended_from</name>
        <param>
          <type>int</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_signed</declname>
        </param>
        <briefdescription>
<para>Does the high part of the operand consist of zero or sign bytes? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2599" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2599" bodyend="2605"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a5dd17af3d915581da8be482d0550ef97" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::equal_mops</definition>
        <argsstring>(const mop_t &amp;rop, int eqflags) const</argsstring>
        <name>equal_mops</name>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>rop</declname>
        </param>
        <param>
          <type>int</type>
          <declname>eqflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare operands. This is the main comparison function for operands. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rop</parametername>
</parameternamelist>
<parameterdescription>
<para>operand to compare with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eqflags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___e_q__" kindref="compound">comparison bits</ref> bits </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2614" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9893" bodyend="9896"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1ad6ceadaa7176dd9ce1b09163c63ac893" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::operator==</definition>
        <argsstring>(const mop_t &amp;rop) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>rop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2615" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2615" bodyend="2615"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a89c69948da2cffe4aa60c21ca41bd71e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::operator!=</definition>
        <argsstring>(const mop_t &amp;rop) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>rop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2616" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2616" bodyend="2616"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a3d4e306d0e48ab98b8997761823ca887" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::operator&lt;</definition>
        <argsstring>(const mop_t &amp;rop) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>rop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lexographical operand comparison. It can be used to store <ref refid="classmop__t" kindref="compound">mop_t</ref> in various containers, like std::set </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2620" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2620" bodyend="2620"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a79dd398ae8d70de2fd4fe25d1cd8e7bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int hexapi</type>
        <definition>int mop_t::lexcompare</definition>
        <argsstring>(const mop_t &amp;rop) const</argsstring>
        <name>lexcompare</name>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>rop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2622" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9899" bodyend="9902"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1ab71fd094347d66c0dff4c03e3f8046e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int hexapi</type>
        <definition>int mop_t::for_all_ops</definition>
        <argsstring>(mop_visitor_t &amp;mv, const tinfo_t *type=NULL, bool is_target=false)</argsstring>
        <name>for_all_ops</name>
        <param>
          <type><ref refid="structmop__visitor__t" kindref="compound">mop_visitor_t</ref> &amp;</type>
          <declname>mv</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>type</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_target</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit the operand and all its sub-operands. This function visits the current operand as well. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mv</parametername>
</parameternamelist>
<parameterdescription>
<para>visitor object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>operand type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_target</parametername>
</parameternamelist>
<parameterdescription>
<para>is a destination operand? </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2632" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9905" bodyend="9908"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1aadbfbe9edb95a85fefd88478188c7bef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int hexapi</type>
        <definition>int mop_t::for_all_scattered_submops</definition>
        <argsstring>(scif_visitor_t &amp;sv) const</argsstring>
        <name>for_all_scattered_submops</name>
        <param>
          <type><ref refid="structscif__visitor__t" kindref="compound">scif_visitor_t</ref> &amp;</type>
          <declname>sv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit all sub-operands of a scattered operand. This function does not visit the current operand, only its sub-operands. All sub-operands are synthetic and are destroyed after the visitor. This function works only with scattered operands. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sv</parametername>
</parameternamelist>
<parameterdescription>
<para>visitor object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2642" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9911" bodyend="9914"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a8b47d3797d0b5b25913016296c6fd344" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
        <definition>uint64 mop_t::value</definition>
        <argsstring>(bool is_signed) const</argsstring>
        <name>value</name>
        <param>
          <type>bool</type>
          <declname>is_signed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve value of a constant integer operand. These functions can be called only for mop_n operands. See <ref refid="classmop__t_1a9a8bedbf85e6e97ffb39f8774bc65678" kindref="member">is_constant()</ref> that can be called on any operand. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2650" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2650" bodyend="2650"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a19acb0c7367cf1c5e7bb7280d698d3fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1af755b91e0abdf71f5715f00e68b35e0a" kindref="member">int64</ref></type>
        <definition>int64 mop_t::signed_value</definition>
        <argsstring>(void) const</argsstring>
        <name>signed_value</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2651" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2651" bodyend="2651"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1adacccbecbe09ca05b0bfb2da8b241dae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
        <definition>uint64 mop_t::unsigned_value</definition>
        <argsstring>(void) const</argsstring>
        <name>unsigned_value</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2652" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2652" bodyend="2652"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a9a8bedbf85e6e97ffb39f8774bc65678" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::is_constant</definition>
        <argsstring>(uint64 *out=NULL, bool is_signed=true) const</argsstring>
        <name>is_constant</name>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> *</type>
          <declname>out</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>is_signed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve value of a constant integer operand. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_signed</parametername>
</parameternamelist>
<parameterdescription>
<para>should treat the value as signed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the operand is mop_n </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2658" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9917" bodyend="9920"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a781a22179510e81a62a99bc4e2c3e046" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_equal_to</definition>
        <argsstring>(uint64 n, bool is_signed=true) const</argsstring>
        <name>is_equal_to</name>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_signed</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2660" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2660" bodyend="2664"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a96294ce8de43cf175533d79135559c20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_zero</definition>
        <argsstring>(void) const</argsstring>
        <name>is_zero</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2665" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2665" bodyend="2665"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a532637a85327541b1c9cd6d826154146" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_one</definition>
        <argsstring>(void) const</argsstring>
        <name>is_one</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2666" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2666" bodyend="2666"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a3325241c2c740d77bed4ffa00b98e2ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_positive_constant</definition>
        <argsstring>(void) const</argsstring>
        <name>is_positive_constant</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2667" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2667" bodyend="2671"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1aae38c71d7bb066e4ffac511f926104ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::is_negative_constant</definition>
        <argsstring>(void) const</argsstring>
        <name>is_negative_constant</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2672" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2672" bodyend="2676"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a386e040fc0a6e5be1778d93a465b9f7a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmember__t" kindref="compound">member_t</ref> *</type>
        <definition>member_t* mop_t::get_stkvar</definition>
        <argsstring>(uval_t *p_off) const</argsstring>
        <name>get_stkvar</name>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> *</type>
          <declname>p_off</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the referenced stack variable. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_off</parametername>
</parameternamelist>
<parameterdescription>
<para>if specified, will hold IDA stkoff after the call. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the stack variable </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2684" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2684" bodyend="2684"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a496182ab2279be77418321e0d0feb05d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::get_stkoff</definition>
        <argsstring>(sval_t *p_off) const</argsstring>
        <name>get_stkoff</name>
        <param>
          <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref> *</type>
          <declname>p_off</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the referenced stack offset. This function can also handle mop_sc if it is entirely mapped into a continuous stack region. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_off</parametername>
</parameternamelist>
<parameterdescription>
<para>the output buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2691" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9923" bodyend="9926"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a6587df11b0727b867419d1f9c64c7ba9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
        <definition>const minsn_t * mop_t::get_insn</definition>
        <argsstring>(mcode_t code) const</argsstring>
        <name>get_insn</name>
        <param>
          <type>mcode_t</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get subinstruction of the operand. If the operand has a subinstruction with the specified opcode, return it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>desired opcode </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the instruction or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2700" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4800" bodyend="4803"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a1f89c0628a95bcaa28f845d01984778d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
        <definition>minsn_t * mop_t::get_insn</definition>
        <argsstring>(mcode_t code)</argsstring>
        <name>get_insn</name>
        <param>
          <type>mcode_t</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2701" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4796" bodyend="4799"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a4f70acf8f7d015f5951ab493f69d41cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::make_low_half</definition>
        <argsstring>(int width)</argsstring>
        <name>make_low_half</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make the low part of the operand. This function takes into account the memory endianness (byte sex) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired size of the operand part in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2710" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9929" bodyend="9932"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a88d4ddc4133e65e4e52f37f00513ed49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::make_high_half</definition>
        <argsstring>(int width)</argsstring>
        <name>make_high_half</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make the high part of the operand. This function takes into account the memory endianness (byte sex) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired size of the operand part in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2716" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9935" bodyend="9938"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a84c672c47634784d43938ee06d8e35f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::make_first_half</definition>
        <argsstring>(int width)</argsstring>
        <name>make_first_half</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make the first part of the operand. This function does not care about the memory endianness <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired size of the operand part in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2722" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9941" bodyend="9944"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1af3febcd45de06eac86fb6df5ed414220" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::make_second_half</definition>
        <argsstring>(int width)</argsstring>
        <name>make_second_half</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Make the second part of the operand. This function does not care about the memory endianness <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired size of the operand part in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2728" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9947" bodyend="9950"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1ab6d4afba3ec4490c25c95bc8f5430c5f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::shift_mop</definition>
        <argsstring>(int offset)</argsstring>
        <name>shift_mop</name>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shift the operand. This function shifts only the beginning of the operand. The operand size will be changed. Examples: shift_mop(AH.1, -1) -&gt; AX.2 shift_mop(qword_00000008.8, 4) -&gt; dword_0000000C.4 shift_mop(xdu.8(op.4), 4) -&gt; #0.4 shift_mop(#0x12345678.4, 3) -&gt; #12.1 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>shift count (the number of bytes to shift) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2739" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9953" bodyend="9956"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a61f86dcbba040ed61fc77c5e5f35c9f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::change_size</definition>
        <argsstring>(int nsize, side_effect_t sideff=WITH_SIDEFF)</argsstring>
        <name>change_size</name>
        <param>
          <type>int</type>
          <declname>nsize</declname>
        </param>
        <param>
          <type>side_effect_t</type>
          <declname>sideff</declname>
          <defval>WITH_SIDEFF</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change the operand size. Examples: change_size(AL.1, 2) -&gt; AX.2 change_size(qword_00000008.8, 4) -&gt; dword_00000008.4 change_size(xdu.8(op.4), 4) -&gt; op.4 change_size(#0x12345678.4, 1) -&gt; #0x78.1 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nsize</parametername>
</parameternamelist>
<parameterdescription>
<para>new operand size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sideff</parametername>
</parameternamelist>
<parameterdescription>
<para>may modify the database because of the size change? </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2749" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9959" bodyend="9962"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a134a3b8ca8f2861880bd8a40822452c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mop_t::double_size</definition>
        <argsstring>(side_effect_t sideff=WITH_SIDEFF)</argsstring>
        <name>double_size</name>
        <param>
          <type>side_effect_t</type>
          <declname>sideff</declname>
          <defval>WITH_SIDEFF</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2750" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2750" bodyend="2750"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1ac2c6e87ce5557765465238591214e99f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::preserve_side_effects</definition>
        <argsstring>(mblock_t *blk, minsn_t *top, bool *moved_calls=NULL)</argsstring>
        <name>preserve_side_effects</name>
        <param>
          <type><ref refid="classmblock__t" kindref="compound">mblock_t</ref> *</type>
          <declname>blk</declname>
        </param>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>top</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>moved_calls</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move subinstructions with side effects out of the operand. If we decide to delete an instruction operand, it is a good idea to call this function. Alternatively we should skip such operands by calling <ref refid="classmop__t_1a8e90cc3a8d96a963c22f812248b06142" kindref="member">mop_t::has_side_effects()</ref> For example, if we transform: jnz x, x,  =&gt; goto  then we must call this function before deleting the X operands. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blk</parametername>
</parameternamelist>
<parameterdescription>
<para>current block </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>top level instruction that contains our operand </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>moved_calls</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the boolean that will track if all side effects get handled correctly. must be false initially. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false failed to preserve a side effect, it is not safe to delete the operand true no side effects or successfully preserved them </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2765" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9965" bodyend="9968"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1afb19190789c53b0c828720a5e39c4574" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mop_t::apply_ld_mcode</definition>
        <argsstring>(mcode_t mcode, ea_t ea, int newsize)</argsstring>
        <name>apply_ld_mcode</name>
        <param>
          <type>mcode_t</type>
          <declname>mcode</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>newsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply a unary opcode to the operand. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mcode</parametername>
</parameternamelist>
<parameterdescription>
<para>opcode to apply. it must accept &apos;l&apos; and &apos;d&apos; operands but not &apos;r&apos;. examples: m_low/m_high/m_xds/m_xdu </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>value of <ref refid="classminsn__t_1a6803fa80be93437f98a96c9135e9548e" kindref="member">minsn_t::ea</ref> for the newly created insruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newsize</parametername>
</parameternamelist>
<parameterdescription>
<para>new operand size Example: apply_ld_mcode(m_low) will convert op =&gt; low(op) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2776" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9971" bodyend="9974"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1afd10835352bf6e7f0159b352b5ab80a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::apply_xdu</definition>
        <argsstring>(ea_t ea, int newsize)</argsstring>
        <name>apply_xdu</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>newsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2777" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2777" bodyend="2777"/>
      </memberdef>
      <memberdef kind="function" id="classmop__t_1a8dbf652a7b8fa8edfc96000176c26dd7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mop_t::apply_xds</definition>
        <argsstring>(ea_t ea, int newsize)</argsstring>
        <name>apply_xds</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>newsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2778" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2778" bodyend="2778"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classmop__t_1aae932a7b1f0dbfcd65c91da0eb67bffc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mop_t::is_bit_reg</definition>
        <argsstring>(mreg_t reg)</argsstring>
        <name>is_bit_reg</name>
        <param>
          <type>mreg_t</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is a bit register? This includes condition codes and eventually other bit registers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2555" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9863" bodyend="9866"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmop__t_1a2527c36a2231c7b504a8c29430325eca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend int</type>
        <definition>int lexcompare</definition>
        <argsstring>(const mop_t &amp;a, const mop_t &amp;b)</argsstring>
        <name>lexcompare</name>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2621" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2621" bodyend="2621"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>An microinstruction operand. This is the smallest building block of our microcode. Later operands will be used in instructions, which are grouped into blocks. An array of basic blocks + some additional info will be the microcode. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2543">
        <label>mop_addr_t</label>
        <link refid="classmop__addr__t"/>
        <childnode refid="2541" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2541">
        <label>mop_t</label>
        <link refid="classmop__t"/>
      </node>
      <node id="2542">
        <label>mcallarg_t</label>
        <link refid="classmcallarg__t"/>
        <childnode refid="2541" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2567">
        <label>ivl_tpl&lt; uval_t &gt;</label>
        <link refid="structivl__tpl"/>
      </node>
      <node id="2560">
        <label>bitset_t</label>
        <link refid="classbitset__t"/>
      </node>
      <node id="2558">
        <label>mlist_t</label>
        <link refid="structmlist__t"/>
        <childnode refid="2555" relation="usage">
          <edgelabel>mem</edgelabel>
        </childnode>
        <childnode refid="2559" relation="usage">
          <edgelabel>reg</edgelabel>
        </childnode>
      </node>
      <node id="2565">
        <label>ivl_with_name_t</label>
        <link refid="structivl__with__name__t"/>
        <childnode refid="2566" relation="usage">
          <edgelabel>ivl</edgelabel>
        </childnode>
      </node>
      <node id="2568">
        <label>tinfo_t</label>
        <link refid="classtinfo__t"/>
      </node>
      <node id="2581">
        <label>mop_addr_t</label>
        <link refid="classmop__addr__t"/>
        <childnode refid="2544" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2578">
        <label>netnode</label>
        <link refid="classnetnode"/>
      </node>
      <node id="2585">
        <label>qvector&lt; mop_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2555">
        <label>ivlset_t</label>
        <link refid="structivlset__t"/>
        <childnode refid="2556" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2563">
        <label>mblock_t</label>
        <link refid="classmblock__t"/>
        <childnode refid="2551" relation="usage">
          <edgelabel>mba</edgelabel>
        </childnode>
        <childnode refid="2558" relation="usage">
          <edgelabel>maybuse</edgelabel>
          <edgelabel>dnu</edgelabel>
          <edgelabel>maybdef</edgelabel>
          <edgelabel>mustbuse</edgelabel>
          <edgelabel>mustbdef</edgelabel>
          <edgelabel>dead_at_start</edgelabel>
        </childnode>
        <childnode refid="2561" relation="usage">
          <edgelabel>succset</edgelabel>
          <edgelabel>predset</edgelabel>
        </childnode>
        <childnode refid="2564" relation="usage">
          <edgelabel>head</edgelabel>
          <edgelabel>tail</edgelabel>
        </childnode>
        <childnode refid="2563" relation="usage">
          <edgelabel>nextb</edgelabel>
          <edgelabel>prevb</edgelabel>
        </childnode>
      </node>
      <node id="2577">
        <label>rangevec_base_t</label>
        <link refid="classqvector"/>
      </node>
      <node id="2588">
        <label>operand_locator_t</label>
        <link refid="structoperand__locator__t"/>
      </node>
      <node id="2557">
        <label>qvector&lt; ivl_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2589">
        <label>mcases_t</label>
        <link refid="classmcases__t"/>
        <childnode refid="2561" relation="usage">
          <edgelabel>targets</edgelabel>
        </childnode>
      </node>
      <node id="2584">
        <label>qvector&lt; mcallarg_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2570">
        <label>func_t</label>
        <link refid="classfunc__t"/>
        <childnode refid="2571" relation="public-inheritance">
        </childnode>
        <childnode refid="2572" relation="usage">
          <edgelabel>regargs</edgelabel>
        </childnode>
        <childnode refid="2573" relation="usage">
          <edgelabel>points</edgelabel>
        </childnode>
        <childnode refid="2571" relation="usage">
          <edgelabel>tails</edgelabel>
        </childnode>
        <childnode refid="2574" relation="usage">
          <edgelabel>regvars</edgelabel>
        </childnode>
        <childnode refid="2575" relation="usage">
          <edgelabel>llabels</edgelabel>
        </childnode>
      </node>
      <node id="2544">
        <label>mop_t</label>
        <link refid="classmop__t"/>
        <childnode refid="2545" relation="usage">
          <edgelabel>scif</edgelabel>
        </childnode>
        <childnode refid="2580" relation="usage">
          <edgelabel>fpc</edgelabel>
        </childnode>
        <childnode refid="2581" relation="usage">
          <edgelabel>a</edgelabel>
        </childnode>
        <childnode refid="2582" relation="usage">
          <edgelabel>pair</edgelabel>
        </childnode>
        <childnode refid="2583" relation="usage">
          <edgelabel>f</edgelabel>
        </childnode>
        <childnode refid="2564" relation="usage">
          <edgelabel>d</edgelabel>
        </childnode>
        <childnode refid="2586" relation="usage">
          <edgelabel>l</edgelabel>
        </childnode>
        <childnode refid="2587" relation="usage">
          <edgelabel>nnn</edgelabel>
        </childnode>
        <childnode refid="2589" relation="usage">
          <edgelabel>c</edgelabel>
        </childnode>
        <childnode refid="2590" relation="usage">
          <edgelabel>s</edgelabel>
        </childnode>
      </node>
      <node id="2582">
        <label>mop_pair_t</label>
        <link refid="classmop__pair__t"/>
        <childnode refid="2544" relation="usage">
          <edgelabel>hop</edgelabel>
          <edgelabel>lop</edgelabel>
        </childnode>
      </node>
      <node id="2572">
        <label>regarg_t</label>
        <link refid="structregarg__t"/>
      </node>
      <node id="2580">
        <label>fnumber_t</label>
        <link refid="structfnumber__t"/>
      </node>
      <node id="2551">
        <label>mbl_array_t</label>
        <link refid="classmbl__array__t"/>
        <childnode refid="2552" relation="usage">
          <edgelabel>vars</edgelabel>
        </childnode>
        <childnode refid="2554" relation="usage">
          <edgelabel>label</edgelabel>
          <edgelabel>error_strarg</edgelabel>
        </childnode>
        <childnode refid="2555" relation="usage">
          <edgelabel>gotoff_stkvars</edgelabel>
          <edgelabel>restricted_memory</edgelabel>
          <edgelabel>aliased_memory</edgelabel>
        </childnode>
        <childnode refid="2558" relation="usage">
          <edgelabel>spoiled_list</edgelabel>
          <edgelabel>nodel_memory</edgelabel>
        </childnode>
        <childnode refid="2561" relation="usage">
          <edgelabel>argidx</edgelabel>
        </childnode>
        <childnode refid="2562" relation="usage">
          <edgelabel>idb_spoiled</edgelabel>
        </childnode>
        <childnode refid="2563" relation="usage">
          <edgelabel>blocks</edgelabel>
          <edgelabel>natural</edgelabel>
        </childnode>
        <childnode refid="2559" relation="usage">
          <edgelabel>consumed_argregs</edgelabel>
        </childnode>
        <childnode refid="2565" relation="usage">
          <edgelabel>std_ivls</edgelabel>
        </childnode>
        <childnode refid="2568" relation="usage">
          <edgelabel>idb_type</edgelabel>
        </childnode>
        <childnode refid="2569" relation="usage">
          <edgelabel>mbr</edgelabel>
        </childnode>
        <childnode refid="2578" relation="usage">
          <edgelabel>idb_node</edgelabel>
        </childnode>
        <childnode refid="2579" relation="usage">
          <edgelabel>notes</edgelabel>
        </childnode>
        <childnode refid="2566" relation="usage">
          <edgelabel>aliased_args</edgelabel>
          <edgelabel>aliased_vars</edgelabel>
        </childnode>
      </node>
      <node id="2583">
        <label>mcallinfo_t</label>
        <link refid="classmcallinfo__t"/>
        <childnode refid="2555" relation="usage">
          <edgelabel>visible_memory</edgelabel>
        </childnode>
        <childnode refid="2558" relation="usage">
          <edgelabel>pass_regs</edgelabel>
          <edgelabel>spoiled</edgelabel>
          <edgelabel>dead_regs</edgelabel>
          <edgelabel>return_regs</edgelabel>
        </childnode>
        <childnode refid="2584" relation="usage">
          <edgelabel>args</edgelabel>
        </childnode>
        <childnode refid="2568" relation="usage">
          <edgelabel>return_type</edgelabel>
        </childnode>
        <childnode refid="2585" relation="usage">
          <edgelabel>retregs</edgelabel>
        </childnode>
        <childnode refid="2547" relation="usage">
          <edgelabel>return_argloc</edgelabel>
        </childnode>
      </node>
      <node id="2569">
        <label>mba_ranges_t</label>
        <link refid="structmba__ranges__t"/>
        <childnode refid="2570" relation="usage">
          <edgelabel>pfn</edgelabel>
        </childnode>
        <childnode refid="2576" relation="usage">
          <edgelabel>ranges</edgelabel>
        </childnode>
      </node>
      <node id="2556">
        <label>ivlset_tpl&lt; ivl_t, uval_t &gt;</label>
        <link refid="classivlset__tpl"/>
        <childnode refid="2557" relation="usage">
          <edgelabel>bag</edgelabel>
        </childnode>
      </node>
      <node id="2545">
        <label>scif_t</label>
        <link refid="structscif__t"/>
        <childnode refid="2546" relation="public-inheritance">
        </childnode>
        <childnode refid="2551" relation="usage">
          <edgelabel>mba</edgelabel>
        </childnode>
        <childnode refid="2554" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="2568" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
      </node>
      <node id="2561">
        <label>qvector&lt; int &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2573">
        <label>stkpnt_t</label>
        <link refid="structstkpnt__t"/>
      </node>
      <node id="2554">
        <label>_qstring&lt; char &gt;</label>
        <link refid="class__qstring"/>
      </node>
      <node id="2564">
        <label>minsn_t</label>
        <link refid="classminsn__t"/>
        <childnode refid="2564" relation="usage">
          <edgelabel>prev</edgelabel>
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="2544" relation="usage">
          <edgelabel>l</edgelabel>
          <edgelabel>r</edgelabel>
          <edgelabel>d</edgelabel>
        </childnode>
      </node>
      <node id="2548">
        <label>scattered_aloc_t</label>
        <link refid="classscattered__aloc__t"/>
        <childnode refid="2549" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2549">
        <label>qvector&lt; argpart_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2571">
        <label>range_t</label>
        <link refid="structrange__t"/>
      </node>
      <node id="2546">
        <label>vdloc_t</label>
        <link refid="classvdloc__t"/>
        <childnode refid="2547" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2574">
        <label>regvar_t</label>
        <link refid="structregvar__t"/>
        <childnode refid="2571" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2579">
        <label>qvector&lt; hexwarn_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2587">
        <label>mnumber_t</label>
        <link refid="structmnumber__t"/>
        <childnode refid="2588" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2552">
        <label>lvars_t</label>
        <link refid="structlvars__t"/>
        <childnode refid="2553" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2547">
        <label>argloc_t</label>
        <link refid="classargloc__t"/>
        <childnode refid="2548" relation="usage">
          <edgelabel>dist</edgelabel>
        </childnode>
        <childnode refid="2550" relation="usage">
          <edgelabel>rrel</edgelabel>
        </childnode>
      </node>
      <node id="2575">
        <label>llabel_t</label>
        <link refid="structllabel__t"/>
      </node>
      <node id="2586">
        <label>lvar_ref_t</label>
        <link refid="structlvar__ref__t"/>
        <childnode refid="2551" relation="usage">
          <edgelabel>mba</edgelabel>
        </childnode>
      </node>
      <node id="2553">
        <label>qvector&lt; lvar_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2590">
        <label>stkvar_ref_t</label>
        <link refid="structstkvar__ref__t"/>
        <childnode refid="2551" relation="usage">
          <edgelabel>mba</edgelabel>
        </childnode>
      </node>
      <node id="2562">
        <label>qvector&lt; reg_info_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2550">
        <label>rrel_t</label>
        <link refid="structrrel__t"/>
      </node>
      <node id="2559">
        <label>rlist_t</label>
        <link refid="classrlist__t"/>
        <childnode refid="2560" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2566">
        <label>ivl_t</label>
        <link refid="structivl__t"/>
        <childnode refid="2567" relation="public-inheritance">
        </childnode>
        <childnode refid="2566" relation="usage">
          <edgelabel>allmem</edgelabel>
        </childnode>
      </node>
      <node id="2576">
        <label>rangevec_t</label>
        <link refid="structrangevec__t"/>
        <childnode refid="2577" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="2275" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="2274" bodyend="2780"/>
    <listofallmembers>
      <member refid="classmop__t_1a57d7538fdfc4308fe20c95cc784d7eea" prot="public" virt="non-virtual"><scope>mop_t</scope><name>_make_blkref</name></member>
      <member refid="classmop__t_1aeccd86ef2641efe3da40abc8e9314cdd" prot="public" virt="non-virtual"><scope>mop_t</scope><name>_make_callinfo</name></member>
      <member refid="classmop__t_1a6dcf77562fa1a88927ce7693d275fa15" prot="public" virt="non-virtual"><scope>mop_t</scope><name>_make_cases</name></member>
      <member refid="classmop__t_1a128713ac8a556f8627cdbab86431f1ea" prot="public" virt="non-virtual"><scope>mop_t</scope><name>_make_gvar</name></member>
      <member refid="classmop__t_1aa1299111f6a2ca3341007d68dca9e791" prot="public" virt="non-virtual"><scope>mop_t</scope><name>_make_insn</name></member>
      <member refid="classmop__t_1a2badaebe06f8148deb673e0755b8f83d" prot="public" virt="non-virtual"><scope>mop_t</scope><name>_make_lvar</name></member>
      <member refid="classmop__t_1aff79b97db65d4e777eac6b26930663eb" prot="public" virt="non-virtual"><scope>mop_t</scope><name>_make_pair</name></member>
      <member refid="classmop__t_1a9745b7542b1ede0ac6e99e08d7741cf4" prot="public" virt="non-virtual"><scope>mop_t</scope><name>_make_reg</name></member>
      <member refid="classmop__t_1af3aa9f24d3dc89d0b15cc394292fbe23" prot="public" virt="non-virtual"><scope>mop_t</scope><name>_make_reg</name></member>
      <member refid="classmop__t_1a54c9ea639f5a178ed0e28d24eda4ae9f" prot="public" virt="non-virtual"><scope>mop_t</scope><name>_make_stkvar</name></member>
      <member refid="classmop__t_1aa6be96a282d623a8f1a1fb62315dbc7f" prot="public" virt="non-virtual"><scope>mop_t</scope><name>_make_strlit</name></member>
      <member refid="classmop__t_1ad18ec392c1a7900dce9c673fcaa75cf6" prot="public" virt="non-virtual"><scope>mop_t</scope><name>_make_strlit</name></member>
      <member refid="classmop__t_1a5e3e1b9b535e9a7a89f28ce62e81e22d" prot="public" virt="non-virtual"><scope>mop_t</scope><name>a</name></member>
      <member refid="classmop__t_1afb19190789c53b0c828720a5e39c4574" prot="public" virt="non-virtual"><scope>mop_t</scope><name>apply_ld_mcode</name></member>
      <member refid="classmop__t_1a8dbf652a7b8fa8edfc96000176c26dd7" prot="public" virt="non-virtual"><scope>mop_t</scope><name>apply_xds</name></member>
      <member refid="classmop__t_1afd10835352bf6e7f0159b352b5ab80a7" prot="public" virt="non-virtual"><scope>mop_t</scope><name>apply_xdu</name></member>
      <member refid="classmop__t_1abfde8853c5c5f7a14534ae5f2d582584" prot="private" virt="non-virtual"><scope>mop_t</scope><name>assign</name></member>
      <member refid="classmop__t_1a2577ac7519d9a9b2c8be9434c1cd2655" prot="public" virt="non-virtual"><scope>mop_t</scope><name>b</name></member>
      <member refid="classmop__t_1a69b43e3785b6f7fbe8738e31c5b87989" prot="public" virt="non-virtual"><scope>mop_t</scope><name>c</name></member>
      <member refid="classmop__t_1a61f86dcbba040ed61fc77c5e5f35c9f2" prot="public" virt="non-virtual"><scope>mop_t</scope><name>change_size</name></member>
      <member refid="classmop__t_1ac3ff9f87ac18efaae6ca9fd6f7834c23" prot="private" virt="non-virtual"><scope>mop_t</scope><name>copy</name></member>
      <member refid="classmop__t_1a3f35894898ab7b3dc2574918867ac167" prot="public" virt="non-virtual"><scope>mop_t</scope><name>create_from_insn</name></member>
      <member refid="classmop__t_1a5217f353fd9bb6954d7cbc2c2b396270" prot="public" virt="non-virtual"><scope>mop_t</scope><name>create_from_ivlset</name></member>
      <member refid="classmop__t_1a0acfe8803ca0f9a766eaee4963923f63" prot="public" virt="non-virtual"><scope>mop_t</scope><name>create_from_mlist</name></member>
      <member refid="classmop__t_1aa399f73b8e34a608101f00bc17b36a24" prot="public" virt="non-virtual"><scope>mop_t</scope><name>create_from_scattered_vdloc</name></member>
      <member refid="classmop__t_1ad850cf0dce5d02940d6fa6b6892b6489" prot="public" virt="non-virtual"><scope>mop_t</scope><name>create_from_vdloc</name></member>
      <member refid="classmop__t_1addbb0f8f61046134352a0b5065482b89" prot="public" virt="non-virtual"><scope>mop_t</scope><name>cstr</name></member>
      <member refid="classmop__t_1ae288e62e6b2c13da66568bdd4130c5b2" prot="public" virt="non-virtual"><scope>mop_t</scope><name>d</name></member>
      <member refid="classmop__t_1a134a3b8ca8f2861880bd8a40822452c8" prot="public" virt="non-virtual"><scope>mop_t</scope><name>double_size</name></member>
      <member refid="classmop__t_1a026b84d16b4dce5d7e56efc1dcb0e174" prot="public" virt="non-virtual"><scope>mop_t</scope><name>dstr</name></member>
      <member refid="classmop__t_1a5dd17af3d915581da8be482d0550ef97" prot="public" virt="non-virtual"><scope>mop_t</scope><name>equal_mops</name></member>
      <member refid="classmop__t_1a1a6fd68a1f4f556e7e92d5d15f9d413a" prot="public" virt="non-virtual"><scope>mop_t</scope><name>erase</name></member>
      <member refid="classmop__t_1a1a622ee35a12f7659a09c93ecbf7ad8a" prot="public" virt="non-virtual"><scope>mop_t</scope><name>erase_but_keep_size</name></member>
      <member refid="classmop__t_1a9e4c6a65a9f9f68958b64ddeca947930" prot="public" virt="non-virtual"><scope>mop_t</scope><name>f</name></member>
      <member refid="classmop__t_1ab71fd094347d66c0dff4c03e3f8046e9" prot="public" virt="non-virtual"><scope>mop_t</scope><name>for_all_ops</name></member>
      <member refid="classmop__t_1aadbfbe9edb95a85fefd88478188c7bef" prot="public" virt="non-virtual"><scope>mop_t</scope><name>for_all_scattered_submops</name></member>
      <member refid="classmop__t_1acc2fc97f6b70f8f21972b0ff1084fbbb" prot="public" virt="non-virtual"><scope>mop_t</scope><name>fpc</name></member>
      <member refid="classmop__t_1acd5a16f56a0dcedd315750f682f496f3" prot="public" virt="non-virtual"><scope>mop_t</scope><name>g</name></member>
      <member refid="classmop__t_1a6587df11b0727b867419d1f9c64c7ba9" prot="public" virt="non-virtual"><scope>mop_t</scope><name>get_insn</name></member>
      <member refid="classmop__t_1a1f89c0628a95bcaa28f845d01984778d" prot="public" virt="non-virtual"><scope>mop_t</scope><name>get_insn</name></member>
      <member refid="classmop__t_1a496182ab2279be77418321e0d0feb05d" prot="public" virt="non-virtual"><scope>mop_t</scope><name>get_stkoff</name></member>
      <member refid="classmop__t_1a386e040fc0a6e5be1778d93a465b9f7a" prot="public" virt="non-virtual"><scope>mop_t</scope><name>get_stkvar</name></member>
      <member refid="classmop__t_1a8e90cc3a8d96a963c22f812248b06142" prot="public" virt="non-virtual"><scope>mop_t</scope><name>has_side_effects</name></member>
      <member refid="classmop__t_1a601f86b113f1fd1ae4cde0baeebaeeed" prot="public" virt="non-virtual"><scope>mop_t</scope><name>helper</name></member>
      <member refid="classmop__t_1a0dcb858eeff945b2ceb600d27bf46bb8" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is01</name></member>
      <member refid="classmop__t_1aae932a7b1f0dbfcd65c91da0eb67bffc" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_bit_reg</name></member>
      <member refid="classmop__t_1ad5e38485ae0f144115d56a4d262b45c9" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_bit_reg</name></member>
      <member refid="classmop__t_1a43dd3eb76bbaa47bde661905412c78dd" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_cc</name></member>
      <member refid="classmop__t_1a6a50f794eeec98c8c3900d286956f95d" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_ccflags</name></member>
      <member refid="classmop__t_1a9a8bedbf85e6e97ffb39f8774bc65678" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_constant</name></member>
      <member refid="classmop__t_1a781a22179510e81a62a99bc4e2c3e046" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_equal_to</name></member>
      <member refid="classmop__t_1ab5f2adc195635db8a07f15aefa4330c7" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_extended_from</name></member>
      <member refid="classmop__t_1a958810e9f7a7491126c8fb4a6b466267" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_glbaddr</name></member>
      <member refid="classmop__t_1aa173f8423e7cd02d7eef56993a1a4f30" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_glbaddr</name></member>
      <member refid="classmop__t_1a1e6b695c0d8bd352d9cdd7b463ffe1c4" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_impptr_done</name></member>
      <member refid="classmop__t_1a51c1a405ba81b09b22cd6f1fb6f739ad" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_insn</name></member>
      <member refid="classmop__t_1a404fbf68b1a9d7c620cd6fa17bb30987" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_insn</name></member>
      <member refid="classmop__t_1af75752fdd6513cf348609c8dca2085c4" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_kreg</name></member>
      <member refid="classmop__t_1a49915ca4dc30d530b2d8a01d38deabe9" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_mob</name></member>
      <member refid="classmop__t_1aae38c71d7bb066e4ffac511f926104ab" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_negative_constant</name></member>
      <member refid="classmop__t_1a532637a85327541b1c9cd6d826154146" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_one</name></member>
      <member refid="classmop__t_1a3325241c2c740d77bed4ffa00b98e2ec" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_positive_constant</name></member>
      <member refid="classmop__t_1aff92f37aa63820e34b0b38b7f62eaed5" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_reg</name></member>
      <member refid="classmop__t_1a62643b4346bf7704c9e1f8658673754e" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_reg</name></member>
      <member refid="classmop__t_1aad5603890b057cc6416a29d1b7ac69a6" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_reg</name></member>
      <member refid="classmop__t_1ae7e949fdd9e25e32c3f511fb8e24d474" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_scattered</name></member>
      <member refid="classmop__t_1a86fbbc289ccf75892b50a08f58526df4" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_sign_extended_from</name></member>
      <member refid="classmop__t_1ac35e22c6c9eb57b75499fe6ed9d3724e" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_stkaddr</name></member>
      <member refid="classmop__t_1a0aacb037b9092ccc3c731f9b94c9c2bb" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_udt</name></member>
      <member refid="classmop__t_1a93a6a7d7d8200b3c21d834b288939437" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_undef_val</name></member>
      <member refid="classmop__t_1a96294ce8de43cf175533d79135559c20" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_zero</name></member>
      <member refid="classmop__t_1a38100bf39f346e41cd9254a9309d2eec" prot="public" virt="non-virtual"><scope>mop_t</scope><name>is_zero_extended_from</name></member>
      <member refid="classmop__t_1af589a48b3645a6fffff771769479f82a" prot="public" virt="non-virtual"><scope>mop_t</scope><name>l</name></member>
      <member refid="classmop__t_1a2527c36a2231c7b504a8c29430325eca" prot="public" virt="non-virtual"><scope>mop_t</scope><name>lexcompare</name></member>
      <member refid="classmop__t_1a79dd398ae8d70de2fd4fe25d1cd8e7bf" prot="public" virt="non-virtual"><scope>mop_t</scope><name>lexcompare</name></member>
      <member refid="classmop__t_1aeaa8eb96aae34d6b1a8c0fdb0cb87633" prot="public" virt="non-virtual"><scope>mop_t</scope><name>make_blkref</name></member>
      <member refid="classmop__t_1a84c672c47634784d43938ee06d8e35f7" prot="public" virt="non-virtual"><scope>mop_t</scope><name>make_first_half</name></member>
      <member refid="classmop__t_1a6cbb0f5d2f46820913437a976a2f5c2c" prot="public" virt="non-virtual"><scope>mop_t</scope><name>make_fpnum</name></member>
      <member refid="classmop__t_1afc9d4afd477c1145a97d6e992d674dd2" prot="public" virt="non-virtual"><scope>mop_t</scope><name>make_gvar</name></member>
      <member refid="classmop__t_1ade05a62a54864ee55ed416b5ef8d6dda" prot="public" virt="non-virtual"><scope>mop_t</scope><name>make_helper</name></member>
      <member refid="classmop__t_1a88d4ddc4133e65e4e52f37f00513ed49" prot="public" virt="non-virtual"><scope>mop_t</scope><name>make_high_half</name></member>
      <member refid="classmop__t_1a754d8cfbbfb5af57a6b701ab7e96398e" prot="public" virt="non-virtual"><scope>mop_t</scope><name>make_insn</name></member>
      <member refid="classmop__t_1a4f70acf8f7d015f5951ab493f69d41cc" prot="public" virt="non-virtual"><scope>mop_t</scope><name>make_low_half</name></member>
      <member refid="classmop__t_1a75fe9ed93e424523835a90b6883fddcb" prot="public" virt="non-virtual"><scope>mop_t</scope><name>make_number</name></member>
      <member refid="classmop__t_1ab48e49bddc9259e2edddad6eb7b12194" prot="public" virt="non-virtual"><scope>mop_t</scope><name>make_reg</name></member>
      <member refid="classmop__t_1a36aee79d755e891ff8f8b6adf90abf4f" prot="public" virt="non-virtual"><scope>mop_t</scope><name>make_reg</name></member>
      <member refid="classmop__t_1a45a78acc504e21f45a563d54997fb4de" prot="public" virt="non-virtual"><scope>mop_t</scope><name>make_reg_pair</name></member>
      <member refid="classmop__t_1af3febcd45de06eac86fb6df5ed414220" prot="public" virt="non-virtual"><scope>mop_t</scope><name>make_second_half</name></member>
      <member refid="classmop__t_1a557e1d95582a5e7160856497b254240e" prot="public" virt="non-virtual"><scope>mop_t</scope><name>may_use_aliased_memory</name></member>
      <member refid="classmop__t_1aaf6621b8c7aeea31f578cd158b2db688" prot="public" virt="non-virtual"><scope>mop_t</scope><name>mop_t</name></member>
      <member refid="classmop__t_1a7888294971cee693f2fd461413c659bb" prot="public" virt="non-virtual"><scope>mop_t</scope><name>mop_t</name></member>
      <member refid="classmop__t_1ac4023cfa1a0287d74dc7b50f3d02360e" prot="public" virt="non-virtual"><scope>mop_t</scope><name>mop_t</name></member>
      <member refid="classmop__t_1a6911b91ebdbf633064f614b15a2d6a8b" prot="public" virt="non-virtual"><scope>mop_t</scope><name>nnn</name></member>
      <member refid="classmop__t_1a89c69948da2cffe4aa60c21ca41bd71e" prot="public" virt="non-virtual"><scope>mop_t</scope><name>operator!=</name></member>
      <member refid="classmop__t_1a3d4e306d0e48ab98b8997761823ca887" prot="public" virt="non-virtual"><scope>mop_t</scope><name>operator&lt;</name></member>
      <member refid="classmop__t_1a3cf75e25d303d91301f89402e7504ca2" prot="public" virt="non-virtual"><scope>mop_t</scope><name>operator=</name></member>
      <member refid="classmop__t_1ad6ceadaa7176dd9ce1b09163c63ac893" prot="public" virt="non-virtual"><scope>mop_t</scope><name>operator==</name></member>
      <member refid="classmop__t_1a2b7b895f585ef20c8619a27cc1f0d86c" prot="public" virt="non-virtual"><scope>mop_t</scope><name>oprops</name></member>
      <member refid="classmop__t_1ac0974a8f06f60c641dceeffe6017ead5" prot="public" virt="non-virtual"><scope>mop_t</scope><name>pair</name></member>
      <member refid="classmop__t_1ac2c6e87ce5557765465238591214e99f" prot="public" virt="non-virtual"><scope>mop_t</scope><name>preserve_side_effects</name></member>
      <member refid="classmop__t_1a61e58ab91c876ddd81b86f6b8de46cd3" prot="public" virt="non-virtual"><scope>mop_t</scope><name>print</name></member>
      <member refid="classmop__t_1ad426c85f1ad7dae648e4185c36ff1483" prot="public" virt="non-virtual"><scope>mop_t</scope><name>probably_floating</name></member>
      <member refid="classmop__t_1ac12ef82ce56ca86ed79ba993ba987c47" prot="public" virt="non-virtual"><scope>mop_t</scope><name>r</name></member>
      <member refid="classmop__t_1af009e1f551992bff7567a34c92b0f3b6" prot="public" virt="non-virtual"><scope>mop_t</scope><name>s</name></member>
      <member refid="classmop__t_1a75d8c81abb7c6578ca4a77800734cb23" prot="public" virt="non-virtual"><scope>mop_t</scope><name>scif</name></member>
      <member refid="classmop__t_1ac4f624d71631622815f57c8b2a6c6fa2" prot="public" virt="non-virtual"><scope>mop_t</scope><name>set_impptr_done</name></member>
      <member refid="classmop__t_1a69277a73b2bb542e7c0496f4392052f1" prot="public" virt="non-virtual"><scope>mop_t</scope><name>set_udt</name></member>
      <member refid="classmop__t_1ab7192ff0c56c66beded3059abf602984" prot="public" virt="non-virtual"><scope>mop_t</scope><name>set_undef_val</name></member>
      <member refid="classmop__t_1ab6d4afba3ec4490c25c95bc8f5430c5f" prot="public" virt="non-virtual"><scope>mop_t</scope><name>shift_mop</name></member>
      <member refid="classmop__t_1a19acb0c7367cf1c5e7bb7280d698d3fc" prot="public" virt="non-virtual"><scope>mop_t</scope><name>signed_value</name></member>
      <member refid="classmop__t_1a585cd63bfba6c3e163acd1d2d8f76395" prot="public" virt="non-virtual"><scope>mop_t</scope><name>size</name></member>
      <member refid="classmop__t_1aad58bce35dd47583889a34a39f7d93a6" prot="public" virt="non-virtual"><scope>mop_t</scope><name>swap</name></member>
      <member refid="classmop__t_1a385b7b5b046d5fa02cebbda1e76eb2de" prot="public" virt="non-virtual"><scope>mop_t</scope><name>t</name></member>
      <member refid="classmop__t_1adacccbecbe09ca05b0bfb2da8b241dae" prot="public" virt="non-virtual"><scope>mop_t</scope><name>unsigned_value</name></member>
      <member refid="classmop__t_1a52a041c88bfe5e2667a6c247863aed4b" prot="public" virt="non-virtual"><scope>mop_t</scope><name>valnum</name></member>
      <member refid="classmop__t_1a8b47d3797d0b5b25913016296c6fd344" prot="public" virt="non-virtual"><scope>mop_t</scope><name>value</name></member>
      <member refid="classmop__t_1a6e938bfb19e1052ac1311450d6cd2838" prot="public" virt="non-virtual"><scope>mop_t</scope><name>zero</name></member>
      <member refid="classmop__t_1add8e2971658aad449da20ff47ccf722d" prot="public" virt="non-virtual"><scope>mop_t</scope><name>~mop_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
