<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="classtinfo__t" kind="class" language="C++" prot="public">
    <compoundname>tinfo_t</compoundname>
    <includes refid="typeinf_8hpp" local="no">typeinf.hpp</includes>
      <sectiondef kind="user-defined">
      <header>Convenience functions</header>
      <memberdef kind="function" id="classtinfo__t_1aa72f7a017b31ff59075fc783c0762534" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::create_ptr</definition>
        <argsstring>(const tinfo_t &amp;tif, uchar bps=0, type_t decl_type=BT_PTR)</argsstring>
        <name>create_ptr</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>bps</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
          <defval><ref refid="group__tf__ptr_1ga1ea9ae22535f9fb09b2c74f6e7526d4e" kindref="member">BT_PTR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2999" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3566" bodyend="3574"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1afa8a38b2aed3d5725621cd4107e1cc87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::create_array</definition>
        <argsstring>(const tinfo_t &amp;tif, uint32 nelems=0, uint32 base=0, type_t decl_type=BT_ARRAY)</argsstring>
        <name>create_array</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>nelems</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>base</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
          <defval><ref refid="group__tf__array_1ga8c17124d38e796e7cd8804808e4bb5b3" kindref="member">BT_ARRAY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3000" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3576" bodyend="3585"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a79838704f9bd2dedb07727e2bdbed0ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tinfo_t::create_typedef</definition>
        <argsstring>(const til_t *til, const char *name, type_t decl_type=BTF_TYPEDEF, bool try_ordinal=true)</argsstring>
        <name>create_typedef</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
          <defval><ref refid="group__tf__shortcuts_1ga64e49eed2f4e754689e7bcc7f6efdd74" kindref="member">BTF_TYPEDEF</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>try_ordinal</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3001" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3001" bodyend="3001"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a0a4284469cc80e2dd267f2736fc900e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tinfo_t::create_typedef</definition>
        <argsstring>(const til_t *til, uint ord, type_t decl_type=BTF_TYPEDEF)</argsstring>
        <name>create_typedef</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>ord</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
          <defval><ref refid="group__tf__shortcuts_1ga64e49eed2f4e754689e7bcc7f6efdd74" kindref="member">BTF_TYPEDEF</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3002" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3002" bodyend="3002"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a0c67e6873c0d3225fc57a1114a893dd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::create_bitfield</definition>
        <argsstring>(uchar nbytes, uchar width, bool is_unsigned=false, type_t decl_type=BT_BITFIELD)</argsstring>
        <name>create_bitfield</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>width</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_unsigned</declname>
          <defval>false</defval>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
          <defval><ref refid="group__tf__complex_1ga0d1af452c81ac917f9eab9d456f52454" kindref="member">BT_BITFIELD</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3003" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3587" bodyend="3595"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Warning</header>
      <description><para>These functions consume &apos;p&apos; (make it empty) </para></description>
      <memberdef kind="function" id="classtinfo__t_1a820e592715ad2c100174bb5164273485" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::create_udt</definition>
        <argsstring>(udt_type_data_t &amp;p, type_t decl_type)</argsstring>
        <name>create_udt</name>
        <param>
          <type><ref refid="structudt__type__data__t" kindref="compound">udt_type_data_t</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3009" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3009" bodyend="3009"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a5c1038754a7d0ae27c9733cf3be27d4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::create_enum</definition>
        <argsstring>(enum_type_data_t &amp;p, type_t decl_type=BTF_ENUM)</argsstring>
        <name>create_enum</name>
        <param>
          <type><ref refid="structenum__type__data__t" kindref="compound">enum_type_data_t</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
          <defval><ref refid="group__tf__shortcuts_1ga5eee5573060ab34fdee9230f37d8369f" kindref="member">BTF_ENUM</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3010" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3010" bodyend="3010"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a7bb43d328a2b75f030f95cda543580f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::create_func</definition>
        <argsstring>(func_type_data_t &amp;p, type_t decl_type=BT_FUNC)</argsstring>
        <name>create_func</name>
        <param>
          <type><ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
          <defval><ref refid="group__tf__func_1ga7b7fee21f21237beb6d91e854410e0fa" kindref="member">BT_FUNC</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3011" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3011" bodyend="3011"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Store type</header>
      <description><para>Store the type info in the type library as a named or numbered type. The <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> object will be replaced by a reference to the created type. Allowed bits for ntf_flags: <ref refid="group___n_t_f___1ga59f1cf2eee24fa287b41be608cd5c82e" kindref="member">NTF_NOBASE</ref>, <ref refid="group___n_t_f___1ga99d425180386ad9f256f191e88ff1ffe" kindref="member">NTF_REPLACE</ref> </para></description>
      <memberdef kind="function" id="classtinfo__t_1a0f3f0f6661b62e761a527a28ab479f15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__named__types_1ga4b2c98771820db5f78f2e754c97c0aaa" kindref="member">tinfo_code_t</ref></type>
        <definition>tinfo_code_t tinfo_t::set_named_type</definition>
        <argsstring>(til_t *til, const char *name, int ntf_flags=0)</argsstring>
        <name>set_named_type</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ntf_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3019" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3019" bodyend="3019"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a764758f4819b735c7df79928641be214" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__named__types_1ga4b2c98771820db5f78f2e754c97c0aaa" kindref="member">tinfo_code_t</ref></type>
        <definition>tinfo_code_t tinfo_t::set_symbol_type</definition>
        <argsstring>(til_t *til, const char *name, int ntf_flags=0)</argsstring>
        <name>set_symbol_type</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ntf_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3020" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3020" bodyend="3020"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a8e91dbe8b03015175516ad0c3462a0cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__named__types_1ga4b2c98771820db5f78f2e754c97c0aaa" kindref="member">tinfo_code_t</ref></type>
        <definition>tinfo_code_t tinfo_t::set_numbered_type</definition>
        <argsstring>(til_t *til, uint32 ord, int ntf_flags=0, const char *name=NULL)</argsstring>
        <name>set_numbered_type</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>ord</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ntf_flags</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3021" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3021" bodyend="3021"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Bitfields</header>
      <description><para>Helper functions to store/extract bitfield values </para></description>
      <memberdef kind="function" id="classtinfo__t_1a85f92fcab9b4d0a9ec453d256cd52271" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
        <definition>uint64 tinfo_t::read_bitfield_value</definition>
        <argsstring>(uint64 v, int bitoff) const</argsstring>
        <name>read_bitfield_value</name>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitoff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3070" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3070" bodyend="3070"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a5ac4d67948dc18a97fd53447679f2eb8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
        <definition>uint64 tinfo_t::write_bitfield_value</definition>
        <argsstring>(uint64 dst, uint64 v, int bitoff) const</argsstring>
        <name>write_bitfield_value</name>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitoff</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3071" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3071" bodyend="3071"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Modifiers</header>
      <description><para>Work with type modifiers: const and volatile </para></description>
      <memberdef kind="function" id="classtinfo__t_1a119a3bfec44dbd4f7e1f275251b713eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>type_t tinfo_t::get_modifiers</definition>
        <argsstring>(void) const</argsstring>
        <name>get_modifiers</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3077" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3077" bodyend="3077"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a1d32224716addb74e18f826fd39582d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tinfo_t::set_modifiers</definition>
        <argsstring>(type_t mod)</argsstring>
        <name>set_modifiers</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>mod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3078" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3078" bodyend="3078"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a4b99a37eae3326ee35428b8d9e177ad9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tinfo_t::set_const</definition>
        <argsstring>(void)</argsstring>
        <name>set_const</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3079" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3079" bodyend="3079"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a5c02cc5ea5cf634be45d88e12ae70ab7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tinfo_t::set_volatile</definition>
        <argsstring>(void)</argsstring>
        <name>set_volatile</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3080" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3080" bodyend="3080"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1af56b7d0fe4ea528ac2eb1a66a95d1837" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tinfo_t::clr_const</definition>
        <argsstring>(void)</argsstring>
        <name>clr_const</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3081" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3081" bodyend="3081"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a2560bc846f1796718f4658fb96c1b7d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tinfo_t::clr_volatile</definition>
        <argsstring>(void)</argsstring>
        <name>clr_volatile</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3082" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3082" bodyend="3082"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ad6c21a7505878b59404ad216cef4600e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tinfo_t::clr_const_volatile</definition>
        <argsstring>(void)</argsstring>
        <name>clr_const_volatile</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3083" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3083" bodyend="3083"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08" prot="private" static="no">
        <name>gta_prop_t</name>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a6153a731a51a9aab333cc40318cb73f3" prot="private">
          <name>GTA_DECLALIGN</name>
          <briefdescription>
<para>declared alignment </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08ae0f8962fbe0fd877c7b4f7c97b82cdda" prot="private">
          <name>GTA_RESOLVE</name>
          <briefdescription>
<para>real type (fully resolve eventual type references) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08aca068dbd7e63e1e98d9b7e8fc3bea6e5" prot="private">
          <name>GTA_REALTYPE</name>
          <briefdescription>
<para>real type (do not fully resolve type refs) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a7d1156afdcb1d6e19a2cd04ddb0dc34c" prot="private">
          <name>GTA_TYPE_SIGN</name>
          <briefdescription>
<para>get type sign </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a5137ee64cdff1c509b444d80a4f469a8" prot="private">
          <name>GTA_FROM_SUBTIL</name>
          <briefdescription>
<para>is from a subtil (not from main til) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08ad72c7a91f9cf177802e771c5769ad97f" prot="private">
          <name>GTA_IS_FORWARD</name>
          <briefdescription>
<para>is forward declaration? </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a413cb163bc9c5bd37312ca72a0d353f2" prot="private">
          <name>GTA_IS_FUNCPTR</name>
          <briefdescription>
<para>is a pointer to a function? </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a71bebe168b815927939b2f7ea55f4b77" prot="private">
          <name>GTA_ORDINAL</name>
          <briefdescription>
<para>get initial type ordinal </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a6b4975dfef7799dae533f0fc31848f3d" prot="private">
          <name>GTA_FINAL_ORDINAL</name>
          <briefdescription>
<para>get final (resolved) type ordinal </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08aa90b32dfdc00e92b11bc57a9f3152f4c" prot="private">
          <name>GTA_PTR_OBJ</name>
          <briefdescription>
<para>ptr: pointed type </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a38cfe3b373a9d37dae28d0da14531b09" prot="private">
          <name>GTA_SAFE_PTR_OBJ</name>
          <briefdescription>
<para>ptr: pointed type or type itself </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a1962d1959097398ba5f149731a3ccb58" prot="private">
          <name>GTA_ARRAY_ELEM</name>
          <briefdescription>
<para>array: array element </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08af5f593c81abd8b743f5bf11a5dfb0130" prot="private">
          <name>GTA_ARRAY_NELEMS</name>
          <briefdescription>
<para>array: number of elements </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a6251d647528fe64ecd1bea1b38d0ef7f" prot="private">
          <name>GTA_PTRARR_SUBTIF</name>
          <briefdescription>
<para>ptr&amp;array: pointed object or array element (nb: deletes current tif) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a3f9403d66d1ca612d833e737c65dec7a" prot="private">
          <name>GTA_PTRARR_SIZE</name>
          <briefdescription>
<para>ptr&amp;array: get size of subtype </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a97fd0686793cb1a44dcc27310240007f" prot="private">
          <name>GTA_UNPADDED_SIZE</name>
          <briefdescription>
<para>udt: sizeof baseclass when embedded into a derived class </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a003f3d486c114e04ad4c292e3ab4f0c7" prot="private">
          <name>GTA_UDT_NMEMBERS</name>
          <briefdescription>
<para>udt: get number of udt members </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a5701f221c63823e456d4de4c4bb96aad" prot="private">
          <name>GTA_IS_SMALL_UDT</name>
          <briefdescription>
<para>udt: is small udt (can be passed in regs) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a76c2ce9e238f9a30e535c31a76746de5" prot="private">
          <name>GTA_ONEMEM_TYPE</name>
          <briefdescription>
<para>udt&amp;array: object consisting of one member: type of the member </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a526ca2e4f8a7f5fdbc78e8e3fa067d7e" prot="private">
          <name>GTA_ENUM_BASE_TYPE</name>
          <briefdescription>
<para>enum: get enum base type </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08ac58822278b6f5fe114ddc212de09b96a" prot="private">
          <name>GTA_FUNC_CC</name>
          <briefdescription>
<para>func: calling convention </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08ab3992a86b2acf8724f167bb58ab513ae" prot="private">
          <name>GTA_PURGED_BYTES</name>
          <briefdescription>
<para>func: number of purged bytes </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08ad4c67beb8bf4a5bd4cc56f1ed667ffa2" prot="private">
          <name>GTA_IS_HIGH_TYPE</name>
          <briefdescription>
<para>func: is high type </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a1ca63ffc8d577a40c9428a1a814090fa" prot="private">
          <name>GTA_FUNC_NARGS</name>
          <briefdescription>
<para>func: number of arguments </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08acd27e2f63cf3a6231985eb95446bd1b9" prot="private">
          <name>GTA_FUNC_RET</name>
          <briefdescription>
<para>func: get function return type </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a9bc57809bd943a4b376a000ed5579639" prot="private">
          <name>GTA_FUNC_ARG</name>
          <briefdescription>
<para>func: get type of function arg </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08aa460da4824e1733ed389d9c29d986b7b" prot="private">
          <name>GTA_LAST_FUNC_ARG</name>
          <initializer>= GTA_FUNC_ARG + 255</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08addff9ec5014c2b92f41bdf6d581d89dd" prot="private">
          <name>GTA_IS_SSE_TYPE</name>
          <briefdescription>
<para>is a SSE vector type? </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a4291f3445aac4b7997749e0aa43db21b" prot="private">
          <name>GTA_IS_ANON_UDT</name>
          <briefdescription>
<para>is anonymous struct/union? </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a40781981156c2e9c267390b31654e5bb" prot="private">
          <name>GTA_IS_VFTABLE</name>
          <briefdescription>
<para>is vftable? </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08aa12c36c4f68e484efcdd3a7a9f95986c" prot="private">
          <name>GTA_HAS_VFTABLE</name>
          <briefdescription>
<para>has vftable? </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a03ec7dbf54523f560cdd42140486d868" prot="private">
          <name>GTA_IS_SHIFTED_PTR</name>
          <briefdescription>
<para>is a shifted pointer? </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Various type properties (properties are a 32-bit scalar values) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2448" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2447" bodyend="2481"/>
      </memberdef>
      <memberdef kind="enum" id="classtinfo__t_1a2d6b953da5eb43f72ed8f525d8b2316c" prot="private" static="no">
        <name>sta_prop_t</name>
        <enumvalue id="classtinfo__t_1a2d6b953da5eb43f72ed8f525d8b2316ca370ea4efa775462985262f64945d7031" prot="private">
          <name>STA_DECLALIGN</name>
          <briefdescription>
<para>set declared alignment </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1a2d6b953da5eb43f72ed8f525d8b2316ca5afe12d9caf9e34b5d07cc6e5400fd91" prot="private">
          <name>STA_TYPE_SIGN</name>
          <briefdescription>
<para>set type sign </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1a2d6b953da5eb43f72ed8f525d8b2316cae62c67e4e6857d5c0db94ab185efde0c" prot="private">
          <name>STA_UDT_ALIGN</name>
          <briefdescription>
<para>calculate udt field alignments </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>&lt; set type property </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2483" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2482" bodyend="2487"/>
      </memberdef>
      <memberdef kind="enum" id="classtinfo__t_1aeda55be6cb64c5e7462b419b4c55c7fe" prot="private" static="no">
        <name>gta_pdata_t</name>
        <enumvalue id="classtinfo__t_1aeda55be6cb64c5e7462b419b4c55c7fea8b07fe87b9b0ba1eb85994c9fba03cf7" prot="private">
          <name>GTP_NAME</name>
          <briefdescription>
<para>get referenced name </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1aeda55be6cb64c5e7462b419b4c55c7fea7eaac6f531f11b9149a97b27ea5a89a1" prot="private">
          <name>GTP_NEXT_NAME</name>
          <briefdescription>
<para>get immediately next referenced name </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1aeda55be6cb64c5e7462b419b4c55c7feafe99ea165084060dd84ee098f24fabf5" prot="private">
          <name>GTP_FINAL_NAME</name>
          <briefdescription>
<para>get final referenced name </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classtinfo__t_1aeda55be6cb64c5e7462b419b4c55c7fea10dc2846eee0a6a2d51cffdd9183c9f7" prot="private">
          <name>GTP_TIL</name>
          <briefdescription>
<para>get type library </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>&lt; get info returned by pointer </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2489" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2488" bodyend="2494"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtinfo__t_1a9a9c065864737e982ce4e76affb7fa36" prot="private" static="no" mutable="no">
        <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
        <definition>uint32 tinfo_t::typid</definition>
        <argsstring></argsstring>
        <name>typid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2432" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2432" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classtinfo__t_1a4c01dbfdf500bee5e04900a0faba7ae8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend struct</type>
        <definition>friend struct type_detail_t</definition>
        <argsstring></argsstring>
        <name>type_detail_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2444" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classtinfo__t_1a4a197fc9ead77f71f0286b2be85e29fa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref></type>
        <definition>tinfo_t remove_pointer</definition>
        <argsstring>(const tinfo_t &amp;tif)</argsstring>
        <name>remove_pointer</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group__tf__ptr_1ga1ea9ae22535f9fb09b2c74f6e7526d4e" kindref="member">BT_PTR</ref>: If the current type is a pointer, return the pointed object. If the current type is not a pointer, return the current type. See also <ref refid="classtinfo__t_1a30393574bb98a6fe7b40b19a7010a341" kindref="member">get_ptrarr_object()</ref> and <ref refid="classtinfo__t_1a27ace9ee1f42d9830303ae37f893e658" kindref="member">get_pointed_object()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2445" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3614" bodyend="3619"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtinfo__t_1a85ca3985be1260de14403c8f32a3e99e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::create_type</definition>
        <argsstring>(type_t decl_type, type_t bt2, void *details)</argsstring>
        <name>create_type</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>bt2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>details</declname>
        </param>
        <briefdescription>
<para>byte sequence describing the type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2433" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2433" bodyend="2436"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a19c075829998b86ba32e4945105519b4" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::get_type_details</definition>
        <argsstring>(type_t bt2, void *buf) const</argsstring>
        <name>get_type_details</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>bt2</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the type details. The information is copied to the user-supplied buffer. Also check out convenience functions below (get_ptr_details, etc), they work faster because they do not copy the entire type info but only the desired part of it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2441" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2441" bodyend="2441"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a88ad7e9535d1e7ccfeb1e7c7bb6521e7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tinfo_t::copy</definition>
        <argsstring>(const tinfo_t &amp;r)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2442" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2442" bodyend="2442"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtinfo__t_1aa0bd0a48b0a992cc308b11a6836e9668" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tinfo_t::tinfo_t</definition>
        <argsstring>()</argsstring>
        <name>tinfo_t</name>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2498" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2498" bodyend="2498"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a4bd009928d01fa7658e06d2a49572500" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tinfo_t::tinfo_t</definition>
        <argsstring>(type_t decl_type)</argsstring>
        <name>tinfo_t</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
        </param>
        <briefdescription>
<para>Constructor - can only be used to initialize simple types! </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2500" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2500" bodyend="2500"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a3b4a30ae71d54304d7cbe80d3384b73f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tinfo_t::tinfo_t</definition>
        <argsstring>(const tinfo_t &amp;r)</argsstring>
        <name>tinfo_t</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2502" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2502" bodyend="2502"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a96d468cf7ca30f4496add128133de334" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
        <definition>tinfo_t&amp; tinfo_t::operator=</definition>
        <argsstring>(const tinfo_t &amp;r)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Copy contents of given tinfo into this one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2504" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2504" bodyend="2504"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a80e99c7d5c6d03b6e4c9eba7c5b4f490" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tinfo_t::~tinfo_t</definition>
        <argsstring>(void)</argsstring>
        <name>~tinfo_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2506" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2506" bodyend="2506"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a2870999077263051967bb654149e092f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tinfo_t::clear</definition>
        <argsstring>(void)</argsstring>
        <name>clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear contents of this tinfo, and remove from the type system. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2508" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2508" bodyend="2508"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1abd4e021d8c7e2ecea89b869d8a842576" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tinfo_t::swap</definition>
        <argsstring>(tinfo_t &amp;r)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Assign this = r and r = this. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2510" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2510" bodyend="2510"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a8d412272832b545ffdf4019e736ff7b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::get_named_type</definition>
        <argsstring>(const til_t *til, const char *name, type_t decl_type=BTF_TYPEDEF, bool resolve=true, bool try_ordinal=true)</argsstring>
        <name>get_named_type</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
          <defval><ref refid="group__tf__shortcuts_1ga64e49eed2f4e754689e7bcc7f6efdd74" kindref="member">BTF_TYPEDEF</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>resolve</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>try_ordinal</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> object for an existing named type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>til</parametername>
</parameternamelist>
<parameterdescription>
<para>type library to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the type to link to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decl_type</parametername>
</parameternamelist>
<parameterdescription>
<para>if the reference was explicitly specified with the type tag <linebreak/>
 (<ref refid="group__tf__shortcuts_1ga861f45bbf58b9d699897e234b0905009" kindref="member">BTF_STRUCT</ref>/<ref refid="group__tf__shortcuts_1ga0a5536b8782826bb2b925fc65c49788c" kindref="member">BTF_UNION</ref>/<ref refid="group__tf__shortcuts_1ga5eee5573060ab34fdee9230f37d8369f" kindref="member">BTF_ENUM</ref>) you may specify it. <linebreak/>
 the kernel will accept only the specified tag after resolving <linebreak/>
 the type. If the resolved type does not correspond to the <linebreak/>
 explicitly specified tag, the type will be considered as undefined <linebreak/>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolve</parametername>
</parameternamelist>
<parameterdescription>
<para>true: immediately resolve the type and return success code. false: return true but do not immediately resolve the type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>try_ordinal</parametername>
</parameternamelist>
<parameterdescription>
<para>true: try to replace name reference by an ordinal reference </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2524" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3545" bodyend="3554"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a86a0edf6c7baed76c657aee40e431572" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::get_numbered_type</definition>
        <argsstring>(const til_t *til, uint32 ordinal, type_t decl_type=BTF_TYPEDEF, bool resolve=true)</argsstring>
        <name>get_numbered_type</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>ordinal</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
          <defval><ref refid="group__tf__shortcuts_1ga64e49eed2f4e754689e7bcc7f6efdd74" kindref="member">BTF_TYPEDEF</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>resolve</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> object for an existing ordinal type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>til</parametername>
</parameternamelist>
<parameterdescription>
<para>type library to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ordinal</parametername>
</parameternamelist>
<parameterdescription>
<para>number of the type to link to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decl_type</parametername>
</parameternamelist>
<parameterdescription>
<para>if the reference was explicitly specified with the type tag (BTF_STRUCT/BTF_UNION/BTF_ENUM) you may specify it. the kernel will accept only the specified tag after resolving the type. If the resolved type does not correspond to the explicitly specified tag, the type will be considered as undefined </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolve</parametername>
</parameternamelist>
<parameterdescription>
<para>true: immediately resolve the type and return success code false: return true but do not immediately resolve the type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2541" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3556" bodyend="3564"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1aad9f22f20f6a5d73cb5ac7932ef4b120" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::serialize</definition>
        <argsstring>(qtype *type, qtype *fields=NULL, qtype *fldcmts=NULL, int sudt_flags=SUDT_FAST|SUDT_TRUNC) const</argsstring>
        <name>serialize</name>
        <param>
          <type><ref refid="pro_8h_1a7fad0f3973de5825c480e27517e159f3" kindref="member">qtype</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a7fad0f3973de5825c480e27517e159f3" kindref="member">qtype</ref> *</type>
          <declname>fields</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="pro_8h_1a7fad0f3973de5825c480e27517e159f3" kindref="member">qtype</ref> *</type>
          <declname>fldcmts</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>int</type>
          <declname>sudt_flags</declname>
          <defval><ref refid="group___s_u_d_t___1gaeaa511ce041efaeb0ce9659fcb35b7a7" kindref="member">SUDT_FAST</ref>|<ref refid="group___s_u_d_t___1ga1e082c951f7e37bafdf409d66aa785a2" kindref="member">SUDT_TRUNC</ref></defval>
        </param>
        <briefdescription>
<para>Serialize <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> object into a type string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2548" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2548" bodyend="2555"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a380c6dc7c423cca6cad0adbc27dfeccd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::deserialize</definition>
        <argsstring>(const til_t *til, const type_t **ptype, const p_list **pfields=NULL, const p_list **pfldcmts=NULL)</argsstring>
        <name>deserialize</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> **</type>
          <declname>ptype</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a828c7e985f83b1e74eb4ea7b716abfb1" kindref="member">p_list</ref> **</type>
          <declname>pfields</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a828c7e985f83b1e74eb4ea7b716abfb1" kindref="member">p_list</ref> **</type>
          <declname>pfldcmts</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Deserialize a type string into a <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2558" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2558" bodyend="2565"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a0bc913b2fce03d59b0ce3e1a2dfa07ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::deserialize</definition>
        <argsstring>(const til_t *til, const qtype *ptype, const qtype *pfields=NULL, const qtype *pfldcmts=NULL)</argsstring>
        <name>deserialize</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1a7fad0f3973de5825c480e27517e159f3" kindref="member">qtype</ref> *</type>
          <declname>ptype</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1a7fad0f3973de5825c480e27517e159f3" kindref="member">qtype</ref> *</type>
          <declname>pfields</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1a7fad0f3973de5825c480e27517e159f3" kindref="member">qtype</ref> *</type>
          <declname>pfldcmts</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Deserialize a type string into a <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2567" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2567" bodyend="2577"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a56b30d1b5579cad57880ad1f2c9ce113" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_correct</definition>
        <argsstring>(void) const</argsstring>
        <name>is_correct</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the type object correct?. It is possible to create incorrect types. For example, we can define a function that returns a enum and then delete the enum type. If this function returns false, the type should not be used in disassembly. Please note that this function does not verify all involved types: for example, pointers to undefined types are permitted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2585" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2585" bodyend="2585"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ab99bc1b32bf0a592bfc225a7b88c4b73" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>type_t tinfo_t::get_realtype</definition>
        <argsstring>(bool full=false) const</argsstring>
        <name>get_realtype</name>
        <param>
          <type>bool</type>
          <declname>full</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the resolved base type. Deserialization options:<itemizedlist>
<listitem><para>if full=true, the referenced type will be deserialized fully, this may not always be desirable (slows down things)</para></listitem><listitem><para>if full=false, we just return the base type, the referenced type will be resolved again later if necessary (this may lead to multiple resolvings of the same type) imho full=false is a better approach because it does not perform unnecessary actions just in case. however, in some cases the caller knows that it is very likely that full type info will be required. in those cases full=true makes sense </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2598" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2598" bodyend="2598"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a59bf80df3e57871713632c9b5ff745c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>THREAD_SAFE type_t tinfo_t::get_decltype</definition>
        <argsstring>(void) const</argsstring>
        <name>get_decltype</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get declared type (without resolving type references; they are returned as is). Obviously this is a very fast function and should be used instead of <ref refid="classtinfo__t_1ab99bc1b32bf0a592bfc225a7b88c4b73" kindref="member">get_realtype()</ref> if possible. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2603" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2603" bodyend="2603"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a88950d2840d9bd5f72eeca26fcbbec6f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::empty</definition>
        <argsstring>(void) const</argsstring>
        <name>empty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Was <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> initialized with some type info or not? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2606" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2606" bodyend="2606"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a542e05bf16d69bdfe0db9884cb30da73" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::present</definition>
        <argsstring>(void) const</argsstring>
        <name>present</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is the type really present? (not a reference to a missing type, for example) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2609" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2609" bodyend="2609"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a1e63dd36d62f43a09f5dff9195ee1cdb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tinfo_t::get_size</definition>
        <argsstring>(uint32 *p_effalign=NULL, int gts_code=0) const</argsstring>
        <name>get_size</name>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> *</type>
          <declname>p_effalign</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>int</type>
          <declname>gts_code</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the type size in bytes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p_effalign</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the alignment value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gts_code</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of GTS_... constants </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="typeinf_8hpp_1a8dfbf55f283e8e1deaf195dc2576f63d" kindref="member">BADSIZE</ref> in case of problems </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2615" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2615" bodyend="2615"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1aa9d1baa1f44a75096b036601da9529b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tinfo_t::get_unpadded_size</definition>
        <argsstring>(void) const</argsstring>
        <name>get_unpadded_size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the type size in bytes without the final padding, in bytes. For some UDTs <ref refid="classtinfo__t_1aa9d1baa1f44a75096b036601da9529b7" kindref="member">get_unpadded_size()</ref> != <ref refid="classtinfo__t_1a1e63dd36d62f43a09f5dff9195ee1cdb" kindref="member">get_size()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2619" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2619" bodyend="2619"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ab0daa9d2c8cc65aef1fcbf195f9ee0bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__tattr__ext_1ga91970b0d779fe968b3b22572526048a0" kindref="member">type_sign_t</ref></type>
        <definition>type_sign_t tinfo_t::get_sign</definition>
        <argsstring>(void) const</argsstring>
        <name>get_sign</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get type sign. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2622" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2622" bodyend="2622"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1afb961fea0bb2830a0605ac3f1f1838a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_signed</definition>
        <argsstring>(void) const</argsstring>
        <name>is_signed</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is this a signed type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2625" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2625" bodyend="2625"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a50639a0b8a77f0dfd9f2f92dc6cf97a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_unsigned</definition>
        <argsstring>(void) const</argsstring>
        <name>is_unsigned</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is this an unsigned type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2628" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2628" bodyend="2628"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1aa126850ffadbc8bc93af74a683ab796b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
        <definition>uchar tinfo_t::get_declalign</definition>
        <argsstring>(void) const</argsstring>
        <name>get_declalign</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get declared alignment of the type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2631" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2631" bodyend="2631"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a50abfc9c0a7dcbaa6f398f7ece0c172d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::set_declalign</definition>
        <argsstring>(uchar declalign)</argsstring>
        <name>set_declalign</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>declalign</declname>
        </param>
        <briefdescription>
<para>Set declared alignment of the type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2634" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2634" bodyend="2634"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ad3072a295dee85946f091ee7610782da" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_typeref</definition>
        <argsstring>(void) const</argsstring>
        <name>is_typeref</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is this type a type reference?. Type references can not be modified. Once created, they do not change. Because of this, the set_... functions applied to typerefs create a new type id. Other types are modified directly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2640" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2640" bodyend="2640"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a9295552662095c235692f984acaacc84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::has_details</definition>
        <argsstring>(void) const</argsstring>
        <name>has_details</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Does this type refer to a nontrivial type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2643" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2643" bodyend="2643"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a19ee359cd5e9d7864b318a461816c139" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::get_type_name</definition>
        <argsstring>(qstring *out) const</argsstring>
        <name>get_type_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does a type refer to a name?. If yes, fill the provided buffer with the type name and return true. Names are returned for numbered types too: either a user-defined nice name or, if a user-provided name does not exist, an ordinal name (like #xx, see <ref refid="group__numbered__types_1gab5ed1d69ef90da349923a780f84f851a" kindref="member">create_numbered_type_name()</ref>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2650" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2650" bodyend="2650"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a9bb121c70564c4712a4baa1fdab2d634" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::get_final_type_name</definition>
        <argsstring>(qstring *out) const</argsstring>
        <name>get_final_type_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use in the case of typedef chain (TYPE1 -&gt; TYPE2 -&gt; TYPE3...TYPEn). <simplesect kind="return"><para>the name of the last type in the chain (TYPEn). if there is no chain, returns TYPE1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2655" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2655" bodyend="2655"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1acfd5db4ced3ce84e99c78f51b2eb53d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::get_next_type_name</definition>
        <argsstring>(qstring *out) const</argsstring>
        <name>get_next_type_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use In the case of typedef chain (TYPE1 -&gt; TYPE2 -&gt; TYPE3...TYPEn). <simplesect kind="return"><para>the name of the next type in the chain (TYPE2). if there is no chain, returns failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2660" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2660" bodyend="2660"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1afdb2f678553aff6b89276c52b9668aa5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
        <definition>uint32 tinfo_t::get_ordinal</definition>
        <argsstring>(void) const</argsstring>
        <name>get_ordinal</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get type ordinal (only if the type was created as a numbered type, 0 if none) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2663" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2663" bodyend="2663"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a982c6575d7311cf5a0332dd12d2928b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
        <definition>uint32 tinfo_t::get_final_ordinal</definition>
        <argsstring>(void) const</argsstring>
        <name>get_final_ordinal</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get final type ordinal (0 is none) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2666" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2666" bodyend="2666"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1af50bae4e74ddbc2f70a19d9f20a45770" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
        <definition>const til_t* tinfo_t::get_til</definition>
        <argsstring>(void) const</argsstring>
        <name>get_til</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the type library for <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2669" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2669" bodyend="2669"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a9d2d1067920c61f09389b437a675c027" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_from_subtil</definition>
        <argsstring>(void) const</argsstring>
        <name>is_from_subtil</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Was the named type found in some base type library (not the top level type library)?. If yes, it usually means that the type comes from some loaded type library, not the local type library for the database </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2674" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2674" bodyend="2674"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1aee512aaa1c8e27457ec295b83c6430bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_forward_decl</definition>
        <argsstring>(void) const</argsstring>
        <name>is_forward_decl</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is this a forward declaration?. Forward declarations are placeholders: the type definition does not exist </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2678" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2678" bodyend="2678"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a1c318db9344da62eec4b11ea91af1a62" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_const</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_const</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_const} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2680" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2680" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a9b3ed8e22cbbff525fd5b32f058d9de8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_volatile</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_volatile</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_volatile} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2681" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2681" bodyend="2680"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1adb87910f701546804de62ab515b50c22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_void</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_void</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_void} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2682" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2682" bodyend="2681"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a51a53ea074fb89289574e554aab106c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_partial</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_partial</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_partial} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2683" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2683" bodyend="2682"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a337a154f8ee0b493941561fb99078979" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_unknown</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_unknown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_unknown} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2684" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2684" bodyend="2683"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a5b1b8e73a456b9ea989d122340025867" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_last</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_last</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_typeid_last} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2685" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2685" bodyend="2684"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a075a6d6e5674d8fb8e067d75db59e8e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_ptr</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_ptr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_ptr} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2686" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2686" bodyend="2685"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a54046fd25d73da259e68e7c91295917a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_array</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_array</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_array} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2687" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2687" bodyend="2686"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a3f983d0659ecd92f370ce5512df01b97" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_func</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_func</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_func} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2688" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2688" bodyend="2687"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ab20572c6c0e3ba1eb827f7a64cb0dc2a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_complex</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_complex</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_complex} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2689" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2689" bodyend="2688"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a2d8371541a4ac0eb9f6bb5b7f4d7abee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_typedef</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_typedef</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_typedef} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2690" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2690" bodyend="2689"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a70d273a0f49c5494825ca1b533a2367c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_sue</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_sue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_sue} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2691" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2691" bodyend="2690"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1af2dda5441983ab51c7785c4acad604bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_struct</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_struct</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_struct} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2692" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2692" bodyend="2691"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1adfa3e9b4e7bc89a501faf6767ef24756" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_union</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_union</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_union} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2693" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2693" bodyend="2692"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a286b910e6f48914caf8ed8fad17649dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_udt</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_udt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_struni} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2694" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2694" bodyend="2693"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1af56dde9ecec02f8e0466814504b9d5af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_enum</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_enum</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_enum} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2695" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2695" bodyend="2694"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a998c0ad23a0d671f10147d3d4d6ae790" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_bitfield</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_bitfield</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_bitfld} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2696" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2696" bodyend="2695"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1aea05a74f29494f5bd886d74e64979274" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_int128</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_int128</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_int128} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2697" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2697" bodyend="2696"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ae69295a4b63221ead045e59a72850fad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_int64</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_int64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_int64} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2698" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2698" bodyend="2697"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a37931dac7fba4c8ebd20bb11f70ae2f3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_int32</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_int32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_int32} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2699" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2699" bodyend="2698"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a3705c84d9539a25f44513e82156126dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_int16</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_int16</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_int16} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2700" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2700" bodyend="2699"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a34581f2ce1994de633be2b380483f79c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_int</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_int</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_int} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2701" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2701" bodyend="2700"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ab842cd5ac1fda16f7b01995c64fc1651" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_char</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_char</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_char} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2702" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2702" bodyend="2701"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1adb39c42d5940f18c204e18025f4dc0de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_uint</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_uint</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_uint} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2703" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2703" bodyend="2702"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a69350262c60de5a692f7a0e7458930a0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_uchar</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_uchar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_uchar} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2704" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2704" bodyend="2703"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a51c743c30a957814c52a356b681111c8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_uint16</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_uint16</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_uint16} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2705" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2705" bodyend="2704"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a1bb2219f8d785c75efb6537ab0f1467b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_uint32</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_uint32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_uint32} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2706" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2706" bodyend="2705"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a901bde280ff5e6dd4183deadac7e4f7b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_uint64</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_uint64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_uint64} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2707" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2707" bodyend="2706"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a16842b97bfc6566d67b347d38001e045" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_uint128</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_uint128</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_uint128} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2708" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2708" bodyend="2707"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a77290f3eab720f9460005103baa69634" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_ldouble</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_ldouble</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_ldouble} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2709" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2709" bodyend="2708"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a39c5a11fd97a9914e7942a58089eb2b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_double</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_double</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_double} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2710" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2710" bodyend="2709"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1abd273377be4de8ae4266ca1cb8df15d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_float</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_float</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_float} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2711" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2711" bodyend="2710"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a9fd910cc979fc94d08c93c16bdc8e8af" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_tbyte</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_tbyte</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_tbyte} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2712" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2712" bodyend="2711"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a5d870af0c6908a108544ac7e381f083a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_floating</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_floating</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_floating} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2713" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2713" bodyend="2712"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1af2fdc1cec9aa8fefcafacec245feaed5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_bool</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_bool</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_bool} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2714" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2714" bodyend="2713"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a6cea98000cf3ac102352768c350838bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_decl_paf</definition>
        <argsstring>(void) const</argsstring>
        <name>is_decl_paf</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_paf} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2715" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2715" bodyend="2714"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a1513a737204dbdb8ccefa711255038d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool tinfo_t::is_well_defined</definition>
        <argsstring>(void) const</argsstring>
        <name>is_well_defined</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>!(<ref refid="classtinfo__t_1a88950d2840d9bd5f72eeca26fcbbec6f" kindref="member">empty()</ref>) &amp;&amp; !(<ref refid="classtinfo__t_1a51a53ea074fb89289574e554aab106c8" kindref="member">is_decl_partial()</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2716" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2716" bodyend="2715"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a3a27b702661ae1809de17a4a1589506f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_const</definition>
        <argsstring>(void) const</argsstring>
        <name>is_const</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_const} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2719" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2719" bodyend="2716"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a1b93308cdfa43448fa3edfabab25641b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_volatile</definition>
        <argsstring>(void) const</argsstring>
        <name>is_volatile</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_volatile} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2720" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2720" bodyend="2719"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1afd89d1a760682923a646d9e979c30a1d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_void</definition>
        <argsstring>(void) const</argsstring>
        <name>is_void</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_void} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2721" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2721" bodyend="2720"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a93f4d3142ea3fd139cf11da309097b66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_partial</definition>
        <argsstring>(void) const</argsstring>
        <name>is_partial</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_partial} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2722" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2722" bodyend="2721"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ad3f2295d219eabe4e4d53f7eb23d9872" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_unknown</definition>
        <argsstring>(void) const</argsstring>
        <name>is_unknown</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_unknown} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2723" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2723" bodyend="2722"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a97e777c64021a9c5c54d1fb53bcf1f2a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_ptr</definition>
        <argsstring>(void) const</argsstring>
        <name>is_ptr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_ptr} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2724" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2724" bodyend="2723"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a04f10221c18eb49bde950518ab5e9781" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_array</definition>
        <argsstring>(void) const</argsstring>
        <name>is_array</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_array} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2725" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2725" bodyend="2724"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ac45aa42fc3f7199e830986363c35cc5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_func</definition>
        <argsstring>(void) const</argsstring>
        <name>is_func</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_func} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2726" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2726" bodyend="2725"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1aa684c425f67ed094e1758eb1926a076b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_complex</definition>
        <argsstring>(void) const</argsstring>
        <name>is_complex</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_complex} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2727" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2727" bodyend="2726"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a1dcc9f3fca9aa39429ba8b5bbeb380b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_struct</definition>
        <argsstring>(void) const</argsstring>
        <name>is_struct</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_struct} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2728" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2728" bodyend="2727"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a928d69fc10fbdfe724d8c2b8aeffa35a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_union</definition>
        <argsstring>(void) const</argsstring>
        <name>is_union</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_union} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2729" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2729" bodyend="2728"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ab4d2d47fc2add288aa83388487dee321" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_udt</definition>
        <argsstring>(void) const</argsstring>
        <name>is_udt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_struni} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2730" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2730" bodyend="2729"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a80252b82075ad12d0d43d355645056f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_enum</definition>
        <argsstring>(void) const</argsstring>
        <name>is_enum</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_enum} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2731" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2731" bodyend="2730"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a4047f2880c8abb7023fa02516aa26305" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_sue</definition>
        <argsstring>(void) const</argsstring>
        <name>is_sue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_sue} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2732" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2732" bodyend="2731"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1aeb15764edfaf88025eb3eb3c7b335f23" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_bitfield</definition>
        <argsstring>(void) const</argsstring>
        <name>is_bitfield</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_bitfld} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2733" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2733" bodyend="2732"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a145a015f25dc01ed13b6fd1457d79835" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_int128</definition>
        <argsstring>(void) const</argsstring>
        <name>is_int128</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_int128} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2734" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2734" bodyend="2733"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1aba983de7d9140dd90d2bd37f66e08a78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_int64</definition>
        <argsstring>(void) const</argsstring>
        <name>is_int64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_int64} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2735" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2735" bodyend="2734"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a2393bc5dd2b63f923bd466302bee0d10" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_int32</definition>
        <argsstring>(void) const</argsstring>
        <name>is_int32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_int32} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2736" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2736" bodyend="2735"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ae90abb340d5ae76620824371e67c7fc5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_int16</definition>
        <argsstring>(void) const</argsstring>
        <name>is_int16</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_int16} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2737" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2737" bodyend="2736"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a00b8c572b6f57dec9e6a8f02d92b6c5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_int</definition>
        <argsstring>(void) const</argsstring>
        <name>is_int</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_int} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2738" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2738" bodyend="2737"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1affafd80efae83c75b46f93bdcd8bc5fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_char</definition>
        <argsstring>(void) const</argsstring>
        <name>is_char</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_char} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2739" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2739" bodyend="2738"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a6e76e4bfe5f1030b9149d89b6bb25392" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_uint</definition>
        <argsstring>(void) const</argsstring>
        <name>is_uint</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_uint} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2740" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2740" bodyend="2739"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a297de803c16ee0bb363b3a4fcdf221c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_uchar</definition>
        <argsstring>(void) const</argsstring>
        <name>is_uchar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_uchar} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2741" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2741" bodyend="2740"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a4fb48936f6b58a80adfd4fdc0c2dccb3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_uint16</definition>
        <argsstring>(void) const</argsstring>
        <name>is_uint16</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_uint16} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2742" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2742" bodyend="2741"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a53546801790a40b1e00ddb690e6bca24" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_uint32</definition>
        <argsstring>(void) const</argsstring>
        <name>is_uint32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_uint32} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2743" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2743" bodyend="2742"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1acec21009629e5b1eeef5558c5c053cd4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_uint64</definition>
        <argsstring>(void) const</argsstring>
        <name>is_uint64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_uint64} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2744" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2744" bodyend="2743"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a754bed2677da07f7da13103bad4b64d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_uint128</definition>
        <argsstring>(void) const</argsstring>
        <name>is_uint128</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_uint128} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2745" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2745" bodyend="2744"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ac85ebecb42e6952591f1daa46a8bc3df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_ldouble</definition>
        <argsstring>(void) const</argsstring>
        <name>is_ldouble</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_ldouble} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2746" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2746" bodyend="2745"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a1fb6794fe37a1fe97b8a02e103000ab4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_double</definition>
        <argsstring>(void) const</argsstring>
        <name>is_double</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_double} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2747" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2747" bodyend="2746"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a325eef3fa047a82f4c42e31ebbf07b23" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_float</definition>
        <argsstring>(void) const</argsstring>
        <name>is_float</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_float} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2748" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2748" bodyend="2747"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a647acc49c3b0e68726e554ebb4230fea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_tbyte</definition>
        <argsstring>(void) const</argsstring>
        <name>is_tbyte</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_tbyte} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2749" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2749" bodyend="2748"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ae716de421f3a45f355e698b6a938e32a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_bool</definition>
        <argsstring>(void) const</argsstring>
        <name>is_bool</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_bool} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2750" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2750" bodyend="2749"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a8907e2f174b0aac376cf5f1ef9e282f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_paf</definition>
        <argsstring>(void) const</argsstring>
        <name>is_paf</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_paf} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2751" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2751" bodyend="2750"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a175c59ec932fd7994e4fae1efab53da1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_ptr_or_array</definition>
        <argsstring>(void) const</argsstring>
        <name>is_ptr_or_array</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_ptr_or_array} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2752" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2752" bodyend="2751"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a33742def137ee03773fb5f8f6213c53a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_integral</definition>
        <argsstring>(void) const</argsstring>
        <name>is_integral</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_integral} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2753" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2753" bodyend="2752"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a29ee25b0b7e2ba23282fff1b1a316608" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_ext_integral</definition>
        <argsstring>(void) const</argsstring>
        <name>is_ext_integral</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_ext_integral} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2754" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2754" bodyend="2753"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a565fff3dc24e185a392dd98e724d084a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_floating</definition>
        <argsstring>(void) const</argsstring>
        <name>is_floating</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_floating} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2755" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2755" bodyend="2754"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1aee6906b41747f6dc4bdfec07020431f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_arithmetic</definition>
        <argsstring>(void) const</argsstring>
        <name>is_arithmetic</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_type_arithmetic} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2756" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2756" bodyend="2755"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ac868a02f00e3a4fcc98907574387bd45" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_ext_arithmetic</definition>
        <argsstring>(void) const</argsstring>
        <name>is_ext_arithmetic</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>{is_type_ext_arithmetic} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2757" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2757" bodyend="2756"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a9df8fb856f77cc15f97df651e8d21afe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_scalar</definition>
        <argsstring>(void) const</argsstring>
        <name>is_scalar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Does the type represent a single number? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2759" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2759" bodyend="2759"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a5e4c70cdadcbc8f14d8d91444f75e95d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::get_ptr_details</definition>
        <argsstring>(ptr_type_data_t *pi) const</argsstring>
        <name>get_ptr_details</name>
        <param>
          <type><ref refid="structptr__type__data__t" kindref="compound">ptr_type_data_t</ref> *</type>
          <declname>pi</declname>
        </param>
        <briefdescription>
<para>Get the pointer info. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2762" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2762" bodyend="2765"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a0a918da4bbf7aec65717812fdf697609" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::get_array_details</definition>
        <argsstring>(array_type_data_t *ai) const</argsstring>
        <name>get_array_details</name>
        <param>
          <type><ref refid="structarray__type__data__t" kindref="compound">array_type_data_t</ref> *</type>
          <declname>ai</declname>
        </param>
        <briefdescription>
<para>Get the array specific info. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2768" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2768" bodyend="2771"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a22c28682b2e16f80556083729baf6784" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::get_enum_details</definition>
        <argsstring>(enum_type_data_t *ei) const</argsstring>
        <name>get_enum_details</name>
        <param>
          <type><ref refid="structenum__type__data__t" kindref="compound">enum_type_data_t</ref> *</type>
          <declname>ei</declname>
        </param>
        <briefdescription>
<para>Get the enum specific info. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2774" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2774" bodyend="2777"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ad2e073cee94ccb0ed8b2e98db467ed8f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::get_bitfield_details</definition>
        <argsstring>(bitfield_type_data_t *bi) const</argsstring>
        <name>get_bitfield_details</name>
        <param>
          <type><ref refid="structbitfield__type__data__t" kindref="compound">bitfield_type_data_t</ref> *</type>
          <declname>bi</declname>
        </param>
        <briefdescription>
<para>Get the bitfield specific info. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2780" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2780" bodyend="2783"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a573d7effeb0a38326f7e4e7d8d94658e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::get_udt_details</definition>
        <argsstring>(udt_type_data_t *udt, gtd_udt_t gtd=GTD_CALC_LAYOUT) const</argsstring>
        <name>get_udt_details</name>
        <param>
          <type><ref refid="structudt__type__data__t" kindref="compound">udt_type_data_t</ref> *</type>
          <declname>udt</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a6a3b7b00fcc1f35943355ff4a59ee27b" kindref="member">gtd_udt_t</ref></type>
          <declname>gtd</declname>
          <defval><ref refid="typeinf_8hpp_1a6a3b7b00fcc1f35943355ff4a59ee27ba1c0801cf7075c0d784cf8d66c608160c" kindref="member">GTD_CALC_LAYOUT</ref></defval>
        </param>
        <briefdescription>
<para>Get the udt specific info. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2786" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2786" bodyend="2789"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1adfb1d3f3412255927be1249a0324cbf6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::get_func_details</definition>
        <argsstring>(func_type_data_t *fi, gtd_func_t gtd=GTD_CALC_ARGLOCS) const</argsstring>
        <name>get_func_details</name>
        <param>
          <type><ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> *</type>
          <declname>fi</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1ab7f0a2e39ac376a1f6e903e970e527c9" kindref="member">gtd_func_t</ref></type>
          <declname>gtd</declname>
          <defval><ref refid="typeinf_8hpp_1ab7f0a2e39ac376a1f6e903e970e527c9a5bd1413dc6a22cf8e0b2d924da8db70b" kindref="member">GTD_CALC_ARGLOCS</ref></defval>
        </param>
        <briefdescription>
<para>Get only the function specific info for this <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2792" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2792" bodyend="2795"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a3f3e4d271bb779dd9e9d9242cfdd3af7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_funcptr</definition>
        <argsstring>(void) const</argsstring>
        <name>is_funcptr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is this pointer to a function? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2798" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2798" bodyend="2798"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ad074666e280a9b682f3647e38e9d1df2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_shifted_ptr</definition>
        <argsstring>(void) const</argsstring>
        <name>is_shifted_ptr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is a shifted pointer? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2801" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2801" bodyend="2801"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a4f68bc3464612cc584136f54e9ab3666" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tinfo_t::get_ptrarr_objsize</definition>
        <argsstring>(void) const</argsstring>
        <name>get_ptrarr_objsize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group__tf__ptr_1ga1ea9ae22535f9fb09b2c74f6e7526d4e" kindref="member">BT_PTR</ref> &amp; <ref refid="group__tf__array_1ga8c17124d38e796e7cd8804808e4bb5b3" kindref="member">BT_ARRAY</ref>: get size of pointed object or array element. On error returns -1 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2804" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2804" bodyend="2804"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a30393574bb98a6fe7b40b19a7010a341" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref></type>
        <definition>tinfo_t tinfo_t::get_ptrarr_object</definition>
        <argsstring>(void) const</argsstring>
        <name>get_ptrarr_object</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group__tf__ptr_1ga1ea9ae22535f9fb09b2c74f6e7526d4e" kindref="member">BT_PTR</ref> &amp; <ref refid="group__tf__array_1ga8c17124d38e796e7cd8804808e4bb5b3" kindref="member">BT_ARRAY</ref>: get the pointed object or array element. If the current type is not a pointer or array, return empty type info. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2808" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2808" bodyend="2808"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a27ace9ee1f42d9830303ae37f893e658" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref></type>
        <definition>tinfo_t tinfo_t::get_pointed_object</definition>
        <argsstring>(void) const</argsstring>
        <name>get_pointed_object</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group__tf__ptr_1ga1ea9ae22535f9fb09b2c74f6e7526d4e" kindref="member">BT_PTR</ref>: get type of pointed object. If the current type is not a pointer, return empty type info. See also <ref refid="classtinfo__t_1a30393574bb98a6fe7b40b19a7010a341" kindref="member">get_ptrarr_object()</ref> and <ref refid="classtinfo__t_1a4a197fc9ead77f71f0286b2be85e29fa" kindref="member">remove_pointer()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2813" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2813" bodyend="2813"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a9a51925c638aacf6efaa19b04b88ffa3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_pvoid</definition>
        <argsstring>(void) const</argsstring>
        <name>is_pvoid</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is &quot;void *&quot;?. This function does not check the pointer attributes and type modifiers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2816" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2816" bodyend="2816"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a2277be28256a2e4a442e57471e9ff57f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref></type>
        <definition>tinfo_t tinfo_t::get_array_element</definition>
        <argsstring>(void) const</argsstring>
        <name>get_array_element</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group__tf__array_1ga8c17124d38e796e7cd8804808e4bb5b3" kindref="member">BT_ARRAY</ref>: get type of array element. See also <ref refid="classtinfo__t_1a30393574bb98a6fe7b40b19a7010a341" kindref="member">get_ptrarr_object()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2819" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2819" bodyend="2819"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ab883a286b714b129f68058964d57b8d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tinfo_t::get_array_nelems</definition>
        <argsstring>(void) const</argsstring>
        <name>get_array_nelems</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group__tf__array_1ga8c17124d38e796e7cd8804808e4bb5b3" kindref="member">BT_ARRAY</ref>: get number of elements (-1 means error) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2822" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2822" bodyend="2822"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1afd04a2f7e94d4d80ca358f3d3c060cd9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref></type>
        <definition>tinfo_t tinfo_t::get_nth_arg</definition>
        <argsstring>(int n) const</argsstring>
        <name>get_nth_arg</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para><ref refid="group__tf__func_1ga7b7fee21f21237beb6d91e854410e0fa" kindref="member">BT_FUNC</ref> or <ref refid="group__tf__ptr_1ga1ea9ae22535f9fb09b2c74f6e7526d4e" kindref="member">BT_PTR</ref> <ref refid="group__tf__func_1ga7b7fee21f21237beb6d91e854410e0fa" kindref="member">BT_FUNC</ref>: Get type of n-th arg (-1 means return type, see <ref refid="classtinfo__t_1a43feafad792991954ec5b8f880892f76" kindref="member">get_rettype()</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2825" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2825" bodyend="2831"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a43feafad792991954ec5b8f880892f76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref></type>
        <definition>tinfo_t tinfo_t::get_rettype</definition>
        <argsstring>(void) const</argsstring>
        <name>get_rettype</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group__tf__func_1ga7b7fee21f21237beb6d91e854410e0fa" kindref="member">BT_FUNC</ref> or <ref refid="group__tf__ptr_1ga1ea9ae22535f9fb09b2c74f6e7526d4e" kindref="member">BT_PTR</ref> <ref refid="group__tf__func_1ga7b7fee21f21237beb6d91e854410e0fa" kindref="member">BT_FUNC</ref>: Get the function&apos;s return type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2834" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2834" bodyend="2834"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ab7fed0c8ff0cc22711c6557b78df987c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tinfo_t::get_nargs</definition>
        <argsstring>(void) const</argsstring>
        <name>get_nargs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group__tf__func_1ga7b7fee21f21237beb6d91e854410e0fa" kindref="member">BT_FUNC</ref> or <ref refid="group__tf__ptr_1ga1ea9ae22535f9fb09b2c74f6e7526d4e" kindref="member">BT_PTR</ref> <ref refid="group__tf__func_1ga7b7fee21f21237beb6d91e854410e0fa" kindref="member">BT_FUNC</ref>: Calculate number of arguments (-1 - error) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2837" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2837" bodyend="2837"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1abfbef1b4197abdd5372b5264cefe77df" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>cm_t tinfo_t::get_cc</definition>
        <argsstring>(void) const</argsstring>
        <name>get_cc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group__tf__func_1ga7b7fee21f21237beb6d91e854410e0fa" kindref="member">BT_FUNC</ref> or <ref refid="group__tf__ptr_1ga1ea9ae22535f9fb09b2c74f6e7526d4e" kindref="member">BT_PTR</ref> <ref refid="group__tf__func_1ga7b7fee21f21237beb6d91e854410e0fa" kindref="member">BT_FUNC</ref>: Get calling convention </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2840" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2840" bodyend="2840"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a27474526529c389c1aba865c7a4fff8d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_user_cc</definition>
        <argsstring>(void) const</argsstring>
        <name>is_user_cc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_user_cc} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2841" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a139553e289f2c9fa534d35b2c07f893a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_vararg_cc</definition>
        <argsstring>(void) const</argsstring>
        <name>is_vararg_cc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_vararg_cc} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2842" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2842" bodyend="2841"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ac9e1ad24b6167080df3d167d7d691d92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_purging_cc</definition>
        <argsstring>(void) const</argsstring>
        <name>is_purging_cc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>{is_purging_cc} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2843" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2843" bodyend="2842"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a3b9fe67eef5cfe48532fa1e102d5550a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tinfo_t::calc_purged_bytes</definition>
        <argsstring>(void) const</argsstring>
        <name>calc_purged_bytes</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group__tf__func_1ga7b7fee21f21237beb6d91e854410e0fa" kindref="member">BT_FUNC</ref>: Calculate number of purged bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2846" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2846" bodyend="2846"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ac9685ddc8b06e7977da206cae9758af8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_high_func</definition>
        <argsstring>(void) const</argsstring>
        <name>is_high_func</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group__tf__func_1ga7b7fee21f21237beb6d91e854410e0fa" kindref="member">BT_FUNC</ref>: Is high level type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2849" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2849" bodyend="2849"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a361e41f3ee72212728cf508dba45aca0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tinfo_t::find_udt_member</definition>
        <argsstring>(struct udt_member_t *udm, int strmem_flags) const</argsstring>
        <name>find_udt_member</name>
        <param>
          <type>struct <ref refid="structudt__member__t" kindref="compound">udt_member_t</ref> *</type>
          <declname>udm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strmem_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group__tf__shortcuts_1ga861f45bbf58b9d699897e234b0905009" kindref="member">BTF_STRUCT</ref>,<ref refid="group__tf__shortcuts_1ga0a5536b8782826bb2b925fc65c49788c" kindref="member">BTF_UNION</ref>: Find a udt member.<itemizedlist>
<listitem><para>at the specified offset (<ref refid="group___s_t_r_m_e_m___1gafc7e55c621c65b2a81792e39a67d75b2" kindref="member">STRMEM_OFFSET</ref>)</para></listitem><listitem><para>with the specified index (<ref refid="group___s_t_r_m_e_m___1gaad91f2151cfd8e41e7f937287bf18f56" kindref="member">STRMEM_INDEX</ref>)</para></listitem><listitem><para>with the specified type (<ref refid="group___s_t_r_m_e_m___1ga62e2d52ab4b1acb0ed5571b7135ee6dd" kindref="member">STRMEM_TYPE</ref>)</para></listitem><listitem><para>with the specified name (<ref refid="group___s_t_r_m_e_m___1ga8c04aa29f158d3544957d5bf9513115a" kindref="member">STRMEM_NAME</ref>) <simplesect kind="return"><para>the index of the found member or -1 </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2857" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2857" bodyend="2857"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1aac4505e14065d740e5b0de2f83f85c57" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int tinfo_t::get_udt_nmembers</definition>
        <argsstring>(void) const</argsstring>
        <name>get_udt_nmembers</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number of udt members. -1-error. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2894" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2894" bodyend="2894"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a6c766b8a76cbb9ffd3b4b730115c204a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_empty_udt</definition>
        <argsstring>(void) const</argsstring>
        <name>is_empty_udt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is an empty struct/union? (has no fields) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2897" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2897" bodyend="2897"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a032716f3983d939c762dbdfe0233359d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_small_udt</definition>
        <argsstring>(void) const</argsstring>
        <name>is_small_udt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is a small udt? (can fit a register or a pair of registers) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2900" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2900" bodyend="2900"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ad0f3c8573642add0859f5959593070e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::requires_qualifier</definition>
        <argsstring>(qstring *out, const char *name, uint64 offset) const</argsstring>
        <name>requires_qualifier</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Requires full qualifier? (name is not unique) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>qualifier. may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>field name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>field offset in bits </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if the name is not unique, returns true </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2907" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2907" bodyend="2907"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a8c8bda2fdc31f03a12b66de6b9bebac4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::append_covered</definition>
        <argsstring>(rangeset_t *out, uint64 offset=0) const</argsstring>
        <name>append_covered</name>
        <param>
          <type><ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate set of covered bytes for the type <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the output buffer. covered bytes will be appended to it. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2911" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2911" bodyend="2911"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a9af345e237d0033c5460cb374bbaa24a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::calc_gaps</definition>
        <argsstring>(rangeset_t *out) const</argsstring>
        <name>calc_gaps</name>
        <param>
          <type><ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate set of padding bytes for the type <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the output buffer; old buffer contents will be lost. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2915" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2915" bodyend="2915"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1aded6aae56bafc80c31204f118034b0a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_one_fpval</definition>
        <argsstring>(void) const</argsstring>
        <name>is_one_fpval</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Floating value or an object consisting of one floating member entirely. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2918" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2918" bodyend="2918"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a77eb09eb93a9a752bb7a35496243a26d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_sse_type</definition>
        <argsstring>(void) const</argsstring>
        <name>is_sse_type</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is a SSE vector type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2921" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2921" bodyend="2921"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a6ad7056c5d10d3d42e28ae8e24071bbd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_anonymous_udt</definition>
        <argsstring>(void) const</argsstring>
        <name>is_anonymous_udt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is an anonymous struct/union? We assume that types with names are anonymous if the name starts with $ </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2925" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2925" bodyend="2925"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a51313b5df86f94cf09937a9ab1da2458" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_vftable</definition>
        <argsstring>(void) const</argsstring>
        <name>is_vftable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is a vftable type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2928" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2928" bodyend="2928"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a189d4144b6ea0fc5017768b41e1a40de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::has_vftable</definition>
        <argsstring>(void) const</argsstring>
        <name>has_vftable</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Has a vftable? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2931" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2931" bodyend="2931"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a2a83a39eab5782af2bc5ee58c5d2fa3b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>type_t tinfo_t::get_enum_base_type</definition>
        <argsstring>(void) const</argsstring>
        <name>get_enum_base_type</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get enum base type (convert enum to integer type) Returns <ref refid="group__tf__unk_1ga9c2f460ca1ce121f26cf35a2fd56435c" kindref="member">BT_UNK</ref> if failed to convert </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2935" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2935" bodyend="2935"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1aca03213817c4064cd517e0cb00d31def" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref></type>
        <definition>tinfo_t tinfo_t::get_onemember_type</definition>
        <argsstring>(void) const</argsstring>
        <name>get_onemember_type</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>For objects consisting of one member entirely: return type of the member. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2938" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2938" bodyend="2938"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a36341dceffda31683d0f20070e8d3c44" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
        <definition>uint32 tinfo_t::calc_score</definition>
        <argsstring>(void) const</argsstring>
        <name>calc_score</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Calculate the type score (the higher - the nicer is the type) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2941" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2941" bodyend="2941"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a2a530eb1e16876bf3c218c2d5f3ffb08" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::print</definition>
        <argsstring>(qstring *out, const char *name=NULL, int prtype_flags=PRTYPE_1LINE, int indent=0, int cmtindent=0, const char *prefix=NULL, const char *cmt=NULL) const</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>int</type>
          <declname>prtype_flags</declname>
          <defval><ref refid="group___p_r_t_y_p_e___1gab3719af59224847206f30d143bc0decb" kindref="member">PRTYPE_1LINE</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>cmtindent</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>cmt</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a C-like string representation of the type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prtype_flags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___p_r_t_y_p_e__" kindref="compound">Type printing flags</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indent</parametername>
</parameternamelist>
<parameterdescription>
<para>structure level indent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmtindent</parametername>
</parameternamelist>
<parameterdescription>
<para>comment indent </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prefix</parametername>
</parameternamelist>
<parameterdescription>
<para>string prepended to each line </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmt</parametername>
</parameternamelist>
<parameterdescription>
<para>comment text </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2952" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2952" bodyend="2962"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1acc895ac8df82082d9f5bc5fc10eeac5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* tinfo_t::dstr</definition>
        <argsstring>(void) const</argsstring>
        <name>dstr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Function to facilitate debugging. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2965" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2965" bodyend="2965"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a287ed167f6de30047f6953d46bde6001" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::get_attrs</definition>
        <argsstring>(type_attrs_t *tav, bool all_attrs=false) const</argsstring>
        <name>get_attrs</name>
        <param>
          <type><ref refid="group__tattr__ext_1ga59ddf13221681bc7444911f100dc5f5b" kindref="member">type_attrs_t</ref> *</type>
          <declname>tav</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>all_attrs</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get type attributes (all_attrs: include attributes of referenced types, if any) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2968" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2968" bodyend="2968"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ac56496512ceb83f71ecacc7fe1a7efab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::get_attr</definition>
        <argsstring>(const qstring &amp;key, bytevec_t *bv, bool all_attrs=true) const</argsstring>
        <name>get_attr</name>
        <param>
          <type>const <ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> *</type>
          <declname>bv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>all_attrs</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Get a type attribute. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2971" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2971" bodyend="2971"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a106c7cff2f3378b063d22ecf8bf4c21f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::set_attrs</definition>
        <argsstring>(type_attrs_t *tav)</argsstring>
        <name>set_attrs</name>
        <param>
          <type><ref refid="group__tattr__ext_1ga59ddf13221681bc7444911f100dc5f5b" kindref="member">type_attrs_t</ref> *</type>
          <declname>tav</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set type attributes. If necessary, a new typid will be created. this function modifies tav! (returns old attributes, if any) <simplesect kind="return"><para>false: bad attributes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2976" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2976" bodyend="2976"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1ad597870648531d77456f6eb0ba6fa898" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::set_attr</definition>
        <argsstring>(const type_attr_t &amp;ta, bool may_overwrite=true)</argsstring>
        <name>set_attr</name>
        <param>
          <type>const <ref refid="structtype__attr__t" kindref="compound">type_attr_t</ref> &amp;</type>
          <declname>ta</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>may_overwrite</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Set a type attribute. If necessary, a new typid will be created. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2979" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2979" bodyend="2979"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1acff7a84e3cd0e2314a5217d8c7f7d414" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void tinfo_t::del_attrs</definition>
        <argsstring>(void)</argsstring>
        <name>del_attrs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Del all type attributes. typerefs can not be modified by this function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2982" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2982" bodyend="2982"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a12456b600e0765fe678b195d4f3e9dcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::del_attr</definition>
        <argsstring>(const qstring &amp;key, bool make_copy=true)</argsstring>
        <name>del_attr</name>
        <param>
          <type>const <ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>make_copy</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Del a type attribute. typerefs can not be modified by this function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2985" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2985" bodyend="2985"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a3c39ded1425fd684bbd10aadadecbf3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::create_simple_type</definition>
        <argsstring>(type_t decl_type)</argsstring>
        <name>create_simple_type</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2987" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2987" bodyend="2987"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a94fdaa43690220455bf8c66d509901d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::create_ptr</definition>
        <argsstring>(const ptr_type_data_t &amp;p, type_t decl_type=BT_PTR)</argsstring>
        <name>create_ptr</name>
        <param>
          <type>const <ref refid="structptr__type__data__t" kindref="compound">ptr_type_data_t</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
          <defval><ref refid="group__tf__ptr_1ga1ea9ae22535f9fb09b2c74f6e7526d4e" kindref="member">BT_PTR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2988" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2988" bodyend="2988"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1aa06f1d06145f4511e0b55c41721b8b95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::create_array</definition>
        <argsstring>(const array_type_data_t &amp;p, type_t decl_type=BT_ARRAY)</argsstring>
        <name>create_array</name>
        <param>
          <type>const <ref refid="structarray__type__data__t" kindref="compound">array_type_data_t</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
          <defval><ref refid="group__tf__array_1ga8c17124d38e796e7cd8804808e4bb5b3" kindref="member">BT_ARRAY</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2989" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2989" bodyend="2989"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a891a1ec386b75abc4b1f61003f14d1cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::create_bitfield</definition>
        <argsstring>(const bitfield_type_data_t &amp;p, type_t decl_type=BT_BITFIELD)</argsstring>
        <name>create_bitfield</name>
        <param>
          <type>const <ref refid="structbitfield__type__data__t" kindref="compound">bitfield_type_data_t</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
          <defval><ref refid="group__tf__complex_1ga0d1af452c81ac917f9eab9d456f52454" kindref="member">BT_BITFIELD</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2990" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2990" bodyend="2990"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a0b7c405d071d6cfdb016b6add0519af0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::create_typedef</definition>
        <argsstring>(const typedef_type_data_t &amp;p, type_t decl_type=BTF_TYPEDEF, bool try_ordinal=true)</argsstring>
        <name>create_typedef</name>
        <param>
          <type>const <ref refid="structtypedef__type__data__t" kindref="compound">typedef_type_data_t</ref> &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
          <defval><ref refid="group__tf__shortcuts_1ga64e49eed2f4e754689e7bcc7f6efdd74" kindref="member">BTF_TYPEDEF</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>try_ordinal</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2991" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2991" bodyend="2995"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a4e8491d2d8a0c3589f20071c33e8f200" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__named__types_1ga4b2c98771820db5f78f2e754c97c0aaa" kindref="member">tinfo_code_t</ref></type>
        <definition>tinfo_code_t tinfo_t::create_forward_decl</definition>
        <argsstring>(til_t *til, type_t decl_type, const char *name, int ntf_flags=0)</argsstring>
        <name>create_forward_decl</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>decl_type</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ntf_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a forward declaration. decl_type: <ref refid="group__tf__shortcuts_1ga861f45bbf58b9d699897e234b0905009" kindref="member">BTF_STRUCT</ref>, <ref refid="group__tf__shortcuts_1ga0a5536b8782826bb2b925fc65c49788c" kindref="member">BTF_UNION</ref>, or <ref refid="group__tf__shortcuts_1ga5eee5573060ab34fdee9230f37d8369f" kindref="member">BTF_ENUM</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3026" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3026" bodyend="3030"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1adc16bd8b4daae27c4c22d61c8a45d152" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::convert_array_to_ptr</definition>
        <argsstring>(void)</argsstring>
        <name>convert_array_to_ptr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert an array into a pointer. type[] =&gt; type * </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3043" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3597" bodyend="3609"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a3cb42b27e21d234c407f95dd27165e89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::remove_ptr_or_array</definition>
        <argsstring>(void)</argsstring>
        <name>remove_ptr_or_array</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace the current type with the ptr obj or array element. This function performs one of the following conversions:<itemizedlist>
<listitem><para>type[] =&gt; type</para></listitem><listitem><para>type* =&gt; type If the conversion is performed successfully, return true </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3050" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3050" bodyend="3057"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a8418938eb1d54a8c1e9616e7171727b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::change_sign</definition>
        <argsstring>(type_sign_t sign)</argsstring>
        <name>change_sign</name>
        <param>
          <type><ref refid="group__tattr__ext_1ga91970b0d779fe968b3b22572526048a0" kindref="member">type_sign_t</ref></type>
          <declname>sign</declname>
        </param>
        <briefdescription>
<para>Change the type sign. Works only for the types that may have sign. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3060" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3060" bodyend="3060"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a404a4599458c447010359561654c6374" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::calc_udt_aligns</definition>
        <argsstring>(int sudt_flags=SUDT_GAPS)</argsstring>
        <name>calc_udt_aligns</name>
        <param>
          <type>int</type>
          <declname>sudt_flags</declname>
          <defval><ref refid="group___s_u_d_t___1gac25d2bd3d8185187ceae4cc16f4cc3dc" kindref="member">SUDT_GAPS</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the udt alignments using the field offsets/sizes and the total udt size This function does not work on typerefs </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3064" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3064" bodyend="3065"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1af3102f0b02847b6e9000dc7ee7a47eda" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::compare_with</definition>
        <argsstring>(const tinfo_t &amp;r, int tcflags=0) const</argsstring>
        <name>compare_with</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tcflags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Compare two types, based on given flags (see <ref refid="group___t_c_m_p__" kindref="compound">tinfo_t comparison flags</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3106" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3106" bodyend="3106"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a73aa3337b229c6ae07789029ef9313ab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::equals_to</definition>
        <argsstring>(const tinfo_t &amp;r) const</argsstring>
        <name>equals_to</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3107" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3107" bodyend="3107"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1af76d5bd3171f06d218d2defef41a1610" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_castable_to</definition>
        <argsstring>(const tinfo_t &amp;target) const</argsstring>
        <name>is_castable_to</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3108" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3108" bodyend="3108"/>
      </memberdef>
      <memberdef kind="function" id="classtinfo__t_1a85bd0ce80a8e75dbdbece535ec1bb7a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool tinfo_t::is_manually_castable_to</definition>
        <argsstring>(const tinfo_t &amp;target) const</argsstring>
        <name>is_manually_castable_to</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>target</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3109" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3109" bodyend="3109"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classtinfo__t_1a1d2ed4241b0ee9fa2d8c5b7269cad74d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref></type>
        <definition>static tinfo_t tinfo_t::get_stock</definition>
        <argsstring>(stock_type_id_t id)</argsstring>
        <name>get_stock</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211" kindref="member">stock_type_id_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get stock type information. This function can be used to get <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> for some common types. The same <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> will be returned for the same id, thus saving memory and increasing the speed Please note that retrieving the STI_SIZE_T or STI_SSIZE_T stock type, will also have the side-effect of adding that type to the &apos;idati&apos; TIL, under the well-known name &apos;size_t&apos; or &apos;ssize_t&apos; (respectively). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3039" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3039" bodyend="3039"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Primary mechanism for managing type information. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2431" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2430" bodyend="3110"/>
    <listofallmembers>
      <member refid="classtinfo__t_1a8c8bda2fdc31f03a12b66de6b9bebac4" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>append_covered</name></member>
      <member refid="classtinfo__t_1a9af345e237d0033c5460cb374bbaa24a" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>calc_gaps</name></member>
      <member refid="classtinfo__t_1a3b9fe67eef5cfe48532fa1e102d5550a" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>calc_purged_bytes</name></member>
      <member refid="classtinfo__t_1a36341dceffda31683d0f20070e8d3c44" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>calc_score</name></member>
      <member refid="classtinfo__t_1a404a4599458c447010359561654c6374" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>calc_udt_aligns</name></member>
      <member refid="classtinfo__t_1a8418938eb1d54a8c1e9616e7171727b3" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>change_sign</name></member>
      <member refid="classtinfo__t_1a2870999077263051967bb654149e092f" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>clear</name></member>
      <member refid="classtinfo__t_1af56b7d0fe4ea528ac2eb1a66a95d1837" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>clr_const</name></member>
      <member refid="classtinfo__t_1ad6c21a7505878b59404ad216cef4600e" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>clr_const_volatile</name></member>
      <member refid="classtinfo__t_1a2560bc846f1796718f4658fb96c1b7d6" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>clr_volatile</name></member>
      <member refid="classtinfo__t_1af3102f0b02847b6e9000dc7ee7a47eda" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>compare_with</name></member>
      <member refid="classtinfo__t_1adc16bd8b4daae27c4c22d61c8a45d152" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>convert_array_to_ptr</name></member>
      <member refid="classtinfo__t_1a88ad7e9535d1e7ccfeb1e7c7bb6521e7" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>copy</name></member>
      <member refid="classtinfo__t_1aa06f1d06145f4511e0b55c41721b8b95" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>create_array</name></member>
      <member refid="classtinfo__t_1afa8a38b2aed3d5725621cd4107e1cc87" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>create_array</name></member>
      <member refid="classtinfo__t_1a891a1ec386b75abc4b1f61003f14d1cc" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>create_bitfield</name></member>
      <member refid="classtinfo__t_1a0c67e6873c0d3225fc57a1114a893dd3" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>create_bitfield</name></member>
      <member refid="classtinfo__t_1a5c1038754a7d0ae27c9733cf3be27d4a" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>create_enum</name></member>
      <member refid="classtinfo__t_1a4e8491d2d8a0c3589f20071c33e8f200" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>create_forward_decl</name></member>
      <member refid="classtinfo__t_1a7bb43d328a2b75f030f95cda543580f3" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>create_func</name></member>
      <member refid="classtinfo__t_1a94fdaa43690220455bf8c66d509901d9" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>create_ptr</name></member>
      <member refid="classtinfo__t_1aa72f7a017b31ff59075fc783c0762534" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>create_ptr</name></member>
      <member refid="classtinfo__t_1a3c39ded1425fd684bbd10aadadecbf3c" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>create_simple_type</name></member>
      <member refid="classtinfo__t_1a85ca3985be1260de14403c8f32a3e99e" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>create_type</name></member>
      <member refid="classtinfo__t_1a0b7c405d071d6cfdb016b6add0519af0" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>create_typedef</name></member>
      <member refid="classtinfo__t_1a79838704f9bd2dedb07727e2bdbed0ce" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>create_typedef</name></member>
      <member refid="classtinfo__t_1a0a4284469cc80e2dd267f2736fc900e2" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>create_typedef</name></member>
      <member refid="classtinfo__t_1a820e592715ad2c100174bb5164273485" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>create_udt</name></member>
      <member refid="classtinfo__t_1a12456b600e0765fe678b195d4f3e9dcd" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>del_attr</name></member>
      <member refid="classtinfo__t_1acff7a84e3cd0e2314a5217d8c7f7d414" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>del_attrs</name></member>
      <member refid="classtinfo__t_1a380c6dc7c423cca6cad0adbc27dfeccd" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>deserialize</name></member>
      <member refid="classtinfo__t_1a0bc913b2fce03d59b0ce3e1a2dfa07ed" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>deserialize</name></member>
      <member refid="classtinfo__t_1acc895ac8df82082d9f5bc5fc10eeac5e" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>dstr</name></member>
      <member refid="classtinfo__t_1a88950d2840d9bd5f72eeca26fcbbec6f" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>empty</name></member>
      <member refid="classtinfo__t_1a73aa3337b229c6ae07789029ef9313ab" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>equals_to</name></member>
      <member refid="classtinfo__t_1a361e41f3ee72212728cf508dba45aca0" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>find_udt_member</name></member>
      <member refid="classtinfo__t_1a0a918da4bbf7aec65717812fdf697609" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_array_details</name></member>
      <member refid="classtinfo__t_1a2277be28256a2e4a442e57471e9ff57f" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_array_element</name></member>
      <member refid="classtinfo__t_1ab883a286b714b129f68058964d57b8d0" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_array_nelems</name></member>
      <member refid="classtinfo__t_1ac56496512ceb83f71ecacc7fe1a7efab" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_attr</name></member>
      <member refid="classtinfo__t_1a287ed167f6de30047f6953d46bde6001" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_attrs</name></member>
      <member refid="classtinfo__t_1ad2e073cee94ccb0ed8b2e98db467ed8f" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_bitfield_details</name></member>
      <member refid="classtinfo__t_1abfbef1b4197abdd5372b5264cefe77df" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_cc</name></member>
      <member refid="classtinfo__t_1aa126850ffadbc8bc93af74a683ab796b" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_declalign</name></member>
      <member refid="classtinfo__t_1a59bf80df3e57871713632c9b5ff745c6" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_decltype</name></member>
      <member refid="classtinfo__t_1a2a83a39eab5782af2bc5ee58c5d2fa3b" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_enum_base_type</name></member>
      <member refid="classtinfo__t_1a22c28682b2e16f80556083729baf6784" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_enum_details</name></member>
      <member refid="classtinfo__t_1a982c6575d7311cf5a0332dd12d2928b4" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_final_ordinal</name></member>
      <member refid="classtinfo__t_1a9bb121c70564c4712a4baa1fdab2d634" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_final_type_name</name></member>
      <member refid="classtinfo__t_1adfb1d3f3412255927be1249a0324cbf6" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_func_details</name></member>
      <member refid="classtinfo__t_1a119a3bfec44dbd4f7e1f275251b713eb" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_modifiers</name></member>
      <member refid="classtinfo__t_1a8d412272832b545ffdf4019e736ff7b7" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_named_type</name></member>
      <member refid="classtinfo__t_1ab7fed0c8ff0cc22711c6557b78df987c" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_nargs</name></member>
      <member refid="classtinfo__t_1acfd5db4ced3ce84e99c78f51b2eb53d6" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_next_type_name</name></member>
      <member refid="classtinfo__t_1afd04a2f7e94d4d80ca358f3d3c060cd9" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_nth_arg</name></member>
      <member refid="classtinfo__t_1a86a0edf6c7baed76c657aee40e431572" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_numbered_type</name></member>
      <member refid="classtinfo__t_1aca03213817c4064cd517e0cb00d31def" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_onemember_type</name></member>
      <member refid="classtinfo__t_1afdb2f678553aff6b89276c52b9668aa5" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_ordinal</name></member>
      <member refid="classtinfo__t_1a27ace9ee1f42d9830303ae37f893e658" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_pointed_object</name></member>
      <member refid="classtinfo__t_1a5e4c70cdadcbc8f14d8d91444f75e95d" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_ptr_details</name></member>
      <member refid="classtinfo__t_1a30393574bb98a6fe7b40b19a7010a341" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_ptrarr_object</name></member>
      <member refid="classtinfo__t_1a4f68bc3464612cc584136f54e9ab3666" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_ptrarr_objsize</name></member>
      <member refid="classtinfo__t_1ab99bc1b32bf0a592bfc225a7b88c4b73" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_realtype</name></member>
      <member refid="classtinfo__t_1a43feafad792991954ec5b8f880892f76" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_rettype</name></member>
      <member refid="classtinfo__t_1ab0daa9d2c8cc65aef1fcbf195f9ee0bd" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_sign</name></member>
      <member refid="classtinfo__t_1a1e63dd36d62f43a09f5dff9195ee1cdb" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_size</name></member>
      <member refid="classtinfo__t_1a1d2ed4241b0ee9fa2d8c5b7269cad74d" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_stock</name></member>
      <member refid="classtinfo__t_1af50bae4e74ddbc2f70a19d9f20a45770" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_til</name></member>
      <member refid="classtinfo__t_1a19c075829998b86ba32e4945105519b4" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>get_type_details</name></member>
      <member refid="classtinfo__t_1a19ee359cd5e9d7864b318a461816c139" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_type_name</name></member>
      <member refid="classtinfo__t_1a573d7effeb0a38326f7e4e7d8d94658e" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_udt_details</name></member>
      <member refid="classtinfo__t_1aac4505e14065d740e5b0de2f83f85c57" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_udt_nmembers</name></member>
      <member refid="classtinfo__t_1aa9d1baa1f44a75096b036601da9529b7" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>get_unpadded_size</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a1962d1959097398ba5f149731a3ccb58" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_ARRAY_ELEM</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08af5f593c81abd8b743f5bf11a5dfb0130" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_ARRAY_NELEMS</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a6153a731a51a9aab333cc40318cb73f3" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_DECLALIGN</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a526ca2e4f8a7f5fdbc78e8e3fa067d7e" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_ENUM_BASE_TYPE</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a6b4975dfef7799dae533f0fc31848f3d" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_FINAL_ORDINAL</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a5137ee64cdff1c509b444d80a4f469a8" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_FROM_SUBTIL</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a9bc57809bd943a4b376a000ed5579639" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_FUNC_ARG</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08ac58822278b6f5fe114ddc212de09b96a" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_FUNC_CC</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a1ca63ffc8d577a40c9428a1a814090fa" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_FUNC_NARGS</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08acd27e2f63cf3a6231985eb95446bd1b9" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_FUNC_RET</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08aa12c36c4f68e484efcdd3a7a9f95986c" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_HAS_VFTABLE</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a4291f3445aac4b7997749e0aa43db21b" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_IS_ANON_UDT</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08ad72c7a91f9cf177802e771c5769ad97f" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_IS_FORWARD</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a413cb163bc9c5bd37312ca72a0d353f2" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_IS_FUNCPTR</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08ad4c67beb8bf4a5bd4cc56f1ed667ffa2" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_IS_HIGH_TYPE</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a03ec7dbf54523f560cdd42140486d868" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_IS_SHIFTED_PTR</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a5701f221c63823e456d4de4c4bb96aad" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_IS_SMALL_UDT</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08addff9ec5014c2b92f41bdf6d581d89dd" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_IS_SSE_TYPE</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a40781981156c2e9c267390b31654e5bb" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_IS_VFTABLE</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08aa460da4824e1733ed389d9c29d986b7b" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_LAST_FUNC_ARG</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a76c2ce9e238f9a30e535c31a76746de5" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_ONEMEM_TYPE</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a71bebe168b815927939b2f7ea55f4b77" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_ORDINAL</name></member>
      <member refid="classtinfo__t_1aeda55be6cb64c5e7462b419b4c55c7fe" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>gta_pdata_t</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>gta_prop_t</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08aa90b32dfdc00e92b11bc57a9f3152f4c" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_PTR_OBJ</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a3f9403d66d1ca612d833e737c65dec7a" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_PTRARR_SIZE</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a6251d647528fe64ecd1bea1b38d0ef7f" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_PTRARR_SUBTIF</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08ab3992a86b2acf8724f167bb58ab513ae" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_PURGED_BYTES</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08aca068dbd7e63e1e98d9b7e8fc3bea6e5" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_REALTYPE</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08ae0f8962fbe0fd877c7b4f7c97b82cdda" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_RESOLVE</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a38cfe3b373a9d37dae28d0da14531b09" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_SAFE_PTR_OBJ</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a7d1156afdcb1d6e19a2cd04ddb0dc34c" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_TYPE_SIGN</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a003f3d486c114e04ad4c292e3ab4f0c7" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_UDT_NMEMBERS</name></member>
      <member refid="classtinfo__t_1ae015784e1ad43b47cbd2037d1af52c08a97fd0686793cb1a44dcc27310240007f" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTA_UNPADDED_SIZE</name></member>
      <member refid="classtinfo__t_1aeda55be6cb64c5e7462b419b4c55c7feafe99ea165084060dd84ee098f24fabf5" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTP_FINAL_NAME</name></member>
      <member refid="classtinfo__t_1aeda55be6cb64c5e7462b419b4c55c7fea8b07fe87b9b0ba1eb85994c9fba03cf7" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTP_NAME</name></member>
      <member refid="classtinfo__t_1aeda55be6cb64c5e7462b419b4c55c7fea7eaac6f531f11b9149a97b27ea5a89a1" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTP_NEXT_NAME</name></member>
      <member refid="classtinfo__t_1aeda55be6cb64c5e7462b419b4c55c7fea10dc2846eee0a6a2d51cffdd9183c9f7" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>GTP_TIL</name></member>
      <member refid="classtinfo__t_1a9295552662095c235692f984acaacc84" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>has_details</name></member>
      <member refid="classtinfo__t_1a189d4144b6ea0fc5017768b41e1a40de" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>has_vftable</name></member>
      <member refid="classtinfo__t_1a6ad7056c5d10d3d42e28ae8e24071bbd" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_anonymous_udt</name></member>
      <member refid="classtinfo__t_1aee6906b41747f6dc4bdfec07020431f2" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_arithmetic</name></member>
      <member refid="classtinfo__t_1a04f10221c18eb49bde950518ab5e9781" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_array</name></member>
      <member refid="classtinfo__t_1aeb15764edfaf88025eb3eb3c7b335f23" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_bitfield</name></member>
      <member refid="classtinfo__t_1ae716de421f3a45f355e698b6a938e32a" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_bool</name></member>
      <member refid="classtinfo__t_1af76d5bd3171f06d218d2defef41a1610" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_castable_to</name></member>
      <member refid="classtinfo__t_1affafd80efae83c75b46f93bdcd8bc5fb" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_char</name></member>
      <member refid="classtinfo__t_1aa684c425f67ed094e1758eb1926a076b" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_complex</name></member>
      <member refid="classtinfo__t_1a3a27b702661ae1809de17a4a1589506f" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_const</name></member>
      <member refid="classtinfo__t_1a56b30d1b5579cad57880ad1f2c9ce113" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_correct</name></member>
      <member refid="classtinfo__t_1a54046fd25d73da259e68e7c91295917a" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_array</name></member>
      <member refid="classtinfo__t_1a998c0ad23a0d671f10147d3d4d6ae790" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_bitfield</name></member>
      <member refid="classtinfo__t_1af2fdc1cec9aa8fefcafacec245feaed5" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_bool</name></member>
      <member refid="classtinfo__t_1ab842cd5ac1fda16f7b01995c64fc1651" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_char</name></member>
      <member refid="classtinfo__t_1ab20572c6c0e3ba1eb827f7a64cb0dc2a" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_complex</name></member>
      <member refid="classtinfo__t_1a1c318db9344da62eec4b11ea91af1a62" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_const</name></member>
      <member refid="classtinfo__t_1a39c5a11fd97a9914e7942a58089eb2b3" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_double</name></member>
      <member refid="classtinfo__t_1af56dde9ecec02f8e0466814504b9d5af" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_enum</name></member>
      <member refid="classtinfo__t_1abd273377be4de8ae4266ca1cb8df15d6" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_float</name></member>
      <member refid="classtinfo__t_1a5d870af0c6908a108544ac7e381f083a" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_floating</name></member>
      <member refid="classtinfo__t_1a3f983d0659ecd92f370ce5512df01b97" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_func</name></member>
      <member refid="classtinfo__t_1a34581f2ce1994de633be2b380483f79c" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_int</name></member>
      <member refid="classtinfo__t_1aea05a74f29494f5bd886d74e64979274" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_int128</name></member>
      <member refid="classtinfo__t_1a3705c84d9539a25f44513e82156126dc" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_int16</name></member>
      <member refid="classtinfo__t_1a37931dac7fba4c8ebd20bb11f70ae2f3" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_int32</name></member>
      <member refid="classtinfo__t_1ae69295a4b63221ead045e59a72850fad" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_int64</name></member>
      <member refid="classtinfo__t_1a5b1b8e73a456b9ea989d122340025867" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_last</name></member>
      <member refid="classtinfo__t_1a77290f3eab720f9460005103baa69634" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_ldouble</name></member>
      <member refid="classtinfo__t_1a6cea98000cf3ac102352768c350838bf" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_paf</name></member>
      <member refid="classtinfo__t_1a51a53ea074fb89289574e554aab106c8" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_partial</name></member>
      <member refid="classtinfo__t_1a075a6d6e5674d8fb8e067d75db59e8e9" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_ptr</name></member>
      <member refid="classtinfo__t_1af2dda5441983ab51c7785c4acad604bd" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_struct</name></member>
      <member refid="classtinfo__t_1a70d273a0f49c5494825ca1b533a2367c" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_sue</name></member>
      <member refid="classtinfo__t_1a9fd910cc979fc94d08c93c16bdc8e8af" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_tbyte</name></member>
      <member refid="classtinfo__t_1a2d8371541a4ac0eb9f6bb5b7f4d7abee" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_typedef</name></member>
      <member refid="classtinfo__t_1a69350262c60de5a692f7a0e7458930a0" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_uchar</name></member>
      <member refid="classtinfo__t_1a286b910e6f48914caf8ed8fad17649dd" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_udt</name></member>
      <member refid="classtinfo__t_1adb39c42d5940f18c204e18025f4dc0de" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_uint</name></member>
      <member refid="classtinfo__t_1a16842b97bfc6566d67b347d38001e045" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_uint128</name></member>
      <member refid="classtinfo__t_1a51c743c30a957814c52a356b681111c8" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_uint16</name></member>
      <member refid="classtinfo__t_1a1bb2219f8d785c75efb6537ab0f1467b" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_uint32</name></member>
      <member refid="classtinfo__t_1a901bde280ff5e6dd4183deadac7e4f7b" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_uint64</name></member>
      <member refid="classtinfo__t_1adfa3e9b4e7bc89a501faf6767ef24756" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_union</name></member>
      <member refid="classtinfo__t_1a337a154f8ee0b493941561fb99078979" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_unknown</name></member>
      <member refid="classtinfo__t_1adb87910f701546804de62ab515b50c22" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_void</name></member>
      <member refid="classtinfo__t_1a9b3ed8e22cbbff525fd5b32f058d9de8" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_decl_volatile</name></member>
      <member refid="classtinfo__t_1a1fb6794fe37a1fe97b8a02e103000ab4" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_double</name></member>
      <member refid="classtinfo__t_1a6c766b8a76cbb9ffd3b4b730115c204a" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_empty_udt</name></member>
      <member refid="classtinfo__t_1a80252b82075ad12d0d43d355645056f8" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_enum</name></member>
      <member refid="classtinfo__t_1ac868a02f00e3a4fcc98907574387bd45" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_ext_arithmetic</name></member>
      <member refid="classtinfo__t_1a29ee25b0b7e2ba23282fff1b1a316608" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_ext_integral</name></member>
      <member refid="classtinfo__t_1a325eef3fa047a82f4c42e31ebbf07b23" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_float</name></member>
      <member refid="classtinfo__t_1a565fff3dc24e185a392dd98e724d084a" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_floating</name></member>
      <member refid="classtinfo__t_1aee512aaa1c8e27457ec295b83c6430bf" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_forward_decl</name></member>
      <member refid="classtinfo__t_1a9d2d1067920c61f09389b437a675c027" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_from_subtil</name></member>
      <member refid="classtinfo__t_1ac45aa42fc3f7199e830986363c35cc5e" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_func</name></member>
      <member refid="classtinfo__t_1a3f3e4d271bb779dd9e9d9242cfdd3af7" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_funcptr</name></member>
      <member refid="classtinfo__t_1ac9685ddc8b06e7977da206cae9758af8" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_high_func</name></member>
      <member refid="classtinfo__t_1a00b8c572b6f57dec9e6a8f02d92b6c5b" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_int</name></member>
      <member refid="classtinfo__t_1a145a015f25dc01ed13b6fd1457d79835" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_int128</name></member>
      <member refid="classtinfo__t_1ae90abb340d5ae76620824371e67c7fc5" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_int16</name></member>
      <member refid="classtinfo__t_1a2393bc5dd2b63f923bd466302bee0d10" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_int32</name></member>
      <member refid="classtinfo__t_1aba983de7d9140dd90d2bd37f66e08a78" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_int64</name></member>
      <member refid="classtinfo__t_1a33742def137ee03773fb5f8f6213c53a" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_integral</name></member>
      <member refid="classtinfo__t_1ac85ebecb42e6952591f1daa46a8bc3df" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_ldouble</name></member>
      <member refid="classtinfo__t_1a85bd0ce80a8e75dbdbece535ec1bb7a1" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_manually_castable_to</name></member>
      <member refid="classtinfo__t_1aded6aae56bafc80c31204f118034b0a8" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_one_fpval</name></member>
      <member refid="classtinfo__t_1a8907e2f174b0aac376cf5f1ef9e282f1" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_paf</name></member>
      <member refid="classtinfo__t_1a93f4d3142ea3fd139cf11da309097b66" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_partial</name></member>
      <member refid="classtinfo__t_1a97e777c64021a9c5c54d1fb53bcf1f2a" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_ptr</name></member>
      <member refid="classtinfo__t_1a175c59ec932fd7994e4fae1efab53da1" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_ptr_or_array</name></member>
      <member refid="classtinfo__t_1ac9e1ad24b6167080df3d167d7d691d92" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_purging_cc</name></member>
      <member refid="classtinfo__t_1a9a51925c638aacf6efaa19b04b88ffa3" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_pvoid</name></member>
      <member refid="classtinfo__t_1a9df8fb856f77cc15f97df651e8d21afe" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_scalar</name></member>
      <member refid="classtinfo__t_1ad074666e280a9b682f3647e38e9d1df2" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_shifted_ptr</name></member>
      <member refid="classtinfo__t_1afb961fea0bb2830a0605ac3f1f1838a1" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_signed</name></member>
      <member refid="classtinfo__t_1a032716f3983d939c762dbdfe0233359d" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_small_udt</name></member>
      <member refid="classtinfo__t_1a77eb09eb93a9a752bb7a35496243a26d" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_sse_type</name></member>
      <member refid="classtinfo__t_1a1dcc9f3fca9aa39429ba8b5bbeb380b3" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_struct</name></member>
      <member refid="classtinfo__t_1a4047f2880c8abb7023fa02516aa26305" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_sue</name></member>
      <member refid="classtinfo__t_1a647acc49c3b0e68726e554ebb4230fea" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_tbyte</name></member>
      <member refid="classtinfo__t_1ad3072a295dee85946f091ee7610782da" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_typeref</name></member>
      <member refid="classtinfo__t_1a297de803c16ee0bb363b3a4fcdf221c2" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_uchar</name></member>
      <member refid="classtinfo__t_1ab4d2d47fc2add288aa83388487dee321" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_udt</name></member>
      <member refid="classtinfo__t_1a6e76e4bfe5f1030b9149d89b6bb25392" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_uint</name></member>
      <member refid="classtinfo__t_1a754bed2677da07f7da13103bad4b64d6" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_uint128</name></member>
      <member refid="classtinfo__t_1a4fb48936f6b58a80adfd4fdc0c2dccb3" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_uint16</name></member>
      <member refid="classtinfo__t_1a53546801790a40b1e00ddb690e6bca24" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_uint32</name></member>
      <member refid="classtinfo__t_1acec21009629e5b1eeef5558c5c053cd4" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_uint64</name></member>
      <member refid="classtinfo__t_1a928d69fc10fbdfe724d8c2b8aeffa35a" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_union</name></member>
      <member refid="classtinfo__t_1ad3f2295d219eabe4e4d53f7eb23d9872" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_unknown</name></member>
      <member refid="classtinfo__t_1a50639a0b8a77f0dfd9f2f92dc6cf97a6" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_unsigned</name></member>
      <member refid="classtinfo__t_1a27474526529c389c1aba865c7a4fff8d" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_user_cc</name></member>
      <member refid="classtinfo__t_1a139553e289f2c9fa534d35b2c07f893a" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_vararg_cc</name></member>
      <member refid="classtinfo__t_1a51313b5df86f94cf09937a9ab1da2458" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_vftable</name></member>
      <member refid="classtinfo__t_1afd89d1a760682923a646d9e979c30a1d" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_void</name></member>
      <member refid="classtinfo__t_1a1b93308cdfa43448fa3edfabab25641b" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_volatile</name></member>
      <member refid="classtinfo__t_1a1513a737204dbdb8ccefa711255038d3" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>is_well_defined</name></member>
      <member refid="classtinfo__t_1a96d468cf7ca30f4496add128133de334" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>operator=</name></member>
      <member refid="classtinfo__t_1a542e05bf16d69bdfe0db9884cb30da73" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>present</name></member>
      <member refid="classtinfo__t_1a2a530eb1e16876bf3c218c2d5f3ffb08" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>print</name></member>
      <member refid="classtinfo__t_1a85f92fcab9b4d0a9ec453d256cd52271" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>read_bitfield_value</name></member>
      <member refid="classtinfo__t_1a4a197fc9ead77f71f0286b2be85e29fa" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>remove_pointer</name></member>
      <member refid="classtinfo__t_1a3cb42b27e21d234c407f95dd27165e89" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>remove_ptr_or_array</name></member>
      <member refid="classtinfo__t_1ad0f3c8573642add0859f5959593070e1" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>requires_qualifier</name></member>
      <member refid="classtinfo__t_1aad9f22f20f6a5d73cb5ac7932ef4b120" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>serialize</name></member>
      <member refid="classtinfo__t_1ad597870648531d77456f6eb0ba6fa898" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>set_attr</name></member>
      <member refid="classtinfo__t_1a106c7cff2f3378b063d22ecf8bf4c21f" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>set_attrs</name></member>
      <member refid="classtinfo__t_1a4b99a37eae3326ee35428b8d9e177ad9" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>set_const</name></member>
      <member refid="classtinfo__t_1a50abfc9c0a7dcbaa6f398f7ece0c172d" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>set_declalign</name></member>
      <member refid="classtinfo__t_1a1d32224716addb74e18f826fd39582d9" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>set_modifiers</name></member>
      <member refid="classtinfo__t_1a0f3f0f6661b62e761a527a28ab479f15" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>set_named_type</name></member>
      <member refid="classtinfo__t_1a8e91dbe8b03015175516ad0c3462a0cc" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>set_numbered_type</name></member>
      <member refid="classtinfo__t_1a764758f4819b735c7df79928641be214" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>set_symbol_type</name></member>
      <member refid="classtinfo__t_1a5c02cc5ea5cf634be45d88e12ae70ab7" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>set_volatile</name></member>
      <member refid="classtinfo__t_1a2d6b953da5eb43f72ed8f525d8b2316ca370ea4efa775462985262f64945d7031" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>STA_DECLALIGN</name></member>
      <member refid="classtinfo__t_1a2d6b953da5eb43f72ed8f525d8b2316c" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>sta_prop_t</name></member>
      <member refid="classtinfo__t_1a2d6b953da5eb43f72ed8f525d8b2316ca5afe12d9caf9e34b5d07cc6e5400fd91" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>STA_TYPE_SIGN</name></member>
      <member refid="classtinfo__t_1a2d6b953da5eb43f72ed8f525d8b2316cae62c67e4e6857d5c0db94ab185efde0c" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>STA_UDT_ALIGN</name></member>
      <member refid="classtinfo__t_1abd4e021d8c7e2ecea89b869d8a842576" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>swap</name></member>
      <member refid="classtinfo__t_1aa0bd0a48b0a992cc308b11a6836e9668" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>tinfo_t</name></member>
      <member refid="classtinfo__t_1a4bd009928d01fa7658e06d2a49572500" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>tinfo_t</name></member>
      <member refid="classtinfo__t_1a3b4a30ae71d54304d7cbe80d3384b73f" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>tinfo_t</name></member>
      <member refid="classtinfo__t_1a4c01dbfdf500bee5e04900a0faba7ae8" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>type_detail_t</name></member>
      <member refid="classtinfo__t_1a9a9c065864737e982ce4e76affb7fa36" prot="private" virt="non-virtual"><scope>tinfo_t</scope><name>typid</name></member>
      <member refid="classtinfo__t_1a5ac4d67948dc18a97fd53447679f2eb8" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>write_bitfield_value</name></member>
      <member refid="classtinfo__t_1a80e99c7d5c6d03b6e4c9eba7c5b4f490" prot="public" virt="non-virtual"><scope>tinfo_t</scope><name>~tinfo_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
