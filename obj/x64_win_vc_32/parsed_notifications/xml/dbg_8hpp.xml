<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="dbg_8hpp" kind="file" language="C++">
    <compoundname>dbg.hpp</compoundname>
    <includes refid="idp_8hpp" local="no">idp.hpp</includes>
    <includes refid="idd_8hpp" local="no">idd.hpp</includes>
    <includes refid="kernwin_8hpp" local="no">kernwin.hpp</includes>
    <incdepgraph>
      <node id="184">
        <label>sys/stat.h</label>
      </node>
      <node id="168">
        <label>stdarg.h</label>
      </node>
      <node id="171">
        <label>assert.h</label>
      </node>
      <node id="187">
        <label>ida.hpp</label>
        <link refid="ida_8hpp"/>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
      </node>
      <node id="167">
        <label>stdlib.h</label>
      </node>
      <node id="194">
        <label>ua.hpp</label>
        <link refid="ua_8hpp"/>
        <childnode refid="195" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
      </node>
      <node id="197">
        <label>bitrange.hpp</label>
        <link refid="bitrange_8hpp"/>
      </node>
      <node id="179">
        <label>io.h</label>
      </node>
      <node id="182">
        <label>fcntl.h</label>
      </node>
      <node id="185">
        <label>llong.hpp</label>
        <link refid="llong_8hpp_source"/>
      </node>
      <node id="177">
        <label>malloc.h</label>
      </node>
      <node id="199">
        <label>idd.hpp</label>
        <link refid="idd_8hpp"/>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
      </node>
      <node id="176">
        <label>string</label>
      </node>
      <node id="181">
        <label>map</label>
      </node>
      <node id="164">
        <label>idp.hpp</label>
        <link refid="idp_8hpp"/>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="191" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
        <childnode refid="198" relation="include">
        </childnode>
      </node>
      <node id="180">
        <label>direct.h</label>
      </node>
      <node id="163">
        <label>obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp</label>
        <link refid="dbg_8hpp"/>
        <childnode refid="164" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
        <childnode refid="195" relation="include">
        </childnode>
      </node>
      <node id="169">
        <label>stddef.h</label>
      </node>
      <node id="186">
        <label>nalt.hpp</label>
        <link refid="nalt_8hpp"/>
        <childnode refid="187" relation="include">
        </childnode>
        <childnode refid="189" relation="include">
        </childnode>
      </node>
      <node id="193">
        <label>lines.hpp</label>
        <link refid="lines_8hpp"/>
        <childnode refid="187" relation="include">
        </childnode>
      </node>
      <node id="172">
        <label>limits.h</label>
      </node>
      <node id="183">
        <label>sys/types.h</label>
      </node>
      <node id="178">
        <label>string.h</label>
      </node>
      <node id="175">
        <label>new</label>
      </node>
      <node id="196">
        <label>xref.hpp</label>
        <link refid="xref_8hpp"/>
      </node>
      <node id="191">
        <label>funcs.hpp</label>
        <link refid="funcs_8hpp"/>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
      </node>
      <node id="166">
        <label>pro.h</label>
        <link refid="pro_8h"/>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
      </node>
      <node id="190">
        <label>segment.hpp</label>
        <link refid="segment_8hpp"/>
        <childnode refid="187" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
      </node>
      <node id="174">
        <label>time.h</label>
      </node>
      <node id="165">
        <label>fpro.h</label>
        <link refid="fpro_8h"/>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
      </node>
      <node id="198">
        <label>config.hpp</label>
        <link refid="config_8hpp_source"/>
      </node>
      <node id="192">
        <label>bytes.hpp</label>
        <link refid="bytes_8hpp"/>
        <childnode refid="186" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
      </node>
      <node id="173">
        <label>ctype.h</label>
      </node>
      <node id="188">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
      </node>
      <node id="189">
        <label>netnode.hpp</label>
        <link refid="netnode_8hpp"/>
        <childnode refid="188" relation="include">
        </childnode>
      </node>
      <node id="195">
        <label>kernwin.hpp</label>
        <link refid="kernwin_8hpp"/>
      </node>
      <node id="170">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structbpt__location__t" prot="public">bpt_location_t</innerclass>
    <innerclass refid="structbpt__t" prot="public">bpt_t</innerclass>
    <innerclass refid="structmovbpt__info__t" prot="public">movbpt_info_t</innerclass>
    <innerclass refid="structbpt__visitor__t" prot="public">bpt_visitor_t</innerclass>
    <innerclass refid="structtev__info__t" prot="public">tev_info_t</innerclass>
    <innerclass refid="structmemreg__info__t" prot="public">memreg_info_t</innerclass>
    <innerclass refid="structtev__reg__value__t" prot="public">tev_reg_value_t</innerclass>
    <innerclass refid="structtev__info__reg__t" prot="public">tev_info_reg_t</innerclass>
    <innerclass refid="classeval__ctx__t" prot="public">eval_ctx_t</innerclass>
    <innerclass refid="classsource__file__t" prot="public">source_file_t</innerclass>
    <innerclass refid="classsource__item__t" prot="public">source_item_t</innerclass>
    <innerclass refid="classsrcinfo__provider__t" prot="public">srcinfo_provider_t</innerclass>
      <sectiondef kind="user-defined">
      <header>enable/disable breakpoints</header>
      <description><para>{Type, Synchronous function - available as request, Notification, none (synchronous function)} Enable or disable an existing breakpoint. A disabled breakpoint isn&apos;t available anymore in the process. </para></description>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga3ebdde0a02186ee4d5a8d3c445e2d266" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi enable_bpt</definition>
        <argsstring>(ea_t ea, bool enable=true)</argsstring>
        <name>enable_bpt</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1144" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1144" bodyend="1144"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1gad2e2644ffcda8b622a2585d88d8359bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi enable_bpt</definition>
        <argsstring>(const bpt_location_t &amp;bptloc, bool enable=true)</argsstring>
        <name>enable_bpt</name>
        <param>
          <type>const <ref refid="structbpt__location__t" kindref="compound">bpt_location_t</ref> &amp;</type>
          <declname>bptloc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1145" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1145" bodyend="1145"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga5096ed75a44d948e849d83147afa70f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool disable_bpt</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>disable_bpt</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1146" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1146" bodyend="1146"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1gab02cf82afae5c1b88b0f2f682553138c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool disable_bpt</definition>
        <argsstring>(const bpt_location_t &amp;bptloc)</argsstring>
        <name>disable_bpt</name>
        <param>
          <type>const <ref refid="structbpt__location__t" kindref="compound">bpt_location_t</ref> &amp;</type>
          <declname>bptloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1147" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1147" bodyend="1147"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1gaf9a48662b585150716161cc9855296b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_enable_bpt</definition>
        <argsstring>(ea_t ea, bool enable=true)</argsstring>
        <name>request_enable_bpt</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1148" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1148" bodyend="1148"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga2c1150235a9e71f3bb38d5897769e232" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_enable_bpt</definition>
        <argsstring>(const bpt_location_t &amp;bptloc, bool enable=true)</argsstring>
        <name>request_enable_bpt</name>
        <param>
          <type>const <ref refid="structbpt__location__t" kindref="compound">bpt_location_t</ref> &amp;</type>
          <declname>bptloc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1149" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1149" bodyend="1149"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga9875c2bdc0613502aa2a6897946687f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool request_disable_bpt</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>request_disable_bpt</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1150" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1150" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1gab3dd48e9bb0ec7d18c3e94f607beedbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool request_disable_bpt</definition>
        <argsstring>(const bpt_location_t &amp;bptloc)</argsstring>
        <name>request_disable_bpt</name>
        <param>
          <type>const <ref refid="structbpt__location__t" kindref="compound">bpt_location_t</ref> &amp;</type>
          <declname>bptloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1151" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1151" bodyend="1151"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Enable/Disable tracing</header>
      <description><para>Enable or disable the step tracing {Type, Synchronous function - available as request, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>true : enable step tracing</para></listitem><listitem><para>false : disable step tracing</para></listitem><listitem><para>-1 : temporarily disable step tracing (trace-over breakpoints are conserved: these could re-enable step tracing later) </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para></description>
      <memberdef kind="function" id="group__dbg__funcs__strace_1ga3985f14e4e4503e8e39967bdfdb2f310" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi enable_step_trace</definition>
        <argsstring>(int enable=true)</argsstring>
        <name>enable_step_trace</name>
        <param>
          <type>int</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1286" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1286" bodyend="1286"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__strace_1ga7894c4bc79158209654e77c9d3a7b152" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool disable_step_trace</definition>
        <argsstring>(void)</argsstring>
        <name>disable_step_trace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1287" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1287" bodyend="1287"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__strace_1gae5a9b930a7eed277a180e8833e44407f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_enable_step_trace</definition>
        <argsstring>(int enable=true)</argsstring>
        <name>request_enable_step_trace</name>
        <param>
          <type>int</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1288" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1288" bodyend="1288"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__strace_1gae1a5c4d830f74d956ec0934fe1d53432" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool request_disable_step_trace</definition>
        <argsstring>(void)</argsstring>
        <name>request_disable_step_trace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1289" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1289" bodyend="1289"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Enable/Disable instruction tracing</header>
      <description><para>{Type, Synchronous function - available as request, Notification, none (synchronous function)} </para></description>
      <memberdef kind="function" id="group__dbg__funcs__trcins_1gadb8c885685360fd4df289923cca0b3a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi enable_insn_trace</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>enable_insn_trace</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1356" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1356" bodyend="1356"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcins_1ga5281a6ecac4a17c40b595a2b3cb4f8c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool disable_insn_trace</definition>
        <argsstring>(void)</argsstring>
        <name>disable_insn_trace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1357" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1357" bodyend="1357"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcins_1gae0ce58c5c891b983c044ec77c38cc6e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_enable_insn_trace</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>request_enable_insn_trace</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1358" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1358" bodyend="1358"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcins_1gac7311631812381003cc8ab725374df71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool request_disable_insn_trace</definition>
        <argsstring>(void)</argsstring>
        <name>request_disable_insn_trace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1359" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1359" bodyend="1359"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Enable/Disable functions tracing</header>
      <description><para>{Type, Synchronous function - available as request, Notification, none (synchronous function)} </para></description>
      <memberdef kind="function" id="group__dbg__funcs__trcfunc_1gaeb1e9168e5e1a7b7e4fe950921cd0ece" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi enable_func_trace</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>enable_func_trace</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1405" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1405" bodyend="1405"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcfunc_1ga215d2899bbfb1c8ccb4870d4f41b1337" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool disable_func_trace</definition>
        <argsstring>(void)</argsstring>
        <name>disable_func_trace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1406" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1406" bodyend="1406"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcfunc_1gabc6ed0b6f82520d13a3e58467a1575e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_enable_func_trace</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>request_enable_func_trace</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1407" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1407" bodyend="1407"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcfunc_1gaa5b6cd550a652eb277ce8e97d5659189" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool request_disable_func_trace</definition>
        <argsstring>(void)</argsstring>
        <name>request_disable_func_trace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1408" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1408" bodyend="1408"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Enable/Disable basic blocks tracing</header>
      <description><para>{Type, Synchronous function - available as request, Notification, none (synchronous function)} </para></description>
      <memberdef kind="function" id="group__dbg__funcs__trcbb_1ga327d4a6eb70b18f445c75121bb7c38c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi enable_bblk_trace</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>enable_bblk_trace</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1449" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1449" bodyend="1449"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcbb_1gad1151782a6128c7736bb7c2a0ae07937" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool disable_bblk_trace</definition>
        <argsstring>(void)</argsstring>
        <name>disable_bblk_trace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1450" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1450" bodyend="1450"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcbb_1gaee850a2204788f9554bcd4e9c5c5de66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_enable_bblk_trace</definition>
        <argsstring>(bool enable=true)</argsstring>
        <name>request_enable_bblk_trace</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1451" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1451" bodyend="1451"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcbb_1ga0f753a7cea451ce44ffce3f5164b9e25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool request_disable_bblk_trace</definition>
        <argsstring>(void)</argsstring>
        <name>request_disable_bblk_trace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1452" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1452" bodyend="1452"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcbb_1gac00fef7582db2576fab14ea39e2fb5a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi is_bblk_trace_enabled</definition>
        <argsstring>(void)</argsstring>
        <name>is_bblk_trace_enabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1453" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1453" bodyend="1453"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___b_p_t_e_v___1ga953ca3f0482be18968f4a48d79ba6bbd" prot="public" static="no">
        <name>BPTEV_ADDED</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Breakpoint has been added. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="180" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t_e_v___1gae4da0b80e644519d408075afad08d5ea" prot="public" static="no">
        <name>BPTEV_REMOVED</name>
        <initializer>1</initializer>
        <briefdescription>
<para>Breakpoint has been removed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="181" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t_e_v___1ga422b34dcaae60c2a0ab30d82f8460b39" prot="public" static="no">
        <name>BPTEV_CHANGED</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Breakpoint has been modified. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="182" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_s_t_a_t_e___1ga38e96ce99ab25bf8045c2b8a9dbdaf70" prot="public" static="no">
        <name>DSTATE_SUSP</name>
        <initializer>-1</initializer>
        <briefdescription>
<para>process is suspended and will not continue </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="299" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_s_t_a_t_e___1ga6d31e2cc8725b482c31542d59d679630" prot="public" static="no">
        <name>DSTATE_NOTASK</name>
        <initializer>0</initializer>
        <briefdescription>
<para>no process is currently debugged </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="300" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_s_t_a_t_e___1gaa469984b7d11a438e53a6f9f554c4669" prot="public" static="no">
        <name>DSTATE_RUN</name>
        <initializer>1</initializer>
        <briefdescription>
<para>process is running </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="301" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_b_g_i_n_v___1gafd24acc1ef50acd65792ff05842c9e22" prot="public" static="no">
        <name>DBGINV_MEMORY</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>invalidate cached memory contents </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="307" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_b_g_i_n_v___1ga2d97675ea4207ce468cbb4d79992d62d" prot="public" static="no">
        <name>DBGINV_MEMCFG</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>invalidate cached process segmentation </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="308" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_b_g_i_n_v___1ga11c1c6ceafb42803edfc16b0cf627137" prot="public" static="no">
        <name>DBGINV_REGS</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>invalidate cached register values </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="309" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_b_g_i_n_v___1gad8d7a3e72090eeaeaf91c00be6308909" prot="public" static="no">
        <name>DBGINV_ALL</name>
        <initializer>0x7FFF</initializer>
        <briefdescription>
<para>invalidate everything </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="310" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_b_g_i_n_v___1gae2bd34f93b7b6dd5f61f5bc6e36bb872" prot="public" static="no">
        <name>DBGINV_REDRAW</name>
        <initializer>0x8000</initializer>
        <briefdescription>
<para>refresh the screen </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="311" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_b_g_i_n_v___1gac5ba129a9da9b9e0c43efdd0b59d8a68" prot="public" static="no">
        <name>DBGINV_NONE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>invalidate nothing </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="312" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="312" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t___t_1gacbd238deaf33381a2aa088196ddea23e" prot="public" static="no">
        <name>BPT_BRK</name>
        <initializer>0x001</initializer>
        <briefdescription>
<para>suspend execution upon hit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="870" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t___t_1gadf73c238e0a67de390af45736faa776c" prot="public" static="no">
        <name>BPT_TRACE</name>
        <initializer>0x002</initializer>
        <briefdescription>
<para>add trace information upon hit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="871" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="871" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t___t_1gaea2ea7c1d9fe71b74af6ccb27816909f" prot="public" static="no">
        <name>BPT_UPDMEM</name>
        <initializer>0x004</initializer>
        <briefdescription>
<para>refresh the memory layout and contents before evaluating bpt condition </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="872" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="872" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t___t_1ga676933a01a999f920344a4bcf66d520a" prot="public" static="no">
        <name>BPT_ENABLED</name>
        <initializer>0x008</initializer>
        <briefdescription>
<para>enabled? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="873" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="873" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t___t_1gaffc7f41a3b2727c763e7a6d3cca9f7f9" prot="public" static="no">
        <name>BPT_LOWCND</name>
        <initializer>0x010</initializer>
        <briefdescription>
<para>condition is calculated at low level (on the server side) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="874" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="874" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t___t_1gafd47ed258135b5b73c3decb5333d98e7" prot="public" static="no">
        <name>BPT_TRACEON</name>
        <initializer>0x020</initializer>
        <briefdescription>
<para>enable tracing when the breakpoint is reached </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="875" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="875" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t___t_1ga6222bf4262d21d808ab8b02bd00ac529" prot="public" static="no">
        <name>BPT_TRACE_INSN</name>
        <initializer>0x040</initializer>
        <briefdescription>
<para>instruction tracing </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="876" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="876" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t___t_1ga6bf83919e074279985b267313da3d85a" prot="public" static="no">
        <name>BPT_TRACE_FUNC</name>
        <initializer>0x080</initializer>
        <briefdescription>
<para>function tracing </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="877" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="877" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t___t_1ga875b2eb20e3fc94db53d820b41483ab9" prot="public" static="no">
        <name>BPT_TRACE_BBLK</name>
        <initializer>0x100</initializer>
        <briefdescription>
<para>basic block tracing </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="878" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="878" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t___t_1ga25819cfb44b41490d5bbedac716a5370" prot="public" static="no">
        <name>BPT_TRACE_TYPES</name>
        <initializer>(<ref refid="group___b_p_t___t_1ga6222bf4262d21d808ab8b02bd00ac529" kindref="member">BPT_TRACE_INSN</ref>|<ref refid="group___b_p_t___t_1ga6bf83919e074279985b267313da3d85a" kindref="member">BPT_TRACE_FUNC</ref>|<ref refid="group___b_p_t___t_1ga875b2eb20e3fc94db53d820b41483ab9" kindref="member">BPT_TRACE_BBLK</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>trace insns, functions, and basic blocks. if any of <ref refid="group___b_p_t___t_1ga25819cfb44b41490d5bbedac716a5370" kindref="member">BPT_TRACE_TYPES</ref> bits are set but <ref refid="group___b_p_t___t_1gafd47ed258135b5b73c3decb5333d98e7" kindref="member">BPT_TRACEON</ref> is clear, then turn off tracing for the specified trace types </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="879" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="879" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t___t_1ga94841ed3129ece45901d963b4b723745" prot="public" static="no">
        <name>BPT_ELANG_MASK</name>
        <initializer>0xF0000000u</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="883" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="883" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t___t_1ga077a5d1f1a7c942b557e35f97a72e1fe" prot="public" static="no">
        <name>BPT_ELANG_SHIFT</name>
        <initializer>28</initializer>
        <briefdescription>
<para>index of the extlang (scripting language) of the condition </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="884" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="884" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_k_p_t___1ga13b10faa94d50702f7f6c3f8678eb307" prot="public" static="no">
        <name>BKPT_BADBPT</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para>failed to write the bpt to the process memory (at least one location) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="891" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="891" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_k_p_t___1ga572b525bb008791394e4f226969238a0" prot="public" static="no">
        <name>BKPT_LISTBPT</name>
        <initializer>0x02</initializer>
        <briefdescription>
<para>include in bpt list (user-defined bpt) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="892" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="892" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_k_p_t___1gaa1c2df4843da006398d8f84edf627904" prot="public" static="no">
        <name>BKPT_TRACE</name>
        <initializer>0x04</initializer>
        <briefdescription>
<para>trace bpt; should not be deleted when the process gets suspended </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="893" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="893" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_k_p_t___1ga6ca8ec060d598e8b1b9a9ab186ee40b8" prot="public" static="no">
        <name>BKPT_ACTIVE</name>
        <initializer>0x08</initializer>
        <briefdescription>
<para>active? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="894" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="894" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_k_p_t___1ga1f61249cfbcea013c744c25dc7ebbe78" prot="public" static="no">
        <name>BKPT_PARTIAL</name>
        <initializer>0x10</initializer>
        <briefdescription>
<para>partially active? (some locations were not written yet) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="895" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="895" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_k_p_t___1gab622eadc3bc8d13458589bd4849ee1da" prot="public" static="no">
        <name>BKPT_CNDREADY</name>
        <initializer>0x20</initializer>
        <briefdescription>
<para>condition has been compiled </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="896" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="896" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_k_p_t___1ga45668ba1ef80984db865804afb95c9ec" prot="public" static="no">
        <name>BKPT_FAKEPEND</name>
        <initializer>0x40</initializer>
        <briefdescription>
<para>bpt of the same type is active at the same address(es) </para>        </briefdescription>
        <detaileddescription>
<para>fake pending bpt: it is inactive but another </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="897" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="897" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_k_p_t___1gab5b8a22bda5fac3e704d141e963cbdb0" prot="public" static="no">
        <name>BKPT_PAGE</name>
        <initializer>0x80</initializer>
        <briefdescription>
<para>only after writing the bpt to the process. </para>        </briefdescription>
        <detaileddescription>
<para>written to the process as a page bpt. is available </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="899" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="899" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t_c_k___1gaff8e6dae3e5addd17cb1b62c9cca1932" prot="public" static="no">
        <name>BPTCK_NONE</name>
        <initializer>-1</initializer>
        <briefdescription>
<para>breakpoint does not exist </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1165" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t_c_k___1gab73e64686cbe07cb1cee6fe139de5c67" prot="public" static="no">
        <name>BPTCK_NO</name>
        <initializer>0</initializer>
        <briefdescription>
<para>breakpoint is disabled </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1166" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t_c_k___1ga78a4bd7c663eb6b53d75dfb18de7b541" prot="public" static="no">
        <name>BPTCK_YES</name>
        <initializer>1</initializer>
        <briefdescription>
<para>breakpoint is enabled </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1167" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_p_t_c_k___1ga962eb7d1eee40ac8161597ba3aed295b" prot="public" static="no">
        <name>BPTCK_ACT</name>
        <initializer>2</initializer>
        <briefdescription>
<para>breakpoint is active (written to the process) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1168" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_v_f___1ga23c90c75e56287e71d676609e87a4ac6" prot="public" static="no">
        <name>BVF_ABS</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>include absolute bpts </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1195" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_v_f___1ga8433d7d46be02c6bca5ef61acc73b78e" prot="public" static="no">
        <name>BVF_REL</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>include relative bpts </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1196" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_v_f___1ga96e9cde02dd6aa65186da3078eb3eab9" prot="public" static="no">
        <name>BVF_SYM</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>include symbolic bpts </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1197" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_v_f___1gaca5bf6e66037b2a8b7b746baf9002546" prot="public" static="no">
        <name>BVF_SRC</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>include source bpts </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1198" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_v_f___1ga190fe6e846ae687c83eadfc26f405614" prot="public" static="no">
        <name>BVF_ALL</name>
        <initializer>0x000F</initializer>
        <briefdescription>
<para>include all bpt location types </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1199" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_v_f___1gab66c455f5257f29aa0a1cde26f822bd2" prot="public" static="no">
        <name>BVF_STATE</name>
        <initializer>0x0030</initializer>
        <briefdescription>
<para>bpt state mask </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1200" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_v_f___1gaad41a94a1e3dce96b2bce373d499e74d" prot="public" static="no">
        <name>BVFS_ANY</name>
        <initializer>0x0000</initializer>
        <briefdescription>
<para>any state </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1201" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_v_f___1ga0114415f6272539e9110d54d798047ad" prot="public" static="no">
        <name>BVFS_INPROC</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para>written to process memory </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1202" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_v_f___1ga5645886b97165712f614e33d6eca2c21" prot="public" static="no">
        <name>BVFS_PENDING</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>pending </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1203" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_v_f___1gad326754b0f6e09a27457edefa0f6e32b" prot="public" static="no">
        <name>BVFS_DISABLED</name>
        <initializer>0x0030</initializer>
        <briefdescription>
<para>disabled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1204" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t___1ga1afbfbb8e77f0ca6ebcf5f4c2aeac41c" prot="public" static="no">
        <name>ST_OVER_DEBUG_SEG</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para>step tracing will be disabled when IP is in a debugger segment </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1298" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1298" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t___1gac2b1ae7ed8a193891d1dbec3e74c681c" prot="public" static="no">
        <name>ST_OVER_LIB_FUNC</name>
        <initializer>0x02</initializer>
        <briefdescription>
<para>step tracing will be disabled when IP is in a library function </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1299" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1299" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t___1gaf0a73d59966cfefa9a8388705270359d" prot="public" static="no">
        <name>ST_ALREADY_LOGGED</name>
        <initializer>0x04</initializer>
        <briefdescription>
<para>step tracing will be disabled when IP is already logged </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1300" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t___1gad5305d38262ca21606b3f04954bf6640" prot="public" static="no">
        <name>ST_SKIP_LOOPS</name>
        <initializer>0x08</initializer>
        <briefdescription>
<para>step tracing will try to skip loops already recorded </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1301" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t___1ga9929714be47897c870aa01025b6f025f" prot="public" static="no">
        <name>ST_DIFFERENTIAL</name>
        <initializer>0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>tracing: log only new instructions </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1302" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t___1ga2a5a7667ac9735cb5d072b4bc0016571" prot="public" static="no">
        <name>ST_OPTIONS_MASK</name>
        <initializer>(<ref refid="group___s_t___1ga1afbfbb8e77f0ca6ebcf5f4c2aeac41c" kindref="member">ST_OVER_DEBUG_SEG</ref>|<ref refid="group___s_t___1gac2b1ae7ed8a193891d1dbec3e74c681c" kindref="member">ST_OVER_LIB_FUNC</ref>|<ref refid="group___s_t___1gaf0a73d59966cfefa9a8388705270359d" kindref="member">ST_ALREADY_LOGGED</ref>|<ref refid="group___s_t___1gad5305d38262ca21606b3f04954bf6640" kindref="member">ST_SKIP_LOOPS</ref>|<ref refid="group___s_t___1ga9929714be47897c870aa01025b6f025f" kindref="member">ST_DIFFERENTIAL</ref>)</initializer>
        <briefdescription>
<para>mask of available options, to ensure compatibility with newer IDA versions </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1304" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1304" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t___1ga880bc4aaf8a4e52abb8975f8709eb6e3" prot="public" static="no">
        <name>ST_OPTIONS_DEFAULT</name>
        <initializer>(<ref refid="group___s_t___1ga1afbfbb8e77f0ca6ebcf5f4c2aeac41c" kindref="member">ST_OVER_DEBUG_SEG</ref>|<ref refid="group___s_t___1gac2b1ae7ed8a193891d1dbec3e74c681c" kindref="member">ST_OVER_LIB_FUNC</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1305" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dbg__funcs__strace_1ga226a9b986e487e9df28602e34f717324" prot="public" static="no">
        <name>FT_LOG_RET</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para>function tracing will log returning instructions </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1308" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dbg__funcs__strace_1gaf9ec65a9102a8c042f0f9505b67eaee3" prot="public" static="no">
        <name>BT_LOG_INSTS</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>log all instructions in the current basic block </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1309" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dbg__funcs__strace_1ga89056f6e4903aa314f40aa83411d95b0" prot="public" static="no">
        <name>IT_LOG_SAME_IP</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para>instruction tracing will log instructions whose IP doesn&apos;t change </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1310" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___w_f_n_e___1ga3afbe1e98fc87d0fb2c694e03cafad9a" prot="public" static="no">
        <name>WFNE_ANY</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>return the first event (even if it doesn&apos;t suspend the process) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1853" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1853" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___w_f_n_e___1ga427b0663ee82529975075056323425d6" prot="public" static="no">
        <name>WFNE_SUSP</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>wait until the process gets suspended </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1854" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1854" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___w_f_n_e___1ga1b9f63a5d21a84de34a81e2e85bcf6ab" prot="public" static="no">
        <name>WFNE_SILENT</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>1: be slient, 0:display modal boxes if necessary </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1855" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1855" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___w_f_n_e___1gae8d52fbe60408b19ece9238e7e048580" prot="public" static="no">
        <name>WFNE_CONT</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>continue from the suspended state </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1856" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1856" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___w_f_n_e___1gac8406c5be54b65c4eb1668b08af71884" prot="public" static="no">
        <name>WFNE_NOWAIT</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para>(to be used with <ref refid="group___w_f_n_e___1gae8d52fbe60408b19ece9238e7e048580" kindref="member">WFNE_CONT</ref>) </para>        </briefdescription>
        <detaileddescription>
<para>do not wait for any event, immediately return <ref refid="group__dbg__funcs__high_1gga1b8337225f4e1858632f1cdd544ecaaca8a29c5b24c131d8e85612f244a2e3571" kindref="member">DEC_TIMEOUT</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1857" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1857" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___w_f_n_e___1ga592e3c08ca42e3423159644b7ba3293c" prot="public" static="no">
        <name>WFNE_USEC</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>(minimum non-zero timeout is 40000us) </para>        </briefdescription>
        <detaileddescription>
<para>timeout is specified in microseconds </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1859" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1859" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1ga87f0425c4bcec6910c660114d8ac045f" prot="public" static="no">
        <name>DOPT_SEGM_MSGS</name>
        <initializer>0x00000001</initializer>
        <briefdescription>
<para>log debugger segments modifications </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1866" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1866" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1gae360322086b61a036df230fb93d5ef8b" prot="public" static="no">
        <name>DOPT_START_BPT</name>
        <initializer>0x00000002</initializer>
        <briefdescription>
<para>break on process start </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1867" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1867" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1ga4335d97e4daad7a58e8b8198bab60098" prot="public" static="no">
        <name>DOPT_THREAD_MSGS</name>
        <initializer>0x00000004</initializer>
        <briefdescription>
<para>log thread starts/exits </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1868" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1868" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1gadad96e92f16afc9a5afc6ecca746096b" prot="public" static="no">
        <name>DOPT_THREAD_BPT</name>
        <initializer>0x00000008</initializer>
        <briefdescription>
<para>break on thread start/exit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1869" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1869" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1gaca60c94d9e65f3c5c727ed1b2803a4ff" prot="public" static="no">
        <name>DOPT_BPT_MSGS</name>
        <initializer>0x00000010</initializer>
        <briefdescription>
<para>log breakpoints </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1870" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1870" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1ga2a62fcc5c7151eae6e6d7dda8d8c03a3" prot="public" static="no">
        <name>DOPT_LIB_MSGS</name>
        <initializer>0x00000040</initializer>
        <briefdescription>
<para>log library loads/unloads </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1872" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1872" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1gaa074a4ce81a7038438c51f7281945f12" prot="public" static="no">
        <name>DOPT_LIB_BPT</name>
        <initializer>0x00000080</initializer>
        <briefdescription>
<para>break on library load/unload </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1873" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1873" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1ga5cc4c18b01ad9de087f986fbe27c2c26" prot="public" static="no">
        <name>DOPT_INFO_MSGS</name>
        <initializer>0x00000100</initializer>
        <briefdescription>
<para>log debugging info events </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1874" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1874" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1ga8c79b60651e95b67752afe3a2248b3fc" prot="public" static="no">
        <name>DOPT_INFO_BPT</name>
        <initializer>0x00000200</initializer>
        <briefdescription>
<para>break on debugging information </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1875" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1875" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1ga66f8c9a972dafc519fd6990a8ffeceae" prot="public" static="no">
        <name>DOPT_REAL_MEMORY</name>
        <initializer>0x00000400</initializer>
        <briefdescription>
<para>do not hide breakpoint instructions </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1876" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1876" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1ga2a7e504d64d97b44560327cc28950aa2" prot="public" static="no">
        <name>DOPT_REDO_STACK</name>
        <initializer>0x00000800</initializer>
        <briefdescription>
<para>reconstruct the stack </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1877" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1877" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1gacc90281594c66909f15daf25efeafe76" prot="public" static="no">
        <name>DOPT_ENTRY_BPT</name>
        <initializer>0x00001000</initializer>
        <briefdescription>
<para>break on program entry point </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1878" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1878" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1gad41ef17e0906458ad23399ba77766ed3" prot="public" static="no">
        <name>DOPT_EXCDLG</name>
        <initializer>0x00006000</initializer>
        <briefdescription>
<para>exception dialogs: </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1879" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1879" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1ga7cb4a043cedc7dbdfc8babc9d64588f7" prot="public" static="no">
        <name>EXCDLG_NEVER</name>
        <initializer>0x00000000</initializer>
        <briefdescription>
<para>never display exception dialogs </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1880" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1880" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1ga843bb638452865b449de1b46d169a046" prot="public" static="no">
        <name>EXCDLG_UNKNOWN</name>
        <initializer>0x00002000</initializer>
        <briefdescription>
<para>display for unknown exceptions </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1881" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1881" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1ga676bc4919225046322f5537dc47add1f" prot="public" static="no">
        <name>EXCDLG_ALWAYS</name>
        <initializer>0x00006000</initializer>
        <briefdescription>
<para>always display </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1882" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1882" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1ga717ced08604a3ed7a4e19fa80a7607eb" prot="public" static="no">
        <name>DOPT_LOAD_DINFO</name>
        <initializer>0x00008000</initializer>
        <briefdescription>
<para>automatically load debug files (pdb) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1883" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1883" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1ga8362a134d21df51c2d5535ddd43b7755" prot="public" static="no">
        <name>DOPT_END_BPT</name>
        <initializer>0x00010000</initializer>
        <briefdescription>
<para>evaluate event condition on process end </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1884" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1884" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_o_p_t___1ga5ea8eb158d482ad4a56c383f028abee3" prot="public" static="no">
        <name>DOPT_TEMP_HWBPT</name>
        <initializer>0x00020000</initializer>
        <briefdescription>
<para>when possible use hardware bpts for temp bpts </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1885" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1885" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dbg__funcs__srcinfo_1gafa9ea79b7e23b09dfb6bb662308fe20d" prot="public" static="no">
        <name>SRCDBG_PROV_VERSION</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2266" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_f___1ga0b1427e15e8838a32c5ac9926a9d5625" prot="public" static="no">
        <name>SPF_DECOMPILER</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>is a decompiler? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2281" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_f___1ga7d48a270528a435aba790cc30a99007c" prot="public" static="no">
        <name>SPF_ENABLED</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>(this bit is managed by ida) </para>        </briefdescription>
        <detaileddescription>
<para>enabled by the user </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2282" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_f___1ga4b17ed13d2cdfb4f7e7318edc1c1f936" prot="public" static="no">
        <name>SPF_ACTIVE</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>(this bit is managed by ida) </para>        </briefdescription>
        <detaileddescription>
<para>is willing to work with the current idb </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2284" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_f___1ga7071d9eb5ab27b35f1ccb9a2276b6a26" prot="public" static="no">
        <name>SPF_VERSION_MASK</name>
        <initializer>0xFF000000</initializer>
        <briefdescription>
<para>No other flag should have a bit rank &gt; 23. </para>        </briefdescription>
        <detaileddescription>
<para>Version mask, in the flags. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2286" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_c_h___1ga446499ec545451329ebb9ba5f050d443" prot="public" static="no">
        <name>SPCH_NONE</name>
        <initializer>0x0000</initializer>
        <briefdescription>
<para>nothing has changed </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2344" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_c_h___1ga05efa35d0f881194eedf88fd3e5c82ea" prot="public" static="no">
        <name>SPCH_FILES</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>source files have changed </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2345" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2345" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_c_h___1gafe5e4d9834a3ac192b5d8bc8e28b7f0f" prot="public" static="no">
        <name>SPCH_ITEMS</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>source items have changed </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2346" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_p_c_h___1gad1fcd26716d17db3488db3fe1fa21e98" prot="public" static="no">
        <name>SPCH_LINES</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>source line numbers have changed </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2347" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2347" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908c" prot="public" static="no">
        <name>dbg_notification_t</name>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca9bcf815f29e68658e0ffb1d2c614cc41" prot="public">
          <name>dbg_null</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca9c71d0a00c715ba7f5b903c7a25de1eb" prot="public">
          <name>dbg_process_start</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This event notification is also an asynchronous function result notification for <ref refid="group__dbg__funcs__cmds_1gae5e88efeab714519f8424aef6034c50d" kindref="member">start_process()</ref> ! </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca8636e64919319ca38ff0c12d64b9421c" prot="public">
          <name>dbg_process_exit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This event notification is also an asynchronous function result notification for <ref refid="group__dbg__funcs__cmds_1gae5e88efeab714519f8424aef6034c50d" kindref="member">start_process()</ref> ! </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908caf603054c6474ef8f7f1e1f722005eb87" prot="public">
          <name>dbg_process_attach</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This event notification is also an asynchronous function result notification for <ref refid="group__dbg__funcs__cmds_1gae5e88efeab714519f8424aef6034c50d" kindref="member">start_process()</ref> ! </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca9953b6587edabb6e6189732186e092aa" prot="public">
          <name>dbg_process_detach</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This event notification is also an asynchronous function result notification for <ref refid="group__dbg__funcs__cmds_1gae5e88efeab714519f8424aef6034c50d" kindref="member">start_process()</ref> ! </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca55c11bf7f9652a8a1b01a38fc676eae5" prot="public">
          <name>dbg_thread_start</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908caaff97f0d20b4084529ada0c372568970" prot="public">
          <name>dbg_thread_exit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908caf8a7316e2e8735f97801f0c1ee5df575" prot="public">
          <name>dbg_library_load</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908cadb9251f88d7c08656e222485a43cb47e" prot="public">
          <name>dbg_library_unload</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca69ef3df3a678da779ea9a27392bad1ec" prot="public">
          <name>dbg_information</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908cabcf2304a27bd12905b7f77ed8d716a0b" prot="public">
          <name>dbg_exception</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">warn</parametername>
</parameternamelist>
<parameterdescription>
<para>(int *) filled with:<itemizedlist>
<listitem><para>-1: display an exception warning dialog if the process is suspended.</para></listitem><listitem><para>0: never display an exception warning dialog.</para></listitem><listitem><para>1: always display an exception warning dialog. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca9c3f031bf95ae0fd16786ecaee29d3ad" prot="public">
          <name>dbg_suspend_process</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The process is now suspended. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This event notification is also an asynchronous function result notification for <ref refid="group__dbg__funcs__cmds_1gafde4e91a01fb308d4418512ccb369637" kindref="member">suspend_process()</ref> ! </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca003e2321192b3c04e6cd53460289091d" prot="public">
          <name>dbg_bpt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A user defined breakpoint was reached. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bptea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">warn</parametername>
</parameternamelist>
<parameterdescription>
<para>(int *) filled with:<itemizedlist>
<listitem><para>-1: display an exception warning dialog if the process is suspended.</para></listitem><listitem><para>0: never display an exception warning dialog.</para></listitem><listitem><para>1: always display an exception warning dialog. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908cadb272b9991f6fb0dad38c056bcb4cc62" prot="public">
          <name>dbg_trace</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A step occurred (one instruction was executed). This event notification is only generated if step tracing is enabled. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ip</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>do not log this trace event </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>log it </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908caee37fa6ba6030fdaf7494d95d0ec017d" prot="public">
          <name>dbg_request_error</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An error occurred during the processing of a request. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>failed_command</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="kernwin_8hpp_1a4a23e389ff9cbf1cd31179ca2f393334" kindref="member">ui_notification_t</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>failed_dbg_notification</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908c" kindref="member">dbg_notification_t</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca5a821bb0745f812a64d067ac117d6ef6" prot="public">
          <name>dbg_step_into</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908cae8ecb9951b87b5d6ff52d0dda67b84b3" prot="public">
          <name>dbg_step_over</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca52f43e6006d1ebb6be91050d2f59f8fc" prot="public">
          <name>dbg_run_to</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca611c4a9713c7d7e3e8c8a52375df423e" prot="public">
          <name>dbg_step_until_ret</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>event</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908cae7c345bea8999b97ebdec4131a3a33ec" prot="public">
          <name>dbg_bpt_changed</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Breakpoint has been changed. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bptev_code</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) <ref refid="group___b_p_t_e_v__" kindref="compound">Breakpoint modification events</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bpt</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structbpt__t" kindref="compound">bpt_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca34f1bb3d76c70732b54ddb27ad905598" prot="public">
          <name>dbg_last</name>
          <briefdescription>
<para>The last debugger notification code. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Debugger notification codes.</para><para>A plugin can receive notifications of all major events in the debugger, by calling the <ref refid="ida_8hpp_1a9ff01a67acece6c7a82871ce43892508" kindref="member">hook_to_notification_point()</ref> function with <ref refid="ida_8hpp_1a7e27f99f14a603e02c74a9d66adcc6daa709c9e203b8afdf9769637581c8e27c6" kindref="member">HT_DBG</ref> as <ref refid="ida_8hpp_1a7e27f99f14a603e02c74a9d66adcc6da" kindref="member">hook_type_t</ref> (see <ref refid="loader_8hpp" kindref="compound">loader.hpp</ref> for details about installing and removing such callbacks).</para><para>IDA generates two major different types of debugger notifications:</para><para><itemizedlist>
<listitem><para>debugger event notification: this notification monitors usual events occurring during the execution of a process. These event notifications are always generated for any process. Some of these event notifications are interpreted by IDA (high-level events), while others are directly generated by the debugger module (low-level events). Low-level events always return a <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> structure as an argument.</para></listitem><listitem><para>debugger asynchronous function result notification: such a notification occurs only when a debugger properly terminated the execution of an asynchronous function (see <ref refid="group__dbg__funcs" kindref="compound">Debugger functions</ref>)</para></listitem></itemizedlist>
</para><para>How to control the process execution (after the execution of all notification handlers) from the notification handler:</para><para><itemizedlist>
<listitem><para>to force the process to STOP: call <ref refid="group__dbg__funcs__cmds_1gafde4e91a01fb308d4418512ccb369637" kindref="member">suspend_process()</ref>. In this case, the current debugger command will be aborted and no new request will be started.</para></listitem><listitem><para>to force the process to CONTINUE: call <ref refid="group__dbg__funcs__cmds_1ga8833a43919fac27965ef862bbc2b5073" kindref="member">continue_process()</ref>. In this case, no new request will be started.</para></listitem><listitem><para>to start new debugger command(s): call as many request_COMMAND() as needed, then call <ref refid="group__dbg__funcs_1ga7a7be026d9efa51e8a10936c38a1f50f" kindref="member">run_requests()</ref>. In this case, the current debugger command (if any) will be aborted. (see <ref refid="group__dbg__funcs" kindref="compound">Debugger functions</ref> in this file for more details about requests)</para></listitem><listitem><para>else, the process execution will depend on the current debugger options or object settings. Some examples:<itemizedlist>
<listitem><para>a new loaded library will stop the process depending on the associated debugger option.</para></listitem><listitem><para>a breakpoint will stop the process depending on its properties.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para>A plugin must not call asynchronous debugger functions from the notification handler! Use the REQUEST QUEUE mechanism instead (request_...()).</para><para>If the plugin wants to access the process memory from a notification point, it should call <ref refid="group__dbg__funcs__mem_1gaeb1edb73becff1b8483d32b3d0ef156d" kindref="member">invalidate_dbgmem_config()</ref> and/or <ref refid="group__dbg__funcs__mem_1gaf7dc084fa0edb1ea55add52947d7dcfd" kindref="member">invalidate_dbgmem_contents()</ref> functions. The <ref refid="group__dbg__funcs__mem_1gaeb1edb73becff1b8483d32b3d0ef156d" kindref="member">invalidate_dbgmem_config()</ref> is really slow, so do not call it unless the process memory config have changed after the last time the process was suspended. The <ref refid="group__dbg__funcs__mem_1gaf7dc084fa0edb1ea55add52947d7dcfd" kindref="member">invalidate_dbgmem_contents()</ref> is fast and flushes the memory cache in the ida kernel. Without it, functions like <ref refid="bytes_8hpp_1a06299d4eec6753242edc18605abc33e4" kindref="member">get_byte()</ref> would return stale values! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="93" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="92" bodyend="175"/>
      </memberdef>
      <memberdef kind="enum" id="group__dbg__funcs__bpts_1gaf5c25ba86cdf45fc0a619a356e20ff3e" prot="public" static="no">
        <name>bpt_loctype_t</name>
        <enumvalue id="group__dbg__funcs__bpts_1ggaf5c25ba86cdf45fc0a619a356e20ff3ea4e1bd678d3247c82b0c2b4447766457b" prot="public">
          <name>BPLT_ABS</name>
          <briefdescription>
<para>absolute address: ea </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__bpts_1ggaf5c25ba86cdf45fc0a619a356e20ff3ea144f1e5d0dd732458bd97931adf55d0e" prot="public">
          <name>BPLT_REL</name>
          <briefdescription>
<para>relative address: module_path, offset </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__bpts_1ggaf5c25ba86cdf45fc0a619a356e20ff3ea88d90a791ba0e184db4824151ef2acfd" prot="public">
          <name>BPLT_SYM</name>
          <briefdescription>
<para>symbolic: symbol_name, offset </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__bpts_1ggaf5c25ba86cdf45fc0a619a356e20ff3ea698e1dfca593bbdd7d74769de204f2d6" prot="public">
          <name>BPLT_SRC</name>
          <briefdescription>
<para>source level: filename, lineno </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Breakpoint location types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="781" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="780" bodyend="786"/>
      </memberdef>
      <memberdef kind="enum" id="group__dbg__funcs__bpts_1gaf3afa4e1ad8da8809719c5830702d2b3" prot="public" static="no">
        <name>movbpt_code_t</name>
        <enumvalue id="group__dbg__funcs__bpts_1ggaf3afa4e1ad8da8809719c5830702d2b3ab0ce59ecadf7a3e68a261aae88ff87f1" prot="public">
          <name>MOVBPT_OK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__bpts_1ggaf3afa4e1ad8da8809719c5830702d2b3a6e643c76aa7c0a853b6eb26c4d0bb620" prot="public">
          <name>MOVBPT_NOT_FOUND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__bpts_1ggaf3afa4e1ad8da8809719c5830702d2b3a46ca423edfe60e5ca480429000340919" prot="public">
          <name>MOVBPT_DEST_BUSY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__bpts_1ggaf3afa4e1ad8da8809719c5830702d2b3a6d55bbb4de10f8537cd7dc412cb5188c" prot="public">
          <name>MOVBPT_BAD_TYPE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="974" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="973" bodyend="979"/>
      </memberdef>
      <memberdef kind="enum" id="group__dbg__funcs__trcev_1ga819324166f57b690cbd7a40dbb7de307" prot="public" static="no">
        <name>tev_type_t</name>
        <enumvalue id="group__dbg__funcs__trcev_1gga819324166f57b690cbd7a40dbb7de307a6380eeed850683408ef3422b8be8d575" prot="public">
          <name>tev_none</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>no event </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__trcev_1gga819324166f57b690cbd7a40dbb7de307a1a318d1a876f3dd72b7c9702e02493b0" prot="public">
          <name>tev_insn</name>
          <briefdescription>
<para>an instruction trace </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__trcev_1gga819324166f57b690cbd7a40dbb7de307a6d68680e982ffa4b7b507fd5236e9486" prot="public">
          <name>tev_call</name>
          <briefdescription>
<para>a function call trace </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__trcev_1gga819324166f57b690cbd7a40dbb7de307afdada038571f1bfe3fbba4db219a9763" prot="public">
          <name>tev_ret</name>
          <briefdescription>
<para>a function return trace </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__trcev_1gga819324166f57b690cbd7a40dbb7de307a1dd60043f2b305b0ba68236e18050075" prot="public">
          <name>tev_bpt</name>
          <briefdescription>
<para>write, read/write, execution trace </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__trcev_1gga819324166f57b690cbd7a40dbb7de307aaf6dc5b980bbf8cde17ba529bbd4f599" prot="public">
          <name>tev_mem</name>
          <briefdescription>
<para>memory layout changed </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__trcev_1gga819324166f57b690cbd7a40dbb7de307ad6f2240959687bf7e296a0b48ca4157b" prot="public">
          <name>tev_event</name>
          <briefdescription>
<para>debug event occurred </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__trcev_1gga819324166f57b690cbd7a40dbb7de307a0da66864bfe77a912954a3ecf6edb56d" prot="public">
          <name>tev_max</name>
          <briefdescription>
<para>first unused event type </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Trace event types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1485" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1484" bodyend="1494"/>
      </memberdef>
      <memberdef kind="enum" id="group__dbg__funcs__trcev_1ga95e0ece6b20c3fab568ab04e194c4600" prot="public" static="no">
        <name>save_reg_values_t</name>
        <enumvalue id="group__dbg__funcs__trcev_1gga95e0ece6b20c3fab568ab04e194c4600a899cb8e09e9806845813283fb0c9e541" prot="public">
          <name>SAVE_ALL_VALUES</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__trcev_1gga95e0ece6b20c3fab568ab04e194c4600a0688f1b1ea9ecdce1c7e99988b777465" prot="public">
          <name>SAVE_DIFF</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__trcev_1gga95e0ece6b20c3fab568ab04e194c4600a751886c2b15a56ab567a036514b2adfe" prot="public">
          <name>SAVE_NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Se <ref refid="group__dbg__funcs__trcev_1gad4eeafc5d64284ca253a92a82a389423" kindref="member">dbg_add_insn_tev()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1701" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1700" bodyend="1705"/>
      </memberdef>
      <memberdef kind="enum" id="group__dbg__funcs__high_1ga1b8337225f4e1858632f1cdd544ecaac" prot="public" static="no">
        <name>dbg_event_code_t</name>
        <enumvalue id="group__dbg__funcs__high_1gga1b8337225f4e1858632f1cdd544ecaaca5bf2a8078c411a898f84f2bc2d35c5db" prot="public">
          <name>DEC_NOTASK</name>
          <initializer>= -2</initializer>
          <briefdescription>
<para>process does not exist </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__high_1gga1b8337225f4e1858632f1cdd544ecaacaff4edc949ddac1996cd22176bac3989b" prot="public">
          <name>DEC_ERROR</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>error </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__high_1gga1b8337225f4e1858632f1cdd544ecaaca8a29c5b24c131d8e85612f244a2e3571" prot="public">
          <name>DEC_TIMEOUT</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>timeout </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Debugger event codes. </para>        </briefdescription>
        <detaileddescription>
<para>Wait for the next debugger event. See also <ref refid="group__dbg__funcs__cmds_1ga610fa89b8ec6db08d7f7d3aabcf69a2f" kindref="member">get_process_state()</ref> to get info about the current state of the debugged application </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1844" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1843" bodyend="1848"/>
      </memberdef>
      <memberdef kind="enum" id="group__dbg__funcs__srcinfo_1gadd1590e46b67c1fbc2820300b894596f" prot="public" static="no">
        <name>src_item_kind_t</name>
        <enumvalue id="group__dbg__funcs__srcinfo_1ggadd1590e46b67c1fbc2820300b894596fae3bc838b695ab9b9fdf658061c686d78" prot="public">
          <name>SRCIT_NONE</name>
          <briefdescription>
<para>unknown </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__srcinfo_1ggadd1590e46b67c1fbc2820300b894596fa0305e4e0bdd31bcbc8e5d06a9fdc0ea5" prot="public">
          <name>SRCIT_MODULE</name>
          <briefdescription>
<para>module </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__srcinfo_1ggadd1590e46b67c1fbc2820300b894596fa92ff4a0d28f152d28c4fa11290b5f70e" prot="public">
          <name>SRCIT_FUNC</name>
          <briefdescription>
<para>function </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__srcinfo_1ggadd1590e46b67c1fbc2820300b894596faaeceec779eabbd5638ff5ef4cf2e7b13" prot="public">
          <name>SRCIT_STMT</name>
          <briefdescription>
<para>a statement (if/while/for...) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__srcinfo_1ggadd1590e46b67c1fbc2820300b894596fa41e645c3100c4427db006baee797bbb7" prot="public">
          <name>SRCIT_EXPR</name>
          <briefdescription>
<para>an expression (a+b*c) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__srcinfo_1ggadd1590e46b67c1fbc2820300b894596fa30770beea0c08a727502a65f5d7a10a6" prot="public">
          <name>SRCIT_STTVAR</name>
          <briefdescription>
<para>static variable/code </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__srcinfo_1ggadd1590e46b67c1fbc2820300b894596facf476c3b2312d06afd00a551671d997a" prot="public">
          <name>SRCIT_LOCVAR</name>
          <briefdescription>
<para>a stack, register, or register-relative local variable or parameter </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Kinds of source items. Source items are organized into trees. Each tree starts with a MODULE. Each MODULE consists of FUNC and STTVAR global items. Each FUNC consists of STMTs (statements). Each STMT contains some EXPRs (expressions). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2137" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2136" bodyend="2145"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__dbg__funcs__bpts_1ga7b7aec8527b2738750b2fc01be14264f" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structbpt__t" kindref="compound">bpt_t</ref> &gt;</type>
        <definition>typedef qvector&lt;bpt_t&gt; bpt_vec_t</definition>
        <argsstring></argsstring>
        <name>bpt_vec_t</name>
        <briefdescription>
<para>vector of breakpoints </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="970" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="970" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dbg__funcs__bpts_1ga3e0b820e079d99dca03f236ea5be387e" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; movbpt_code_t &gt;</type>
        <definition>typedef qvector&lt;movbpt_code_t&gt; movbpt_codes_t</definition>
        <argsstring></argsstring>
        <name>movbpt_codes_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="980" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="980" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dbg__funcs__bpts_1ga78f5193f37ff593e550adc735ac116dd" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structmovbpt__info__t" kindref="compound">movbpt_info_t</ref> &gt;</type>
        <definition>typedef qvector&lt;movbpt_info_t&gt; movbpt_infos_t</definition>
        <argsstring></argsstring>
        <name>movbpt_infos_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="988" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="987" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dbg__funcs__trcev_1ga78aea8e7f9564921ac03f32b5e984e40" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> &gt;</type>
        <definition>typedef qvector&lt;debug_event_t&gt; dbgevt_vec_t</definition>
        <argsstring></argsstring>
        <name>dbgevt_vec_t</name>
        <briefdescription>
<para>vector of debug events </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1496" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1496" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dbg__funcs__trcev_1ga543544c00e9b91c88bafc2f4c122e577" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structtev__info__t" kindref="compound">tev_info_t</ref> &gt;</type>
        <definition>typedef qvector&lt;tev_info_t&gt; tevinfo_vec_t</definition>
        <argsstring></argsstring>
        <name>tevinfo_vec_t</name>
        <briefdescription>
<para>vector of trace event info objects </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1505" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1505" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dbg__funcs__trcev_1ga6710c026f049624651faeae52a1c7b68" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structmemreg__info__t" kindref="compound">memreg_info_t</ref> &gt;</type>
        <definition>typedef qvector&lt;memreg_info_t&gt; memreg_infos_t</definition>
        <argsstring></argsstring>
        <name>memreg_infos_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1515" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1514" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dbg__funcs__trcev_1gabd88d1be78846cdf464b0c3128879797" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structtev__reg__value__t" kindref="compound">tev_reg_value_t</ref> &gt;</type>
        <definition>typedef qvector&lt;tev_reg_value_t&gt; tev_reg_values_t</definition>
        <argsstring></argsstring>
        <name>tev_reg_values_t</name>
        <briefdescription>
<para>vector of trace event reg values </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1687" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1686" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dbg__funcs__trcev_1ga1aac51a9d41aa20762406c15a214e447" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structtev__info__reg__t" kindref="compound">tev_info_reg_t</ref> &gt;</type>
        <definition>typedef qvector&lt;tev_info_reg_t&gt; tevinforeg_vec_t</definition>
        <argsstring></argsstring>
        <name>tevinforeg_vec_t</name>
        <briefdescription>
<para>vector of trace elements </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1696" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1695" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dbg__funcs__srcinfo_1ga3c73aaf1eda8ff72a5a78ea13840afa5" prot="public" static="no">
        <type><ref refid="classqrefcnt__t" kindref="compound">qrefcnt_t</ref>&lt; <ref refid="classsource__item__t" kindref="compound">source_item_t</ref> &gt;</type>
        <definition>typedef qrefcnt_t&lt;source_item_t&gt; source_item_ptr</definition>
        <argsstring></argsstring>
        <name>source_item_ptr</name>
        <briefdescription>
<para>Maintain a reference count for source items. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2067" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2064" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dbg__funcs__srcinfo_1ga245336179be5f17b6bf77f5cc2481b24" prot="public" static="no">
        <type><ref refid="classqiterator" kindref="compound">qiterator</ref>&lt; <ref refid="group__dbg__funcs__srcinfo_1ga3c73aaf1eda8ff72a5a78ea13840afa5" kindref="member">source_item_ptr</ref> &gt;</type>
        <definition>typedef qiterator&lt;source_item_ptr&gt; _source_item_iterator</definition>
        <argsstring></argsstring>
        <name>_source_item_iterator</name>
        <briefdescription>
<para>Iterator for source items. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2069" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2069" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dbg__funcs__srcinfo_1gafdf5f52760e4ac48addc8b82986f6a8e" prot="public" static="no">
        <type><ref refid="classqrefcnt__t" kindref="compound">qrefcnt_t</ref>&lt; <ref refid="group__dbg__funcs__srcinfo_1ga245336179be5f17b6bf77f5cc2481b24" kindref="member">_source_item_iterator</ref> &gt;</type>
        <definition>typedef qrefcnt_t&lt;_source_item_iterator&gt; source_item_iterator</definition>
        <argsstring></argsstring>
        <name>source_item_iterator</name>
        <briefdescription>
<para>Maintain a reference count for source item iterators. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2071" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2071" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dbg__funcs__srcinfo_1ga9fd41e0ea321e1632c866f11f6bf1a30" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="group__dbg__funcs__srcinfo_1ga3c73aaf1eda8ff72a5a78ea13840afa5" kindref="member">source_item_ptr</ref> &gt;</type>
        <definition>typedef qvector&lt;source_item_ptr&gt; source_items_t</definition>
        <argsstring></argsstring>
        <name>source_items_t</name>
        <briefdescription>
<para>Vector of source items. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2073" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2073" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dbg__funcs__srcinfo_1ga449f74352768d9ec163293dfa225a230" prot="public" static="no">
        <type><ref refid="classqrefcnt__t" kindref="compound">qrefcnt_t</ref>&lt; <ref refid="classsource__file__t" kindref="compound">source_file_t</ref> &gt;</type>
        <definition>typedef qrefcnt_t&lt;source_file_t&gt; source_file_ptr</definition>
        <argsstring></argsstring>
        <name>source_file_ptr</name>
        <briefdescription>
<para>Maintain a reference count for source file objects. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2124" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dbg__funcs__srcinfo_1ga446cabbb32a9738d276eb00538ba49ba" prot="public" static="no">
        <type><ref refid="classqiterator" kindref="compound">qiterator</ref>&lt; <ref refid="group__dbg__funcs__srcinfo_1ga449f74352768d9ec163293dfa225a230" kindref="member">source_file_ptr</ref> &gt;</type>
        <definition>typedef qiterator&lt;source_file_ptr&gt; _source_file_iterator</definition>
        <argsstring></argsstring>
        <name>_source_file_iterator</name>
        <briefdescription>
<para>Iterator for source files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2126" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__dbg__funcs__srcinfo_1ga3a88865b1c3ef359dea9675b081896ab" prot="public" static="no">
        <type><ref refid="classqrefcnt__t" kindref="compound">qrefcnt_t</ref>&lt; <ref refid="group__dbg__funcs__srcinfo_1ga446cabbb32a9738d276eb00538ba49ba" kindref="member">_source_file_iterator</ref> &gt;</type>
        <definition>typedef qrefcnt_t&lt;_source_file_iterator&gt; source_file_iterator</definition>
        <argsstring></argsstring>
        <name>source_file_iterator</name>
        <briefdescription>
<para>Maintain a reference count for source file iterators. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2128" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="dbg_8hpp_1a04f2054203bde05f4392b3f135a29fe3" prot="public" static="no" mutable="no">
        <type>idaman <ref refid="structdebugger__t" kindref="compound">debugger_t</ref> ida_export_data *</type>
        <definition>idaman debugger_t ida_export_data* dbg</definition>
        <argsstring></argsstring>
        <name>dbg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This structure contains information about the current debugger. (NULL if no debugger was loaded) - see <ref refid="idd_8hpp" kindref="compound">idd.hpp</ref> for details about this structure.</para><para>All functions defined in this structure should only be called by the kernel !!! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="33" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__dbg__funcs_1ga7a7be026d9efa51e8a10936c38a1f50f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi run_requests</definition>
        <argsstring>(void)</argsstring>
        <name>run_requests</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execute requests until all requests are processed or an asynchronous function is called. {Type, Synchronous function, Notification, none (synchronous function)} <simplesect kind="return"><para>false if not all requests could be processed (indicates an asynchronous function was started) </para></simplesect>
<simplesect kind="note"><para>If called from a notification handler, the execution of requests will be postponed to the end of the execution of all notification handlers. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="246" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="246" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs_1gafa6475682b46eb93b8d15054cb5af0ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="kernwin_8hpp_1a4a23e389ff9cbf1cd31179ca2f393334" kindref="member">ui_notification_t</ref> idaapi</type>
        <definition>ui_notification_t idaapi get_running_request</definition>
        <argsstring>(void)</argsstring>
        <name>get_running_request</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current running request. {Type, Synchronous function, Notification, none (synchronous function)} <simplesect kind="return"><para>ui_null if no running request </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="254" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="254" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs_1ga0d250ba97c49af20ccf106dc9c60417d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_request_running</definition>
        <argsstring>(void)</argsstring>
        <name>is_request_running</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is a request currently running? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="259" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="259" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs_1ga19bdc7609576cd2618c9e43ac1def6ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908c" kindref="member">dbg_notification_t</ref> idaapi</type>
        <definition>dbg_notification_t idaapi get_running_notification</definition>
        <argsstring>(void)</argsstring>
        <name>get_running_notification</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the notification associated (if any) with the current running request. {Type, Synchronous function, Notification, none (synchronous function)} <simplesect kind="return"><para>dbg_null if no running request </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="267" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="267" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs_1ga2e491f571ade52bfee75073d46b02bdc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi clear_requests_queue</definition>
        <argsstring>(void)</argsstring>
        <name>clear_requests_queue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear the queue of waiting requests. {Type, Synchronous function, Notification, none (synchronous function)} <simplesect kind="note"><para>If a request is currently running, this one isn&apos;t stopped. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="275" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="275" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1ga610fa89b8ec6db08d7f7d3aabcf69a2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi get_process_state</definition>
        <argsstring>(void)</argsstring>
        <name>get_process_state</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the state of the currently debugged process. {Type, Synchronous function, Notification, none (synchronous function)} <simplesect kind="return"><para>one of <ref refid="group___d_s_t_a_t_e__" kindref="compound">Debugged process states</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="292" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="292" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1ga626126369d3b58b3d5eeaa953c936988" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi set_process_state</definition>
        <argsstring>(int newstate, thid_t *p_thid, int dbginv)</argsstring>
        <name>set_process_state</name>
        <param>
          <type>int</type>
          <declname>newstate</declname>
        </param>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref> *</type>
          <declname>p_thid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dbginv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set new state for the debugged process. Notifies the IDA kernel about the change of the debugged process state. For example, a debugger module could call this function when it knows that the process is suspended for a short period of time. Some IDA API calls can be made only when the process is suspended. The process state is usually restored before returning control to the caller. You must know that it is ok to change the process state, doing it at arbitrary moments may crash the application or IDA. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newstate</parametername>
</parameternamelist>
<parameterdescription>
<para>new process state (one of <ref refid="group___d_s_t_a_t_e__" kindref="compound">Debugged process states</ref>) if <ref refid="group___d_s_t_a_t_e___1ga6d31e2cc8725b482c31542d59d679630" kindref="member">DSTATE_NOTASK</ref> is passed then the state is not changed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_thid</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to new thread id. may be NULL or pointer to <ref refid="idd_8hpp_1a3fec2238e4b2b608273f3a6c5f7a31de" kindref="member">NO_THREAD</ref>. the pointed variable will contain the old thread id upon return </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dbginv</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___d_b_g_i_n_v__" kindref="compound">Debugged process invalidation options</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>old debugger state (one of <ref refid="group___d_s_t_a_t_e__" kindref="compound">Debugged process states</ref>) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="334" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="334" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1ga01e494031d20479e64771af94a7f7f61" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi invalidate_dbg_state</definition>
        <argsstring>(int dbginv)</argsstring>
        <name>invalidate_dbg_state</name>
        <param>
          <type>int</type>
          <declname>dbginv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalidate cached debugger information. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dbginv</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___d_b_g_i_n_v__" kindref="compound">Debugged process invalidation options</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>current debugger state (one of <ref refid="group___d_s_t_a_t_e__" kindref="compound">Debugged process states</ref>) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="343" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="343" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1gae5e88efeab714519f8424aef6034c50d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi start_process</definition>
        <argsstring>(const char *path=NULL, const char *args=NULL, const char *sdir=NULL)</argsstring>
        <name>start_process</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>args</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>sdir</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Start a process in the debugger. {Type, Asynchronous function - available as Request, Notification, <ref refid="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca9c71d0a00c715ba7f5b903c7a25de1eb" kindref="member">dbg_process_start</ref>} <simplesect kind="note"><para>You can also use the <ref refid="group__dbg__funcs__flow_1ga02e3e2c96cd0e07e7b213a88415733c7" kindref="member">run_to()</ref> function to easily start the execution of a process until a given address is reached. </para></simplesect>
<simplesect kind="note"><para>For all parameters, a NULL value indicates the debugger will take the value from the defined Process Options. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>path to the executable to start </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>arguments to pass to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sdir</parametername>
</parameternamelist>
<parameterdescription>
<para>starting directory for the process </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>impossible to create the process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting of the process was cancelled by the user </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>the process was properly started </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="363" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="363" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1ga6ebf673c9bd783f10aa58dcccbe0ec68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi request_start_process</definition>
        <argsstring>(const char *path=NULL, const char *args=NULL, const char *sdir=NULL)</argsstring>
        <name>request_start_process</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>args</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>sdir</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__cmds_1gae5e88efeab714519f8424aef6034c50d" kindref="member">start_process()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="374" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="374" bodyend="380"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1gafde4e91a01fb308d4418512ccb369637" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi suspend_process</definition>
        <argsstring>(void)</argsstring>
        <name>suspend_process</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Suspend the process in the debugger. { Type,<itemizedlist>
<listitem><para>Synchronous function (if in a notification handler)</para></listitem><listitem><para>Asynchronous function (everywhere else)</para></listitem><listitem><para>available as Request, Notification,</para></listitem><listitem><para>none (if in a notification handler)</para></listitem><listitem><para><ref refid="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca9c3f031bf95ae0fd16786ecaee29d3ad" kindref="member">dbg_suspend_process</ref> (everywhere else) } <simplesect kind="note"><para>The <ref refid="group__dbg__funcs__cmds_1gafde4e91a01fb308d4418512ccb369637" kindref="member">suspend_process()</ref> function can be called from a notification handler to force the stopping of the process. In this case, no notification will be generated. When you suspend a process, the running command is always aborted. </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="398" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="398" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1ga17e3941d0bb55d22c230d16a9ff155de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_suspend_process</definition>
        <argsstring>(void)</argsstring>
        <name>request_suspend_process</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__cmds_1gafde4e91a01fb308d4418512ccb369637" kindref="member">suspend_process()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="402" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="402" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1ga8833a43919fac27965ef862bbc2b5073" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi continue_process</definition>
        <argsstring>(void)</argsstring>
        <name>continue_process</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Continue the execution of the process in the debugger. {Type, Synchronous function - available as Request, Notification, none (synchronous function)} <simplesect kind="note"><para>The <ref refid="group__dbg__funcs__cmds_1ga8833a43919fac27965ef862bbc2b5073" kindref="member">continue_process()</ref> function can be called from a notification handler to force the continuation of the process. In this case the request queue will not be examined, IDA will simply resume execution. Usually it makes sense to call <ref refid="group__dbg__funcs__cmds_1ga32a8ecb2f27d1ce7a88278cf2aaa5d8f" kindref="member">request_continue_process()</ref> followed by <ref refid="group__dbg__funcs_1ga7a7be026d9efa51e8a10936c38a1f50f" kindref="member">run_requests()</ref>, so that IDA will first start a queued request (if any) and then resume the application. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="415" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="415" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1ga32a8ecb2f27d1ce7a88278cf2aaa5d8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_continue_process</definition>
        <argsstring>(void)</argsstring>
        <name>request_continue_process</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Post a <ref refid="group__dbg__funcs__cmds_1ga8833a43919fac27965ef862bbc2b5073" kindref="member">continue_process()</ref> request. <simplesect kind="note"><para>This requires an explicit call to <ref refid="group__dbg__funcs_1ga7a7be026d9efa51e8a10936c38a1f50f" kindref="member">run_requests()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="420" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="420" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1ga2aaee8c71618ffef3f2562599b314316" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi exit_process</definition>
        <argsstring>(void)</argsstring>
        <name>exit_process</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Terminate the debugging of the current process. {Type, Asynchronous function - available as Request, Notification, <ref refid="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca8636e64919319ca38ff0c12d64b9421c" kindref="member">dbg_process_exit</ref>} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="427" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="427" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1ga0dc2ef1fb91eeffdab5cf938f0d40d1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_exit_process</definition>
        <argsstring>(void)</argsstring>
        <name>request_exit_process</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Post an <ref refid="group__dbg__funcs__cmds_1ga2aaee8c71618ffef3f2562599b314316" kindref="member">exit_process()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="431" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="431" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1gae60f07b4d9ca0f5329c3f64003aedd4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>ssize_t idaapi get_processes</definition>
        <argsstring>(procinfo_vec_t *proclist)</argsstring>
        <name>get_processes</name>
        <param>
          <type><ref refid="classqvector" kindref="compound">procinfo_vec_t</ref> *</type>
          <declname>proclist</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Take a snapshot of running processes and return their description. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">array</parametername>
</parameternamelist>
<parameterdescription>
<para>with information about each running process </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of processes or -1 on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="440" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="440" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1ga677ee11ddd3ea82cd56acdf04e2fa746" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi attach_process</definition>
        <argsstring>(pid_t pid=NO_PROCESS, int event_id=-1)</argsstring>
        <name>attach_process</name>
        <param>
          <type><ref refid="idd_8hpp_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref></type>
          <declname>pid</declname>
          <defval><ref refid="idd_8hpp_1a4bb96cbe4ed99a94352b5cb0fc5b660a" kindref="member">NO_PROCESS</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>event_id</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attach the debugger to a running process. {Type, Asynchronous function - available as Request, Notification, <ref refid="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908caf603054c6474ef8f7f1e1f722005eb87" kindref="member">dbg_process_attach</ref>} <simplesect kind="note"><para>This function shouldn&apos;t be called as a request if <ref refid="idd_8hpp_1a4bb96cbe4ed99a94352b5cb0fc5b660a" kindref="member">NO_PROCESS</ref> is used. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>PID of the process to attach to. If <ref refid="idd_8hpp_1a4bb96cbe4ed99a94352b5cb0fc5b660a" kindref="member">NO_PROCESS</ref>, a dialog box will interactively ask the user for the process to attach to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-4</parametername>
</parameternamelist>
<parameterdescription>
<para>debugger was not inited </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-3</parametername>
</parameternamelist>
<parameterdescription>
<para>the attaching is not supported </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-2</parametername>
</parameternamelist>
<parameterdescription>
<para>impossible to find a compatible process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>impossible to attach to the given process (process died, privilege needed, not supported by the debugger plugin, ...) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>the user cancelled the attaching to the process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>the debugger properly attached to the process </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="457" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="457" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1ga5a43a13fc0e18490d75206f52ed845e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi request_attach_process</definition>
        <argsstring>(pid_t pid, int event_id)</argsstring>
        <name>request_attach_process</name>
        <param>
          <type><ref refid="idd_8hpp_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref></type>
          <declname>pid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>event_id</declname>
        </param>
        <briefdescription>
<para>Post an <ref refid="group__dbg__funcs__cmds_1ga677ee11ddd3ea82cd56acdf04e2fa746" kindref="member">attach_process()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="461" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="461" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1gab2a6e510deb994ccda919f055221afa0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi detach_process</definition>
        <argsstring>(void)</argsstring>
        <name>detach_process</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detach the debugger from the debugged process. {Type, Asynchronous function - available as Request, Notification, <ref refid="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca9953b6587edabb6e6189732186e092aa" kindref="member">dbg_process_detach</ref>} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="468" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="468" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1ga285d217265524c3b4db214240b2e2b53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_detach_process</definition>
        <argsstring>(void)</argsstring>
        <name>request_detach_process</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__cmds_1gab2a6e510deb994ccda919f055221afa0" kindref="member">detach_process()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="472" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="472" bodyend="472"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__cmds_1gaea12da3f16ff0ea60446377cbb21ebb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi is_debugger_busy</definition>
        <argsstring>(void)</argsstring>
        <name>is_debugger_busy</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the debugger busy?. Some debuggers do not accept any commands while the debugged application is running. For such a debugger, it is unsafe to do anything with the database (even simple queries like get_byte may lead to undesired consequences). Returns: true if the debugged application is running under such a debugger </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="481" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="481" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__threads_1gaf6a319190ad550eb695f39598d248c46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi get_thread_qty</definition>
        <argsstring>(void)</argsstring>
        <name>get_thread_qty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of threads. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="499" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="499" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__threads_1gadd9036b9eb27acc89108c6ec41bc28bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref> idaapi</type>
        <definition>thid_t idaapi getn_thread</definition>
        <argsstring>(int n)</argsstring>
        <name>getn_thread</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the ID of a thread. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of thread, is in range 0..<ref refid="group__dbg__funcs__threads_1gaf6a319190ad550eb695f39598d248c46" kindref="member">get_thread_qty()</ref>-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="idd_8hpp_1a3fec2238e4b2b608273f3a6c5f7a31de" kindref="member">NO_THREAD</ref> if the thread doesn&apos;t exist. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="508" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="508" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__threads_1gaf4d318f9496baa57975c6405e0748230" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref> idaapi</type>
        <definition>thid_t idaapi get_current_thread</definition>
        <argsstring>(void)</argsstring>
        <name>get_current_thread</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current thread ID. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="515" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="515" bodyend="515"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__threads_1gaa051e97f58df1f32329b42bd1d1d476b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *idaapi</type>
        <definition>const char* idaapi getn_thread_name</definition>
        <argsstring>(int n)</argsstring>
        <name>getn_thread_name</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the NAME of a thread {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of thread, is in range 0..<ref refid="group__dbg__funcs__threads_1gaf6a319190ad550eb695f39598d248c46" kindref="member">get_thread_qty()</ref>-1 or -1 for the current thread </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>thread name or NULL if the thread doesn&apos;t exist. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="525" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="525" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__threads_1ga813f28d4986ec6db2a2f3ba9934fa767" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi select_thread</definition>
        <argsstring>(thid_t tid)</argsstring>
        <name>select_thread</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Select the given thread as the current debugged thread. All thread related execution functions will work on this thread. The process must be suspended to select a new thread. {Type, Synchronous function - available as request, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>ID of the thread to select </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if the thread doesn&apos;t exist. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="536" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="536" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__threads_1ga7f021f1ce909ed47b4016b60b25d811c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_select_thread</definition>
        <argsstring>(thid_t tid)</argsstring>
        <name>request_select_thread</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__threads_1ga813f28d4986ec6db2a2f3ba9934fa767" kindref="member">select_thread()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="540" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="540" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__threads_1gabe20695ac4f3ac8f606a4d8be6e482ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi suspend_thread</definition>
        <argsstring>(thid_t tid)</argsstring>
        <name>suspend_thread</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Suspend thread. Suspending a thread may deadlock the whole application if the suspended was owning some synchronization objects. {Type, Synchronous function - available as request, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>thread id </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>network error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>failed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="553" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="553" bodyend="553"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__threads_1ga9e506f91e4d8d1431ccc3e39b45528db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi request_suspend_thread</definition>
        <argsstring>(thid_t tid)</argsstring>
        <name>request_suspend_thread</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__threads_1gabe20695ac4f3ac8f606a4d8be6e482ce" kindref="member">suspend_thread()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="557" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="557" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__threads_1ga61ee8890e7018e9cea3f370c57d0a7f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi resume_thread</definition>
        <argsstring>(thid_t tid)</argsstring>
        <name>resume_thread</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resume thread. {Type, Synchronous function - available as request, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>thread id </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>network error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>failed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="568" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="568" bodyend="568"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__threads_1gacb52337754f2aeeb35aab31134b82222" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi request_resume_thread</definition>
        <argsstring>(thid_t tid)</argsstring>
        <name>request_resume_thread</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__threads_1ga61ee8890e7018e9cea3f370c57d0a7f5" kindref="member">resume_thread()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="572" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="572" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__modules_1ga0f616e31b0adeff0ee908b1fdab86989" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_first_module</definition>
        <argsstring>(modinfo_t *modinfo)</argsstring>
        <name>get_first_module</name>
        <param>
          <type><ref refid="structmodinfo__t" kindref="compound">modinfo_t</ref> *</type>
          <declname>modinfo</declname>
          <briefdescription><para>See <ref refid="group__dbg__funcs__modules" kindref="compound">Modules</ref> </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="595" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="595" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__modules_1gaf4eff9b2dc23fbe7fbe1374c2f993c6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_next_module</definition>
        <argsstring>(modinfo_t *modinfo)</argsstring>
        <name>get_next_module</name>
        <param>
          <type><ref refid="structmodinfo__t" kindref="compound">modinfo_t</ref> *</type>
          <declname>modinfo</declname>
          <briefdescription><para>See <ref refid="group__dbg__funcs__modules" kindref="compound">Modules</ref> </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="598" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="598" bodyend="599"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__flow_1ga0e780614135a5f04ea7daeac368f065c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi step_into</definition>
        <argsstring>(void)</argsstring>
        <name>step_into</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execute one instruction in the current thread. Other threads are kept suspended. {Type, Asynchronous function - available as Request, Notification, <ref refid="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca5a821bb0745f812a64d067ac117d6ef6" kindref="member">dbg_step_into</ref>} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="618" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="618" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__flow_1ga3679982ff86fc987ae0ff972c66be375" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_step_into</definition>
        <argsstring>(void)</argsstring>
        <name>request_step_into</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__flow_1ga0e780614135a5f04ea7daeac368f065c" kindref="member">step_into()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="622" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="622" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__flow_1gadaecfc3eb3e84554df67fd8b92cb522f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi step_over</definition>
        <argsstring>(void)</argsstring>
        <name>step_over</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execute one instruction in the current thread, but without entering into functions. Others threads keep suspended. {Type, Asynchronous function - available as Request, Notification, <ref refid="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908cae8ecb9951b87b5d6ff52d0dda67b84b3" kindref="member">dbg_step_over</ref>} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="631" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="631" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__flow_1ga0c3b35c4cc499324ae31bbef0cca24e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_step_over</definition>
        <argsstring>(void)</argsstring>
        <name>request_step_over</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__flow_1gadaecfc3eb3e84554df67fd8b92cb522f" kindref="member">step_over()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="635" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="635" bodyend="635"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__flow_1ga02e3e2c96cd0e07e7b213a88415733c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi run_to</definition>
        <argsstring>(ea_t ea, pid_t pid=NO_PROCESS, thid_t tid=NO_THREAD)</argsstring>
        <name>run_to</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="idd_8hpp_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref></type>
          <declname>pid</declname>
          <defval><ref refid="idd_8hpp_1a4bb96cbe4ed99a94352b5cb0fc5b660a" kindref="member">NO_PROCESS</ref></defval>
        </param>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
          <defval><ref refid="idd_8hpp_1a3fec2238e4b2b608273f3a6c5f7a31de" kindref="member">NO_THREAD</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execute the process until the given address is reached. If no process is active, a new process is started. Technically, the debugger sets up a temporary breakpoint at the given address, and continues (or starts) the execution of the whole process. So, all threads continue their execution! {Type, Asynchronous function - available as Request, Notification, <ref refid="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca52f43e6006d1ebb6be91050d2f59f8fc" kindref="member">dbg_run_to</ref>} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>target address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pid</parametername>
</parameternamelist>
<parameterdescription>
<para>not used yet. please do not specify this parameter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>not used yet. please do not specify this parameter. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="650" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="650" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__flow_1ga2e73bfd05ad7e5733e56c04b8eaf2fb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_run_to</definition>
        <argsstring>(ea_t ea, pid_t pid=NO_PROCESS, thid_t tid=NO_THREAD)</argsstring>
        <name>request_run_to</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="idd_8hpp_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref></type>
          <declname>pid</declname>
          <defval><ref refid="idd_8hpp_1a4bb96cbe4ed99a94352b5cb0fc5b660a" kindref="member">NO_PROCESS</ref></defval>
        </param>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
          <defval><ref refid="idd_8hpp_1a3fec2238e4b2b608273f3a6c5f7a31de" kindref="member">NO_THREAD</ref></defval>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__flow_1ga02e3e2c96cd0e07e7b213a88415733c7" kindref="member">run_to()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="654" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="654" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__flow_1ga3a3d014490f604abdef9022031daa128" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi step_until_ret</definition>
        <argsstring>(void)</argsstring>
        <name>step_until_ret</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execute instructions in the current thread until a function return instruction is executed (aka &quot;step out&quot;). Other threads are kept suspended. {Type, Asynchronous function - available as Request, Notification, <ref refid="dbg_8hpp_1ac67a564945a2c1721691aa2f657a908ca611c4a9713c7d7e3e8c8a52375df423e" kindref="member">dbg_step_until_ret</ref>} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="662" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="662" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__flow_1ga75c1e404c959bc00150fa89af2695a5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_step_until_ret</definition>
        <argsstring>(void)</argsstring>
        <name>request_step_until_ret</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__flow_1ga3a3d014490f604abdef9022031daa128" kindref="member">step_until_ret()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="666" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="666" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__flow_1ga3bb8c83f68f33b8cc0847a0f394d8d08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi set_resume_mode</definition>
        <argsstring>(thid_t tid, resume_mode_t mode)</argsstring>
        <name>set_resume_mode</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type><ref refid="idd_8hpp_1a22acbc39891c15a300bd1ddf85edafae" kindref="member">resume_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>How to resume the application. Set resume mode but do not resume process. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="672" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="672" bodyend="672"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__flow_1ga3e997ce9e614d200826806ceb4b2428a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_set_resume_mode</definition>
        <argsstring>(thid_t tid, resume_mode_t mode)</argsstring>
        <name>request_set_resume_mode</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type><ref refid="idd_8hpp_1a22acbc39891c15a300bd1ddf85edafae" kindref="member">resume_mode_t</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__flow_1ga3bb8c83f68f33b8cc0847a0f394d8d08" kindref="member">set_resume_mode()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="676" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="676" bodyend="676"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1gaade2c637a6e327c9e282edff7c1870b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_dbg_reg_info</definition>
        <argsstring>(const char *regname, register_info_t *ri)</argsstring>
        <name>get_dbg_reg_info</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type><ref refid="structregister__info__t" kindref="compound">register_info_t</ref> *</type>
          <declname>ri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get register information {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="704" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="704" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1gaac94fe8219194588151ff8c4ee9a6600" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_reg_val</definition>
        <argsstring>(const char *regname, regval_t *regval)</argsstring>
        <name>get_reg_val</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type><ref refid="structregval__t" kindref="compound">regval_t</ref> *</type>
          <declname>regval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read a register value from the current thread. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="710" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="710" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1gade701b8b51a6a0b3111756e68c84044a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_reg_val</definition>
        <argsstring>(const char *regname, uint64 *ival)</argsstring>
        <name>get_reg_val</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> *</type>
          <declname>ival</declname>
        </param>
        <briefdescription>
<para>Get register value as an unsigned 64-bit int. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="714" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="714" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1ga350fcf63a4197ff3f5ce68197665336f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_sp_val</definition>
        <argsstring>(ea_t *out)</argsstring>
        <name>get_sp_val</name>
        <param>
          <type>ea_t *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get value of the SP register for the current thread. Requires a suspended debugger. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="719" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="719" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1ga821b963de4c394eeee94127e64880aa1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_ip_val</definition>
        <argsstring>(ea_t *out)</argsstring>
        <name>get_ip_val</name>
        <param>
          <type>ea_t *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get value of the IP (program counter) register for the current thread. Requires a suspended debugger. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="723" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="723" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1gaba72f05c6a4861033d467737fec81c10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi set_reg_val</definition>
        <argsstring>(const char *regname, const regval_t *regval)</argsstring>
        <name>set_reg_val</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type>const <ref refid="structregval__t" kindref="compound">regval_t</ref> *</type>
          <declname>regval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a register value to the current thread. {Type, Synchronous function - available as Request, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="729" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="729" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1ga5704463024f9efecb9a9266062b72f1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi set_reg_val</definition>
        <argsstring>(const char *regname, uint64 ival)</argsstring>
        <name>set_reg_val</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>ival</declname>
        </param>
        <briefdescription>
<para>Write a register value to the current thread. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="733" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="733" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1ga80bbe9e841d606d88a2f20e14f308eb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_set_reg_val</definition>
        <argsstring>(const char *regname, const regval_t *regval)</argsstring>
        <name>request_set_reg_val</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type>const <ref refid="structregval__t" kindref="compound">regval_t</ref> *</type>
          <declname>regval</declname>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__regs_1gaba72f05c6a4861033d467737fec81c10" kindref="member">set_reg_val()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="737" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="737" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1gabd263cd93f4d01345d687c7e5a1176e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi is_reg_integer</definition>
        <argsstring>(const char *regname)</argsstring>
        <name>is_reg_integer</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does a register contain an integer value? {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="744" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="744" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1ga8945a7732adce3accc70fb5a940b1450" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi is_reg_float</definition>
        <argsstring>(const char *regname)</argsstring>
        <name>is_reg_float</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does a register contain a floating point value? {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="751" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="751" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1ga708fad2035f59f04662f840f5de78000" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi is_reg_custom</definition>
        <argsstring>(const char *regname)</argsstring>
        <name>is_reg_custom</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does a register contain a value of a custom data type? {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="758" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="758" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga99062fc844ef6d441e64b7f5bf14e460" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi set_bptloc_string</definition>
        <argsstring>(const char *s)</argsstring>
        <name>set_bptloc_string</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Helper function for <ref refid="structbpt__location__t" kindref="compound">bpt_location_t</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="776" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2528" bodyend="2528"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga397042e736205e290cc1b00d0b4177e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *idaapi</type>
        <definition>const char *idaapi get_bptloc_string</definition>
        <argsstring>(int i)</argsstring>
        <name>get_bptloc_string</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Helper function for <ref refid="structbpt__location__t" kindref="compound">bpt_location_t</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="777" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2529" bodyend="2529"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga9cce72aa8f310ddc84ac1f678f59e8c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi get_bpt_qty</definition>
        <argsstring>(void)</argsstring>
        <name>get_bpt_qty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of breakpoints. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="997" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="997" bodyend="997"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1gaa189e80e83c431b512ab1f73e41ef522" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi getn_bpt</definition>
        <argsstring>(int n, bpt_t *bpt)</argsstring>
        <name>getn_bpt</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structbpt__t" kindref="compound">bpt_t</ref> *</type>
          <declname>bpt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the characteristics of a breakpoint. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of breakpoint, is in range 0..<ref refid="group__dbg__funcs__bpts_1ga9cce72aa8f310ddc84ac1f678f59e8c6" kindref="member">get_bpt_qty()</ref>-1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bpt</parametername>
</parameternamelist>
<parameterdescription>
<para>filled with the characteristics. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if no breakpoint exists </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1007" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1007" bodyend="1007"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga706120f76ce8ee5f57bc4aa633d3d360" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_bpt</definition>
        <argsstring>(ea_t ea, bpt_t *bpt)</argsstring>
        <name>get_bpt</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="structbpt__t" kindref="compound">bpt_t</ref> *</type>
          <declname>bpt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the characteristics of a breakpoint. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>any address in the breakpoint range </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">bpt</parametername>
</parameternamelist>
<parameterdescription>
<para>if not NULL, is filled with the characteristics. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if no breakpoint exists </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1017" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1017" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga3e38ac423c6f847ad52a71a4dad47d17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool exist_bpt</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>exist_bpt</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Does a breakpoint exist at the given location? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1022" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1022" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga248ebc5026f40f2fc8e1c1c4b8cc6426" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi add_bpt</definition>
        <argsstring>(ea_t ea, asize_t size=0, bpttype_t type=BPT_DEFAULT)</argsstring>
        <name>add_bpt</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="idd_8hpp_1a773a43fff5c9bacc9f28d203baec542d" kindref="member">bpttype_t</ref></type>
          <declname>type</declname>
          <defval><ref refid="group___b_p_t___h_1ga53a732ad6558824e26a608a40c52d057" kindref="member">BPT_DEFAULT</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new breakpoint in the debugged process. {Type, Synchronous function - available as request, Notification, none (synchronous function)} <simplesect kind="note"><para>Only one breakpoint can exist at a given address. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>any address in the process memory space. Depending on the architecture, hardware breakpoints always be setup at random address. For example, on x86, hardware breakpoints should be aligned depending on their size. Moreover, on the x86 architecture, it is impossible to setup more than 4 hardware breakpoints. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the breakpoint (irrelevant for software breakpoints): As for the address, hardware breakpoints can&apos;t always be setup with random size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the breakpoint (<ref refid="group___b_p_t___h_1ga002cf1299d50d3fb9b520e5f91a19b83" kindref="member">BPT_SOFT</ref> for software breakpoint) special case <ref refid="group___b_p_t___h_1ga53a732ad6558824e26a608a40c52d057" kindref="member">BPT_DEFAULT</ref> (<ref refid="group___b_p_t___h_1ga002cf1299d50d3fb9b520e5f91a19b83" kindref="member">BPT_SOFT</ref>|<ref refid="group___b_p_t___h_1gab08ccc411ade99a94afc7059d11280ab" kindref="member">BPT_EXEC</ref>): try to add instruction breakpoint of the appropriate type as follows: software bpt if supported, hwbpt otherwise </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1043" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1043" bodyend="1043"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1gaee7a8015012001a8037131d45aae1bc8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_add_bpt</definition>
        <argsstring>(ea_t ea, asize_t size=0, bpttype_t type=BPT_DEFAULT)</argsstring>
        <name>request_add_bpt</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="idd_8hpp_1a773a43fff5c9bacc9f28d203baec542d" kindref="member">bpttype_t</ref></type>
          <declname>type</declname>
          <defval><ref refid="group___b_p_t___h_1ga53a732ad6558824e26a608a40c52d057" kindref="member">BPT_DEFAULT</ref></defval>
        </param>
        <briefdescription>
<para>Post an <ref refid="group__dbg__funcs__bpts_1ga248ebc5026f40f2fc8e1c1c4b8cc6426" kindref="member">add_bpt(ea_t, asize_t, bpttype_t)</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1047" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1047" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga4ad027dcebb15e17cc031c82a1293eff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi add_bpt</definition>
        <argsstring>(const bpt_t &amp;bpt)</argsstring>
        <name>add_bpt</name>
        <param>
          <type>const <ref refid="structbpt__t" kindref="compound">bpt_t</ref> &amp;</type>
          <declname>bpt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new breakpoint in the debugged process. {Type, Synchronous function - available as request, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bpt</parametername>
</parameternamelist>
<parameterdescription>
<para>Breakpoint to add. It describes the break condition, type, flags, location (module relative, source breakpoint or absolute) and other attributes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1057" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1057" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga3708fc8db5fb299502881cf3a6abbb9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_add_bpt</definition>
        <argsstring>(const bpt_t &amp;bpt)</argsstring>
        <name>request_add_bpt</name>
        <param>
          <type>const <ref refid="structbpt__t" kindref="compound">bpt_t</ref> &amp;</type>
          <declname>bpt</declname>
        </param>
        <briefdescription>
<para>Post an <ref refid="group__dbg__funcs__bpts_1ga4ad027dcebb15e17cc031c82a1293eff" kindref="member">add_bpt(const bpt_t &amp;)</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1061" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1061" bodyend="1061"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga34ed03f5dfe91f7b20a7ea9ff28a0aa7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi del_bpt</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>del_bpt</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete an existing breakpoint in the debugged process. {Type, Synchronous function - available as request, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>any address in the breakpoint range </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1069" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1069" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga011d3cdb4726baacfee578de17714124" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_del_bpt</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>request_del_bpt</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__bpts_1ga34ed03f5dfe91f7b20a7ea9ff28a0aa7" kindref="member">del_bpt(ea_t)</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1073" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1073" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga75f3f5ae9d5fb9a67ac1513a3e9223b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi del_bpt</definition>
        <argsstring>(const bpt_location_t &amp;bptloc)</argsstring>
        <name>del_bpt</name>
        <param>
          <type>const <ref refid="structbpt__location__t" kindref="compound">bpt_location_t</ref> &amp;</type>
          <declname>bptloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete an existing breakpoint in the debugged process. {Type, Synchronous function - available as request, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bptloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Breakpoint location </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1081" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1081" bodyend="1081"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1gab203dfea08ec4cf1d71f8de497d2ae46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_del_bpt</definition>
        <argsstring>(const bpt_location_t &amp;bptloc)</argsstring>
        <name>request_del_bpt</name>
        <param>
          <type>const <ref refid="structbpt__location__t" kindref="compound">bpt_location_t</ref> &amp;</type>
          <declname>bptloc</declname>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__bpts_1ga75f3f5ae9d5fb9a67ac1513a3e9223b3" kindref="member">del_bpt(const bpt_location_t &amp;)</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1085" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1085" bodyend="1085"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1gaaf0083e494d7844f4d4c898ac5ce69c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi update_bpt</definition>
        <argsstring>(const bpt_t *bpt)</argsstring>
        <name>update_bpt</name>
        <param>
          <type>const <ref refid="structbpt__t" kindref="compound">bpt_t</ref> *</type>
          <declname>bpt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update modifiable characteristics of an existing breakpoint. To update the breakpoint location, use <ref refid="group__dbg__funcs__bpts_1gaa26e9240589279fac96941b7d068602d" kindref="member">change_bptlocs()</ref> {Type, Synchronous function, Notification, none (synchronous function)} <simplesect kind="note"><para>Only the following fields can be modified:<itemizedlist>
<listitem><para><ref refid="structbpt__t_1aa350cca6d588bb08bcc4d724b43e83b4" kindref="member">bpt_t::cndbody</ref></para></listitem><listitem><para><ref refid="structbpt__t_1a5be8cb9d4acc244b64afbdea5b8297a8" kindref="member">bpt_t::pass_count</ref></para></listitem><listitem><para><ref refid="structbpt__t_1abc14bb9f84e91c2f02acd4cbb801d23d" kindref="member">bpt_t::flags</ref></para></listitem><listitem><para><ref refid="structbpt__t_1a7e9e4eccca1699181f17c4cbc7371b4c" kindref="member">bpt_t::size</ref></para></listitem><listitem><para><ref refid="structbpt__t_1aec6d504acf8e2217fb4bdfe6061cab37" kindref="member">bpt_t::type</ref> </para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="note"><para>Changing some properties will require removing and then re-adding the breakpoint to the process memory (or the debugger backend), which can lead to race conditions (i.e., breakpoint(s) can be missed) in case the process is not suspended. Here are a list of scenarios that will require the breakpoint to be removed &amp; then re-added:<itemizedlist>
<listitem><para><ref refid="structbpt__t_1a7e9e4eccca1699181f17c4cbc7371b4c" kindref="member">bpt_t::size</ref> is modified</para></listitem><listitem><para><ref refid="structbpt__t_1aec6d504acf8e2217fb4bdfe6061cab37" kindref="member">bpt_t::type</ref> is modified</para></listitem><listitem><para><ref refid="structbpt__t_1abc14bb9f84e91c2f02acd4cbb801d23d" kindref="member">bpt_t::flags</ref>&apos;s BPT_ENABLED is modified</para></listitem><listitem><para><ref refid="structbpt__t_1abc14bb9f84e91c2f02acd4cbb801d23d" kindref="member">bpt_t::flags</ref>&apos;s BPT_LOWCND is changed</para></listitem><listitem><para><ref refid="structbpt__t_1abc14bb9f84e91c2f02acd4cbb801d23d" kindref="member">bpt_t::flags</ref>&apos;s BPT_LOWCND remains set, but cndbody changed </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1110" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1110" bodyend="1110"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1gabaab17953966f905fbda3c95b552022f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi find_bpt</definition>
        <argsstring>(const bpt_location_t &amp;bptloc, bpt_t *bpt)</argsstring>
        <name>find_bpt</name>
        <param>
          <type>const <ref refid="structbpt__location__t" kindref="compound">bpt_location_t</ref> &amp;</type>
          <declname>bptloc</declname>
        </param>
        <param>
          <type><ref refid="structbpt__t" kindref="compound">bpt_t</ref> *</type>
          <declname>bpt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find a breakpoint by location. {Type, Synchronous function - available as request, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bptloc</parametername>
</parameternamelist>
<parameterdescription>
<para>Breakpoint location </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bpt</parametername>
</parameternamelist>
<parameterdescription>
<para>bpt is filled if the breakpoint was found </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1119" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1119" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1gaa26e9240589279fac96941b7d068602d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi change_bptlocs</definition>
        <argsstring>(const movbpt_infos_t &amp;movinfo, movbpt_codes_t *codes=NULL, bool del_hindering_bpts=true)</argsstring>
        <name>change_bptlocs</name>
        <param>
          <type>const <ref refid="classqvector" kindref="compound">movbpt_infos_t</ref> &amp;</type>
          <declname>movinfo</declname>
        </param>
        <param>
          <type><ref refid="classqvector" kindref="compound">movbpt_codes_t</ref> *</type>
          <declname>codes</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>del_hindering_bpts</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move breakpoint(s) from one location to another <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>movinfo</parametername>
</parameternamelist>
<parameterdescription>
<para>what bpts to move and where to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>codes</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of return codes, if detailed error info is required </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>del_hindering_bpts</parametername>
</parameternamelist>
<parameterdescription>
<para>should delete hindering breakpoints? </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of moved bpts </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1128" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1128" bodyend="1134"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__bpts_1ga202cfe07a3d9d3afe387aa637721e83a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi check_bpt</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>check_bpt</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check the breakpoint at the specified address. <simplesect kind="return"><para>one of <ref refid="group___b_p_t_c_k__" kindref="compound">Breakpoint status codes</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1158" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1158" bodyend="1158"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcbuf_1ga8544c3a9bc20577e308142364c7ab1a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi set_trace_size</definition>
        <argsstring>(int size)</argsstring>
        <name>set_trace_size</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specify the new size of the circular buffer. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>if 0, buffer isn&apos;t circular and events are never removed. If the new size is smaller than the existing number of trace events, a corresponding number of trace events are removed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If you specify 0, all available memory can be quickly used !!! </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1239" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1239" bodyend="1239"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcbuf_1gaccb84e390e06c814d4329689d713f150" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi clear_trace</definition>
        <argsstring>(void)</argsstring>
        <name>clear_trace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear all events in the trace buffer. {Type, Synchronous function - available as request, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1246" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1246" bodyend="1246"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcbuf_1ga42eca646b17b0e2b50c17085f1c79721" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi request_clear_trace</definition>
        <argsstring>(void)</argsstring>
        <name>request_clear_trace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__trcbuf_1gaccb84e390e06c814d4329689d713f150" kindref="member">clear_trace()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1250" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1250" bodyend="1250"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__strace_1ga6bb246f1fbf0b65a427f98a7de08d924" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi is_step_trace_enabled</definition>
        <argsstring>(void)</argsstring>
        <name>is_step_trace_enabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current state of step tracing. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1271" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1271" bodyend="1271"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__strace_1gad244471ed51cd387fb9d9d372126c4a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi get_step_trace_options</definition>
        <argsstring>(void)</argsstring>
        <name>get_step_trace_options</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current step tracing options. {Type, Synchronous function, Notification, none (synchronous function)} <simplesect kind="return"><para><ref refid="group___s_t__" kindref="compound">Step trace options</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1319" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1319" bodyend="1319"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__strace_1gaeb5506229a787ff18549205a6a32723e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi set_step_trace_options</definition>
        <argsstring>(int options)</argsstring>
        <name>set_step_trace_options</name>
        <param>
          <type>int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify step tracing options. {Type, Synchronous function - available as request, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1325" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1325" bodyend="1325"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__strace_1gad914054d58992f374870293b3dc9536d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi request_set_step_trace_options</definition>
        <argsstring>(int options)</argsstring>
        <name>request_set_step_trace_options</name>
        <param>
          <type>int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__strace_1gaeb5506229a787ff18549205a6a32723e" kindref="member">set_step_trace_options()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1329" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1329" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcins_1ga8b52d12e3e7266bebd01de712f218ed5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi is_insn_trace_enabled</definition>
        <argsstring>(void)</argsstring>
        <name>is_insn_trace_enabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current state of instructions tracing. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1350" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1350" bodyend="1350"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcins_1ga3bf3337bc5df53452b32615ea6277282" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi get_insn_trace_options</definition>
        <argsstring>(void)</argsstring>
        <name>get_insn_trace_options</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current instruction tracing options. Also see <ref refid="group__dbg__funcs__strace_1ga89056f6e4903aa314f40aa83411d95b0" kindref="member">IT_LOG_SAME_IP</ref> {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1368" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1368" bodyend="1368"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcins_1gabc1b52f5c65026127dcb4e45d6774b41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi set_insn_trace_options</definition>
        <argsstring>(int options)</argsstring>
        <name>set_insn_trace_options</name>
        <param>
          <type>int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify instruction tracing options. {Type, Synchronous function - available as request, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1375" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1375" bodyend="1375"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcins_1gaf81a159fc9fbf60b5b3f7341006801d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi request_set_insn_trace_options</definition>
        <argsstring>(int options)</argsstring>
        <name>request_set_insn_trace_options</name>
        <param>
          <type>int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__trcins_1gabc1b52f5c65026127dcb4e45d6774b41" kindref="member">set_insn_trace_options()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1379" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1379" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcfunc_1gaff42710b395bc717c2f102b0ecaf61ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi is_func_trace_enabled</definition>
        <argsstring>(void)</argsstring>
        <name>is_func_trace_enabled</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current state of functions tracing. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1398" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1398" bodyend="1398"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcfunc_1ga6f711fddb037a93e4329563cafc6bac0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi get_func_trace_options</definition>
        <argsstring>(void)</argsstring>
        <name>get_func_trace_options</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current function tracing options. Also see <ref refid="group__dbg__funcs__strace_1ga226a9b986e487e9df28602e34f717324" kindref="member">FT_LOG_RET</ref> {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1417" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1417" bodyend="1417"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcfunc_1ga7e9b589690606c1d501dac326da7f50c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi set_func_trace_options</definition>
        <argsstring>(int options)</argsstring>
        <name>set_func_trace_options</name>
        <param>
          <type>int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify function tracing options. {Type, Synchronous function - available as request, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1424" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1424" bodyend="1424"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcfunc_1ga5a582a74f21fb21c19fa19ba805a6122" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi request_set_func_trace_options</definition>
        <argsstring>(int options)</argsstring>
        <name>request_set_func_trace_options</name>
        <param>
          <type>int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__trcfunc_1ga7e9b589690606c1d501dac326da7f50c" kindref="member">set_func_trace_options()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1428" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1428" bodyend="1428"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcbb_1ga80843b57307c7c84b95149d74e7ed485" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi get_bblk_trace_options</definition>
        <argsstring>(void)</argsstring>
        <name>get_bblk_trace_options</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current basic block tracing options. Also see <ref refid="group__dbg__funcs__strace_1gaf9ec65a9102a8c042f0f9505b67eaee3" kindref="member">BT_LOG_INSTS</ref> {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1461" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1461" bodyend="1461"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcbb_1ga60c9f9fbd6c03bd7717f7c4f0ea9e4b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi set_bblk_trace_options</definition>
        <argsstring>(int options)</argsstring>
        <name>set_bblk_trace_options</name>
        <param>
          <type>int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Modify basic block tracing options (see <ref refid="group__dbg__funcs__strace_1gaf9ec65a9102a8c042f0f9505b67eaee3" kindref="member">BT_LOG_INSTS</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1466" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1466" bodyend="1466"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcbb_1gafa4800fcbb5ced15edc55c7884d9c4f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi request_set_bblk_trace_options</definition>
        <argsstring>(int options)</argsstring>
        <name>request_set_bblk_trace_options</name>
        <param>
          <type>int</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__trcbb_1ga60c9f9fbd6c03bd7717f7c4f0ea9e4b3" kindref="member">set_bblk_trace_options()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1470" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1470" bodyend="1470"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1ga4374907209c5c23b15c651b54eac9c09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi get_tev_qty</definition>
        <argsstring>(void)</argsstring>
        <name>get_tev_qty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of trace events available in trace buffer. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1524" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1524" bodyend="1524"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1gad1f5394734d03edbfc0af021bdf4a986" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_tev_info</definition>
        <argsstring>(int n, tev_info_t *tev_info)</argsstring>
        <name>get_tev_info</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structtev__info__t" kindref="compound">tev_info_t</ref> *</type>
          <declname>tev_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get main information about a trace event. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trace event, is in range 0..<ref refid="group__dbg__funcs__bpts_1ga9cce72aa8f310ddc84ac1f678f59e8c6" kindref="member">get_bpt_qty()</ref>-1. 0 represents the latest added trace event. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">tev_info</parametername>
</parameternamelist>
<parameterdescription>
<para>result </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1535" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1535" bodyend="1535"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1ga8561227ca324ff5c90a427138d421e41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_insn_tev_reg_val</definition>
        <argsstring>(int n, const char *regname, regval_t *regval)</argsstring>
        <name>get_insn_tev_reg_val</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type><ref refid="structregval__t" kindref="compound">regval_t</ref> *</type>
          <declname>regval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read a register value from an instruction trace event. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trace event, is in range 0..<ref refid="group__dbg__funcs__bpts_1ga9cce72aa8f310ddc84ac1f678f59e8c6" kindref="member">get_bpt_qty()</ref>-1. 0 represents the latest added trace event. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regname</parametername>
</parameternamelist>
<parameterdescription>
<para>name of desired register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">regval</parametername>
</parameternamelist>
<parameterdescription>
<para>result </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if not an instruction event. </para></simplesect>
<simplesect kind="note"><para>This is the value of the register before the execution of the instruction. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1549" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1549" bodyend="1549"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1ga4152e9cee89fbe669f8f1437de75fa79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_insn_tev_reg_val</definition>
        <argsstring>(int n, const char *regname, uint64 *ival)</argsstring>
        <name>get_insn_tev_reg_val</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> *</type>
          <declname>ival</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1551" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1551" bodyend="1551"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1ga1cbec1a642e3a23c95daece4ce8a57e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_insn_tev_reg_mem</definition>
        <argsstring>(int n, memreg_infos_t *memmap)</argsstring>
        <name>get_insn_tev_reg_mem</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classqvector" kindref="compound">memreg_infos_t</ref> *</type>
          <declname>memmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the memory pointed by register values from an instruction trace event. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trace event, is in range 0..<ref refid="group__dbg__funcs__bpts_1ga9cce72aa8f310ddc84ac1f678f59e8c6" kindref="member">get_bpt_qty()</ref>-1. 0 represents the latest added trace event. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">memmap</parametername>
</parameternamelist>
<parameterdescription>
<para>result </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if not an instruction event or no memory is available </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1562" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1562" bodyend="1562"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1ga0eefdbe6c217f2373142a04b7d3de30a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_insn_tev_reg_result</definition>
        <argsstring>(int n, const char *regname, regval_t *regval)</argsstring>
        <name>get_insn_tev_reg_result</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type><ref refid="structregval__t" kindref="compound">regval_t</ref> *</type>
          <declname>regval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the resulting register value from an instruction trace event. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trace event, is in range 0..<ref refid="group__dbg__funcs__bpts_1ga9cce72aa8f310ddc84ac1f678f59e8c6" kindref="member">get_bpt_qty()</ref>-1. 0 represents the latest added trace event. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regname</parametername>
</parameternamelist>
<parameterdescription>
<para>name of desired register </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">regval</parametername>
</parameternamelist>
<parameterdescription>
<para>result </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if not an instruction trace event or register wasn&apos;t modified. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1574" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1574" bodyend="1574"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1gaa05a4d82f7d04971b34a5c17943641d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_insn_tev_reg_result</definition>
        <argsstring>(int n, const char *regname, uint64 *ival)</argsstring>
        <name>get_insn_tev_reg_result</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> *</type>
          <declname>ival</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1576" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1576" bodyend="1576"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1gafe4e714d4e7cca1c78a12bf89f933d1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t idaapi</type>
        <definition>ea_t idaapi get_call_tev_callee</definition>
        <argsstring>(int n)</argsstring>
        <name>get_call_tev_callee</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the called function from a function call trace event. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trace event, is in range 0..<ref refid="group__dbg__funcs__bpts_1ga9cce72aa8f310ddc84ac1f678f59e8c6" kindref="member">get_bpt_qty()</ref>-1. 0 represents the latest added trace event. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if not a function call event. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1586" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1586" bodyend="1586"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1gaa99f4bbc523b045d58e80c10d61c5e2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t idaapi</type>
        <definition>ea_t idaapi get_ret_tev_return</definition>
        <argsstring>(int n)</argsstring>
        <name>get_ret_tev_return</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the return address from a function return trace event. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trace event, is in range 0..<ref refid="group__dbg__funcs__bpts_1ga9cce72aa8f310ddc84ac1f678f59e8c6" kindref="member">get_bpt_qty()</ref>-1. 0 represents the latest added trace event. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if not a function return event. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1596" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1596" bodyend="1596"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1ga961c0e4bcaf9cd6f1c8520cbbe960347" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t idaapi</type>
        <definition>ea_t idaapi get_bpt_tev_ea</definition>
        <argsstring>(int n)</argsstring>
        <name>get_bpt_tev_ea</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the address associated to a read, read/write or execution trace event. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trace event, is in range 0..<ref refid="group__dbg__funcs__bpts_1ga9cce72aa8f310ddc84ac1f678f59e8c6" kindref="member">get_bpt_qty()</ref>-1. 0 represents the latest added trace event. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if not a read, read/write or execution trace event. </para></simplesect>
<simplesect kind="note"><para>Usually, a breakpoint is associated with a read, read/write or execution trace event. However, the returned address could be any address in the range of this breakpoint. If the breakpoint was deleted after the trace event, the address no longer corresponds to a valid breakpoint. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1611" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1611" bodyend="1611"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1gadf32fdf18a16db448767f6c568828020" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_tev_memory_info</definition>
        <argsstring>(int n, meminfo_vec_t *mi)</argsstring>
        <name>get_tev_memory_info</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="idd_8hpp_1ab53dc5825c9fb9e10963d2f321721169" kindref="member">meminfo_vec_t</ref> *</type>
          <declname>mi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the memory layout, if any, for the specified tev object. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trace event, is in range 0..<ref refid="group__dbg__funcs__bpts_1ga9cce72aa8f310ddc84ac1f678f59e8c6" kindref="member">get_bpt_qty()</ref>-1. 0 represents the latest added trace event. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mi</parametername>
</parameternamelist>
<parameterdescription>
<para>result </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if the tev_t object is not of type <ref refid="group__dbg__funcs__trcev_1gga819324166f57b690cbd7a40dbb7de307aaf6dc5b980bbf8cde17ba529bbd4f599" kindref="member">tev_mem</ref>, true otherwise, with the new memory layout in &quot;mi&quot;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1623" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1623" bodyend="1623"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1ga611263ead6eccb7acdcb8ebce9c623b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_tev_event</definition>
        <argsstring>(int n, debug_event_t *d)</argsstring>
        <name>get_tev_event</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the corresponding debug event, if any, for the specified tev object. {Type, Synchronous function, Notification, none (synchronous function)} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of trace event, is in range 0..<ref refid="group__dbg__funcs__bpts_1ga9cce72aa8f310ddc84ac1f678f59e8c6" kindref="member">get_bpt_qty()</ref>-1. 0 represents the latest added trace event. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">d</parametername>
</parameternamelist>
<parameterdescription>
<para>result </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if the tev_t object doesn&apos;t have any associated debug event, true otherwise, with the debug event in &quot;d&quot;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1635" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1635" bodyend="1635"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1ga88d62978ab2ca7cda8e43c9fa6dbd4d8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t idaapi</type>
        <definition>ea_t idaapi get_trace_base_address</definition>
        <argsstring>(void)</argsstring>
        <name>get_trace_base_address</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the base address of the current trace. {Type, Synchronous function, Notification, none (synchronous function)} <simplesect kind="return"><para>the base address of the currently loaded trace </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1643" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1643" bodyend="1643"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1ga684ffc8e5434c8bcc196450ba557aea1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi set_trace_base_address</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>set_trace_base_address</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the base address of the current trace. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1650" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1650" bodyend="1650"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1ga5f39409d4d3cb25011cc2a42f418efe6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi dbg_add_thread</definition>
        <argsstring>(thid_t tid)</argsstring>
        <name>dbg_add_thread</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a thread to the current trace. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1657" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1657" bodyend="1657"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1ga9236f91706548dc3517e3778f935dc7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi dbg_del_thread</definition>
        <argsstring>(thid_t tid)</argsstring>
        <name>dbg_del_thread</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a thread from the current trace. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1664" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1664" bodyend="1664"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1ga81e7138f4073c10a25f7c7f2ebee3120" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi dbg_add_tev</definition>
        <argsstring>(tev_type_t type, thid_t tid, ea_t address)</argsstring>
        <name>dbg_add_tev</name>
        <param>
          <type><ref refid="group__dbg__funcs__trcev_1ga819324166f57b690cbd7a40dbb7de307" kindref="member">tev_type_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new trace element to the current trace. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1671" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1671" bodyend="1671"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1gaa83545843c1e27d946fb6ae59a73989d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi dbg_add_many_tevs</definition>
        <argsstring>(tevinforeg_vec_t *new_tevs)</argsstring>
        <name>dbg_add_many_tevs</name>
        <param>
          <type><ref refid="group__dbg__funcs__trcev_1ga1aac51a9d41aa20762406c15a214e447" kindref="member">tevinforeg_vec_t</ref> *</type>
          <declname>new_tevs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add many new trace elements to the current trace. {Type, Synchronous function, Notification, none (synchronous function)} <simplesect kind="return"><para>false if the operation failed for any <ref refid="structtev__info__t" kindref="compound">tev_info_t</ref> object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1714" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1714" bodyend="1714"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1gad4eeafc5d64284ca253a92a82a389423" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi dbg_add_insn_tev</definition>
        <argsstring>(thid_t tid, ea_t ea, save_reg_values_t save=SAVE_DIFF)</argsstring>
        <name>dbg_add_insn_tev</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="group__dbg__funcs__trcev_1ga95e0ece6b20c3fab568ab04e194c4600" kindref="member">save_reg_values_t</ref></type>
          <declname>save</declname>
          <defval>SAVE_DIFF</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new instruction trace element to the current trace. {Type, Synchronous function, Notification, none (synchronous function)} <simplesect kind="return"><para>false if the operation failed, true otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1722" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1722" bodyend="1722"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1ga7a00763a7adff1ba951c69f1b7286526" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi dbg_add_bpt_tev</definition>
        <argsstring>(thid_t tid, ea_t ea, ea_t bp)</argsstring>
        <name>dbg_add_bpt_tev</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>bp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new breakpoint trace element to the current trace. {Type, Synchronous function, Notification, none (synchronous function)} <simplesect kind="return"><para>false if the operation failed, true otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1730" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1730" bodyend="1730"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1gad8832fd477423f2cdf6c6772a925ab47" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi dbg_add_call_tev</definition>
        <argsstring>(thid_t tid, ea_t caller, ea_t callee)</argsstring>
        <name>dbg_add_call_tev</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>caller</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>callee</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new call trace element to the current trace. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1737" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1737" bodyend="1737"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1gae6c466472d3fb5e8b0aed976900b233d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi dbg_add_ret_tev</definition>
        <argsstring>(thid_t tid, ea_t ret_insn, ea_t return_to)</argsstring>
        <name>dbg_add_ret_tev</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ret_insn</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>return_to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new return trace element to the current trace. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1744" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1744" bodyend="1744"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcev_1ga8955a9ddb50e9b6d55975ff506bfcef8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi dbg_add_debug_event</definition>
        <argsstring>(debug_event_t *event)</argsstring>
        <name>dbg_add_debug_event</name>
        <param>
          <type><ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *</type>
          <declname>event</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a new debug event to the current trace. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1751" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1751" bodyend="1751"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcm_1gacde5e33b515e99a0f9bef00985791712" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi load_trace_file</definition>
        <argsstring>(qstring *buf, const char *filename)</argsstring>
        <name>load_trace_file</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a recorded trace file in the trace window. If the call succeeds and &apos;buf&apos; is not null, the description of the trace stored in the binary trace file will be returned in &apos;buf&apos; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1767" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1767" bodyend="1767"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcm_1gaa73b86c91ba74838a18ff650c7ff05b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi save_trace_file</definition>
        <argsstring>(const char *filename, const char *description)</argsstring>
        <name>save_trace_file</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Save the current trace in the specified file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1772" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1772" bodyend="1772"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcm_1ga4b663baf51d088743f89cfc1cbd7a9d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi is_valid_trace_file</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>is_valid_trace_file</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Is the specified file a valid trace file for the current database? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1777" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1777" bodyend="1777"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcm_1gad50908ff63ae16ade347789f6d2cac69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi set_trace_file_desc</definition>
        <argsstring>(const char *filename, const char *description)</argsstring>
        <name>set_trace_file_desc</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
<para>Change the description of the specified trace file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1782" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1782" bodyend="1782"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcm_1ga4e0a2a4ca2de7206e2fc016583c30d4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_trace_file_desc</definition>
        <argsstring>(qstring *buf, const char *filename)</argsstring>
        <name>get_trace_file_desc</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Get the file header of the specified trace file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1787" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1787" bodyend="1787"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcm_1ga53f135d4259960db2f0766c06a2a2c2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi choose_trace_file</definition>
        <argsstring>(qstring *buf)</argsstring>
        <name>choose_trace_file</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Show the choose trace dialog. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1792" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1792" bodyend="1792"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcm_1ga21b2eca7e2f4d73ded96382b16cb0d5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi diff_trace_file</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>diff_trace_file</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Show difference between the current trace and the one from &apos;filename&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1797" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1797" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcm_1gaaeddc1478c12155e82a8a473dbf05443" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi graph_trace</definition>
        <argsstring>(void)</argsstring>
        <name>graph_trace</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Show the trace callgraph. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1802" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1802" bodyend="1802"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcm_1ga9e0098ba0b105a31b0cecfd47e34f8db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi set_highlight_trace_options</definition>
        <argsstring>(bool hilight, bgcolor_t color, bgcolor_t diff)</argsstring>
        <name>set_highlight_trace_options</name>
        <param>
          <type>bool</type>
          <declname>hilight</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a3df5040891132e50157aee66affdf1de" kindref="member">bgcolor_t</ref></type>
          <declname>color</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a3df5040891132e50157aee66affdf1de" kindref="member">bgcolor_t</ref></type>
          <declname>diff</declname>
        </param>
        <briefdescription>
<para>Set highlight trace parameters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1807" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1807" bodyend="1813"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcm_1ga606c645f577c642e1f0ef7afd080ed87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi set_trace_platform</definition>
        <argsstring>(const char *platform)</argsstring>
        <name>set_trace_platform</name>
        <param>
          <type>const char *</type>
          <declname>platform</declname>
        </param>
        <briefdescription>
<para>Set platform name of current trace. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1818" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1818" bodyend="1818"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__trcm_1gaccc080682f637872a73735a20af528f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *idaapi</type>
        <definition>const char* idaapi get_trace_platform</definition>
        <argsstring>()</argsstring>
        <name>get_trace_platform</name>
        <briefdescription>
<para>Get platform name of current trace. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1823" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1823" bodyend="1823"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga07bc83eb62b20a034a661e7c673b1cec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__dbg__funcs__high_1ga1b8337225f4e1858632f1cdd544ecaac" kindref="member">dbg_event_code_t</ref> idaapi</type>
        <definition>dbg_event_code_t idaapi wait_for_next_event</definition>
        <argsstring>(int wfne, int timeout)</argsstring>
        <name>wait_for_next_event</name>
        <param>
          <type>int</type>
          <declname>wfne</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait for the next event.</para><para>This function (optionally) resumes the process execution, and waits for a debugger event until a possible timeout occurs.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wfne</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___w_f_n_e__" kindref="compound">Wait for debugger event flags</ref> constants </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>number of seconds to wait, -1-infinity </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>either an event_id_t (if &gt; 0), or a dbg_event_code_t (if &lt;= 0) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1900" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1900" bodyend="1900"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga9b5f5bec1ed0c449555449a875de3ae7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *idaapi</type>
        <definition>const debug_event_t* idaapi get_debug_event</definition>
        <argsstring>(void)</argsstring>
        <name>get_debug_event</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current debugger event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1905" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1905" bodyend="1905"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga15a645f326f8ddd37b235dfb8e596a27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref> idaapi</type>
        <definition>uint idaapi set_debugger_options</definition>
        <argsstring>(uint options)</argsstring>
        <name>set_debugger_options</name>
        <param>
          <type><ref refid="pro_8h_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set debugger options. Replaces debugger options with the specification combination <ref refid="group___d_o_p_t__" kindref="compound">Debugger options</ref> <simplesect kind="return"><para>the old debugger options </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1912" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1912" bodyend="1912"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga26ef26c7d26dd535e803e4867ccfc2dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi set_remote_debugger</definition>
        <argsstring>(const char *host, const char *pass, int port=-1)</argsstring>
        <name>set_remote_debugger</name>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set remote debugging options. Should be used before starting the debugger. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>If empty, IDA will use local debugger. If NULL, the host will not be set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pass</parametername>
</parameternamelist>
<parameterdescription>
<para>If NULL, the password will not be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>If -1, the default port number will be used </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1922" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1922" bodyend="1922"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga6c74fd0db4615cf3b10fcf83a4454045" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi get_process_options</definition>
        <argsstring>(qstring *path, qstring *args, qstring *sdir, qstring *host, qstring *pass, int *port)</argsstring>
        <name>get_process_options</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>sdir</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>host</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get process options. Any of the arguments may be NULL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1928" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1928" bodyend="1937"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1gaad098f1a28bc53b45bf330ccf3ba36d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi set_process_options</definition>
        <argsstring>(const char *path, const char *args, const char *sdir, const char *host, const char *pass, int port)</argsstring>
        <name>set_process_options</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sdir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set process options. Any of the arguments may be NULL, which means &apos;do not modify&apos; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1943" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1943" bodyend="1952"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga55e7e42d484652aa77df54774cc40701" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="idd_8hpp_1a02a27f4719742e3279fcac277cb82668" kindref="member">excvec_t</ref> *idaapi</type>
        <definition>excvec_t* idaapi retrieve_exceptions</definition>
        <argsstring>(void)</argsstring>
        <name>retrieve_exceptions</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the exception information. You may freely modify the returned vector and add/edit/delete exceptions You must call <ref refid="group__dbg__funcs__high_1ga9d16cd659e7a44dacd36692407230221" kindref="member">store_exceptions()</ref> after any modifications Note: exceptions with code zero, multiple exception codes or names are prohibited </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1960" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1960" bodyend="1960"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga9d16cd659e7a44dacd36692407230221" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi store_exceptions</definition>
        <argsstring>(void)</argsstring>
        <name>store_exceptions</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the exception information stored in the debugger module by invoking its dbg-&gt;set_exception_info callback </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1966" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1966" bodyend="1966"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1gab1025aa82f11be89191818ad71ef80c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *idaapi</type>
        <definition>const char* idaapi define_exception</definition>
        <argsstring>(uint code, const char *name, const char *desc, int flags)</argsstring>
        <name>define_exception</name>
        <param>
          <type><ref refid="pro_8h_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience function: define new exception code. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>exception code (can not be 0) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>exception name (can not be empty or NULL) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>exception description (maybe NULL) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___e_x_c__" kindref="compound">Exception info flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>failure message or NULL. You must call <ref refid="group__dbg__funcs__high_1ga9d16cd659e7a44dacd36692407230221" kindref="member">store_exceptions()</ref> if this function succeeds </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1977" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1977" bodyend="1977"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga2471988f172a2ce380a516deaf9b2eef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool have_set_options</definition>
        <argsstring>(const debugger_t *_dbg)</argsstring>
        <name>have_set_options</name>
        <param>
          <type>const <ref refid="structdebugger__t" kindref="compound">debugger_t</ref> *</type>
          <declname>_dbg</declname>
        </param>
        <briefdescription>
<para>Is <ref refid="group__dbg__funcs__high_1ga246408c8f87df895818917a160c9d97c" kindref="member">set_dbg_options()</ref> present in <ref refid="structdebugger__t" kindref="compound">debugger_t</ref>? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1986" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1986" bodyend="1989"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga246408c8f87df895818917a160c9d97c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *idaapi</type>
        <definition>const char* idaapi set_dbg_options</definition>
        <argsstring>(debugger_t *_dbg, const char *keyword, int pri, int value_type, const void *value)</argsstring>
        <name>set_dbg_options</name>
        <param>
          <type><ref refid="structdebugger__t" kindref="compound">debugger_t</ref> *</type>
          <declname>_dbg</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>keyword</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pri</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value_type</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience function to set debugger specific options. It checks if the debugger is present and the function is present and calls it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1996" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1996" bodyend="2007"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1gab6ffa5309ee8e53486522b7623b2bbf5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *idaapi</type>
        <definition>const char* idaapi set_dbg_options</definition>
        <argsstring>(const char *keyword, int pri, int value_type, const void *value)</argsstring>
        <name>set_dbg_options</name>
        <param>
          <type>const char *</type>
          <declname>keyword</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pri</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value_type</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set options for <ref refid="dbg_8hpp_1a04f2054203bde05f4392b3f135a29fe3" kindref="member">dbg</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2011" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2011" bodyend="2018"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga421af1eea01af0de462f03834b08eacd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *idaapi</type>
        <definition>const char* idaapi set_dbg_default_options</definition>
        <argsstring>(const char *keyword, int value_type, const void *value)</argsstring>
        <name>set_dbg_default_options</name>
        <param>
          <type>const char *</type>
          <declname>keyword</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value_type</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="dbg_8hpp_1a04f2054203bde05f4392b3f135a29fe3" kindref="member">dbg</ref> options with <ref refid="group___i_d_a_o_p_t___p_r_i_o_1ga9e039964f5960348b80831b491f78773" kindref="member">IDPOPT_PRI_DEFAULT</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2022" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2022" bodyend="2028"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1gabfac243e72faa5f5386e11c8da363580" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *idaapi</type>
        <definition>const char* idaapi set_int_dbg_options</definition>
        <argsstring>(const char *keyword, int32 value)</argsstring>
        <name>set_int_dbg_options</name>
        <param>
          <type>const char *</type>
          <declname>keyword</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set an integer value option for <ref refid="dbg_8hpp_1a04f2054203bde05f4392b3f135a29fe3" kindref="member">dbg</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2032" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2032" bodyend="2038"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__srcinfo_1ga42a22fbeafc7c75189a6d3963b149d4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi register_srcinfo_provider</definition>
        <argsstring>(srcinfo_provider_t *sp)</argsstring>
        <name>register_srcinfo_provider</name>
        <param>
          <type><ref refid="classsrcinfo__provider__t" kindref="compound">srcinfo_provider_t</ref> *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a source information provider. Source information providers will call this function to register themselves with IDA kernel. Returns false: a service provider with this name already exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2397" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2397" bodyend="2397"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__srcinfo_1ga306b60366c9fae7f2790c48109c3fb73" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi unregister_srcinfo_provider</definition>
        <argsstring>(srcinfo_provider_t *sp)</argsstring>
        <name>unregister_srcinfo_provider</name>
        <param>
          <type><ref refid="classsrcinfo__provider__t" kindref="compound">srcinfo_provider_t</ref> *</type>
          <declname>sp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unregister a source information provider. Returns false: no such provider. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2403" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2403" bodyend="2403"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__srcinfo_1ga5460b2dfdb5376b5959d0c35c300f66c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>source_view_t *</type>
        <definition>source_view_t* create_source_viewer</definition>
        <argsstring>(TWidget **out_ccv, TWidget *parent, TWidget *custview, source_file_ptr sf, strvec_t *lines, int lnnum, int colnum, int flags)</argsstring>
        <name>create_source_viewer</name>
        <param>
          <type>TWidget **</type>
          <declname>out_ccv</declname>
        </param>
        <param>
          <type>TWidget *</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>TWidget *</type>
          <declname>custview</declname>
        </param>
        <param>
          <type><ref refid="group__dbg__funcs__srcinfo_1ga449f74352768d9ec163293dfa225a230" kindref="member">source_file_ptr</ref></type>
          <declname>sf</declname>
        </param>
        <param>
          <type><ref refid="group__simpleline_1gac893a23d04b0b0ddc10cc44f4f9f01e6" kindref="member">strvec_t</ref> *</type>
          <declname>lines</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lnnum</declname>
        </param>
        <param>
          <type>int</type>
          <declname>colnum</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Create a source code view. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2411" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2411" bodyend="2424"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__srcinfo_1ga19c9275cbc976a1428975b221d7e0c1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export get_dbg_byte</definition>
        <argsstring>(uint32 *x, ea_t ea)</argsstring>
        <name>get_dbg_byte</name>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> *</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get one byte of the debugged process memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to byte value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true success </para></simplesect>
<simplesect kind="return"><para>false address inaccessible or debugger not running </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__srcinfo_1ga5b67e95a556cf3d746676a676e04f15a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export put_dbg_byte</definition>
        <argsstring>(ea_t ea, uint32 x)</argsstring>
        <name>put_dbg_byte</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change one byte of the debugged process memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>byte value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the process memory has been modified </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__mem_1gad1e4d0ddfde977a944d161f61742ef3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export set_dbgmem_source</definition>
        <argsstring>(range_t *(idaapi *dbg_get_memory_config)(int *n), int(idaapi *memory_read)(ea_t ea, void *buffer, int size), int(idaapi *memory_write)(ea_t ea, const void *buffer, int size))</argsstring>
        <name>set_dbgmem_source</name>
        <param>
          <type><ref refid="structrange__t" kindref="compound">range_t</ref> *(idaapi *)(int *n)</type>
          <declname>dbg_get_memory_config</declname>
        </param>
        <param>
          <type>int(idaapi *)(ea_t ea, void *buffer, int size)</type>
          <declname>memory_read</declname>
        </param>
        <param>
          <type>int(idaapi *)(ea_t ea, const void *buffer, int size)</type>
          <declname>memory_write</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the memory information source for IDA kernel. This function allows the kernel to use information coming from somewhere other than the database (from the debugger, for example) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dbg_get_memory_config</parametername>
</parameternamelist>
<parameterdescription>
<para>returns current memory configuration in the dynamic memory allocated by <ref refid="pro_8h_1a2806c6575b58eb42bb0d2b96f92fc39b" kindref="member">qalloc()</ref>. The kernel will <ref refid="pro_8h_1a69f9c35c61878b9b72795fa0f47afa26" kindref="member">qfree()</ref> it automatically. If this argument is NULL, then the debugged process memory is not used.<itemizedlist>
<listitem><para>n: number of <ref refid="structrange__t" kindref="compound">range_t</ref> elements in the answer </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_read</parametername>
</parameternamelist>
<parameterdescription>
<para>read bytes from the debugged process memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_write</parametername>
</parameternamelist>
<parameterdescription>
<para>write bytes to the debugged process memory (don&apos;t forget to call <ref refid="group__dbg__funcs__mem_1gaf7dc084fa0edb1ea55add52947d7dcfd" kindref="member">invalidate_dbgmem_contents()</ref> from it) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__mem_1gaeb1edb73becff1b8483d32b3d0ef156d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export invalidate_dbgmem_config</definition>
        <argsstring>(void)</argsstring>
        <name>invalidate_dbgmem_config</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalidate the debugged process memory configuration. Call this function if the debugged process might have changed its memory layout (allocated more memory, for example) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__mem_1gaf7dc084fa0edb1ea55add52947d7dcfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export invalidate_dbgmem_contents</definition>
        <argsstring>(ea_t ea, asize_t size)</argsstring>
        <name>invalidate_dbgmem_contents</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalidate the debugged process memory contents. Call this function each time the process has been stopped or the process memory is modified. If ea == <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref>, then the whole memory contents will be invalidated </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2487" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__mem_1ga065350680be8f3de3699534c292616c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_debugger_on</definition>
        <argsstring>(void)</argsstring>
        <name>is_debugger_on</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is the debugger currently running? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__mem_1gae28d6f9d0a96fb5b4ae115c5f0d72c1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_debugger_memory</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>is_debugger_memory</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Is the address mapped to debugger memory? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2497" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga3e25091a418571cc068f8869e549d0ce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t idaapi</type>
        <definition>ea_t idaapi get_tev_ea</definition>
        <argsstring>(int n)</argsstring>
        <name>get_tev_ea</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2511" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2511" bodyend="2511"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga79fd7da2aec9176878855149202cd09d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi get_tev_type</definition>
        <argsstring>(int n)</argsstring>
        <name>get_tev_type</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2512" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2512" bodyend="2512"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gac3a19ed09805a3cf4cd56dba3e5b7d27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi get_tev_tid</definition>
        <argsstring>(int n)</argsstring>
        <name>get_tev_tid</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2513" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2513" bodyend="2513"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga624bfe29c0775f9ed7bea7d83367e239" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_module_info</definition>
        <argsstring>(ea_t ea, modinfo_t *modinfo)</argsstring>
        <name>get_module_info</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="structmodinfo__t" kindref="compound">modinfo_t</ref> *</type>
          <declname>modinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2514" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2514" bodyend="2514"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga0e4c5493332f3a6e13feaf9685503b62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi bring_debugger_to_front</definition>
        <argsstring>(void)</argsstring>
        <name>bring_debugger_to_front</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2515" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2515" bodyend="2515"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gae4895f54480046db9d6eab4428b37bd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi collect_stack_trace</definition>
        <argsstring>(thid_t tid, call_stack_t *trace)</argsstring>
        <name>collect_stack_trace</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type><ref refid="classqvector" kindref="compound">call_stack_t</ref> *</type>
          <declname>trace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2516" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2516" bodyend="2516"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gab9db21407d4eabbd288d127c20957f19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *idaapi</type>
        <definition>const char* idaapi get_debugger_event_cond</definition>
        <argsstring>(void)</argsstring>
        <name>get_debugger_event_cond</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2517" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2517" bodyend="2517"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga71acb7a0026e9a5d7f4ffc20e5b2d236" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi set_debugger_event_cond</definition>
        <argsstring>(const char *cond)</argsstring>
        <name>set_debugger_event_cond</name>
        <param>
          <type>const char *</type>
          <declname>cond</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2518" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2518" bodyend="2518"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga0fb06ecb5529935bdcdde3a6cf5fad23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi load_debugger</definition>
        <argsstring>(const char *dbgname, bool use_remote)</argsstring>
        <name>load_debugger</name>
        <param>
          <type>const char *</type>
          <declname>dbgname</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_remote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2519" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2519" bodyend="2519"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga5e32ecd7769cafc1b094db5499ae87a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi get_manual_regions</definition>
        <argsstring>(meminfo_vec_t *ranges)</argsstring>
        <name>get_manual_regions</name>
        <param>
          <type><ref refid="idd_8hpp_1ab53dc5825c9fb9e10963d2f321721169" kindref="member">meminfo_vec_t</ref> *</type>
          <declname>ranges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2520" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2520" bodyend="2520"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gaf7b892158db297cc090a3ad897290efa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi set_manual_regions</definition>
        <argsstring>(const meminfo_vec_t *ranges)</argsstring>
        <name>set_manual_regions</name>
        <param>
          <type>const <ref refid="idd_8hpp_1ab53dc5825c9fb9e10963d2f321721169" kindref="member">meminfo_vec_t</ref> *</type>
          <declname>ranges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2521" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2521" bodyend="2521"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga8e9cd659cce31c727c990047b8faf9cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi edit_manual_regions</definition>
        <argsstring>()</argsstring>
        <name>edit_manual_regions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2522" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2522" bodyend="2522"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga66d1a83a0b5e566072138242cdf4ad4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi enable_manual_regions</definition>
        <argsstring>(bool enable)</argsstring>
        <name>enable_manual_regions</name>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2523" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2523" bodyend="2523"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gac6aa7ded9adeff147a4489012ec0bbeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi hide_all_bpts</definition>
        <argsstring>(void)</argsstring>
        <name>hide_all_bpts</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2524" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2524" bodyend="2524"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gabac6ad1c2c17964d0bf7840b811c3219" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi handle_debug_event</definition>
        <argsstring>(const debug_event_t *ev, int rqflags)</argsstring>
        <name>handle_debug_event</name>
        <param>
          <type>const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>rqflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2525" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2525" bodyend="2525"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga5703cc70a6730733acb716767e1092e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi add_virt_module</definition>
        <argsstring>(const modinfo_t *mod)</argsstring>
        <name>add_virt_module</name>
        <param>
          <type>const <ref refid="structmodinfo__t" kindref="compound">modinfo_t</ref> *</type>
          <declname>mod</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2526" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2526" bodyend="2526"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga91995a8034e9ba412bba3453e9de0285" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi del_virt_module</definition>
        <argsstring>(const ea_t base)</argsstring>
        <name>del_virt_module</name>
        <param>
          <type>const ea_t</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2527" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2527" bodyend="2527"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gab1963c961bfb0ef0b1605fadad94a8fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi internal_cleanup_appcall</definition>
        <argsstring>(thid_t tid)</argsstring>
        <name>internal_cleanup_appcall</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2530" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2530" bodyend="2530"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gad2d28e58fdde103188c2444eb84211c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi internal_get_sreg_base</definition>
        <argsstring>(ea_t *answer, thid_t tid, int sreg_value)</argsstring>
        <name>internal_get_sreg_base</name>
        <param>
          <type>ea_t *</type>
          <declname>answer</declname>
        </param>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>sreg_value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2531" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2531" bodyend="2531"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga538c1d2fc80cdef82d6739930be001ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi internal_ioctl</definition>
        <argsstring>(int fn, const void *buf, size_t size, void **poutbuf, ssize_t *poutsize)</argsstring>
        <name>internal_ioctl</name>
        <param>
          <type>int</type>
          <declname>fn</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>poutbuf</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> *</type>
          <declname>poutsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2532" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2532" bodyend="2532"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gaad097583cbd767d29b64b9a16f5134ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>ssize_t idaapi read_dbg_memory</definition>
        <argsstring>(ea_t ea, void *buffer, size_t size)</argsstring>
        <name>read_dbg_memory</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2533" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2533" bodyend="2533"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga9dbd08028fc52d33ad8bf17bdda2b4cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>ssize_t idaapi write_dbg_memory</definition>
        <argsstring>(ea_t ea, const void *buffer, size_t size)</argsstring>
        <name>write_dbg_memory</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2534" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2534" bodyend="2534"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga3dab6c1d22728c32ce02ba67f9ad03ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi get_reg_vals</definition>
        <argsstring>(thid_t tid, int clsmask, regval_t *values)</argsstring>
        <name>get_reg_vals</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>clsmask</declname>
        </param>
        <param>
          <type><ref refid="structregval__t" kindref="compound">regval_t</ref> *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2535" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2535" bodyend="2535"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga46f0195a300de6e6b811f6a22039157e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi set_reg_val</definition>
        <argsstring>(thid_t tid, int regidx, const regval_t *value)</argsstring>
        <name>set_reg_val</name>
        <param>
          <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>regidx</declname>
        </param>
        <param>
          <type>const <ref refid="structregval__t" kindref="compound">regval_t</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2536" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2536" bodyend="2536"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga56e58930768f0b7dcae8e185297cd7be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi get_dbg_memory_info</definition>
        <argsstring>(meminfo_vec_t *ranges)</argsstring>
        <name>get_dbg_memory_info</name>
        <param>
          <type><ref refid="idd_8hpp_1ab53dc5825c9fb9e10963d2f321721169" kindref="member">meminfo_vec_t</ref> *</type>
          <declname>ranges</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2537" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2537" bodyend="2537"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gae4f6893d15426a9f019746bc175cf9a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi set_bpt_group</definition>
        <argsstring>(bpt_t &amp;bpt, const char *grp_name)</argsstring>
        <name>set_bpt_group</name>
        <param>
          <type><ref refid="structbpt__t" kindref="compound">bpt_t</ref> &amp;</type>
          <declname>bpt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>grp_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2538" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2538" bodyend="2538"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gad0deede7f9569030e41f4540dced88f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi set_bptloc_group</definition>
        <argsstring>(const bpt_location_t &amp;bptloc, const char *grp_name)</argsstring>
        <name>set_bptloc_group</name>
        <param>
          <type>const <ref refid="structbpt__location__t" kindref="compound">bpt_location_t</ref> &amp;</type>
          <declname>bptloc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>grp_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2539" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2539" bodyend="2539"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga41e1d55133f989d1cac06841200c3813" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_bpt_group</definition>
        <argsstring>(qstring *grp_name, const bpt_location_t &amp;bptloc)</argsstring>
        <name>get_bpt_group</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>grp_name</declname>
        </param>
        <param>
          <type>const <ref refid="structbpt__location__t" kindref="compound">bpt_location_t</ref> &amp;</type>
          <declname>bptloc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2540" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2540" bodyend="2540"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gac3eb77dbc9662b807b525fd497228fa7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t idaapi</type>
        <definition>size_t idaapi list_bptgrps</definition>
        <argsstring>(qstrvec_t *bptgrps)</argsstring>
        <name>list_bptgrps</name>
        <param>
          <type><ref refid="pro_8h_1a823b67c620f6cdca97e1d969ea4a9b02" kindref="member">qstrvec_t</ref> *</type>
          <declname>bptgrps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2541" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2541" bodyend="2541"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gad4b5b16e333d150186c1b7eb2b511cae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi rename_bptgrp</definition>
        <argsstring>(const char *old_name, const char *new_name)</argsstring>
        <name>rename_bptgrp</name>
        <param>
          <type>const char *</type>
          <declname>old_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>new_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2542" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2542" bodyend="2542"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga58f0c90f3f013bd98c88f0901b9a0cf0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi del_bptgrp</definition>
        <argsstring>(const char *name)</argsstring>
        <name>del_bptgrp</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2543" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2543" bodyend="2543"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga8ec8a5836bd9a1f8fa551818bda5c432" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>ssize_t idaapi get_grp_bpts</definition>
        <argsstring>(bpt_vec_t *bpts, const char *grp_name)</argsstring>
        <name>get_grp_bpts</name>
        <param>
          <type><ref refid="group__dbg__funcs__bpts_1ga7b7aec8527b2738750b2fc01be14264f" kindref="member">bpt_vec_t</ref> *</type>
          <declname>bpts</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>grp_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2544" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2544" bodyend="2544"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga96475b39b3d67ec6dd196353c4c0357d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classsrcinfo__provider__t" kindref="compound">srcinfo_provider_t</ref> *idaapi</type>
        <definition>srcinfo_provider_t* idaapi get_srcinfo_provider</definition>
        <argsstring>(const char *name)</argsstring>
        <name>get_srcinfo_provider</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2547" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2547" bodyend="2547"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga050f6fa13c8e2822d5bc2ba1393a8d87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_global_var</definition>
        <argsstring>(srcinfo_provider_t *prov, ea_t ea, const char *name, source_item_ptr *out)</argsstring>
        <name>get_global_var</name>
        <param>
          <type><ref refid="classsrcinfo__provider__t" kindref="compound">srcinfo_provider_t</ref> *</type>
          <declname>prov</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="group__dbg__funcs__srcinfo_1ga3c73aaf1eda8ff72a5a78ea13840afa5" kindref="member">source_item_ptr</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2548" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2548" bodyend="2548"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga629c9b8b8c6b774f479c32ca2a65f225" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_local_var</definition>
        <argsstring>(srcinfo_provider_t *prov, ea_t ea, const char *name, source_item_ptr *out)</argsstring>
        <name>get_local_var</name>
        <param>
          <type><ref refid="classsrcinfo__provider__t" kindref="compound">srcinfo_provider_t</ref> *</type>
          <declname>prov</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="group__dbg__funcs__srcinfo_1ga3c73aaf1eda8ff72a5a78ea13840afa5" kindref="member">source_item_ptr</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2549" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2549" bodyend="2549"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga8ef965d6390a809a6ea02fa82d3e6978" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_local_vars</definition>
        <argsstring>(srcinfo_provider_t *prov, ea_t ea, source_items_t *out)</argsstring>
        <name>get_local_vars</name>
        <param>
          <type><ref refid="classsrcinfo__provider__t" kindref="compound">srcinfo_provider_t</ref> *</type>
          <declname>prov</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="group__dbg__funcs__srcinfo_1ga9fd41e0ea321e1632c866f11f6bf1a30" kindref="member">source_items_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2550" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2550" bodyend="2550"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga61962855605d55f64b4c81b421106617" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi add_path_mapping</definition>
        <argsstring>(const char *src, const char *dst)</argsstring>
        <name>add_path_mapping</name>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2551" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2551" bodyend="2551"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga51b4e0b165e893fb951ea28f1088dd52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_current_source_file</definition>
        <argsstring>(qstring *path)</argsstring>
        <name>get_current_source_file</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2552" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2552" bodyend="2552"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga201cf57bb47850a8d8889dc7eb27e2c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi get_current_source_line</definition>
        <argsstring>(void)</argsstring>
        <name>get_current_source_line</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2553" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2553" bodyend="2553"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga2b146bb3a12105930fcf52178aa43f2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi srcdbg_step_into</definition>
        <argsstring>(void)</argsstring>
        <name>srcdbg_step_into</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2554" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2554" bodyend="2554"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gaf9cac01d3dd5bb01f3d5718055bc71c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi srcdbg_request_step_into</definition>
        <argsstring>(void)</argsstring>
        <name>srcdbg_request_step_into</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2555" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2555" bodyend="2555"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga6a8ea870f3f66e28118c798974d035f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi srcdbg_step_over</definition>
        <argsstring>(void)</argsstring>
        <name>srcdbg_step_over</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2556" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2556" bodyend="2556"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gaa26ffe38aea34b0071a10c2597afa6ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi srcdbg_request_step_over</definition>
        <argsstring>(void)</argsstring>
        <name>srcdbg_request_step_over</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2557" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2557" bodyend="2557"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga4c013c315fe7a44d77cc7929affd7b78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi srcdbg_step_until_ret</definition>
        <argsstring>(void)</argsstring>
        <name>srcdbg_step_until_ret</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2558" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2558" bodyend="2558"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1ga2d64d7bb371008eaf71214b29f3539bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi srcdbg_request_step_until_ret</definition>
        <argsstring>(void)</argsstring>
        <name>srcdbg_request_step_until_ret</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2559" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2559" bodyend="2559"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__conv_1gaf1eb2daf000c73649e10bd46e03eed3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="idd_8hpp_1a164941275c4bd78d8b80da8ff3e578dc" kindref="member">drc_t</ref> idaapi</type>
        <definition>drc_t idaapi dbg_bin_search</definition>
        <argsstring>(ea_t *out, ea_t start_ea, ea_t end_ea, const compiled_binpat_vec_t &amp;data, int srch_flags, qstring *errbuf)</argsstring>
        <name>dbg_bin_search</name>
        <param>
          <type>ea_t *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>start_ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>end_ea</declname>
        </param>
        <param>
          <type>const <ref refid="classqvector" kindref="compound">compiled_binpat_vec_t</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>srch_flags</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2560" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2560" bodyend="2561"/>
      </memberdef>
      <memberdef kind="function" id="dbg_8hpp_1acf5f9105ecca78ceaf41a80cd543e9ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi dbg_can_query</definition>
        <argsstring>(void)</argsstring>
        <name>dbg_can_query</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2564" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2564" bodyend="2569"/>
      </memberdef>
      <memberdef kind="function" id="dbg_8hpp_1acf5c829270f6605cb8fd63a7e579dd38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export lock_dbgmem_config</definition>
        <argsstring>(void)</argsstring>
        <name>lock_dbgmem_config</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2575" column="1"/>
      </memberdef>
      <memberdef kind="function" id="dbg_8hpp_1a5ceeba8bb838a826038cac106769cd6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export unlock_dbgmem_config</definition>
        <argsstring>(void)</argsstring>
        <name>unlock_dbgmem_config</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2576" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains functions to control the debugging of a process. </para>    </briefdescription>
    <detaileddescription>
<para>See <ref refid="group__dbg__funcs" kindref="compound">Debugger functions</ref> for a complete explanation of these functions.</para><para>These functions are inlined for the kernel. They are not inlined for the user-interfaces. </para>    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp"/>
  </compounddef>
</doxygen>
