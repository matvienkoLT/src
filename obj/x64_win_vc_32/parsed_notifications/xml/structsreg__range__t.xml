<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="structsreg__range__t" kind="struct" language="C++" prot="public">
    <compoundname>sreg_range_t</compoundname>
    <basecompoundref refid="structrange__t" prot="public" virt="non-virtual">range_t</basecompoundref>
    <includes refid="segregs_8hpp" local="no">segregs.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structsreg__range__t_1a6836737493737056f81cc6fe31b5aec3" prot="public" static="no" mutable="no">
        <type>sel_t</type>
        <definition>sel_t sreg_range_t::val</definition>
        <argsstring></argsstring>
        <name>val</name>
        <briefdescription>
<para>segment register value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/segregs.hpp" line="40" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/segregs.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structsreg__range__t_1ac32406e38af0c128acf0a78afbe16d1a" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
        <definition>uchar sreg_range_t::tag</definition>
        <argsstring></argsstring>
        <name>tag</name>
        <briefdescription>
<para><ref refid="group___s_r__" kindref="compound">Segment register range tags</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/segregs.hpp" line="41" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/segregs.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The values of the segment registers are kept as address ranges. The segment register does not change its value within one address range. The processor module finds segment register change points and splits <ref refid="structsreg__range__t" kindref="compound">sreg_range_t</ref> ranges so that a new <ref refid="structsreg__range__t" kindref="compound">sreg_range_t</ref> range is started at each segment register change point. The kernel deletes <ref refid="structsreg__range__t" kindref="compound">sreg_range_t</ref> if an instruction is converted back to unexplored bytes.</para><para>So, we have information about a segment register by keeping information about the range of addresses where segment register does not change the value.</para><para>Note that each segment has information about the default values of the segment registers. This information is used if the value of a segment register could not be determined. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3334">
        <label>sreg_range_t</label>
        <link refid="structsreg__range__t"/>
        <childnode refid="3335" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3335">
        <label>range_t</label>
        <link refid="structrange__t"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3336">
        <label>sreg_range_t</label>
        <link refid="structsreg__range__t"/>
        <childnode refid="3337" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3337">
        <label>range_t</label>
        <link refid="structrange__t"/>
      </node>
    </collaborationgraph>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/segregs.hpp" line="39" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/segregs.hpp" bodystart="38" bodyend="51"/>
    <listofallmembers>
      <member refid="structrange__t_1af69f6653edafca6c68050cc689f6a34a" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>clear</name></member>
      <member refid="structrange__t_1a0830eb0562430bfc98c8ffd89c34c38b" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>compare</name></member>
      <member refid="structrange__t_1a639ccf2de4dc8a2272fdb2937427616b" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>contains</name></member>
      <member refid="structrange__t_1a188429d8f3c57001a60f2b0f4e5a9c88" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>contains</name></member>
      <member refid="structrange__t_1a07d4ba9971d45948b8efdad8bedb2773" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>empty</name></member>
      <member refid="structrange__t_1a31e62b2ecbc6b543945e3c2fcaa5ae3d" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>end_ea</name></member>
      <member refid="structrange__t_1a2fbe9a8accdb83fe775b546ae4aca51b" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>extend</name></member>
      <member refid="structrange__t_1ab4b7e2856112ddbf081134b3d71ed7a5" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>intersect</name></member>
      <member refid="structrange__t_1ac9f6c3adeb6af420bcaa2d2c624fd1f1" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>operator!=</name></member>
      <member refid="structrange__t_1a9041a2aa65b7181856d9e110b0b9fbef" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>operator&lt;</name></member>
      <member refid="structrange__t_1aa7f77c097f903e791eefca4a81e6b3d3" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>operator==</name></member>
      <member refid="structrange__t_1a5972a592e712ca2e09bfff8037561ef2" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>operator&gt;</name></member>
      <member refid="structrange__t_1ac063ce03653e4456e408aea12ffa80e1" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>overlaps</name></member>
      <member refid="structrange__t_1a5e4a06ff3c34f53d752985274c39a3a1" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>print</name></member>
      <member refid="structrange__t_1a43ae77e02b4b42dca95b04a5b72b4381" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>range_t</name></member>
      <member refid="structrange__t_1a1994b8457d9394a0f50723fc67eef06a" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>range_t</name></member>
      <member refid="structrange__t_1acf22d1af607f5bef81df4862f6ad5ac8" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>size</name></member>
      <member refid="structrange__t_1a69799eeea6c081e327fed05bcc617585" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>start_ea</name></member>
      <member refid="structsreg__range__t_1ac32406e38af0c128acf0a78afbe16d1a" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>tag</name></member>
      <member refid="structsreg__range__t_1a6836737493737056f81cc6fe31b5aec3" prot="public" virt="non-virtual"><scope>sreg_range_t</scope><name>val</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
