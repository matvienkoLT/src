<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="group___f_f__opfuncs2" kind="group">
    <compoundname>FF_opfuncs2</compoundname>
    <title>Functions: examine operand flags (arbitrary operand)</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___f_f__opfuncs2_1ga257ba06e4224a78916bd2808056a5cca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_defarg</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_defarg</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is defined? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1gae2674933600c8a1e3aed29cd52466766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_off</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_off</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is offset? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1ga1de22e36b7628763e9a5ad1d0e1d9231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_char</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_char</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is character constant? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1ga459e9f61c0824b0a7c46da18d56199da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_seg</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_seg</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is segment? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1gaa1bcf380ff1a7b8856fc79c53561cf21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_enum</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_enum</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is enum? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1gaa699cba125438efacdb5cb0509f72ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_manual</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_manual</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is forced operand? (use <ref refid="group___f_f__op_1ga34b34b8cb7a47c749063f436b4848a2d" kindref="member">is_forced_operand()</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1gaf25866c2282ae16e2546e226a9f0db45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_stroff</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_stroff</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is struct offset? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1ga23836258c12cb80ee1f731e48555cc0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_stkvar</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_stkvar</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is stack variable? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1ga0a2a8778d2ae85df4cf577a5d88a9e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_fltnum</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_fltnum</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is floating point number? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1gafe5c1bd6c189ef80c0c2e3d1ad530478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_custfmt</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_custfmt</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is custom data format? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1ga9a62c917e9b1272da10dddff74cd0268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_numop</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_numop</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is number (bin, oct, dec, hex)? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1gaf7dd76ff5647260d826edba96f0c184f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_suspop</definition>
        <argsstring>(ea_t ea, flags_t F, int n)</argsstring>
        <name>is_suspop</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is suspicious operand? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1155" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>For the following functions, &apos;n&apos; may be:<itemizedlist>
<listitem><para>0 : first operand</para></listitem><listitem><para>1 : second operand</para></listitem><listitem><para><ref refid="group___f_f__op_1ga88c9062b3ef1f5460266a4a6426ff0fe" kindref="member">OPND_ALL</ref> : both operands - function returns 1 if the first OR the second operand satisfies the condition </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
