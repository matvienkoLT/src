<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="group__parse__tinfo" kind="group">
    <compoundname>parse_tinfo</compoundname>
    <title>Type parsing</title>
    <innergroup refid="group___h_t_i__">Type formatting flags</innergroup>
    <innergroup refid="group___p_t__">Type parsing flags</innergroup>
    <innergroup refid="group___p_r_t_y_p_e__">Type printing flags</innergroup>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__parse__tinfo_1ga034013ece7194a003ffd1727075100d2" prot="public" static="no">
        <type>int idaapi</type>
        <definition>typedef int idaapi h2ti_type_cb(const char *name, const tinfo_t &amp;tif, const char *cmt, const uint64 *value, void *cb_data)</definition>
        <argsstring>(const char *name, const tinfo_t &amp;tif, const char *cmt, const uint64 *value, void *cb_data)</argsstring>
        <name>h2ti_type_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This callback will be called for each type/variable declaration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>var/func/type name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tif</parametername>
</parameternamelist>
<parameterdescription>
<para>type info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmt</parametername>
</parameternamelist>
<parameterdescription>
<para>main comment </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb_data</parametername>
</parameternamelist>
<parameterdescription>
<para>data passed to callback </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>T_CBBRKDEF</parametername>
</parameternamelist>
<parameterdescription>
<para>the type declaration won&apos;t be saved in the til </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1599" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__parse__tinfo_1gabcc521f1e3d068d8cdf760885a8f53c4" prot="public" static="no">
        <type>int</type>
        <definition>typedef int printer_t(const char *format,...)</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>printer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specify a printing callback when parsing types. See <ref refid="group__parse__tinfo_1gae9ae4eb67c4fdf5d59e22ba23af55f1f" kindref="member">h2ti()</ref> and <ref refid="group__parse__tinfo_1gae4cec61d812cfc0acc08453742b729b3" kindref="member">parse_decls()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1609" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1609" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__parse__tinfo_1gae9ae4eb67c4fdf5d59e22ba23af55f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export h2ti</definition>
        <argsstring>(til_t *ti, lexer_t *lx, const char *input, int flags=HTI_HIGH, h2ti_type_cb *type_cb=NULL, h2ti_type_cb *var_cb=NULL, printer_t *print_cb=NULL, void *_cb_data=NULL, abs_t _isabs=abs_unk)</argsstring>
        <name>h2ti</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>lexer_t *</type>
          <declname>lx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="group___h_t_i___1ga1a2d19a5da522effe48cfe67e14fc479" kindref="member">HTI_HIGH</ref></defval>
        </param>
        <param>
          <type><ref refid="group__parse__tinfo_1ga034013ece7194a003ffd1727075100d2" kindref="member">h2ti_type_cb</ref> *</type>
          <declname>type_cb</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="group__parse__tinfo_1ga034013ece7194a003ffd1727075100d2" kindref="member">h2ti_type_cb</ref> *</type>
          <declname>var_cb</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="group__parse__tinfo_1gabcc521f1e3d068d8cdf760885a8f53c4" kindref="member">printer_t</ref> *</type>
          <declname>print_cb</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>void *</type>
          <declname>_cb_data</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a784254a39507ac759a9f373a52a75ac1" kindref="member">abs_t</ref></type>
          <declname>_isabs</declname>
          <defval>abs_unk</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert declarations to type_t*. This is a low level function - use <ref refid="group__parse__tinfo_1gae4cec61d812cfc0acc08453742b729b3" kindref="member">parse_decls()</ref> or <ref refid="group__parse__tinfo_1gaa3ec4302201c52b95420edc3618b7eb2" kindref="member">parse_decl()</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ti</parametername>
</parameternamelist>
<parameterdescription>
<para>type info library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lx</parametername>
</parameternamelist>
<parameterdescription>
<para>input lexer. may be NULL. always destroyed by <ref refid="group__parse__tinfo_1gae9ae4eb67c4fdf5d59e22ba23af55f1f" kindref="member">h2ti()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>file name or C declaration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___h_t_i__" kindref="compound">Type formatting flags</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>callback - for each type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>var_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>callback - for each var </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>print_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>may pass msg() here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_cb_data</parametername>
</parameternamelist>
<parameterdescription>
<para>data passed to callbacks </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_isabs</parametername>
</parameternamelist>
<parameterdescription>
<para>the expected abstracness of the type declaration(s) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of errors (they are displayed using print_cb). zero means ok </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parse__tinfo_1gaa3ec4302201c52b95420edc3618b7eb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export parse_decl</definition>
        <argsstring>(tinfo_t *tif, qstring *out, til_t *til, const char *decl, int flags)</argsstring>
        <name>parse_decl</name>
        <param>
          <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>tif</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>decl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse ONE declaration. If the input string contains more than one declaration, the first complete type declaration (<ref refid="group___p_t___1ga275f154b9415ddab5d773d3f2ce48a30" kindref="member">PT_TYP</ref>) or the last variable declaration (<ref refid="group___p_t___1ga2372a33ffe07dcfaae46a1873a453e8f" kindref="member">PT_VAR</ref>) will be used. <simplesect kind="note"><para>name &amp; tif may be empty after the call! </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">tif</parametername>
</parameternamelist>
<parameterdescription>
<para>type info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>declared name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>til</parametername>
</parameternamelist>
<parameterdescription>
<para>type library to use. may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decl</parametername>
</parameternamelist>
<parameterdescription>
<para>C declaration to parse </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___p_t__" kindref="compound">Type parsing flags</ref> bits </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>declaration is bad, the error message is displayed if !PT_SIL </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parse__tinfo_1gaedfe2fcd29fba4ba9fe6da62bbbf4fa5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int</type>
        <definition>THREAD_SAFE int convert_pt_flags_to_hti</definition>
        <argsstring>(int pt_flags)</argsstring>
        <name>convert_pt_flags_to_hti</name>
        <param>
          <type>int</type>
          <declname>pt_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert <ref refid="group___p_t__" kindref="compound">Type parsing flags</ref> to <ref refid="group___h_t_i__" kindref="compound">Type formatting flags</ref>. Type parsing flags lesser than 0x10 don&apos;t have stable meaning and will be ignored (more on these flags can be seen in idc.idc) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1675" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1675" bodyend="1678"/>
      </memberdef>
      <memberdef kind="function" id="group__parse__tinfo_1gae4cec61d812cfc0acc08453742b729b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export parse_decls</definition>
        <argsstring>(til_t *til, const char *input, printer_t *printer, int hti_flags)</argsstring>
        <name>parse_decls</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="group__parse__tinfo_1gabcc521f1e3d068d8cdf760885a8f53c4" kindref="member">printer_t</ref> *</type>
          <declname>printer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hti_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse many declarations and store them in a til. If there are any errors, they will be printed using &apos;printer&apos;. This function uses default include path and predefined macros from the database settings. It always uses the <ref refid="group___h_t_i___1ga7eadeea97aa05317c41e939b70714a56" kindref="member">HTI_DCL</ref> bit. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>til</parametername>
</parameternamelist>
<parameterdescription>
<para>type library to store the result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>input string or file name (see hti_flags) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>printer</parametername>
</parameternamelist>
<parameterdescription>
<para>function to output error messages (use msg or NULL or your own callback) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hti_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___h_t_i__" kindref="compound">Type formatting flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of errors, 0 means ok. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1691" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parse__tinfo_1ga43ef73f0df2c860b554c5fef7ce273f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export print_type</definition>
        <argsstring>(qstring *out, ea_t ea, int prtype_flags)</argsstring>
        <name>print_type</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prtype_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get type declaration for the specified address. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prtype_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___p_r_t_y_p_e__" kindref="compound">Type printing flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1704" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Format/Parse/Print type information </para>    </detaileddescription>
  </compounddef>
</doxygen>
