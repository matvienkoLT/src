<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="structrange__t" kind="struct" language="C++" prot="public">
    <compoundname>range_t</compoundname>
    <derivedcompoundref refid="classfunc__t" prot="public" virt="non-virtual">func_t</derivedcompoundref>
    <derivedcompoundref refid="structhidden__range__t" prot="public" virt="non-virtual">hidden_range_t</derivedcompoundref>
    <derivedcompoundref refid="structmemory__info__t" prot="public" virt="non-virtual">memory_info_t</derivedcompoundref>
    <derivedcompoundref refid="structqbasic__block__t" prot="public" virt="non-virtual">qbasic_block_t</derivedcompoundref>
    <derivedcompoundref refid="structregvar__t" prot="public" virt="non-virtual">regvar_t</derivedcompoundref>
    <derivedcompoundref refid="structscattered__segm__t" prot="public" virt="non-virtual">scattered_segm_t</derivedcompoundref>
    <derivedcompoundref refid="classsegment__t" prot="public" virt="non-virtual">segment_t</derivedcompoundref>
    <derivedcompoundref refid="structsreg__range__t" prot="public" virt="non-virtual">sreg_range_t</derivedcompoundref>
    <includes refid="range_8hpp" local="no">range.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structrange__t_1a69799eeea6c081e327fed05bcc617585" prot="public" static="no" mutable="no">
        <type>ea_t</type>
        <definition>ea_t range_t::start_ea</definition>
        <argsstring></argsstring>
        <name>start_ea</name>
        <briefdescription>
<para>start_ea included </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="42" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structrange__t_1a31e62b2ecbc6b543945e3c2fcaa5ae3d" prot="public" static="no" mutable="no">
        <type>ea_t</type>
        <definition>ea_t range_t::end_ea</definition>
        <argsstring></argsstring>
        <name>end_ea</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>end_ea excluded </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="43" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structrange__t_1ac7c9de5edbb4068e9d9cbd60a2c9bc46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend size_t ida_export</type>
        <definition>size_t ida_export range_t_print</definition>
        <argsstring>(const range_t *cb, char *buf, size_t bufsize)</argsstring>
        <name>range_t_print</name>
        <param>
          <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> *</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
<para>Helper function. Should not be called directly! </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="41" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structrange__t_1a43ae77e02b4b42dca95b04a5b72b4381" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>range_t::range_t</definition>
        <argsstring>(void)</argsstring>
        <name>range_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="45" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="45" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="structrange__t_1a1994b8457d9394a0f50723fc67eef06a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>range_t::range_t</definition>
        <argsstring>(ea_t ea1, ea_t ea2)</argsstring>
        <name>range_t</name>
        <param>
          <type>ea_t</type>
          <declname>ea1</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea2</declname>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="47" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="47" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="structrange__t_1a0830eb0562430bfc98c8ffd89c34c38b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int range_t::compare</definition>
        <argsstring>(const range_t &amp;r) const</argsstring>
        <name>compare</name>
        <param>
          <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Compare two <ref refid="structrange__t" kindref="compound">range_t</ref> instances, based on the start_ea. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="50" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="structrange__t_1aa7f77c097f903e791eefca4a81e6b3d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::operator==</definition>
        <argsstring>(const range_t &amp;r) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Compare two <ref refid="structrange__t" kindref="compound">range_t</ref>&apos;s with &apos;==&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="52" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="structrange__t_1ac9f6c3adeb6af420bcaa2d2c624fd1f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::operator!=</definition>
        <argsstring>(const range_t &amp;r) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Compare two <ref refid="structrange__t" kindref="compound">range_t</ref>&apos;s with &apos;!=&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="53" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="53" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="structrange__t_1a5972a592e712ca2e09bfff8037561ef2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::operator&gt;</definition>
        <argsstring>(const range_t &amp;r) const</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Compare two <ref refid="structrange__t" kindref="compound">range_t</ref>&apos;s with &apos;&lt;&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="54" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="54" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="structrange__t_1a9041a2aa65b7181856d9e110b0b9fbef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::operator&lt;</definition>
        <argsstring>(const range_t &amp;r) const</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Compare two <ref refid="structrange__t" kindref="compound">range_t</ref>&apos;s with &apos;&gt;&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="55" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="55" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structrange__t_1a639ccf2de4dc8a2272fdb2937427616b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::contains</definition>
        <argsstring>(ea_t ea) const</argsstring>
        <name>contains</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Is &apos;ea&apos; in the address range? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="58" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structrange__t_1a188429d8f3c57001a60f2b0f4e5a9c88" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::contains</definition>
        <argsstring>(const range_t &amp;r) const</argsstring>
        <name>contains</name>
        <param>
          <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Is every ea in &apos;r&apos; also in this <ref refid="structrange__t" kindref="compound">range_t</ref>? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="61" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="structrange__t_1ac063ce03653e4456e408aea12ffa80e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::overlaps</definition>
        <argsstring>(const range_t &amp;r) const</argsstring>
        <name>overlaps</name>
        <param>
          <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Is there an ea in &apos;r&apos; that is also in this <ref refid="structrange__t" kindref="compound">range_t</ref>? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="64" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="structrange__t_1af69f6653edafca6c68050cc689f6a34a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void range_t::clear</definition>
        <argsstring>(void)</argsstring>
        <name>clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Set <ref refid="structrange__t_1a69799eeea6c081e327fed05bcc617585" kindref="member">start_ea</ref>, <ref refid="structrange__t_1a31e62b2ecbc6b543945e3c2fcaa5ae3d" kindref="member">end_ea</ref> to 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="67" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="structrange__t_1a07d4ba9971d45948b8efdad8bedb2773" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool range_t::empty</definition>
        <argsstring>(void) const</argsstring>
        <name>empty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is the size of the <ref refid="structrange__t" kindref="compound">range_t</ref> &lt;= 0? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="70" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="structrange__t_1acf22d1af607f5bef81df4862f6ad5ac8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>asize_t</type>
        <definition>asize_t range_t::size</definition>
        <argsstring>(void) const</argsstring>
        <name>size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get <ref refid="structrange__t_1a31e62b2ecbc6b543945e3c2fcaa5ae3d" kindref="member">end_ea</ref> - <ref refid="structrange__t_1a69799eeea6c081e327fed05bcc617585" kindref="member">start_ea</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="73" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="structrange__t_1ab4b7e2856112ddbf081134b3d71ed7a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void range_t::intersect</definition>
        <argsstring>(const range_t &amp;r)</argsstring>
        <name>intersect</name>
        <param>
          <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Assign the <ref refid="structrange__t" kindref="compound">range_t</ref> to the intersection between the <ref refid="structrange__t" kindref="compound">range_t</ref> and &apos;r&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="76" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="76" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structrange__t_1a2fbe9a8accdb83fe775b546ae4aca51b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void range_t::extend</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>extend</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Ensure that the <ref refid="structrange__t" kindref="compound">range_t</ref> includes &apos;ea&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="87" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="87" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="structrange__t_1a5e4a06ff3c34f53d752985274c39a3a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t range_t::print</definition>
        <argsstring>(char *buf, size_t bufsize) const</argsstring>
        <name>print</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print the <ref refid="structrange__t" kindref="compound">range_t</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>the output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="98" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="98" bodyend="98"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class for an range. This class is used as a base class for a class with real information - see <ref refid="segment_8hpp" kindref="compound">segment.hpp</ref> for example. The end address points beyond the range. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3090">
        <label>hidden_range_t</label>
        <link refid="structhidden__range__t"/>
        <childnode refid="3088" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3094">
        <label>scattered_segm_t</label>
        <link refid="structscattered__segm__t"/>
        <childnode refid="3088" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3092">
        <label>qbasic_block_t</label>
        <link refid="structqbasic__block__t"/>
        <childnode refid="3088" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3089">
        <label>func_t</label>
        <link refid="classfunc__t"/>
        <childnode refid="3088" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3096">
        <label>sreg_range_t</label>
        <link refid="structsreg__range__t"/>
        <childnode refid="3088" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3095">
        <label>segment_t</label>
        <link refid="classsegment__t"/>
        <childnode refid="3088" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3091">
        <label>memory_info_t</label>
        <link refid="structmemory__info__t"/>
        <childnode refid="3088" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3088">
        <label>range_t</label>
        <link refid="structrange__t"/>
      </node>
      <node id="3093">
        <label>regvar_t</label>
        <link refid="structregvar__t"/>
        <childnode refid="3088" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" line="40" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/range.hpp" bodystart="39" bodyend="99"/>
    <listofallmembers>
      <member refid="structrange__t_1af69f6653edafca6c68050cc689f6a34a" prot="public" virt="non-virtual"><scope>range_t</scope><name>clear</name></member>
      <member refid="structrange__t_1a0830eb0562430bfc98c8ffd89c34c38b" prot="public" virt="non-virtual"><scope>range_t</scope><name>compare</name></member>
      <member refid="structrange__t_1a639ccf2de4dc8a2272fdb2937427616b" prot="public" virt="non-virtual"><scope>range_t</scope><name>contains</name></member>
      <member refid="structrange__t_1a188429d8f3c57001a60f2b0f4e5a9c88" prot="public" virt="non-virtual"><scope>range_t</scope><name>contains</name></member>
      <member refid="structrange__t_1a07d4ba9971d45948b8efdad8bedb2773" prot="public" virt="non-virtual"><scope>range_t</scope><name>empty</name></member>
      <member refid="structrange__t_1a31e62b2ecbc6b543945e3c2fcaa5ae3d" prot="public" virt="non-virtual"><scope>range_t</scope><name>end_ea</name></member>
      <member refid="structrange__t_1a2fbe9a8accdb83fe775b546ae4aca51b" prot="public" virt="non-virtual"><scope>range_t</scope><name>extend</name></member>
      <member refid="structrange__t_1ab4b7e2856112ddbf081134b3d71ed7a5" prot="public" virt="non-virtual"><scope>range_t</scope><name>intersect</name></member>
      <member refid="structrange__t_1ac9f6c3adeb6af420bcaa2d2c624fd1f1" prot="public" virt="non-virtual"><scope>range_t</scope><name>operator!=</name></member>
      <member refid="structrange__t_1a9041a2aa65b7181856d9e110b0b9fbef" prot="public" virt="non-virtual"><scope>range_t</scope><name>operator&lt;</name></member>
      <member refid="structrange__t_1aa7f77c097f903e791eefca4a81e6b3d3" prot="public" virt="non-virtual"><scope>range_t</scope><name>operator==</name></member>
      <member refid="structrange__t_1a5972a592e712ca2e09bfff8037561ef2" prot="public" virt="non-virtual"><scope>range_t</scope><name>operator&gt;</name></member>
      <member refid="structrange__t_1ac063ce03653e4456e408aea12ffa80e1" prot="public" virt="non-virtual"><scope>range_t</scope><name>overlaps</name></member>
      <member refid="structrange__t_1a5e4a06ff3c34f53d752985274c39a3a1" prot="public" virt="non-virtual"><scope>range_t</scope><name>print</name></member>
      <member refid="structrange__t_1a43ae77e02b4b42dca95b04a5b72b4381" prot="public" virt="non-virtual"><scope>range_t</scope><name>range_t</name></member>
      <member refid="structrange__t_1a1994b8457d9394a0f50723fc67eef06a" prot="public" virt="non-virtual"><scope>range_t</scope><name>range_t</name></member>
      <member refid="structrange__t_1ac7c9de5edbb4068e9d9cbd60a2c9bc46" prot="public" virt="non-virtual"><scope>range_t</scope><name>range_t_print</name></member>
      <member refid="structrange__t_1acf22d1af607f5bef81df4862f6ad5ac8" prot="public" virt="non-virtual"><scope>range_t</scope><name>size</name></member>
      <member refid="structrange__t_1a69799eeea6c081e327fed05bcc617585" prot="public" virt="non-virtual"><scope>range_t</scope><name>start_ea</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
