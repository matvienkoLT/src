<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="structmemory__info__t" kind="struct" language="C++" prot="public">
    <compoundname>memory_info_t</compoundname>
    <basecompoundref refid="structrange__t" prot="public" virt="non-virtual">range_t</basecompoundref>
    <includes refid="idd_8hpp" local="no">idd.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structmemory__info__t_1abc913c6401a3c9bde3612bd40be1fac5" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref></type>
        <definition>qstring memory_info_t::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>Memory range name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="135" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmemory__info__t_1a83fdf12bf45e17c0f6956845bcabcd02" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref></type>
        <definition>qstring memory_info_t::sclass</definition>
        <argsstring></argsstring>
        <name>sclass</name>
        <briefdescription>
<para>Memory range class name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="136" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmemory__info__t_1a2b53a48ca44278e3e61947f6e283d07f" prot="public" static="no" mutable="no">
        <type>ea_t</type>
        <definition>ea_t memory_info_t::sbase</definition>
        <argsstring></argsstring>
        <name>sbase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Segment base (meaningful only for segmented architectures, e.g. 16-bit x86) The base is specified in paragraphs (i.e. shifted to the right by 4) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="137" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmemory__info__t_1a1aa32803dd0b4f6285e8f38cd7feaf84" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
        <definition>uchar memory_info_t::bitness</definition>
        <argsstring></argsstring>
        <name>bitness</name>
        <briefdescription>
<para>Number of bits in segment addresses (0-16bit, 1-32bit, 2-64bit) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="139" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structmemory__info__t_1a3ce79c8ccfd9690abeae8f28207c0c9b" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
        <definition>uchar memory_info_t::perm</definition>
        <argsstring></argsstring>
        <name>perm</name>
        <briefdescription>
<para>Memory range permissions (0-no information): see <ref refid="segment_8hpp" kindref="compound">segment.hpp</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="140" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structmemory__info__t_1aa9cba49d78af382c440377f1345607f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>memory_info_t::memory_info_t</definition>
        <argsstring>(void)</argsstring>
        <name>memory_info_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="141" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="141" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="structmemory__info__t_1aeb1b28096f3559eacb4557b80b612431" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool memory_info_t::operator==</definition>
        <argsstring>(const memory_info_t &amp;r) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structmemory__info__t" kindref="compound">memory_info_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="143" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="143" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="structmemory__info__t_1ae8d244b98b206d2f93bb8b46a5f5426e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool memory_info_t::operator!=</definition>
        <argsstring>(const memory_info_t &amp;r) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structmemory__info__t" kindref="compound">memory_info_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="153" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="153" bodyend="153"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Used by debugger modules to report memory are information to IDA kernel. It is ok to return empty fields if information is not available. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2257">
        <label>memory_info_t</label>
        <link refid="structmemory__info__t"/>
        <childnode refid="2258" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2258">
        <label>range_t</label>
        <link refid="structrange__t"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2261">
        <label>_qstring&lt; char &gt;</label>
        <link refid="class__qstring"/>
      </node>
      <node id="2259">
        <label>memory_info_t</label>
        <link refid="structmemory__info__t"/>
        <childnode refid="2260" relation="public-inheritance">
        </childnode>
        <childnode refid="2261" relation="usage">
          <edgelabel>sclass</edgelabel>
          <edgelabel>name</edgelabel>
        </childnode>
      </node>
      <node id="2260">
        <label>range_t</label>
        <link refid="structrange__t"/>
      </node>
    </collaborationgraph>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="134" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="133" bodyend="154"/>
    <listofallmembers>
      <member refid="structmemory__info__t_1a1aa32803dd0b4f6285e8f38cd7feaf84" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>bitness</name></member>
      <member refid="structrange__t_1af69f6653edafca6c68050cc689f6a34a" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>clear</name></member>
      <member refid="structrange__t_1a0830eb0562430bfc98c8ffd89c34c38b" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>compare</name></member>
      <member refid="structrange__t_1a639ccf2de4dc8a2272fdb2937427616b" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>contains</name></member>
      <member refid="structrange__t_1a188429d8f3c57001a60f2b0f4e5a9c88" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>contains</name></member>
      <member refid="structrange__t_1a07d4ba9971d45948b8efdad8bedb2773" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>empty</name></member>
      <member refid="structrange__t_1a31e62b2ecbc6b543945e3c2fcaa5ae3d" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>end_ea</name></member>
      <member refid="structrange__t_1a2fbe9a8accdb83fe775b546ae4aca51b" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>extend</name></member>
      <member refid="structrange__t_1ab4b7e2856112ddbf081134b3d71ed7a5" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>intersect</name></member>
      <member refid="structmemory__info__t_1aa9cba49d78af382c440377f1345607f1" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>memory_info_t</name></member>
      <member refid="structmemory__info__t_1abc913c6401a3c9bde3612bd40be1fac5" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>name</name></member>
      <member refid="structmemory__info__t_1ae8d244b98b206d2f93bb8b46a5f5426e" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>operator!=</name></member>
      <member refid="structrange__t_1ac9f6c3adeb6af420bcaa2d2c624fd1f1" prot="public" virt="non-virtual" ambiguityscope="range_t::"><scope>memory_info_t</scope><name>operator!=</name></member>
      <member refid="structrange__t_1a9041a2aa65b7181856d9e110b0b9fbef" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>operator&lt;</name></member>
      <member refid="structmemory__info__t_1aeb1b28096f3559eacb4557b80b612431" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>operator==</name></member>
      <member refid="structrange__t_1aa7f77c097f903e791eefca4a81e6b3d3" prot="public" virt="non-virtual" ambiguityscope="range_t::"><scope>memory_info_t</scope><name>operator==</name></member>
      <member refid="structrange__t_1a5972a592e712ca2e09bfff8037561ef2" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>operator&gt;</name></member>
      <member refid="structrange__t_1ac063ce03653e4456e408aea12ffa80e1" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>overlaps</name></member>
      <member refid="structmemory__info__t_1a3ce79c8ccfd9690abeae8f28207c0c9b" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>perm</name></member>
      <member refid="structrange__t_1a5e4a06ff3c34f53d752985274c39a3a1" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>print</name></member>
      <member refid="structrange__t_1a43ae77e02b4b42dca95b04a5b72b4381" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>range_t</name></member>
      <member refid="structrange__t_1a1994b8457d9394a0f50723fc67eef06a" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>range_t</name></member>
      <member refid="structmemory__info__t_1a2b53a48ca44278e3e61947f6e283d07f" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>sbase</name></member>
      <member refid="structmemory__info__t_1a83fdf12bf45e17c0f6956845bcabcd02" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>sclass</name></member>
      <member refid="structrange__t_1acf22d1af607f5bef81df4862f6ad5ac8" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>size</name></member>
      <member refid="structrange__t_1a69799eeea6c081e327fed05bcc617585" prot="public" virt="non-virtual"><scope>memory_info_t</scope><name>start_ea</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
