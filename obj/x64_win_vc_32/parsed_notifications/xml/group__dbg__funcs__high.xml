<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="group__dbg__funcs__high" kind="group">
    <compoundname>dbg_funcs_high</compoundname>
    <title>High level functions</title>
    <innergroup refid="group___w_f_n_e__">Wait for debugger event flags</innergroup>
    <innergroup refid="group___d_o_p_t__">Debugger options</innergroup>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__dbg__funcs__high_1ga1b8337225f4e1858632f1cdd544ecaac" prot="public" static="no">
        <name>dbg_event_code_t</name>
        <enumvalue id="group__dbg__funcs__high_1gga1b8337225f4e1858632f1cdd544ecaaca5bf2a8078c411a898f84f2bc2d35c5db" prot="public">
          <name>DEC_NOTASK</name>
          <initializer>= -2</initializer>
          <briefdescription>
<para>process does not exist </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__high_1gga1b8337225f4e1858632f1cdd544ecaacaff4edc949ddac1996cd22176bac3989b" prot="public">
          <name>DEC_ERROR</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>error </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__dbg__funcs__high_1gga1b8337225f4e1858632f1cdd544ecaaca8a29c5b24c131d8e85612f244a2e3571" prot="public">
          <name>DEC_TIMEOUT</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>timeout </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Debugger event codes. </para>        </briefdescription>
        <detaileddescription>
<para>Wait for the next debugger event. See also <ref refid="group__dbg__funcs__cmds_1ga610fa89b8ec6db08d7f7d3aabcf69a2f" kindref="member">get_process_state()</ref> to get info about the current state of the debugged application </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1844" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1843" bodyend="1848"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__dbg__funcs__high_1ga07bc83eb62b20a034a661e7c673b1cec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__dbg__funcs__high_1ga1b8337225f4e1858632f1cdd544ecaac" kindref="member">dbg_event_code_t</ref> idaapi</type>
        <definition>dbg_event_code_t idaapi wait_for_next_event</definition>
        <argsstring>(int wfne, int timeout)</argsstring>
        <name>wait_for_next_event</name>
        <param>
          <type>int</type>
          <declname>wfne</declname>
        </param>
        <param>
          <type>int</type>
          <declname>timeout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait for the next event.</para><para>This function (optionally) resumes the process execution, and waits for a debugger event until a possible timeout occurs.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>wfne</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___w_f_n_e__" kindref="compound">Wait for debugger event flags</ref> constants </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout</parametername>
</parameternamelist>
<parameterdescription>
<para>number of seconds to wait, -1-infinity </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>either an event_id_t (if &gt; 0), or a dbg_event_code_t (if &lt;= 0) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1900" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1900" bodyend="1900"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga9b5f5bec1ed0c449555449a875de3ae7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *idaapi</type>
        <definition>const debug_event_t* idaapi get_debug_event</definition>
        <argsstring>(void)</argsstring>
        <name>get_debug_event</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the current debugger event. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1905" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1905" bodyend="1905"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga15a645f326f8ddd37b235dfb8e596a27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref> idaapi</type>
        <definition>uint idaapi set_debugger_options</definition>
        <argsstring>(uint options)</argsstring>
        <name>set_debugger_options</name>
        <param>
          <type><ref refid="pro_8h_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set debugger options. Replaces debugger options with the specification combination <ref refid="group___d_o_p_t__" kindref="compound">Debugger options</ref> <simplesect kind="return"><para>the old debugger options </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1912" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1912" bodyend="1912"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga26ef26c7d26dd535e803e4867ccfc2dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi set_remote_debugger</definition>
        <argsstring>(const char *host, const char *pass, int port=-1)</argsstring>
        <name>set_remote_debugger</name>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set remote debugging options. Should be used before starting the debugger. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>If empty, IDA will use local debugger. If NULL, the host will not be set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pass</parametername>
</parameternamelist>
<parameterdescription>
<para>If NULL, the password will not be set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>port</parametername>
</parameternamelist>
<parameterdescription>
<para>If -1, the default port number will be used </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1922" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1922" bodyend="1922"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga6c74fd0db4615cf3b10fcf83a4454045" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi get_process_options</definition>
        <argsstring>(qstring *path, qstring *args, qstring *sdir, qstring *host, qstring *pass, int *port)</argsstring>
        <name>get_process_options</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>args</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>sdir</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>host</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get process options. Any of the arguments may be NULL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1928" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1928" bodyend="1937"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1gaad098f1a28bc53b45bf330ccf3ba36d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi set_process_options</definition>
        <argsstring>(const char *path, const char *args, const char *sdir, const char *host, const char *pass, int port)</argsstring>
        <name>set_process_options</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>args</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sdir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>pass</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set process options. Any of the arguments may be NULL, which means &apos;do not modify&apos; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1943" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1943" bodyend="1952"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga55e7e42d484652aa77df54774cc40701" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="idd_8hpp_1a02a27f4719742e3279fcac277cb82668" kindref="member">excvec_t</ref> *idaapi</type>
        <definition>excvec_t* idaapi retrieve_exceptions</definition>
        <argsstring>(void)</argsstring>
        <name>retrieve_exceptions</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the exception information. You may freely modify the returned vector and add/edit/delete exceptions You must call <ref refid="group__dbg__funcs__high_1ga9d16cd659e7a44dacd36692407230221" kindref="member">store_exceptions()</ref> after any modifications Note: exceptions with code zero, multiple exception codes or names are prohibited </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1960" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1960" bodyend="1960"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga9d16cd659e7a44dacd36692407230221" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi store_exceptions</definition>
        <argsstring>(void)</argsstring>
        <name>store_exceptions</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the exception information stored in the debugger module by invoking its dbg-&gt;set_exception_info callback </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1966" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1966" bodyend="1966"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1gab1025aa82f11be89191818ad71ef80c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *idaapi</type>
        <definition>const char* idaapi define_exception</definition>
        <argsstring>(uint code, const char *name, const char *desc, int flags)</argsstring>
        <name>define_exception</name>
        <param>
          <type><ref refid="pro_8h_1a91ad9478d81a7aaf2593e8d9c3d06a14" kindref="member">uint</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>desc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience function: define new exception code. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>code</parametername>
</parameternamelist>
<parameterdescription>
<para>exception code (can not be 0) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>exception name (can not be empty or NULL) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>desc</parametername>
</parameternamelist>
<parameterdescription>
<para>exception description (maybe NULL) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___e_x_c__" kindref="compound">Exception info flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>failure message or NULL. You must call <ref refid="group__dbg__funcs__high_1ga9d16cd659e7a44dacd36692407230221" kindref="member">store_exceptions()</ref> if this function succeeds </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1977" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1977" bodyend="1977"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga2471988f172a2ce380a516deaf9b2eef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool have_set_options</definition>
        <argsstring>(const debugger_t *_dbg)</argsstring>
        <name>have_set_options</name>
        <param>
          <type>const <ref refid="structdebugger__t" kindref="compound">debugger_t</ref> *</type>
          <declname>_dbg</declname>
        </param>
        <briefdescription>
<para>Is <ref refid="group__dbg__funcs__high_1ga246408c8f87df895818917a160c9d97c" kindref="member">set_dbg_options()</ref> present in <ref refid="structdebugger__t" kindref="compound">debugger_t</ref>? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1986" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1986" bodyend="1989"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga246408c8f87df895818917a160c9d97c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *idaapi</type>
        <definition>const char* idaapi set_dbg_options</definition>
        <argsstring>(debugger_t *_dbg, const char *keyword, int pri, int value_type, const void *value)</argsstring>
        <name>set_dbg_options</name>
        <param>
          <type><ref refid="structdebugger__t" kindref="compound">debugger_t</ref> *</type>
          <declname>_dbg</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>keyword</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pri</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value_type</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convenience function to set debugger specific options. It checks if the debugger is present and the function is present and calls it. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="1996" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="1996" bodyend="2007"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1gab6ffa5309ee8e53486522b7623b2bbf5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *idaapi</type>
        <definition>const char* idaapi set_dbg_options</definition>
        <argsstring>(const char *keyword, int pri, int value_type, const void *value)</argsstring>
        <name>set_dbg_options</name>
        <param>
          <type>const char *</type>
          <declname>keyword</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pri</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value_type</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set options for <ref refid="dbg_8hpp_1a04f2054203bde05f4392b3f135a29fe3" kindref="member">dbg</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2011" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2011" bodyend="2018"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1ga421af1eea01af0de462f03834b08eacd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *idaapi</type>
        <definition>const char* idaapi set_dbg_default_options</definition>
        <argsstring>(const char *keyword, int value_type, const void *value)</argsstring>
        <name>set_dbg_default_options</name>
        <param>
          <type>const char *</type>
          <declname>keyword</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value_type</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set <ref refid="dbg_8hpp_1a04f2054203bde05f4392b3f135a29fe3" kindref="member">dbg</ref> options with <ref refid="group___i_d_a_o_p_t___p_r_i_o_1ga9e039964f5960348b80831b491f78773" kindref="member">IDPOPT_PRI_DEFAULT</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2022" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2022" bodyend="2028"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__high_1gabfac243e72faa5f5386e11c8da363580" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *idaapi</type>
        <definition>const char* idaapi set_int_dbg_options</definition>
        <argsstring>(const char *keyword, int32 value)</argsstring>
        <name>set_int_dbg_options</name>
        <param>
          <type>const char *</type>
          <declname>keyword</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Set an integer value option for <ref refid="dbg_8hpp_1a04f2054203bde05f4392b3f135a29fe3" kindref="member">dbg</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2032" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="2032" bodyend="2038"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>These functions can be used from scripts </para>    </detaileddescription>
  </compounddef>
</doxygen>
