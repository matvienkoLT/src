<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="classqvector" kind="class" language="C++" prot="public">
    <compoundname>qvector</compoundname>
    <derivedcompoundref refid="structfunc__type__data__t" prot="public" virt="non-virtual">func_type_data_t</derivedcompoundref>
    <derivedcompoundref refid="classpointseq__t" prot="public" virt="non-virtual">pointseq_t</derivedcompoundref>
    <derivedcompoundref refid="classqstack" prot="public" virt="non-virtual">qstack&lt; T &gt;</derivedcompoundref>
    <derivedcompoundref refid="structrangevec__t" prot="public" virt="non-virtual">rangevec_t</derivedcompoundref>
    <derivedcompoundref refid="structsegm__move__infos__t" prot="public" virt="non-virtual">segm_move_infos_t</derivedcompoundref>
    <derivedcompoundref refid="structudt__type__data__t" prot="public" virt="non-virtual">udt_type_data_t</derivedcompoundref>
    <includes refid="pro_8h" local="no">pro.h</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classqvector_1a71bc4c4aa5df2fda5b070e74f01b5d28" prot="public" static="no">
        <type>T</type>
        <definition>typedef T qvector&lt; T &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the type of objects contained in this qvector </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1741" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1741" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classqvector_1ad40f094ea07c84e9cab1077188893c5c" prot="public" static="no">
        <type>T *</type>
        <definition>typedef T* qvector&lt; T &gt;::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1979" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1979" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classqvector_1a194d7dff35eb2e50e2b98109a6a9c4da" prot="public" static="no">
        <type>const T *</type>
        <definition>typedef const T* qvector&lt; T &gt;::const_iterator</definition>
        <argsstring></argsstring>
        <name>const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1980" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1980" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classqvector_1ad9f59b855f3e08e3b88489132c3924d9" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* qvector&lt; T &gt;::array</definition>
        <argsstring></argsstring>
        <name>array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1675" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1675" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classqvector_1ac859583705e422f42ef55d11810770dc" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t qvector&lt; T &gt;::n</definition>
        <argsstring></argsstring>
        <name>n</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1676" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classqvector_1a5be1cf74171e720b7cc4261a4df95b84" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t qvector&lt; T &gt;::alloc</definition>
        <argsstring></argsstring>
        <name>alloc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1676" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1676" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classqvector_1addb714f5d22192ca0402a6bc93633646" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void *ida_export</type>
        <definition>void* ida_export qvector_reserve</definition>
        <argsstring>(void *vec, void *old, size_t cnt, size_t elsize)</argsstring>
        <name>qvector_reserve</name>
        <param>
          <type>void *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>old</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cnt</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change capacity of given qvector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to a qvector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>old</parametername>
</parameternamelist>
<parameterdescription>
<para>a pointer to the qvector&apos;s array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements to reserve </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elsize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of each element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the newly allocated array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1677" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classqvector_1ae907d5a920755aad26e8867345c9fb6a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; T &gt; &amp;</type>
        <definition>qvector&lt;T&gt;&amp; qvector&lt; T &gt;::assign</definition>
        <argsstring>(const qvector&lt; T &gt; &amp;x)</argsstring>
        <name>assign</name>
        <param>
          <type>const <ref refid="classqvector" kindref="compound">qvector</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Copy contents of given qvector into this one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1679" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1679" bodyend="1693"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a8661920fd417ffb2c10a02de03a64323" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void qvector&lt; T &gt;::shift_down</definition>
        <argsstring>(T *dst, T *src, size_t cnt)</argsstring>
        <name>shift_down</name>
        <param>
          <type>T *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move data down in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination ptr </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source ptr </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements to move </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1698" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1698" bodyend="1715"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a493bc19ad4447056715ca41157c7f03c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void qvector&lt; T &gt;::shift_up</definition>
        <argsstring>(T *dst, T *src, size_t cnt)</argsstring>
        <name>shift_up</name>
        <param>
          <type>T *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move data up in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination ptr </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src</parametername>
</parameternamelist>
<parameterdescription>
<para>source ptr </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cnt</parametername>
</parameternamelist>
<parameterdescription>
<para>number of elements to move </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1720" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1720" bodyend="1739"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classqvector_1ac1c66f1594aff3114ed1de62cf84410d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>qvector&lt; T &gt;::qvector</definition>
        <argsstring>(void)</argsstring>
        <name>qvector</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1743" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1743" bodyend="1743"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a53936d7ddf6df4efdf91eeed34894c41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>qvector&lt; T &gt;::qvector</definition>
        <argsstring>(const qvector&lt; T &gt; &amp;x)</argsstring>
        <name>qvector</name>
        <param>
          <type>const <ref refid="classqvector" kindref="compound">qvector</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Constructor - creates a new qvector identical to &apos;x&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1745" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1745" bodyend="1745"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a3c7294aeb604b9c9e1b47b3abd8cd71e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>qvector&lt; T &gt;::~qvector</definition>
        <argsstring>(void)</argsstring>
        <name>~qvector</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1747" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1747" bodyend="1753"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a3a46bca9030a31c7e0a1596948797e37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void qvector&lt; T &gt;::push_back</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>push_back</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Append a new element to the end the qvector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1756" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1756" bodyend="1761"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1ad54c35eca9074d6458a0f589f09d1750" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; qvector&lt; T &gt;::push_back</definition>
        <argsstring>(void)</argsstring>
        <name>push_back</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append a new empty element to the end of the qvector. <simplesect kind="return"><para>a reference to this new element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1764" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1764" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1ad0dfc171e75ac7ddf1de00309505d995" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void qvector&lt; T &gt;::pop_back</definition>
        <argsstring>(void)</argsstring>
        <name>pop_back</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Remove the last element in the qvector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1773" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1773" bodyend="1777"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1ae96fe88d3602362b063bd0540ff579dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t qvector&lt; T &gt;::size</definition>
        <argsstring>(void) const</argsstring>
        <name>size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the number of elements in the qvector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1778" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1778" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a557b1f774ef7d7e242ce4792ac83b572" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool qvector&lt; T &gt;::empty</definition>
        <argsstring>(void) const</argsstring>
        <name>empty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Does the qvector have 0 elements? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1779" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1779" bodyend="1778"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a3ffbd25fbea3165cf3f8f7a6b4d5c86d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; qvector&lt; T &gt;::operator[]</definition>
        <argsstring>(size_t _idx) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>_idx</declname>
        </param>
        <briefdescription>
<para>Allows use of typical c-style array indexing for qvectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1780" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1780" bodyend="1779"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a9743bfd5464506b812d9686d3ba40299" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; qvector&lt; T &gt;::operator[]</definition>
        <argsstring>(size_t _idx)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>_idx</declname>
        </param>
        <briefdescription>
<para>Allows use of typical c-style array indexing for qvectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1781" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1781" bodyend="1780"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a7756bf02ed2b83370fc1d62acb49d3be" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; qvector&lt; T &gt;::at</definition>
        <argsstring>(size_t _idx) const</argsstring>
        <name>at</name>
        <param>
          <type>size_t</type>
          <declname>_idx</declname>
        </param>
        <briefdescription>
<para>Get element at index &apos;_idx&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1782" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1782" bodyend="1781"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a8239a85aa07f560afcf35b8c7c53fd48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; qvector&lt; T &gt;::at</definition>
        <argsstring>(size_t _idx)</argsstring>
        <name>at</name>
        <param>
          <type>size_t</type>
          <declname>_idx</declname>
        </param>
        <briefdescription>
<para>Get element at index &apos;_idx&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1783" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1783" bodyend="1782"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a7cfc6f9d91d6495f92961c5ea37bb0d4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; qvector&lt; T &gt;::front</definition>
        <argsstring>(void) const</argsstring>
        <name>front</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the first element in the qvector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1784" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1784" bodyend="1783"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1ae4595a6221e8a056b54fed4dced17f26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; qvector&lt; T &gt;::front</definition>
        <argsstring>(void)</argsstring>
        <name>front</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the first element in the qvector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1785" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1785" bodyend="1784"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1ae86d54e6a60b2f2e7eb254b181e4a4dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; qvector&lt; T &gt;::back</definition>
        <argsstring>(void) const</argsstring>
        <name>back</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get the last element in the qvector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1786" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1786" bodyend="1785"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1aa9af4ff586a6b15e11e760e1f28766f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; qvector&lt; T &gt;::back</definition>
        <argsstring>(void)</argsstring>
        <name>back</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the last element in the qvector </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1787" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1787" bodyend="1786"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a5e84e633cf9a05ebdc441af0780edb4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void qvector&lt; T &gt;::qclear</definition>
        <argsstring>(void)</argsstring>
        <name>qclear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Destroy all elements but do not free memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1789" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1789" bodyend="1803"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a00ea674adc4b958966d78ba450621a46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void qvector&lt; T &gt;::clear</definition>
        <argsstring>(void)</argsstring>
        <name>clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Destroy all elements and free memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1805" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1805" bodyend="1814"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1af24534fa1de39b829e85f573640f9f48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; T &gt; &amp;</type>
        <definition>qvector&lt;T&gt;&amp; qvector&lt; T &gt;::operator=</definition>
        <argsstring>(const qvector&lt; T &gt; &amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classqvector" kindref="compound">qvector</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Allow assignment of one qvector to another using &apos;=&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1816" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1816" bodyend="1848"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a86c07a20c0f081c2930118f0db280148" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void qvector&lt; T &gt;::resize</definition>
        <argsstring>(size_t _newsize, const T &amp;x)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>_newsize</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resize to the given size. If the given size (_newsize) is less than the current size (n) of the qvector, then the last n - _newsize elements are simply deleted. <linebreak/>
If the given size is greater than the current size, the qvector is grown to _newsize, and the last _newsize - n elements will be filled with copies of &apos;x&apos;. <linebreak/>
If the given size is equal to the current size, this function does nothing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1853" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1853" bodyend="1871"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1ae4d55e7d94d1a247e10baeae524b53dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void qvector&lt; T &gt;::resize</definition>
        <argsstring>(size_t _newsize)</argsstring>
        <name>resize</name>
        <param>
          <type>size_t</type>
          <declname>_newsize</declname>
        </param>
        <briefdescription>
<para>Same as <ref refid="classqvector_1a86c07a20c0f081c2930118f0db280148" kindref="member">resize(size_t, const T &amp;)</ref>, but extra space is filled with empty elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1873" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1873" bodyend="1888"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1acd86e975d8aa56bee809e4176bb0d530" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void qvector&lt; T &gt;::grow</definition>
        <argsstring>(const T &amp;x=T())</argsstring>
        <name>grow</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
          <defval>T()</defval>
        </param>
        <briefdescription>
<para>Add an element to the end of the qvector, which will be a new T() if x is not given. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1890" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1890" bodyend="1895"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1ae2f4823d02d814d50c6d198ff0c43a0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t qvector&lt; T &gt;::capacity</definition>
        <argsstring>(void) const</argsstring>
        <name>capacity</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the number of elements that this qvector can contain - not the same as the number of elements currently in the qvector (<ref refid="classqvector_1ae96fe88d3602362b063bd0540ff579dd" kindref="member">size()</ref>) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1898" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1898" bodyend="1898"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a00e5c32c63732f5149e901c932d2f3c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void qvector&lt; T &gt;::reserve</definition>
        <argsstring>(size_t cnt)</argsstring>
        <name>reserve</name>
        <param>
          <type>size_t</type>
          <declname>cnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Increase the capacity of the qvector. If cnt is not greater than the current capacity this function does nothing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1901" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1901" bodyend="1921"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a447062dc6a1a8318a9e0430d4bbe0ec6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void qvector&lt; T &gt;::truncate</definition>
        <argsstring>(void)</argsstring>
        <name>truncate</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Shrink the capacity down to the current number of elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1923" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1923" bodyend="1930"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a2006754f99fb324709ae0972ddb20bb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void qvector&lt; T &gt;::swap</definition>
        <argsstring>(qvector&lt; T &gt; &amp;r)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace all attributes of this qvector with that of &apos;r&apos;, and vice versa. Effectively sets this = r and r = this without copying/allocating any memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1933" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1933" bodyend="1946"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1abf8f50b30972a829ad7affb27cdb80c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* qvector&lt; T &gt;::extract</definition>
        <argsstring>(void)</argsstring>
        <name>extract</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Empty the qvector and return a pointer to it&apos;s contents. The caller must free the result of this function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1949" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1949" bodyend="1957"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a0e2ac6acfb0b5607cd6b77e8049633db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void qvector&lt; T &gt;::inject</definition>
        <argsstring>(T *s, size_t len)</argsstring>
        <name>inject</name>
        <param>
          <type>T *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Populate the qvector with dynamic memory. The qvector must be empty before calling this method! </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1960" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1960" bodyend="1965"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1ace7ff39fb8ad735fdd45b86a46ba4fbc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool qvector&lt; T &gt;::operator==</definition>
        <argsstring>(const qvector&lt; T &gt; &amp;r) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classqvector" kindref="compound">qvector</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Allow ability to test the equality of two qvectors using &apos;==&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1967" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1967" bodyend="1975"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a72ea097e75bccff811f3a98f050b90b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool qvector&lt; T &gt;::operator!=</definition>
        <argsstring>(const qvector&lt; T &gt; &amp;r) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classqvector" kindref="compound">qvector</ref>&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Allow ability to test equality of two qvectors using &apos;!=&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1977" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1977" bodyend="1977"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1ad907a7b2c09c0ca4dd437392ee34a50a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator qvector&lt; T &gt;::begin</definition>
        <argsstring>(void)</argsstring>
        <name>begin</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get an iterator that points to the first element in the qvector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1982" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1982" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a6139abba869b7a488109c983445a34d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator qvector&lt; T &gt;::end</definition>
        <argsstring>(void)</argsstring>
        <name>end</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get an iterator that points to the end of the qvector (NOT the last element) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1983" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1983" bodyend="1982"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a85630357a750889ffc6c204e98a8d4aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator qvector&lt; T &gt;::begin</definition>
        <argsstring>(void) const</argsstring>
        <name>begin</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a const iterator that points to the first element in the qvector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1984" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1984" bodyend="1983"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1adcc73c6c8ad31d17a5fdc57dffea90e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator qvector&lt; T &gt;::end</definition>
        <argsstring>(void) const</argsstring>
        <name>end</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a const iterator that points to the end of the qvector (NOT the last element) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1985" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1985" bodyend="1984"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a7c55d837eb4006430e5b300e79901ef1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator qvector&lt; T &gt;::insert</definition>
        <argsstring>(iterator it, const T &amp;x)</argsstring>
        <name>insert</name>
        <param>
          <type>iterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert an element into the qvector at a specified position. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator that points to the desired position of the new element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the element to insert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an iterator that points to the newly inserted element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1990" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1990" bodyend="2000"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1ad10cb71a7d5bfdd090dafd52f625eb20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class it2</type>
          </param>
        </templateparamlist>
        <type>iterator</type>
        <definition>iterator qvector&lt; T &gt;::insert</definition>
        <argsstring>(iterator it, it2 first, it2 last)</argsstring>
        <name>insert</name>
        <param>
          <type>iterator</type>
          <declname>it</declname>
        </param>
        <param>
          <type>it2</type>
          <declname>first</declname>
        </param>
        <param>
          <type>it2</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert a several elements to the qvector at a specified position. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>position at which new elements will be inserted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to first element to be inserted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to end of elements to be inserted (the element pointed to by &apos;last&apos; will not be included) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an iterator that points to the first newly inserted element. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="2006" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="2006" bodyend="2025"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a59661e16df1b8e3c69caf2b2a6ca2b59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator qvector&lt; T &gt;::erase</definition>
        <argsstring>(iterator it)</argsstring>
        <name>erase</name>
        <param>
          <type>iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove an element from the qvector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>it</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to element to be removed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the element that took its place </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="2029" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="2029" bodyend="2036"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a16a369b4edb05a6feddd38f8612eab1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator qvector&lt; T &gt;::erase</definition>
        <argsstring>(iterator first, iterator last)</argsstring>
        <name>erase</name>
        <param>
          <type>iterator</type>
          <declname>first</declname>
        </param>
        <param>
          <type>iterator</type>
          <declname>last</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a subset of the qvector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>first</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to head of subset to be removed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to end of subset to be removed (element pointed to by last will not be removed) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a pointer to the element that took the place of &apos;first&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="2041" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="2041" bodyend="2049"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1ab9b8ccda1db8948c10f1ea2936c59a5c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>iterator</type>
        <definition>iterator qvector&lt; T &gt;::find</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>find</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find an element in the qvector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>element to find </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an iterator that points to the first occurrence of &apos;x&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="2054" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="2054" bodyend="2062"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a4e77dc1a55ea19e725e8a22aa574ae28" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const_iterator</type>
        <definition>const_iterator qvector&lt; T &gt;::find</definition>
        <argsstring>(const T &amp;x) const</argsstring>
        <name>find</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find an element in the qvector. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>element to find </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an iterator that points to the first occurrence of &apos;x&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="2064" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="2064" bodyend="2071"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1aeb58b3064e71399ce8f2bfaf9a582d29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t qvector&lt; T &gt;::index</definition>
        <argsstring>(const T &amp;x) const</argsstring>
        <name>index</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Find index of the specified value or return -1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="2074" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="2074" bodyend="2080"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1aae20729cb52ff559b27b834e0bbb5528" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void qvector&lt; T &gt;::add</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>add</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Add an element to the end of the qvector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="2082" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="2082" bodyend="2082"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1af9f9d1bbac527168131b03ee956833fc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool qvector&lt; T &gt;::has</definition>
        <argsstring>(const T &amp;x) const</argsstring>
        <name>has</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Does the qvector contain x? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="2085" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="2085" bodyend="2085"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1af0e3de3e606a0b52de17e80ce710317c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool qvector&lt; T &gt;::add_unique</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>add_unique</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an element to the end of the qvector - only if it isn&apos;t already present. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the element to add </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if &apos;x&apos; is already in the qvector, true otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="2089" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="2089" bodyend="2095"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1a1f7772500942d63596a5c91249ad577c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool qvector&lt; T &gt;::del</definition>
        <argsstring>(const T &amp;x)</argsstring>
        <name>del</name>
        <param>
          <type>const T &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find an element and remove it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the element to remove </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if &apos;x&apos; was not found, true otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="2099" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="2099" bodyend="2106"/>
      </memberdef>
      <memberdef kind="function" id="classqvector_1ac78b72e26edaf62a9554b5a0fe3d6457" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* qvector&lt; T &gt;::dstr</definition>
        <argsstring>(void) const</argsstring>
        <name>dstr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="2108" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Reimplementation of vector class from STL. Only the most essential functions are implemented. <linebreak/>
The vector container accepts objects agnostic to their positions in the memory because it will move them arbitrarily (realloc and memmove). <linebreak/>
The reason why we have it is because it is not compiler dependent (hopefully) and therefore can be used in IDA API. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3069">
        <label>func_type_data_t&lt; funcarg_t &gt;</label>
        <link refid="structfunc__type__data__t"/>
        <childnode refid="3068" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3068">
        <label>qvector&lt; T &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="3075">
        <label>seh_t</label>
        <link refid="structseh__t"/>
        <childnode refid="3073" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3076">
        <label>tryblk_t</label>
        <link refid="classtryblk__t"/>
        <childnode refid="3072" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3074">
        <label>catch_t</label>
        <link refid="structcatch__t"/>
        <childnode refid="3073" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3072">
        <label>rangevec_t&lt; range_t &gt;</label>
        <link refid="structrangevec__t"/>
        <childnode refid="3068" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3070">
        <label>pointseq_t&lt; point_t &gt;</label>
        <link refid="classpointseq__t"/>
        <childnode refid="3068" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3077">
        <label>segm_move_infos_t&lt; segm_move_info_t &gt;</label>
        <link refid="structsegm__move__infos__t"/>
        <childnode refid="3068" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3078">
        <label>udt_type_data_t&lt; udt_member_t &gt;</label>
        <link refid="structudt__type__data__t"/>
        <childnode refid="3068" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3071">
        <label>qstack&lt; T &gt;</label>
        <link refid="classqstack"/>
        <childnode refid="3068" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3073">
        <label>try_handler_t</label>
        <link refid="structtry__handler__t"/>
        <childnode refid="3072" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/pro.h" line="1674" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/pro.h" bodystart="1673" bodyend="2110"/>
    <listofallmembers>
      <member refid="classqvector_1aae20729cb52ff559b27b834e0bbb5528" prot="public" virt="non-virtual"><scope>qvector</scope><name>add</name></member>
      <member refid="classqvector_1af0e3de3e606a0b52de17e80ce710317c" prot="public" virt="non-virtual"><scope>qvector</scope><name>add_unique</name></member>
      <member refid="classqvector_1a5be1cf74171e720b7cc4261a4df95b84" prot="private" virt="non-virtual"><scope>qvector</scope><name>alloc</name></member>
      <member refid="classqvector_1ad9f59b855f3e08e3b88489132c3924d9" prot="private" virt="non-virtual"><scope>qvector</scope><name>array</name></member>
      <member refid="classqvector_1ae907d5a920755aad26e8867345c9fb6a" prot="private" virt="non-virtual"><scope>qvector</scope><name>assign</name></member>
      <member refid="classqvector_1a7756bf02ed2b83370fc1d62acb49d3be" prot="public" virt="non-virtual"><scope>qvector</scope><name>at</name></member>
      <member refid="classqvector_1a8239a85aa07f560afcf35b8c7c53fd48" prot="public" virt="non-virtual"><scope>qvector</scope><name>at</name></member>
      <member refid="classqvector_1ae86d54e6a60b2f2e7eb254b181e4a4dc" prot="public" virt="non-virtual"><scope>qvector</scope><name>back</name></member>
      <member refid="classqvector_1aa9af4ff586a6b15e11e760e1f28766f3" prot="public" virt="non-virtual"><scope>qvector</scope><name>back</name></member>
      <member refid="classqvector_1ad907a7b2c09c0ca4dd437392ee34a50a" prot="public" virt="non-virtual"><scope>qvector</scope><name>begin</name></member>
      <member refid="classqvector_1a85630357a750889ffc6c204e98a8d4aa" prot="public" virt="non-virtual"><scope>qvector</scope><name>begin</name></member>
      <member refid="classqvector_1ae2f4823d02d814d50c6d198ff0c43a0c" prot="public" virt="non-virtual"><scope>qvector</scope><name>capacity</name></member>
      <member refid="classqvector_1a00ea674adc4b958966d78ba450621a46" prot="public" virt="non-virtual"><scope>qvector</scope><name>clear</name></member>
      <member refid="classqvector_1a194d7dff35eb2e50e2b98109a6a9c4da" prot="public" virt="non-virtual"><scope>qvector</scope><name>const_iterator</name></member>
      <member refid="classqvector_1a1f7772500942d63596a5c91249ad577c" prot="public" virt="non-virtual"><scope>qvector</scope><name>del</name></member>
      <member refid="classqvector_1ac78b72e26edaf62a9554b5a0fe3d6457" prot="public" virt="non-virtual"><scope>qvector</scope><name>dstr</name></member>
      <member refid="classqvector_1a557b1f774ef7d7e242ce4792ac83b572" prot="public" virt="non-virtual"><scope>qvector</scope><name>empty</name></member>
      <member refid="classqvector_1a6139abba869b7a488109c983445a34d1" prot="public" virt="non-virtual"><scope>qvector</scope><name>end</name></member>
      <member refid="classqvector_1adcc73c6c8ad31d17a5fdc57dffea90e1" prot="public" virt="non-virtual"><scope>qvector</scope><name>end</name></member>
      <member refid="classqvector_1a59661e16df1b8e3c69caf2b2a6ca2b59" prot="public" virt="non-virtual"><scope>qvector</scope><name>erase</name></member>
      <member refid="classqvector_1a16a369b4edb05a6feddd38f8612eab1b" prot="public" virt="non-virtual"><scope>qvector</scope><name>erase</name></member>
      <member refid="classqvector_1abf8f50b30972a829ad7affb27cdb80c7" prot="public" virt="non-virtual"><scope>qvector</scope><name>extract</name></member>
      <member refid="classqvector_1ab9b8ccda1db8948c10f1ea2936c59a5c" prot="public" virt="non-virtual"><scope>qvector</scope><name>find</name></member>
      <member refid="classqvector_1a4e77dc1a55ea19e725e8a22aa574ae28" prot="public" virt="non-virtual"><scope>qvector</scope><name>find</name></member>
      <member refid="classqvector_1a7cfc6f9d91d6495f92961c5ea37bb0d4" prot="public" virt="non-virtual"><scope>qvector</scope><name>front</name></member>
      <member refid="classqvector_1ae4595a6221e8a056b54fed4dced17f26" prot="public" virt="non-virtual"><scope>qvector</scope><name>front</name></member>
      <member refid="classqvector_1acd86e975d8aa56bee809e4176bb0d530" prot="public" virt="non-virtual"><scope>qvector</scope><name>grow</name></member>
      <member refid="classqvector_1af9f9d1bbac527168131b03ee956833fc" prot="public" virt="non-virtual"><scope>qvector</scope><name>has</name></member>
      <member refid="classqvector_1aeb58b3064e71399ce8f2bfaf9a582d29" prot="public" virt="non-virtual"><scope>qvector</scope><name>index</name></member>
      <member refid="classqvector_1a0e2ac6acfb0b5607cd6b77e8049633db" prot="public" virt="non-virtual"><scope>qvector</scope><name>inject</name></member>
      <member refid="classqvector_1a7c55d837eb4006430e5b300e79901ef1" prot="public" virt="non-virtual"><scope>qvector</scope><name>insert</name></member>
      <member refid="classqvector_1ad10cb71a7d5bfdd090dafd52f625eb20" prot="public" virt="non-virtual"><scope>qvector</scope><name>insert</name></member>
      <member refid="classqvector_1ad40f094ea07c84e9cab1077188893c5c" prot="public" virt="non-virtual"><scope>qvector</scope><name>iterator</name></member>
      <member refid="classqvector_1ac859583705e422f42ef55d11810770dc" prot="private" virt="non-virtual"><scope>qvector</scope><name>n</name></member>
      <member refid="classqvector_1a72ea097e75bccff811f3a98f050b90b2" prot="public" virt="non-virtual"><scope>qvector</scope><name>operator!=</name></member>
      <member refid="classqvector_1af24534fa1de39b829e85f573640f9f48" prot="public" virt="non-virtual"><scope>qvector</scope><name>operator=</name></member>
      <member refid="classqvector_1ace7ff39fb8ad735fdd45b86a46ba4fbc" prot="public" virt="non-virtual"><scope>qvector</scope><name>operator==</name></member>
      <member refid="classqvector_1a3ffbd25fbea3165cf3f8f7a6b4d5c86d" prot="public" virt="non-virtual"><scope>qvector</scope><name>operator[]</name></member>
      <member refid="classqvector_1a9743bfd5464506b812d9686d3ba40299" prot="public" virt="non-virtual"><scope>qvector</scope><name>operator[]</name></member>
      <member refid="classqvector_1ad0dfc171e75ac7ddf1de00309505d995" prot="public" virt="non-virtual"><scope>qvector</scope><name>pop_back</name></member>
      <member refid="classqvector_1a3a46bca9030a31c7e0a1596948797e37" prot="public" virt="non-virtual"><scope>qvector</scope><name>push_back</name></member>
      <member refid="classqvector_1ad54c35eca9074d6458a0f589f09d1750" prot="public" virt="non-virtual"><scope>qvector</scope><name>push_back</name></member>
      <member refid="classqvector_1a5e84e633cf9a05ebdc441af0780edb4a" prot="public" virt="non-virtual"><scope>qvector</scope><name>qclear</name></member>
      <member refid="classqvector_1ac1c66f1594aff3114ed1de62cf84410d" prot="public" virt="non-virtual"><scope>qvector</scope><name>qvector</name></member>
      <member refid="classqvector_1a53936d7ddf6df4efdf91eeed34894c41" prot="public" virt="non-virtual"><scope>qvector</scope><name>qvector</name></member>
      <member refid="classqvector_1addb714f5d22192ca0402a6bc93633646" prot="private" virt="non-virtual"><scope>qvector</scope><name>qvector_reserve</name></member>
      <member refid="classqvector_1a00e5c32c63732f5149e901c932d2f3c2" prot="public" virt="non-virtual"><scope>qvector</scope><name>reserve</name></member>
      <member refid="classqvector_1a86c07a20c0f081c2930118f0db280148" prot="public" virt="non-virtual"><scope>qvector</scope><name>resize</name></member>
      <member refid="classqvector_1ae4d55e7d94d1a247e10baeae524b53dc" prot="public" virt="non-virtual"><scope>qvector</scope><name>resize</name></member>
      <member refid="classqvector_1a8661920fd417ffb2c10a02de03a64323" prot="private" virt="non-virtual"><scope>qvector</scope><name>shift_down</name></member>
      <member refid="classqvector_1a493bc19ad4447056715ca41157c7f03c" prot="private" virt="non-virtual"><scope>qvector</scope><name>shift_up</name></member>
      <member refid="classqvector_1ae96fe88d3602362b063bd0540ff579dd" prot="public" virt="non-virtual"><scope>qvector</scope><name>size</name></member>
      <member refid="classqvector_1a2006754f99fb324709ae0972ddb20bb4" prot="public" virt="non-virtual"><scope>qvector</scope><name>swap</name></member>
      <member refid="classqvector_1a447062dc6a1a8318a9e0430d4bbe0ec6" prot="public" virt="non-virtual"><scope>qvector</scope><name>truncate</name></member>
      <member refid="classqvector_1a71bc4c4aa5df2fda5b070e74f01b5d28" prot="public" virt="non-virtual"><scope>qvector</scope><name>value_type</name></member>
      <member refid="classqvector_1a3c7294aeb604b9c9e1b47b3abd8cd71e" prot="public" virt="non-virtual"><scope>qvector</scope><name>~qvector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
