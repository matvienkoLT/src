<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="loader_8hpp" kind="file" language="C++">
    <compoundname>loader.hpp</compoundname>
    <includes refid="ida_8hpp" local="no">ida.hpp</includes>
    <includedby refid="hexrays_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp</includedby>
    <includedby refid="commerc_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/commerc.hpp</includedby>
    <incdepgraph>
      <node id="951">
        <label>sys/stat.h</label>
      </node>
      <node id="935">
        <label>stdarg.h</label>
      </node>
      <node id="938">
        <label>assert.h</label>
      </node>
      <node id="932">
        <label>ida.hpp</label>
        <link refid="ida_8hpp"/>
        <childnode refid="933" relation="include">
        </childnode>
        <childnode refid="953" relation="include">
        </childnode>
      </node>
      <node id="931">
        <label>obj/x64_linux_gcc_32_opt/idasdk/loader.hpp</label>
        <link refid="loader_8hpp"/>
        <childnode refid="932" relation="include">
        </childnode>
      </node>
      <node id="934">
        <label>stdlib.h</label>
      </node>
      <node id="946">
        <label>io.h</label>
      </node>
      <node id="949">
        <label>fcntl.h</label>
      </node>
      <node id="952">
        <label>llong.hpp</label>
        <link refid="llong_8hpp_source"/>
      </node>
      <node id="944">
        <label>malloc.h</label>
      </node>
      <node id="943">
        <label>string</label>
      </node>
      <node id="948">
        <label>map</label>
      </node>
      <node id="947">
        <label>direct.h</label>
      </node>
      <node id="936">
        <label>stddef.h</label>
      </node>
      <node id="939">
        <label>limits.h</label>
      </node>
      <node id="950">
        <label>sys/types.h</label>
      </node>
      <node id="945">
        <label>string.h</label>
      </node>
      <node id="942">
        <label>new</label>
      </node>
      <node id="933">
        <label>pro.h</label>
        <link refid="pro_8h"/>
        <childnode refid="934" relation="include">
        </childnode>
        <childnode refid="935" relation="include">
        </childnode>
        <childnode refid="936" relation="include">
        </childnode>
        <childnode refid="937" relation="include">
        </childnode>
        <childnode refid="938" relation="include">
        </childnode>
        <childnode refid="939" relation="include">
        </childnode>
        <childnode refid="940" relation="include">
        </childnode>
        <childnode refid="941" relation="include">
        </childnode>
        <childnode refid="942" relation="include">
        </childnode>
        <childnode refid="943" relation="include">
        </childnode>
        <childnode refid="944" relation="include">
        </childnode>
        <childnode refid="945" relation="include">
        </childnode>
        <childnode refid="946" relation="include">
        </childnode>
        <childnode refid="947" relation="include">
        </childnode>
        <childnode refid="948" relation="include">
        </childnode>
        <childnode refid="949" relation="include">
        </childnode>
        <childnode refid="950" relation="include">
        </childnode>
        <childnode refid="951" relation="include">
        </childnode>
        <childnode refid="952" relation="include">
        </childnode>
      </node>
      <node id="941">
        <label>time.h</label>
      </node>
      <node id="940">
        <label>ctype.h</label>
      </node>
      <node id="953">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
      </node>
      <node id="937">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="956">
        <label>obj/x64_linux_gcc_32_opt/idasdk/commerc.hpp</label>
        <link refid="commerc_8hpp_source"/>
      </node>
      <node id="954">
        <label>obj/x64_linux_gcc_32_opt/idasdk/loader.hpp</label>
        <link refid="loader_8hpp"/>
        <childnode refid="955" relation="include">
        </childnode>
        <childnode refid="956" relation="include">
        </childnode>
      </node>
      <node id="955">
        <label>obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp</label>
        <link refid="hexrays_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structloader__t" prot="public">loader_t</innerclass>
    <innerclass refid="structload__info__t" prot="public">load_info_t</innerclass>
    <innerclass refid="structimpinfo__t" prot="public">impinfo_t</innerclass>
    <innerclass refid="classplugin__t" prot="public">plugin_t</innerclass>
    <innerclass refid="structidp__name__t" prot="public">idp_name_t</innerclass>
    <innerclass refid="structidp__desc__t" prot="public">idp_desc_t</innerclass>
    <innerclass refid="structplugin__info__t" prot="public">plugin_info_t</innerclass>
    <innerclass refid="structdbg__info__t" prot="public">dbg_info_t</innerclass>
    <innerclass refid="classsnapshot__t" prot="public">snapshot_t</innerclass>
      <sectiondef kind="user-defined">
      <header>Lines</header>
      <description><para>Callback functions to output lines: </para></description>
      <memberdef kind="define" id="loader_8hpp_1a0b74764c6dcced97b2ca35f5c4b9afb5" prot="public" static="no">
        <name>gen_outline_t</name>
        <initializer>html_line_cb_t</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="362" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="loader_8hpp_1aaf3bbfac57f64791a7b2948026677063" prot="public" static="no">
        <type>int idaapi</type>
        <definition>typedef int idaapi html_header_cb_t(FILE *fp)</definition>
        <argsstring>(FILE *fp)</argsstring>
        <name>html_header_cb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="355" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="loader_8hpp_1ac61876d55d1f12a5dc51f1d22d0b409e" prot="public" static="no">
        <type>int idaapi</type>
        <definition>typedef int idaapi html_footer_cb_t(FILE *fp)</definition>
        <argsstring>(FILE *fp)</argsstring>
        <name>html_footer_cb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="356" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="loader_8hpp_1ae67661ea25e2c5115cb66bb328e1cb12" prot="public" static="no">
        <type>int idaapi</type>
        <definition>typedef int idaapi html_line_cb_t(FILE *fp, const qstring &amp;line, bgcolor_t prefix_color, bgcolor_t bg_color)</definition>
        <argsstring>(FILE *fp, const qstring &amp;line, bgcolor_t prefix_color, bgcolor_t bg_color)</argsstring>
        <name>html_line_cb_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="357" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="357" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Regions</header>
      <description><para>Work with file regions (for patching) </para></description>
      <memberdef kind="function" id="loader_8hpp_1a03f5a5b9e316b519bffa4af2cec2eb32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void init_fileregions</definition>
        <argsstring>(void)</argsstring>
        <name>init_fileregions</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="820" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a7a2f46084e820dbda69a4f7a39136d57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void term_fileregions</definition>
        <argsstring>(void)</argsstring>
        <name>term_fileregions</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="821" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1aae365a0661bb84afe582c5895b20cd6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void save_fileregions</definition>
        <argsstring>(void)</argsstring>
        <name>save_fileregions</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="822" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="822" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1aeb05afd3526078b80bbe4345d61e85ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void add_fileregion</definition>
        <argsstring>(ea_t ea1, ea_t ea2, qoff64_t fpos)</argsstring>
        <name>add_fileregion</name>
        <param>
          <type>ea_t</type>
          <declname>ea1</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea2</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a42ae75d34f73b9e691bd16aaddb897e5" kindref="member">qoff64_t</ref></type>
          <declname>fpos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="823" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a56a73ccfe1696de67533f45e3d550767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void move_fileregions</definition>
        <argsstring>(ea_t from, ea_t to, asize_t size, bool changed_netmap)</argsstring>
        <name>move_fileregions</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>changed_netmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="824" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1acb00906d345438c6b035f7ef4dbcf73a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void del_fileregions</definition>
        <argsstring>(ea_t ea1, ea_t ea2)</argsstring>
        <name>del_fileregions</name>
        <param>
          <type>ea_t</type>
          <declname>ea1</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="825" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___l_d_r_f___1gad84d752ae33d94062ef5dec8f2e82a0b" prot="public" static="no">
        <name>LDRF_RELOAD</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>loader recognizes <ref refid="group___n_e_f___1ga1e82e9bb7ac0d602cdd774cda222c1a0" kindref="member">NEF_RELOAD</ref> flag </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="50" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___l_d_r_f___1gaee1078021c1ba4ce8b0f69a31b6f6d2f" prot="public" static="no">
        <name>LDRF_REQ_PROC</name>
        <initializer>0x0002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Requires a processor to be set. if this bit is not set, load_file() must call set_processor_type(..., SETPROC_LOADER) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="51" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="loader_8hpp_1a95d411e4e7c809664e1ba33c61b0bffa" prot="public" static="no">
        <name>ACCEPT_ARCHIVE</name>
        <initializer>0x2000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specify that a file format is served by archive loader See <ref refid="structloader__t_1a71ddfdd15d4c7ff137acd776f21ece60" kindref="member">loader_t::accept_file</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="83" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="loader_8hpp_1a60fb3c4f4605753d48e4c437f924e7be" prot="public" static="no">
        <name>ACCEPT_CONTINUE</name>
        <initializer>0x4000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specify that the function must be called another time See <ref refid="structloader__t_1a71ddfdd15d4c7ff137acd776f21ece60" kindref="member">loader_t::accept_file</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="86" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="loader_8hpp_1ac4a513b8be5b7a4aa5984ea4f43eacd1" prot="public" static="no">
        <name>ACCEPT_FIRST</name>
        <initializer>0x8000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specify that a file format should be place first in &quot;load file&quot; dialog box. See <ref refid="structloader__t_1a71ddfdd15d4c7ff137acd776f21ece60" kindref="member">loader_t::accept_file</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="89" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_e_f___1ga3f5b9cfa74761b15d12189baa77675f0" prot="public" static="no">
        <name>NEF_SEGS</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>Create segments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="105" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_e_f___1ga883034000de9c1c1417912e08e2d5160" prot="public" static="no">
        <name>NEF_RSCS</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>Load resources. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="106" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_e_f___1ga161760832f74975b7a617194956c0ced" prot="public" static="no">
        <name>NEF_NAME</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>Rename entries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="107" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_e_f___1ga010750734d8c2621cd74fed09b807440" prot="public" static="no">
        <name>NEF_MAN</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>Manual load. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="108" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_e_f___1gace2d7cc234e0cf73e2dba41f6826ea07" prot="public" static="no">
        <name>NEF_FILL</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para>Fill segment gaps. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="109" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_e_f___1ga2f36ad0759e6b06a8ce703198bebd895" prot="public" static="no">
        <name>NEF_IMPS</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>Create import segment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="110" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_e_f___1gaf656881a6f6cf5f94781f6b1daf225df" prot="public" static="no">
        <name>NEF_FIRST</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>into the database. </para>        </briefdescription>
        <detaileddescription>
<para>This is the first file loaded </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="111" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_e_f___1gacfbe5b017d2e57b28012ed4523e6cbe1" prot="public" static="no">
        <name>NEF_CODE</name>
        <initializer>0x0100</initializer>
        <briefdescription>
<para>load as a code segment </para>        </briefdescription>
        <detaileddescription>
<para>for <ref refid="loader_8hpp_1a5b08728a4c590e639d3eebca204e7194" kindref="member">load_binary_file()</ref>: </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="113" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_e_f___1ga1e82e9bb7ac0d602cdd774cda222c1a0" prot="public" static="no">
        <name>NEF_RELOAD</name>
        <initializer>0x0200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reload the file at the same place: - don&apos;t create segments<itemizedlist>
<listitem><para>don&apos;t create fixup info</para></listitem><listitem><para>don&apos;t import segments</para></listitem><listitem><para>etc load only the bytes into the base. a loader should have <ref refid="group___l_d_r_f___1gad84d752ae33d94062ef5dec8f2e82a0b" kindref="member">LDRF_RELOAD</ref> bit set </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="115" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_e_f___1ga9b0865b5611c7ed8e07c2e7f86e215aa" prot="public" static="no">
        <name>NEF_FLAT</name>
        <initializer>0x0400</initializer>
        <briefdescription>
<para>Autocreate FLAT group (PE) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="123" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_e_f___1ga36e889499ec4dabe90559972ee2d4636" prot="public" static="no">
        <name>NEF_MINI</name>
        <initializer>0x0800</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create mini database (do not copy segment bytes from the input file; use only the file header metadata) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="124" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_e_f___1gae5a6e5de2195e83575d8270f12e0e60c" prot="public" static="no">
        <name>NEF_LOPT</name>
        <initializer>0x1000</initializer>
        <briefdescription>
<para>Display additional loader options dialog. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="127" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_e_f___1gae47bae339b2cc06a2ec5fb30dab3adf0" prot="public" static="no">
        <name>NEF_LALL</name>
        <initializer>0x2000</initializer>
        <briefdescription>
<para>Load all segments without questions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="128" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="loader_8hpp_1a2ec70ffa17ea436ef469dcf928071633" prot="public" static="no">
        <name>DLLEXT</name>
        <initializer>&quot;dll&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="202" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="loader_8hpp_1a1492dab7111db119028b40aac9fa1c1a" prot="public" static="no">
        <name>LOADER_DLL</name>
        <initializer>&quot;*.&quot; DLLEXT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="216" column="12" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___l_i_f___1gac4724a3f2f382b39a23876212f758eb1" prot="public" static="no">
        <name>LIF_ARCHLDR</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>archive loader </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="237" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_e_n_f_l_g___1ga70f3ee40458929f67364429af8c68476" prot="public" static="no">
        <name>GENFLG_MAPSEG</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para><ref refid="loader_8hpp_1aedd09d8d4388efa808171434ac541d13ac624fba1b30cb2e084028e17d92c2b38" kindref="member">OFILE_MAP</ref>: generate map of segments </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="386" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_e_n_f_l_g___1ga808d0a66a6e55930442f77a79fefc5f2" prot="public" static="no">
        <name>GENFLG_MAPNAME</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para><ref refid="loader_8hpp_1aedd09d8d4388efa808171434ac541d13ac624fba1b30cb2e084028e17d92c2b38" kindref="member">OFILE_MAP</ref>: include dummy names </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="387" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_e_n_f_l_g___1gaa5e00f8000bdd5f7101ca87e9847a6fa" prot="public" static="no">
        <name>GENFLG_MAPDMNG</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para><ref refid="loader_8hpp_1aedd09d8d4388efa808171434ac541d13ac624fba1b30cb2e084028e17d92c2b38" kindref="member">OFILE_MAP</ref>: demangle names </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="388" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_e_n_f_l_g___1gaacc83da733c500762dfeddf2125c4533" prot="public" static="no">
        <name>GENFLG_MAPLOC</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para><ref refid="loader_8hpp_1aedd09d8d4388efa808171434ac541d13ac624fba1b30cb2e084028e17d92c2b38" kindref="member">OFILE_MAP</ref>: include local names </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="389" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="389" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_e_n_f_l_g___1ga8232a1d2349932e7a70733c6d1606537" prot="public" static="no">
        <name>GENFLG_IDCTYPE</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para><ref refid="loader_8hpp_1aedd09d8d4388efa808171434ac541d13ae7aa088bbb5f8e44928f19b196cd9cea" kindref="member">OFILE_IDC</ref>: gen only information about types </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="390" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="390" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_e_n_f_l_g___1ga040347fccdc31008de710c73aa58596b" prot="public" static="no">
        <name>GENFLG_ASMTYPE</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para><ref refid="loader_8hpp_1aedd09d8d4388efa808171434ac541d13ad5210e503207e842b477f9f9e5af91d7" kindref="member">OFILE_ASM</ref>,<ref refid="loader_8hpp_1aedd09d8d4388efa808171434ac541d13afb6dc515fb3c0712c58436b2a27fbbe5" kindref="member">OFILE_LST</ref>: gen information about types too </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="391" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="391" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_e_n_f_l_g___1gaadb837b302cf57aa7081a7ca9d16d413" prot="public" static="no">
        <name>GENFLG_GENHTML</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para><ref refid="loader_8hpp_1aedd09d8d4388efa808171434ac541d13ad5210e503207e842b477f9f9e5af91d7" kindref="member">OFILE_ASM</ref>,<ref refid="loader_8hpp_1aedd09d8d4388efa808171434ac541d13afb6dc515fb3c0712c58436b2a27fbbe5" kindref="member">OFILE_LST</ref>: generate html (<ref refid="kernwin_8hpp_1a4a23e389ff9cbf1cd31179ca2f393334a34554496f5ccd6ef68fa75dd0ca6ae8c" kindref="member">ui_genfile_callback</ref> will be used) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="392" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="392" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_e_n_f_l_g___1ga03ecf33d18bdf11d5fb94b2966c6ca58" prot="public" static="no">
        <name>GENFLG_ASMINC</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para><ref refid="loader_8hpp_1aedd09d8d4388efa808171434ac541d13ad5210e503207e842b477f9f9e5af91d7" kindref="member">OFILE_ASM</ref>,<ref refid="loader_8hpp_1aedd09d8d4388efa808171434ac541d13afb6dc515fb3c0712c58436b2a27fbbe5" kindref="member">OFILE_LST</ref>: gen information only about types </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="393" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="loader_8hpp_1a50430c47036d7093679721727e35e971" prot="public" static="no">
        <name>FILEREG_PATCHABLE</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>means that the input file may be patched (i.e. no compression, no iterated data, etc) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="418" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="loader_8hpp_1a84c383cb7e29f788dd8d2a70e3105338" prot="public" static="no">
        <name>FILEREG_NOTPATCHABLE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>form in the file. </para>        </briefdescription>
        <detaileddescription>
<para>the data is kept in some encoded </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="421" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_l_u_g_i_n___1ga053458a32fa2a7bceaa884706e9fec3f" prot="public" static="no">
        <name>PLUGIN_MOD</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Plugin changes the database. IDA won&apos;t call the plugin if the processor module prohibited any changes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="569" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="569" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_l_u_g_i_n___1ga25ee3ee8e48712bde6186f39f729cf66" prot="public" static="no">
        <name>PLUGIN_DRAW</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>IDA should redraw everything after calling the plugin. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="572" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_l_u_g_i_n___1ga0c08231bd50bf07d8f35470becbc36f4" prot="public" static="no">
        <name>PLUGIN_SEG</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>Plugin may be applied only if the current address belongs to a segment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="573" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="573" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_l_u_g_i_n___1gaef9f42b5012e3213d8e3b4719e73a961" prot="public" static="no">
        <name>PLUGIN_UNL</name>
        <initializer>0x0008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unload the plugin immediately after calling &apos;run&apos;. This flag may be set anytime. The kernel checks it after each call to &apos;run&apos; The main purpose of this flag is to ease the debugging of new plugins. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="574" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="574" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_l_u_g_i_n___1ga84260e966b157a4277779b1783d87a56" prot="public" static="no">
        <name>PLUGIN_HIDE</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para>This flag is checked at the start. </para>        </briefdescription>
        <detaileddescription>
<para>Plugin should not appear in the Edit, Plugins menu. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="579" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_l_u_g_i_n___1ga1136f920c68618a68d8563fe6b0808d1" prot="public" static="no">
        <name>PLUGIN_DBG</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>the address of <ref refid="structdebugger__t" kindref="compound">debugger_t</ref> to dbg. </para>        </briefdescription>
        <detaileddescription>
<para>A debugger plugin. init() should put </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="581" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="581" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_l_u_g_i_n___1gaa6d068238960312fa4da65a6e3130b9f" prot="public" static="no">
        <name>PLUGIN_PROC</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para>until the processor module is unloaded) </para>        </briefdescription>
        <detaileddescription>
<para>Load plugin when a processor module is loaded. (and keep it </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="583" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="583" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_l_u_g_i_n___1ga4f3f72fdbc0ba0395224cf8f7de6f7b4" prot="public" static="no">
        <name>PLUGIN_FIX</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>Load plugin when IDA starts and keep it in the memory until IDA stops. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="585" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="585" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_l_u_g_i_n___1gad4621944ec5253bccdbcbe7f4e157d63" prot="public" static="no">
        <name>PLUGIN_SCRIPTED</name>
        <initializer>0x8000</initializer>
        <briefdescription>
<para>the kernel sets it automatically. </para>        </briefdescription>
        <detaileddescription>
<para>Scripted plugin. Should not be used by plugins, </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="586" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="586" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_l_u_g_i_n___i_n_i_t_1ga8c9497652471d2816127ea0a9eb259f4" prot="public" static="no">
        <name>PLUGIN_SKIP</name>
        <initializer>0</initializer>
        <briefdescription>
<para>Plugin doesn&apos;t want to be loaded. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="594" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="594" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_l_u_g_i_n___i_n_i_t_1gad00d87ffd3407913fdb864e3f2187c74" prot="public" static="no">
        <name>PLUGIN_OK</name>
        <initializer>1</initializer>
        <briefdescription>
<para>It will be loaded as soon as the user presses the hotkey. </para>        </briefdescription>
        <detaileddescription>
<para>Plugin agrees to work with the current database. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="595" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_l_u_g_i_n___i_n_i_t_1gadf25be6696b26feb331ab647f0a51bdb" prot="public" static="no">
        <name>PLUGIN_KEEP</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Plugin agrees to work with the current database and wants to stay in the memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="597" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="597" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="loader_8hpp_1ad8c69923953387b6f169161d3ed50845" prot="public" static="no">
        <name>PLUGIN_DLL</name>
        <initializer>&quot;*.&quot; DLLEXT</initializer>
        <briefdescription>
<para>Pattern to find plugin files. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="635" column="12" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="635" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="loader_8hpp_1a1233441771dc81be9801345f7ad89752" prot="public" static="no">
        <name>IDP_DLL</name>
        <initializer>&quot;*.&quot; DLLEXT</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="727" column="12" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="727" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="loader_8hpp_1acd9d76a789ba9fe50d6abd7a31463e3c" prot="public" static="no">
        <name>MAX_DATABASE_DESCRIPTION</name>
        <initializer>128</initializer>
        <briefdescription>
<para>Maximum database snapshot description length. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="871" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="871" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_s_f___1ga804afc38b16073f6fd8c044a7c530fb2" prot="public" static="no">
        <name>SSF_AUTOMATIC</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>automatic snapshot </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="894" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="894" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_s_u_f___1ga97f1b7d2dd235998e1ff01f1240ee3ae" prot="public" static="no">
        <name>SSUF_DESC</name>
        <initializer>0x00000001</initializer>
        <briefdescription>
<para>Update the description. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="949" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="949" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_s_u_f___1gabf576389ee5dbacdbf0d1b9452ff6520" prot="public" static="no">
        <name>SSUF_PATH</name>
        <initializer>0x00000002</initializer>
        <briefdescription>
<para>Update the path. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="950" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="950" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_s_u_f___1ga17cdaf1fcbbd3e1ef1134f1e64123922" prot="public" static="no">
        <name>SSUF_FLAGS</name>
        <initializer>0x00000004</initializer>
        <briefdescription>
<para>Update the flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="951" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="951" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_b_f_l___1gad40315e938c2fce40a11f27811da879f" prot="public" static="no">
        <name>DBFL_KILL</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para>delete unpacked database </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="997" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="997" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_b_f_l___1ga9790cdb55a5a83f37c6f475ce6f0d1b7" prot="public" static="no">
        <name>DBFL_COMP</name>
        <initializer>0x02</initializer>
        <briefdescription>
<para>collect garbage </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="998" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="998" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_b_f_l___1ga6a20bc994b2064ad6fb28c12813a8727" prot="public" static="no">
        <name>DBFL_BAK</name>
        <initializer>0x04</initializer>
        <briefdescription>
<para>create backup file (if !DBFL_KILL) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="999" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_b_f_l___1ga92ff8f4f7382f10f43afeb9dfdcfcb43" prot="public" static="no">
        <name>DBFL_TEMP</name>
        <initializer>0x08</initializer>
        <briefdescription>
<para>temporary database </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="1000" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="1000" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="loader_8hpp_1aedd09d8d4388efa808171434ac541d13" prot="public" static="no">
        <name>ofile_type_t</name>
        <enumvalue id="loader_8hpp_1aedd09d8d4388efa808171434ac541d13ac624fba1b30cb2e084028e17d92c2b38" prot="public">
          <name>OFILE_MAP</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>MAP file. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="loader_8hpp_1aedd09d8d4388efa808171434ac541d13aba7c63918a7f2150fc508ed1d8ec4d9e" prot="public">
          <name>OFILE_EXE</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Executable file. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="loader_8hpp_1aedd09d8d4388efa808171434ac541d13ae7aa088bbb5f8e44928f19b196cd9cea" prot="public">
          <name>OFILE_IDC</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>IDC file. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="loader_8hpp_1aedd09d8d4388efa808171434ac541d13afb6dc515fb3c0712c58436b2a27fbbe5" prot="public">
          <name>OFILE_LST</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Disassembly listing. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="loader_8hpp_1aedd09d8d4388efa808171434ac541d13ad5210e503207e842b477f9f9e5af91d7" prot="public">
          <name>OFILE_ASM</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>Assembly. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="loader_8hpp_1aedd09d8d4388efa808171434ac541d13a6dc703e165a6f190e4784df39855550d" prot="public">
          <name>OFILE_DIF</name>
          <initializer>= 5</initializer>
          <briefdescription>
<para>Difference. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Output file types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="343" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="342" bodyend="350"/>
      </memberdef>
      <memberdef kind="enum" id="group___p_a_t_h___t_y_p_e___1gafc09bc028687e92ef441af98ebf39072" prot="public" static="no">
        <name>path_type_t</name>
        <enumvalue id="group___p_a_t_h___t_y_p_e___1ggafc09bc028687e92ef441af98ebf39072a7a6c53b9d08d950015b39698002ca711" prot="public">
          <name>PATH_TYPE_CMD</name>
          <briefdescription>
<para>full path to the file specified in the command line </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_a_t_h___t_y_p_e___1ggafc09bc028687e92ef441af98ebf39072a2ccf83da59e81168ed422aa1f9807f35" prot="public">
          <name>PATH_TYPE_IDB</name>
          <briefdescription>
<para>full path of IDB file </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___p_a_t_h___t_y_p_e___1ggafc09bc028687e92ef441af98ebf39072a97ea26d31dbf83cd6eb7a9d14b9ade81" prot="public">
          <name>PATH_TYPE_ID0</name>
          <briefdescription>
<para>full path of ID0 file </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="1024" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="1023" bodyend="1028"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="loader_8hpp_1a6c309fd957fd4d5d6e4b878f1523053a" prot="public" static="no">
        <type>int idaapi</type>
        <definition>typedef int idaapi importer_t(linput_t *li, impinfo_t *ii)</definition>
        <argsstring>(linput_t *li, impinfo_t *ii)</argsstring>
        <name>importer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback for checking dll module - passed to <ref refid="loader_8hpp_1a691f60415204d2d43ee2f71444a229e8" kindref="member">import_module()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>li</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to input file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ii</parametername>
</parameternamelist>
<parameterdescription>
<para>import info. If the function finds that ii.dllname does not match the module name passed to <ref refid="loader_8hpp_1a691f60415204d2d43ee2f71444a229e8" kindref="member">import_module()</ref>, it returns 0. <linebreak/>
 Otherwise it calls ii.func for each exported entry. <linebreak/>
 If ii.dllname==NULL then ii.func will be called with num==0 and name==dllname. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>dllname doesn&apos;t match, <ref refid="loader_8hpp_1a691f60415204d2d43ee2f71444a229e8" kindref="member">import_module()</ref> should continue </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="516" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="loader_8hpp_1ad04ad05effd5fed8829a56648ccc1520" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structidp__name__t" kindref="compound">idp_name_t</ref> &gt;</type>
        <definition>typedef qvector&lt;idp_name_t&gt; idp_names_t</definition>
        <argsstring></argsstring>
        <name>idp_names_t</name>
        <briefdescription>
<para>vector of processor names </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="700" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="699" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="loader_8hpp_1af800f6e24c5fc4b6e53be1c585813930" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structidp__desc__t" kindref="compound">idp_desc_t</ref> &gt;</type>
        <definition>typedef qvector&lt;idp_desc_t&gt; idp_descs_t</definition>
        <argsstring></argsstring>
        <name>idp_descs_t</name>
        <briefdescription>
<para>vector of processor module descriptions </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="714" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="713" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="loader_8hpp_1a5ff57e32230aa95b8d696df27cc43bc4" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="classsnapshot__t" kindref="compound">snapshot_t</ref> * &gt;</type>
        <definition>typedef qvector&lt;snapshot_t *&gt; snapshots_t</definition>
        <argsstring></argsstring>
        <name>snapshots_t</name>
        <briefdescription>
<para>vector of database snapshots </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="874" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="873" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="loader_8hpp_1a9d9d454c450da59769b74b514117b393" prot="public" static="no" mutable="no">
        <type>idaman ida_module_data <ref refid="classplugin__t" kindref="compound">plugin_t</ref></type>
        <definition>idaman ida_module_data plugin_t PLUGIN</definition>
        <argsstring></argsstring>
        <name>PLUGIN</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="618" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="618" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="loader_8hpp_1a83edb5e6875a5c10a621b271b72520d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman NORETURN void ida_export</type>
        <definition>idaman NORETURN void ida_export vloader_failure</definition>
        <argsstring>(const char *format, va_list va)</argsstring>
        <name>vloader_failure</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>va</declname>
        </param>
        <briefdescription>
<para>See <ref refid="loader_8hpp_1ac5e3189d54cc0c34924fb28ebacbbbc3" kindref="member">loader_failure()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1ac5e3189d54cc0c34924fb28ebacbbbc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>NORETURN void</type>
        <definition>NORETURN void loader_failure</definition>
        <argsstring>(const char *format=NULL,...)</argsstring>
        <name>loader_failure</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display a message about a loader failure and stop the loading process. The kernel will destroy the database. If format == NULL, no message will be displayed This function does not return (it longjumps)! It may be called only from <ref refid="structloader__t_1a06ce7bcf929568ec0e8860cebf235f32" kindref="member">loader_t::load_file</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="193" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="193" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1acfc5c9be335ca62fd92ae0361fe06465" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="structload__info__t" kindref="compound">load_info_t</ref> *ida_export</type>
        <definition>idaman load_info_t* ida_export build_loaders_list</definition>
        <argsstring>(linput_t *li, const char *filename)</argsstring>
        <name>build_loaders_list</name>
        <param>
          <type>linput_t *</type>
          <declname>li</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>Build list of potential loaders. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1abfd8b95eb45916306eadbe41d171d5b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export free_loaders_list</definition>
        <argsstring>(load_info_t *list)</argsstring>
        <name>free_loaders_list</name>
        <param>
          <type><ref refid="structload__info__t" kindref="compound">load_info_t</ref> *</type>
          <declname>list</declname>
        </param>
        <briefdescription>
<para>Free the list of loaders. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a18e35121f357ca80129e31041429b913" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman char *ida_export</type>
        <definition>idaman char* ida_export get_loader_name_from_dll</definition>
        <argsstring>(char *dllname)</argsstring>
        <name>get_loader_name_from_dll</name>
        <param>
          <type>char *</type>
          <declname>dllname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get name of loader from its DLL file (for example, for PE files we will get &quot;PE&quot;). This function modifies the original string and returns a pointer into it. NB: if the file extension is a registered extlang extension (e.g. py or idc) the extension is retained </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a9c79e47be0a36e47363409f3ce9ce6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_loader_name</definition>
        <argsstring>(char *buf, size_t bufsize)</argsstring>
        <name>get_loader_name</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get name of loader used to load the input file into the database. If no external loader was used, returns -1. Otherwise copies the loader file name without the extension in the buf and returns its length (for example, for PE files we will get &quot;PE&quot;). For scripted loaders, the file extension is retained. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a5b08728a4c590e639d3eebca204e7194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export load_binary_file</definition>
        <argsstring>(const char *filename, linput_t *li, ushort _neflags, qoff64_t fileoff, ea_t basepara, ea_t binoff, uint64 nbytes)</argsstring>
        <name>load_binary_file</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>linput_t *</type>
          <declname>li</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref></type>
          <declname>_neflags</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a42ae75d34f73b9e691bd16aaddb897e5" kindref="member">qoff64_t</ref></type>
          <declname>fileoff</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>basepara</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>binoff</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a binary file into the database. This function usually is called from ui. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of input file as is (if the input file is from library, then this is the name from the library) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>li</parametername>
</parameternamelist>
<parameterdescription>
<para>loader input source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_neflags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___n_e_f__" kindref="compound">Load file flags</ref>. For the first file, the flag <ref refid="group___n_e_f___1gaf656881a6f6cf5f94781f6b1daf225df" kindref="member">NEF_FIRST</ref> must be set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fileoff</parametername>
</parameternamelist>
<parameterdescription>
<para>Offset in the input file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>basepara</parametername>
</parameternamelist>
<parameterdescription>
<para>Load address in paragraphs </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>binoff</parametername>
</parameternamelist>
<parameterdescription>
<para>Load offset (load_address=(basepara&lt;&lt;4)+binoff) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to load from the file.<itemizedlist>
<listitem><para>0: up to the end of the file</para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
If nbytes is bigger than the number of bytes rest, the kernel will load as much as possible <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>failed (couldn&apos;t open the file) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1ac15d39cb4930f335d521516d8e56e77d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export load_nonbinary_file</definition>
        <argsstring>(const char *filename, linput_t *li, const char *sysdlldir, ushort _neflags, load_info_t *loader)</argsstring>
        <name>load_nonbinary_file</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>linput_t *</type>
          <declname>li</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>sysdlldir</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref></type>
          <declname>_neflags</declname>
        </param>
        <param>
          <type><ref refid="structload__info__t" kindref="compound">load_info_t</ref> *</type>
          <declname>loader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a non-binary file into the database. This function usually is called from ui. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of input file as is (if the input file is from library, then this is the name from the library) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>li</parametername>
</parameternamelist>
<parameterdescription>
<para>loader input source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sysdlldir</parametername>
</parameternamelist>
<parameterdescription>
<para>a directory with system dlls. Pass &quot;.&quot; if unknown. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_neflags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___n_e_f__" kindref="compound">Load file flags</ref>. For the first file the flag <ref refid="group___n_e_f___1gaf656881a6f6cf5f94781f6b1daf225df" kindref="member">NEF_FIRST</ref> must be set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loader</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to <ref refid="structload__info__t" kindref="compound">load_info_t</ref> structure. If the current IDP module has {loader} != NULL then this argument is ignored. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1ab10ca781692c3c093f87e376b2709f93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export process_archive</definition>
        <argsstring>(qstring *temp_file, linput_t *li, qstring *module_name, ushort *neflags, const char *defmember, const load_info_t *loader, qstring *errbuf=NULL)</argsstring>
        <name>process_archive</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>temp_file</declname>
        </param>
        <param>
          <type>linput_t *</type>
          <declname>li</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>module_name</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref> *</type>
          <declname>neflags</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>defmember</declname>
        </param>
        <param>
          <type>const <ref refid="structload__info__t" kindref="compound">load_info_t</ref> *</type>
          <declname>loader</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calls <ref refid="structloader__t_1a9f5ef40830d55bde46d1487214ce478a" kindref="member">loader_t::process_archive()</ref> For parameters and return value description look at <ref refid="structloader__t_1a9f5ef40830d55bde46d1487214ce478a" kindref="member">loader_t::process_archive()</ref>. Additional parameter: <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loader</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to <ref refid="structload__info__t" kindref="compound">load_info_t</ref> structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a777046093020c790ec43bd207166bf09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export gen_file</definition>
        <argsstring>(ofile_type_t otype, FILE *fp, ea_t ea1, ea_t ea2, int flags)</argsstring>
        <name>gen_file</name>
        <param>
          <type><ref refid="loader_8hpp_1aedd09d8d4388efa808171434ac541d13" kindref="member">ofile_type_t</ref></type>
          <declname>otype</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea1</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate an output file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>otype</parametername>
</parameternamelist>
<parameterdescription>
<para>type of output file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>the output file handle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea1</parametername>
</parameternamelist>
<parameterdescription>
<para>start address. For some file types this argument is ignored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea2</parametername>
</parameternamelist>
<parameterdescription>
<para>end address. For some file types this argument is ignored as usual in ida, the end address of the range is not included </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___g_e_n_f_l_g__" kindref="compound">Generate file flags</ref></para></parameterdescription>
</parameteritem>
</parameterlist>
For <ref refid="loader_8hpp_1aedd09d8d4388efa808171434ac541d13aba7c63918a7f2150fc508ed1d8ec4d9e" kindref="member">OFILE_EXE</ref>: <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>can&apos;t generate exe file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok</para></parameterdescription>
</parameteritem>
</parameterlist>
For other file types: <simplesect kind="return"><para>number of the generated lines. -1 if an error occurred </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1aa55dad642948cb62f91344716212366a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export file2base</definition>
        <argsstring>(linput_t *li, qoff64_t pos, ea_t ea1, ea_t ea2, int patchable)</argsstring>
        <name>file2base</name>
        <param>
          <type>linput_t *</type>
          <declname>li</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a42ae75d34f73b9e691bd16aaddb897e5" kindref="member">qoff64_t</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea1</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>patchable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load portion of file into the database. This function will include (ea1..ea2) into the addressing space of the program (make it enabled) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>li</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer of input source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position in the file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea1</parametername>
<parametername>ea2</parametername>
</parameternamelist>
<parameterdescription>
<para>range of destination linear addresses </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>patchable</parametername>
</parameternamelist>
<parameterdescription>
<para>should the kernel remember correspondence of file offsets to linear addresses. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>read error, a warning is displayed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a3b18e29bd0da13b0560d26c1b2d4e172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export mem2base</definition>
        <argsstring>(const void *memptr, ea_t ea1, ea_t ea2, qoff64_t fpos)</argsstring>
        <name>mem2base</name>
        <param>
          <type>const void *</type>
          <declname>memptr</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea1</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea2</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a42ae75d34f73b9e691bd16aaddb897e5" kindref="member">qoff64_t</ref></type>
          <declname>fpos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load database from the memory. This function works for wide byte processors too. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>memptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to buffer with bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea1</parametername>
<parametername>ea2</parametername>
</parameternamelist>
<parameterdescription>
<para>range of destination linear addresses </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fpos</parametername>
</parameternamelist>
<parameterdescription>
<para>position in the input file the data is taken from. if == -1, then no file position correspond to the data. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 always </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="433" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1ad72e52cafb9dcef67cd0b3ba9df3943f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export base2file</definition>
        <argsstring>(FILE *fp, qoff64_t pos, ea_t ea1, ea_t ea2)</argsstring>
        <name>base2file</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a42ae75d34f73b9e691bd16aaddb897e5" kindref="member">qoff64_t</ref></type>
          <declname>pos</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea1</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unload database to a binary file. This function works for wide byte processors too. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>position in the file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea1</parametername>
<parametername>ea2</parametername>
</parameternamelist>
<parameterdescription>
<para>range of source linear addresses </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1-ok(always), write error leads to immediate exit </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1ab4ba049fd5e75b691ad84a1d4afaa7b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export extract_module_from_archive</definition>
        <argsstring>(char *filename, size_t bufsize, char **temp_file_ptr, bool is_remote)</argsstring>
        <name>extract_module_from_archive</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>temp_file_ptr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_remote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract a module for an archive file. Parse an archive file, show the list of modules to the user, allow him to select a module, extract the selected module to a file (if the extract module is an archive, repeat the process). This function can handle ZIP, AR, AIXAR, OMFLIB files. The temporary file will be automatically deleted by IDA at the end. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>in: input file. out: name of the selected module. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the buffer with &apos;filename&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">temp_file_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>will point to the name of the file that contains the extracted module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_remote</parametername>
</parameternamelist>
<parameterdescription>
<para>is the input file remote? </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>something bad happened (error message has been displayed to the user) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a76f3d7216b04914ec7886daf05794f55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export create_filename_cmt</definition>
        <argsstring>(void)</argsstring>
        <name>create_filename_cmt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add long comment at {min_ea}.<itemizedlist>
<listitem><para>Input file: ....</para></listitem><listitem><para>File format: ....</para></listitem></itemizedlist>
</para><para>This function should be called only from the loader to describe the input file. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="474" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a1bf2f7720c1b4595f7ee1fbb3e34bde6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="ida_8hpp_1a51e70cc62f9953d2ca9595e8461473b2" kindref="member">filetype_t</ref> ida_export</type>
        <definition>idaman filetype_t ida_export get_basic_file_type</definition>
        <argsstring>(linput_t *li)</argsstring>
        <name>get_basic_file_type</name>
        <param>
          <type>linput_t *</type>
          <declname>li</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the input file type. This function can recognize libraries and zip files. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="480" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a85d9ba6bca5dfb0296d5339d9343bb22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman size_t ida_export</type>
        <definition>idaman size_t ida_export get_file_type_name</definition>
        <argsstring>(char *buf, size_t bufsize)</argsstring>
        <name>get_file_type_name</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get name of the current file type. The current file type is kept in {filetype}. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the file type name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>its size </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of answer, this function always succeeds </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="489" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a691f60415204d2d43ee2f71444a229e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export import_module</definition>
        <argsstring>(const char *module, const char *windir, uval_t modnode, importer_t *importer, const char *ostype)</argsstring>
        <name>import_module</name>
        <param>
          <type>const char *</type>
          <declname>module</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>windir</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>modnode</declname>
        </param>
        <param>
          <type><ref refid="loader_8hpp_1a6c309fd957fd4d5d6e4b878f1523053a" kindref="member">importer_t</ref> *</type>
          <declname>importer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>ostype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find and import a DLL module. This function adds information to the database (renames functions, etc). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>module</parametername>
</parameternamelist>
<parameterdescription>
<para>name of DLL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>windir</parametername>
</parameternamelist>
<parameterdescription>
<para>system directory with dlls </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>modnode</parametername>
</parameternamelist>
<parameterdescription>
<para>node with information about imported entries. either altval or supval arrays may be absent. the node should never be deleted.<itemizedlist>
<listitem><para>imports by ordinals: altval(ord) contains linear address</para></listitem><listitem><para>imports by name: supval(ea) contains the imported name </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>importer</parametername>
</parameternamelist>
<parameterdescription>
<para>callback function (may be NULL) to check dll module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ostype</parametername>
</parameternamelist>
<parameterdescription>
<para>type of operating system (subdir name). NULL means the IDS directory itself (not recommended) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="534" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1aba0730edb4ea108a51cd3d4166a3097c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export load_ids_module</definition>
        <argsstring>(char *fname)</argsstring>
        <name>load_ids_module</name>
        <param>
          <type>char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load and apply IDS file. This function loads the specified IDS file and applies it to the database. If the program imports functions from a module with the same name as the name of the ids file being loaded, then only functions from this module will be affected. Otherwise (i.e. when the program does not import a module with this name) any function in the program may be affected. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>name of file to apply </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>some error (a message is displayed). if the ids file does not exist, no message is displayed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="553" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1afd9e56c1bcf8480afe06a0f0866a0c67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>CASSERT</definition>
        <argsstring>(sizeof(plugin_t)==36)</argsstring>
        <name>CASSERT</name>
        <param>
          <type>sizeof(<ref refid="classplugin__t" kindref="compound">plugin_t</ref>)</type>
          <defval>=36</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="614" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a96800dfd50da2296e1586a63b62cf7d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman const char *ida_export</type>
        <definition>idaman const char* ida_export get_plugin_options</definition>
        <argsstring>(const char *plugin)</argsstring>
        <name>get_plugin_options</name>
        <param>
          <type>const char *</type>
          <declname>plugin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get plugin options from the command line. If the user has specified the options in the -Oplugin_name:options format, them this function will return the &apos;options&apos; part of it The &apos;plugin&apos; parameter should denote the plugin name Returns NULL if there we no options specified </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="627" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a903be1ab9de77183627de6b6845571f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman const <ref refid="loader_8hpp_1af800f6e24c5fc4b6e53be1c585813930" kindref="member">idp_descs_t</ref> *ida_export</type>
        <definition>idaman const idp_descs_t* ida_export get_idp_descs</definition>
        <argsstring>(void)</argsstring>
        <name>get_idp_descs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get IDA processor modules descriptions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="719" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a7f1441cc5329a24fba18b1ebcc93e648" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="structplugin__info__t" kindref="compound">plugin_info_t</ref> *ida_export</type>
        <definition>idaman plugin_info_t* ida_export get_plugins</definition>
        <argsstring>(void)</argsstring>
        <name>get_plugins</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pointer to the list of plugins. (some plugins might be listed several times in the list - once for each configured argument) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="753" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a9b8895f7a2023df147ca3c33c838dc66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="classplugin__t" kindref="compound">plugin_t</ref> *ida_export</type>
        <definition>idaman plugin_t* ida_export find_plugin</definition>
        <argsstring>(const char *name, bool load_if_needed=false)</argsstring>
        <name>find_plugin</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>load_if_needed</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find a user-defined plugin and optionally load it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>short plugin name without path and extension, or absolute path to the file name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>load_if_needed</parametername>
</parameternamelist>
<parameterdescription>
<para>if the plugin is not present in the memory, try to load it </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to plugin description block </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="762" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a9e2f94e6e1fe858c03d2185ae6133fe3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classplugin__t" kindref="compound">plugin_t</ref> *</type>
        <definition>plugin_t* load_plugin</definition>
        <argsstring>(const char *name)</argsstring>
        <name>load_plugin</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="764" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="764" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a7e621020baec2507c01cf731ce235e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export run_plugin</definition>
        <argsstring>(const plugin_t *ptr, size_t arg)</argsstring>
        <name>run_plugin</name>
        <param>
          <type>const <ref refid="classplugin__t" kindref="compound">plugin_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run a loaded plugin with the specified argument. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to plugin description block </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>argument to run with </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="774" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a9079b8a7540d47d88d44833c52cc9ca9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi load_and_run_plugin</definition>
        <argsstring>(const char *name, size_t arg)</argsstring>
        <name>load_and_run_plugin</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
<para>Load &amp; run a plugin. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="779" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="779" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a9abcb2944bf5c52b052bbf4a61b73827" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export invoke_plugin</definition>
        <argsstring>(plugin_info_t *ptr)</argsstring>
        <name>invoke_plugin</name>
        <param>
          <type><ref refid="structplugin__info__t" kindref="compound">plugin_info_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run a plugin as configured. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to plugin information block </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="788" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1ab3a0b6b691eaec820b2bef392a641fca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman size_t ida_export</type>
        <definition>idaman size_t ida_export get_debugger_plugins</definition>
        <argsstring>(const dbg_info_t **array)</argsstring>
        <name>get_debugger_plugins</name>
        <param>
          <type>const <ref refid="structdbg__info__t" kindref="compound">dbg_info_t</ref> **</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Get information about available debuggers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="803" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a14b8950bdfe934ee0ccd566f0be72b19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export init_plugins</definition>
        <argsstring>(int flag)</argsstring>
        <name>init_plugins</name>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Initialize plugins with the specified flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="808" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1ac3b5de6a20dd77cf164d4799cf805620" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export term_plugins</definition>
        <argsstring>(int flag)</argsstring>
        <name>term_plugins</name>
        <param>
          <type>int</type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Terminate plugins with the specified flag. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="813" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a3a1268cfc7b629c2be966383b748a825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a42ae75d34f73b9e691bd16aaddb897e5" kindref="member">qoff64_t</ref> ida_export</type>
        <definition>idaman qoff64_t ida_export get_fileregion_offset</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_fileregion_offset</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get offset in the input file which corresponds to the given ea. If the specified ea can&apos;t be mapped into the input file offset, return -1. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="832" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1af44752f06437888ed7130392e7500c7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_fileregion_ea</definition>
        <argsstring>(qoff64_t offset)</argsstring>
        <name>get_fileregion_ea</name>
        <param>
          <type><ref refid="pro_8h_1a42ae75d34f73b9e691bd16aaddb897e5" kindref="member">qoff64_t</ref></type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get linear address which corresponds to the specified input file offset. If can&apos;t be found, return <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="838" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a5ee2dc76ca48290c88148d797981a1e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export gen_exe_file</definition>
        <argsstring>(FILE *fp)</argsstring>
        <name>gen_exe_file</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate an exe file (unload the database in binary form). <simplesect kind="return"><para>fp the output file handle. if fp == NULL then return:<itemizedlist>
<listitem><para>1: can generate an executable file</para></listitem><listitem><para>0: can&apos;t generate an executable file </para></listitem></itemizedlist>
</para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>failed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="849" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a9fcf1fea4811bb1c5f0a73190bc14d6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export reload_file</definition>
        <argsstring>(const char *file, bool is_remote)</argsstring>
        <name>reload_file</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_remote</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reload the input file. This function reloads the byte values from the input file. It doesn&apos;t modify the segmentation, names, comments, etc. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the input file. if file == NULL then returns:<itemizedlist>
<listitem><para>1: can reload the input file</para></listitem><listitem><para>0: can&apos;t reload the input file </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_remote</parametername>
</parameternamelist>
<parameterdescription>
<para>is the file located on a remote computer with the debugger server? </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>failed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="864" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1ab9b1eb64bd13c7b7a5c1504a8f987d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export build_snapshot_tree</definition>
        <argsstring>(snapshot_t *root)</argsstring>
        <name>build_snapshot_tree</name>
        <param>
          <type><ref refid="classsnapshot__t" kindref="compound">snapshot_t</ref> *</type>
          <declname>root</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build the snapshot tree. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>snapshot root that will contain the snapshot tree elements. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="929" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a158e6ba80d69bcde4af42d2c939f4376" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export update_snapshot_attributes</definition>
        <argsstring>(const char *filename, const snapshot_t *root, const snapshot_t *attr, int uf)</argsstring>
        <name>update_snapshot_attributes</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const <ref refid="classsnapshot__t" kindref="compound">snapshot_t</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="classsnapshot__t" kindref="compound">snapshot_t</ref> *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>uf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update the snapshot attributes. <simplesect kind="note"><para>only the snapshot description can be updated. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>snapshot file name or NULL for the current database </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>snapshot root (returned from <ref refid="loader_8hpp_1ab9b1eb64bd13c7b7a5c1504a8f987d69" kindref="member">build_snapshot_tree()</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>snapshot instance containing the updated attributes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>uf</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___s_s_u_f__" kindref="compound">Snapshot update flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="940" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a11e7103c81ba0bc7b3baa7d24d4fccc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export visit_snapshot_tree</definition>
        <argsstring>(snapshot_t *root, int(idaapi *callback)(snapshot_t *ss, void *ud), void *ud=NULL)</argsstring>
        <name>visit_snapshot_tree</name>
        <param>
          <type><ref refid="classsnapshot__t" kindref="compound">snapshot_t</ref> *</type>
          <declname>root</declname>
        </param>
        <param>
          <type>int(idaapi *)(<ref refid="classsnapshot__t" kindref="compound">snapshot_t</ref> *ss, void *ud)</type>
          <declname>callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ud</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit the snapshot tree. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>snapshot root to start the enumeration from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callback</parametername>
</parameternamelist>
<parameterdescription>
<para>callback called for each child. return 0 to continue enumeration and non-zero to abort enumeration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ud</parametername>
</parameternamelist>
<parameterdescription>
<para>user data. will be passed back to the callback </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true-ok, false-failed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="962" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a0c03c7c9eaaf4e7b45526aa8c205c9a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export flush_buffers</definition>
        <argsstring>(void)</argsstring>
        <name>flush_buffers</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Flush buffers to the disk. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="970" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1ace9603bb655febe982d2b8581a9a68c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_trusted_idb</definition>
        <argsstring>(void)</argsstring>
        <name>is_trusted_idb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is the database considered as trusted? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="975" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a69927b7b74920604c6f44aa6e11f6294" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export save_database</definition>
        <argsstring>(const char *outfile, uint32 flags, const snapshot_t *root=NULL, const snapshot_t *attr=NULL)</argsstring>
        <name>save_database</name>
        <param>
          <type>const char *</type>
          <declname>outfile</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const <ref refid="classsnapshot__t" kindref="compound">snapshot_t</ref> *</type>
          <declname>root</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="classsnapshot__t" kindref="compound">snapshot_t</ref> *</type>
          <declname>attr</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Save current database using a new file name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outfile</parametername>
</parameternamelist>
<parameterdescription>
<para>output database file name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___d_b_f_l__" kindref="compound">Database flags</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root</parametername>
</parameternamelist>
<parameterdescription>
<para>optional: snapshot tree root. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>optional: snapshot attributes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>when both root and attr are not NULL then the snapshot attributes will be updated, otherwise the snapshot attributes will be inherited from the current database. </para></simplesect>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="988" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1ac7f4bda41b8fad163e6dba22738e190b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_database_flag</definition>
        <argsstring>(uint32 dbfl)</argsstring>
        <name>is_database_flag</name>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>dbfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the current database flag <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dbfl</parametername>
</parameternamelist>
<parameterdescription>
<para>flag <ref refid="group___d_b_f_l__" kindref="compound">Database flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the state of the flag (set or cleared) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="1007" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1aa0e33baf80ef75d02f0e21f3ddceda42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export set_database_flag</definition>
        <argsstring>(uint32 dbfl, bool cnd=true)</argsstring>
        <name>set_database_flag</name>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>dbfl</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>cnd</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set or clear database flag <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dbfl</parametername>
</parameternamelist>
<parameterdescription>
<para>flag <ref refid="group___d_b_f_l__" kindref="compound">Database flags</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cnd</parametername>
</parameternamelist>
<parameterdescription>
<para>set if true or clear flag otherwise </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="1013" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a151a0cede32388b484bf97a492c2bfb2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void clr_database_flag</definition>
        <argsstring>(uint32 dbfl)</argsstring>
        <name>clr_database_flag</name>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>dbfl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="1014" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="1014" bodyend="1014"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a1eebc00ec95571dae0c7a2a5934cdde8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_temp_database</definition>
        <argsstring>(void)</argsstring>
        <name>is_temp_database</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is a temporary database? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="1017" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" bodystart="1017" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a3d52315010e82a531e269aa8aff2aa8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman const char *ida_export</type>
        <definition>idaman const char* ida_export get_path</definition>
        <argsstring>(path_type_t pt)</argsstring>
        <name>get_path</name>
        <param>
          <type><ref refid="group___p_a_t_h___t_y_p_e___1gafc09bc028687e92ef441af98ebf39072" kindref="member">path_type_t</ref></type>
          <declname>pt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the file path <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>file path type <ref refid="group___p_a_t_h___t_y_p_e__" kindref="compound">Types of the file pathes</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>file path, never returns NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="1034" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1acb580ee23f6f8a95df39136d45267870" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export set_path</definition>
        <argsstring>(path_type_t pt, const char *path)</argsstring>
        <name>set_path</name>
        <param>
          <type><ref refid="group___p_a_t_h___t_y_p_e___1gafc09bc028687e92ef441af98ebf39072" kindref="member">path_type_t</ref></type>
          <declname>pt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the file path <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pt</parametername>
</parameternamelist>
<parameterdescription>
<para>file path type <ref refid="group___p_a_t_h___t_y_p_e__" kindref="compound">Types of the file pathes</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>new file path, use NULL or empty string to clear the file path </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="1040" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a486af3674d3c096e2f4bc32c1a730ca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_database_ext</definition>
        <argsstring>(const char *ext)</argsstring>
        <name>is_database_ext</name>
        <param>
          <type>const char *</type>
          <declname>ext</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check the file extension <simplesect kind="return"><para>true if it is the reserved extension </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="1045" column="1"/>
      </memberdef>
      <memberdef kind="function" id="loader_8hpp_1a0a189fc5c134de90de2d8b529dcefd59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman const char *ida_export</type>
        <definition>idaman const char* ida_export get_elf_debug_file_directory</definition>
        <argsstring>()</argsstring>
        <name>get_elf_debug_file_directory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value of the ELF_DEBUG_FILE_DIRECTORY configuration directive. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp" line="1050" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Definitions of IDP, LDR, PLUGIN module interfaces. </para>    </briefdescription>
    <detaileddescription>
<para>This file also contains:<itemizedlist>
<listitem><para>functions to load files into the database</para></listitem><listitem><para>functions to generate output files</para></listitem><listitem><para>high level functions to work with the database (open, save, close)</para></listitem></itemizedlist>
</para><para>The LDR interface consists of one structure: <ref refid="structloader__t" kindref="compound">loader_t</ref> <linebreak/>
The IDP interface consists of one structure: <ref refid="structprocessor__t" kindref="compound">processor_t</ref> <linebreak/>
The PLUGIN interface consists of one structure: <ref refid="classplugin__t" kindref="compound">plugin_t</ref></para><para>Modules can&apos;t use standard FILE* functions. They must use functions from &lt;<ref refid="fpro_8h" kindref="compound">fpro.h</ref>&gt;</para><para>Modules can&apos;t use standard memory allocation functions. They must use functions from &lt;<ref refid="pro_8h" kindref="compound">pro.h</ref>&gt;</para><para>The exported entry #1 in the module should point to the the appropriate structure. (<ref refid="structloader__t" kindref="compound">loader_t</ref> for LDR module, for example) </para>    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/loader.hpp"/>
  </compounddef>
</doxygen>
