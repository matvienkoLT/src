<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="group__seg__trans" kind="group">
    <compoundname>seg_trans</compoundname>
    <title>Segment translations</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__seg__trans_1ga162acfa28de46b3afb2aba0639f7f0a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export add_segment_translation</definition>
        <argsstring>(ea_t segstart, ea_t mappedseg)</argsstring>
        <name>add_segment_translation</name>
        <param>
          <type>ea_t</type>
          <declname>segstart</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>mappedseg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add segment translation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>segstart</parametername>
</parameternamelist>
<parameterdescription>
<para>start address of the segment to add translation to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mappedseg</parametername>
</parameternamelist>
<parameterdescription>
<para>start address of the overlayed segment </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>too many translations or bad segstart </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/segment.hpp" line="908" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__seg__trans_1ga77b4d9ab9a809f3ae2e12ea7ef285576" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_segment_translations</definition>
        <argsstring>(ea_t segstart, const eavec_t &amp;transmap)</argsstring>
        <name>set_segment_translations</name>
        <param>
          <type>ea_t</type>
          <declname>segstart</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1a9f46d9d52bbfcc78bc1836f4f2683da4" kindref="member">eavec_t</ref> &amp;</type>
          <declname>transmap</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set new translation list. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>segstart</parametername>
</parameternamelist>
<parameterdescription>
<para>start address of the segment to add translation to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transmap</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of segment start addresses for the translation list. If transmap is empty, the translation list is deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>too many translations or bad segstart </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/segment.hpp" line="920" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__seg__trans_1ga18d43bfa417e11caee34c45ff3ca5288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export del_segment_translations</definition>
        <argsstring>(ea_t segstart)</argsstring>
        <name>del_segment_translations</name>
        <param>
          <type>ea_t</type>
          <declname>segstart</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete the translation list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>segstart</parametername>
</parameternamelist>
<parameterdescription>
<para>start address of the segment to delete translation list </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/segment.hpp" line="926" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__seg__trans_1ga546786583c25f26b1477f83df2d35fa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_segment_translations</definition>
        <argsstring>(eavec_t *transmap, ea_t segstart)</argsstring>
        <name>get_segment_translations</name>
        <param>
          <type><ref refid="pro_8h_1a9f46d9d52bbfcc78bc1836f4f2683da4" kindref="member">eavec_t</ref> *</type>
          <declname>transmap</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>segstart</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get segment translation list. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>transmap</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of segment start addresses for the translation list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segstart</parametername>
</parameternamelist>
<parameterdescription>
<para>start address of the segment to get information about </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if no translation list or bad segstart. otherwise returns size of translation list. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/segment.hpp" line="935" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__seg__trans_1ga3337a43b347cedb01c040f78cd68a6bf" prot="public" static="no">
        <name>MAX_SEGM_TRANSLATIONS</name>
        <initializer>64</initializer>
        <briefdescription>
<para>max number of segment translations </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/segment.hpp" line="910" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/segment.hpp" bodystart="910" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Used to represent overlayed memory banks. Segment translations are used to redirect access to overlayed segments so that the correct overlay is accessed. Each segment has its own translation list. For example, suppose we have four segments: <preformatted>
    A               1000-2000
    B               1000-2000
      C             2000-3000
      D             2000-3000
  </preformatted> A and B occupy the same virtual addresses. The same with C and D. Segment A works with segment C, segment B works with segment D.</para><para>So all references from A to 2000-3000 should go to C. For this we add translation C for segment A. The same with B,D: add translation D for segment B. Also, we need to specify the correct segment to be accessed from C, thus we add translation A for segment C. And we add translation B for segment D.</para><para>After this, all references to virtual addresses 2000-3000 made from A go to segment C (even if segment A would be large and occupy 1000-3000) So, we need the following translations: <preformatted>
    A:      C
    B:      D
    C:      A
    D:      B
 </preformatted> With translations, the segments may reside at any linear addresses, all references will pass through the translation mechanism and go to the correct segment.</para><para>Segment translation works only for code segments (see <ref refid="ua_8hpp_1a1ef618838a811385a5f2564bcab4e762" kindref="member">map_code_ea()</ref>) </para>    </detaileddescription>
  </compounddef>
</doxygen>
