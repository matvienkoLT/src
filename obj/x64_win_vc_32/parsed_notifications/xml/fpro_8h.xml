<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="fpro_8h" kind="file" language="C++">
    <compoundname>fpro.h</compoundname>
    <includes refid="pro_8h" local="no">pro.h</includes>
    <includes local="no">stdio.h</includes>
    <includedby refid="vm_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/vm.hpp</includedby>
    <includedby refid="hexrays_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp</includedby>
    <includedby refid="idp_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/idp.hpp</includedby>
    <includedby refid="btree_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/btree.hpp</includedby>
    <includedby refid="commerc_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/commerc.hpp</includedby>
    <incdepgraph>
      <node id="332">
        <label>sys/stat.h</label>
      </node>
      <node id="316">
        <label>stdarg.h</label>
      </node>
      <node id="319">
        <label>assert.h</label>
      </node>
      <node id="315">
        <label>stdlib.h</label>
      </node>
      <node id="327">
        <label>io.h</label>
      </node>
      <node id="330">
        <label>fcntl.h</label>
      </node>
      <node id="333">
        <label>llong.hpp</label>
        <link refid="llong_8hpp_source"/>
      </node>
      <node id="325">
        <label>malloc.h</label>
      </node>
      <node id="324">
        <label>string</label>
      </node>
      <node id="329">
        <label>map</label>
      </node>
      <node id="328">
        <label>direct.h</label>
      </node>
      <node id="317">
        <label>stddef.h</label>
      </node>
      <node id="320">
        <label>limits.h</label>
      </node>
      <node id="331">
        <label>sys/types.h</label>
      </node>
      <node id="326">
        <label>string.h</label>
      </node>
      <node id="323">
        <label>new</label>
      </node>
      <node id="314">
        <label>pro.h</label>
        <link refid="pro_8h"/>
        <childnode refid="315" relation="include">
        </childnode>
        <childnode refid="316" relation="include">
        </childnode>
        <childnode refid="317" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
        <childnode refid="319" relation="include">
        </childnode>
        <childnode refid="320" relation="include">
        </childnode>
        <childnode refid="321" relation="include">
        </childnode>
        <childnode refid="322" relation="include">
        </childnode>
        <childnode refid="323" relation="include">
        </childnode>
        <childnode refid="324" relation="include">
        </childnode>
        <childnode refid="325" relation="include">
        </childnode>
        <childnode refid="326" relation="include">
        </childnode>
        <childnode refid="327" relation="include">
        </childnode>
        <childnode refid="328" relation="include">
        </childnode>
        <childnode refid="329" relation="include">
        </childnode>
        <childnode refid="330" relation="include">
        </childnode>
        <childnode refid="331" relation="include">
        </childnode>
        <childnode refid="332" relation="include">
        </childnode>
        <childnode refid="333" relation="include">
        </childnode>
      </node>
      <node id="322">
        <label>time.h</label>
      </node>
      <node id="313">
        <label>obj/x64_linux_gcc_32_opt/idasdk/fpro.h</label>
        <link refid="fpro_8h"/>
        <childnode refid="314" relation="include">
        </childnode>
        <childnode refid="318" relation="include">
        </childnode>
      </node>
      <node id="321">
        <label>ctype.h</label>
      </node>
      <node id="318">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="349">
        <label>obj/x64_linux_gcc_32_opt/idasdk/commerc.hpp</label>
        <link refid="commerc_8hpp_source"/>
      </node>
      <node id="348">
        <label>obj/x64_linux_gcc_32_opt/idasdk/btree.hpp</label>
        <link refid="btree_8hpp_source"/>
      </node>
      <node id="343">
        <label>obj/x64_linux_gcc_32_opt/idasdk/intel.hpp</label>
        <link refid="intel_8hpp_source"/>
      </node>
      <node id="346">
        <label>obj/x64_linux_gcc_32_opt/idasdk/ida_highlighter.hpp</label>
        <link refid="ida__highlighter_8hpp_source"/>
      </node>
      <node id="338">
        <label>obj/x64_linux_gcc_32_opt/idasdk/idp.hpp</label>
        <link refid="idp_8hpp"/>
        <childnode refid="339" relation="include">
        </childnode>
        <childnode refid="340" relation="include">
        </childnode>
        <childnode refid="341" relation="include">
        </childnode>
        <childnode refid="337" relation="include">
        </childnode>
        <childnode refid="344" relation="include">
        </childnode>
        <childnode refid="345" relation="include">
        </childnode>
      </node>
      <node id="339">
        <label>obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp</label>
        <link refid="dbg_8hpp"/>
      </node>
      <node id="344">
        <label>obj/x64_linux_gcc_32_opt/idasdk/graph.hpp</label>
        <link refid="graph_8hpp"/>
      </node>
      <node id="335">
        <label>obj/x64_linux_gcc_32_opt/idasdk/vm.hpp</label>
        <link refid="vm_8hpp_source"/>
        <childnode refid="336" relation="include">
        </childnode>
      </node>
      <node id="347">
        <label>obj/x64_linux_gcc_32_opt/idasdk/tstfeat.hpp</label>
        <link refid="tstfeat_8hpp_source"/>
      </node>
      <node id="345">
        <label>obj/x64_linux_gcc_32_opt/idasdk/expr.hpp</label>
        <link refid="expr_8hpp"/>
        <childnode refid="346" relation="include">
        </childnode>
        <childnode refid="347" relation="include">
        </childnode>
      </node>
      <node id="340">
        <label>obj/x64_linux_gcc_32_opt/idasdk/frame.hpp</label>
        <link refid="frame_8hpp"/>
      </node>
      <node id="334">
        <label>obj/x64_linux_gcc_32_opt/idasdk/fpro.h</label>
        <link refid="fpro_8h"/>
        <childnode refid="335" relation="include">
        </childnode>
        <childnode refid="337" relation="include">
        </childnode>
        <childnode refid="338" relation="include">
        </childnode>
        <childnode refid="348" relation="include">
        </childnode>
        <childnode refid="349" relation="include">
        </childnode>
      </node>
      <node id="341">
        <label>obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp</label>
        <link refid="typeinf_8hpp"/>
        <childnode refid="342" relation="include">
        </childnode>
        <childnode refid="337" relation="include">
        </childnode>
        <childnode refid="343" relation="include">
        </childnode>
      </node>
      <node id="336">
        <label>obj/x64_linux_gcc_32_opt/idasdk/va.hpp</label>
        <link refid="va_8hpp_source"/>
      </node>
      <node id="337">
        <label>obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp</label>
        <link refid="hexrays_8hpp_source"/>
      </node>
      <node id="342">
        <label>obj/x64_linux_gcc_32_opt/idasdk/lumina.hpp</label>
        <link refid="lumina_8hpp_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="user-defined">
      <header>File I/O</header>
      <description><para>The following functions work just like their counterparts from Clib, only they are safer, system independent, and they set qerrno (see <ref refid="pro_8h_1aee2130be457b029a366d04ae2333e8b6" kindref="member">get_qerrno()</ref>). </para></description>
      <memberdef kind="function" id="fpro_8h_1a6184b4896f4762a571602cd09a47a491" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> FILE *ida_export</type>
        <definition>idaman THREAD_SAFE FILE* ida_export qfopen</definition>
        <argsstring>(const char *file, const char *mode)</argsstring>
        <name>qfopen</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1aac69b7707b3e29911cfd0e459ed31b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE ssize_t ida_export qfread</definition>
        <argsstring>(FILE *fp, void *buf, size_t n)</argsstring>
        <name>qfread</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1a0eaefde912ec24c98e7650f3fc63fd34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE ssize_t ida_export qfwrite</definition>
        <argsstring>(FILE *fp, const void *buf, size_t n)</argsstring>
        <name>qfwrite</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1a5088d034407a2bebdde8242a7dc4a346" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a42ae75d34f73b9e691bd16aaddb897e5" kindref="member">qoff64_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE qoff64_t ida_export qftell</definition>
        <argsstring>(FILE *fp)</argsstring>
        <name>qftell</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1a8cfeb394f8713161add7b89afa6e50a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export qfseek</definition>
        <argsstring>(FILE *fp, qoff64_t offset, int whence)</argsstring>
        <name>qfseek</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a42ae75d34f73b9e691bd16aaddb897e5" kindref="member">qoff64_t</ref></type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>whence</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1ac8728271f58c83e0a69fa3ddd9f1d692" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export qfclose</definition>
        <argsstring>(FILE *fp)</argsstring>
        <name>qfclose</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1a844cd5c84670431d764b8508bbf35228" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export qflush</definition>
        <argsstring>(FILE *fp)</argsstring>
        <name>qflush</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1a9cb0570d8eaf5ec97bac09ec7bc98e22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export qfputc</definition>
        <argsstring>(int chr, FILE *fp)</argsstring>
        <name>qfputc</name>
        <param>
          <type>int</type>
          <declname>chr</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1aff28a71358c6b9023e74f99e1cf20f73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export qfgetc</definition>
        <argsstring>(FILE *fp)</argsstring>
        <name>qfgetc</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1a361381e1ddc328593d6b009478d47ac9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> char *ida_export</type>
        <definition>idaman THREAD_SAFE char* ida_export qfgets</definition>
        <argsstring>(char *s, size_t len, FILE *fp)</argsstring>
        <name>qfgets</name>
        <param>
          <type>char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1af6996d037c62fad993060d79494d8c72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export qfputs</definition>
        <argsstring>(const char *s, FILE *fp)</argsstring>
        <name>qfputs</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1a20608972e14fe42b6185401fe6c99766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman FILE *ida_export</type>
        <definition>idaman FILE* ida_export qtmpfile</definition>
        <argsstring>(void)</argsstring>
        <name>qtmpfile</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1adf79c93a962dcfcffad882f4626abc63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export qunlink</definition>
        <argsstring>(const char *fname)</argsstring>
        <name>qunlink</name>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1a75e2ebea58aecf32b229efa13bc83d1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export qaccess</definition>
        <argsstring>(const char *fname, int mode)</argsstring>
        <name>qaccess</name>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1ae44f0ac93beffa2cdba6cba0da68c7f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> char *ida_export</type>
        <definition>idaman THREAD_SAFE char* ida_export qgets</definition>
        <argsstring>(char *line, size_t linesize)</argsstring>
        <name>qgets</name>
        <param>
          <type>char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>linesize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1a4070db40c90cc69bded7f52f7a7781e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export qvfprintf</definition>
        <argsstring>(FILE *fp, const char *format, va_list va)</argsstring>
        <name>qvfprintf</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>va</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1acd390b6184c805fca16e14a2560740d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export qvprintf</definition>
        <argsstring>(const char *format, va_list va)</argsstring>
        <name>qvprintf</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>va</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1ae8289c133d5598e9b203038500c8bf58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export qveprintf</definition>
        <argsstring>(const char *format, va_list va)</argsstring>
        <name>qveprintf</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>va</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1a8a344eb1f37b1151c2b601eaf8fd3865" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export qvfscanf</definition>
        <argsstring>(FILE *fp, const char *format, va_list va)</argsstring>
        <name>qvfscanf</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>va</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1a2de41ca76bd6b6e64c26ed268796a8ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int</type>
        <definition>THREAD_SAFE int qfprintf</definition>
        <argsstring>(FILE *fp, const char *format,...)</argsstring>
        <name>qfprintf</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="83" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="83" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1a6f9adecb60cf5f06a773d5fb8a74a961" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int</type>
        <definition>THREAD_SAFE int qprintf</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>qprintf</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="92" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="92" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1ac7d22807f4af9d8cb78b1768f1578f58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int</type>
        <definition>THREAD_SAFE int qeprintf</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>qeprintf</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="101" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="101" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1af63659b35c3cad77bc5464aeb23075d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int</type>
        <definition>THREAD_SAFE int qfscanf</definition>
        <argsstring>(FILE *fp, const char *format,...)</argsstring>
        <name>qfscanf</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="110" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="110" bodyend="117"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>readbytes/writebytes</header>
      <description><para>Add-ins for 2..32 byte read/writes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>value read from file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of value in bytes (1..32) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mostfirst</parametername>
</parameternamelist>
<parameterdescription>
<para>is MSB first? (0/1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>All these functions return 0 on success </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></description>
      <memberdef kind="define" id="fpro_8h_1a18ee24b637f166df388a67cc6cb8b2ae" prot="public" static="no">
        <name>DEF_FREADBYTES</name>
        <param><defname>read</defname></param>
        <param><defname>write</defname></param>
        <param><defname>type</defname></param>
        <param><defname>size</defname></param>
        <initializer>inline <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int read(FILE *fp, type *res, bool mostfirst)            \
                { return freadbytes(fp, res, size, mostfirst); }        \
        inline <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int write(FILE *fp, const type *res, bool mostfirst)     \
                { return fwritebytes(fp, res, size, mostfirst); }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="192" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1adec9915e7db85b3b7d6e0ca871aaad1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export freadbytes</definition>
        <argsstring>(FILE *fp, void *res, int size, int mostfirst)</argsstring>
        <name>freadbytes</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mostfirst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1a9257ca88bec086ed991d9f378dfb21be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export fwritebytes</definition>
        <argsstring>(FILE *fp, const void *l, int size, int mostfirst)</argsstring>
        <name>fwritebytes</name>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>l</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mostfirst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="189" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="fpro_8h_1aaca70138f0cb63ddb026921afc635179" prot="public" static="no">
        <name>stdin</name>
        <initializer>dont_use_stdin</initializer>
        <briefdescription>
<para>use <ref refid="pro_8h_1abd2e1f38c695f4eead224e19cbf102b0" kindref="member">gets()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="36" column="14" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1a0c0ef221f95f64e8632451312fd18cc8" prot="public" static="no">
        <name>stdout</name>
        <initializer>dont_use_stdout</initializer>
        <briefdescription>
<para>use qprintf() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="37" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1a5ce35bd5ba5021fd3b2e951e8f497656" prot="public" static="no">
        <name>stderr</name>
        <initializer>dont_use_stderr</initializer>
        <briefdescription>
<para>use qeprintf() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="38" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1a029f6d343db87fe8c80cf3e5bea2b5c1" prot="public" static="no">
        <name>fopen</name>
        <initializer>dont_use_fopen</initializer>
        <briefdescription>
<para>use qfopen() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="39" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1a16cef9bb6d20a96eace63d043b03ce91" prot="public" static="no">
        <name>fread</name>
        <initializer>dont_use_fread</initializer>
        <briefdescription>
<para>use qfread() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="40" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1ace50e1e3b73fb8bc9ae3a1ab3e972d91" prot="public" static="no">
        <name>fwrite</name>
        <initializer>dont_use_fwrite</initializer>
        <briefdescription>
<para>use qfwrite() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="41" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1afea8baccc13623417424635d63c81a17" prot="public" static="no">
        <name>ftell</name>
        <initializer>dont_use_ftell</initializer>
        <briefdescription>
<para>use qftell() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="42" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1a8a777150133445feb2cd8a3f846216d9" prot="public" static="no">
        <name>fseek</name>
        <initializer>dont_use_fseek</initializer>
        <briefdescription>
<para>use qfseek() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="43" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1a1ba5ffb84241a674c082d911b80fc309" prot="public" static="no">
        <name>fclose</name>
        <initializer>dont_use_fclose</initializer>
        <briefdescription>
<para>use qfclose() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="44" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1a579d02171e2a45e0db99ff2c269a46eb" prot="public" static="no">
        <name>fflush</name>
        <initializer>dont_use_fflush</initializer>
        <briefdescription>
<para>use qflush() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="45" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1af2c758e16b323e6bfe250d26cd26e5e9" prot="public" static="no">
        <name>fputc</name>
        <initializer>dont_use_fputc</initializer>
        <briefdescription>
<para>use qfputc() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="46" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1ac38485ce41182cbd7ee7d554a2e1d40d" prot="public" static="no">
        <name>fgetc</name>
        <initializer>dont_use_fgetc</initializer>
        <briefdescription>
<para>use qfgetc() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="47" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1aa4127e6fa9f54483c38accbde8937b77" prot="public" static="no">
        <name>fgets</name>
        <initializer>dont_use_fgets</initializer>
        <briefdescription>
<para>use qfgets() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="48" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1a4760567d49d1aebc24f0de6d0c2b4504" prot="public" static="no">
        <name>fputs</name>
        <initializer>dont_use_fputs</initializer>
        <briefdescription>
<para>use qfputs() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="49" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1a8fdc4bb69d2ce8fe042b88eae7160e6e" prot="public" static="no">
        <name>vfprintf</name>
        <initializer>dont_use_vfprintf</initializer>
        <briefdescription>
<para>use qvfprintf() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="50" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1a8b4dfd176d695edb0ff6a2f9082225d0" prot="public" static="no">
        <name>vfscanf</name>
        <initializer>dont_use_vfscanf</initializer>
        <briefdescription>
<para>use qvfscanf() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="51" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1aab6e63106cf29e5160e5c2d63db86d27" prot="public" static="no">
        <name>fprintf</name>
        <initializer>dont_use_fprintf</initializer>
        <briefdescription>
<para>use qfprintf() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="52" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="fpro_8h_1a3ce24f3b2b0397c89edc3a7209e48dcc" prot="public" static="no">
        <name>fscanf</name>
        <initializer>dont_use_fscanf</initializer>
        <briefdescription>
<para>use qfscanf() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="53" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="fpro_8h_1a06fc87d81c62e9abb8790b6e5713c55b" prot="public" static="no">
        <name>@0</name>
        <enumvalue id="fpro_8h_1a06fc87d81c62e9abb8790b6e5713c55baa9de428c47a502f74723afb690950a93" prot="public">
          <name>QMOVE_CROSS_FS</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fpro_8h_1a06fc87d81c62e9abb8790b6e5713c55bac62d174b7d0d5dc35f12295ec1aaee6a" prot="public">
          <name>QMOVE_OVERWRITE</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="fpro_8h_1a06fc87d81c62e9abb8790b6e5713c55baaec5a104122941e3c9f389a6e0f553ac" prot="public">
          <name>QMOVE_OVR_RO</name>
          <initializer>= 0x04</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="139" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="138" bodyend="143"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="fpro_8h_1af297faa873672bf2a62542c6cd782302" prot="public" static="no">
        <type><ref refid="structjanitor__t" kindref="compound">janitor_t</ref>&lt; FILE * &gt;</type>
        <definition>typedef janitor_t&lt;FILE*&gt; file_janitor_t</definition>
        <argsstring></argsstring>
        <name>file_janitor_t</name>
        <briefdescription>
<para>File janitor: will close a file upon deletion. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="174" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="fpro_8h_1a826d67a958355c5ff8b3ca65656ff1c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE ssize_t ida_export qgetline</definition>
        <argsstring>(qstring *buf, FILE *fp)</argsstring>
        <name>qgetline</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read line from file (the newline is removed from the output buffer) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to file </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 or length of line </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1a52690362de17617ca98f927e83b84ae5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export qrename</definition>
        <argsstring>(const char *oldfname, const char *newfname)</argsstring>
        <name>qrename</name>
        <param>
          <type>const char *</type>
          <declname>oldfname</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>newfname</declname>
        </param>
        <briefdescription>
<para>Rename a file: &apos;newname&apos; may exist, and will be deleted. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1aaa186fd55869c05e3731bbad2f0cec41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export qmove</definition>
        <argsstring>(const char *oldfname, const char *newfname, uint32 flags)</argsstring>
        <name>qmove</name>
        <param>
          <type>const char *</type>
          <declname>oldfname</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>newfname</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move a file - more powerful version of qrename <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>system error </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>else</parametername>
</parameternamelist>
<parameterdescription>
<para>a combination of flags to be given for successful move </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1af915e91f730ab71575355c3e3534b274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int ida_export</type>
        <definition>idaman THREAD_SAFE int ida_export qcopyfile</definition>
        <argsstring>(const char *from, const char *to, bool overwrite=true, bool(idaapi *cb)(uint64 pos, uint64 total, void *ud)=NULL, void *ud=NULL, int flags=0)</argsstring>
        <name>qcopyfile</name>
        <param>
          <type>const char *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>overwrite</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool(idaapi *)(<ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> pos, <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> total, void *ud)</type>
          <declname>cb</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>void *</type>
          <declname>ud</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>source file name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>destination file name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>overwrite</parametername>
</parameternamelist>
<parameterdescription>
<para>overwrite output if it exists? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>user callback. return false to abort the copy loop </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ud</parametername>
</parameternamelist>
<parameterdescription>
<para>user data passed back to cb </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>reserved (should be zero) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>input file not found </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-2</parametername>
</parameternamelist>
<parameterdescription>
<para>output file not writable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-3</parametername>
</parameternamelist>
<parameterdescription>
<para>output file already exists while overwrite is false </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-4</parametername>
</parameternamelist>
<parameterdescription>
<para>write failure </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-5</parametername>
</parameternamelist>
<parameterdescription>
<para>interrupted from the callback </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="fpro_8h_1ae67df76c1a56fb1ff3ca5073b34a0540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman char *ida_export</type>
        <definition>idaman char* ida_export qtmpnam</definition>
        <argsstring>(char *buf, size_t bufsize)</argsstring>
        <name>qtmpnam</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get temporary file name. Returns absolute path, includes directory, and uses TEMP/TMP vars. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h" line="170" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>System independent counterparts of FILE* related functions from Clib. </para>    </briefdescription>
    <detaileddescription>
<para>You should not use C standard I/O functions in your modules. The reason: Each module compiled with Borland (and statically linked to Borland&apos;s library) will host a copy of the FILE * information.</para><para>So, if you open a file in the plugin and pass the handle to the kernel, the kernel will not be able to use it.</para><para>If you really need to use the standard functions, define USE_STANDARD_FILE_FUNCTIONS. In this case do not mix them with q... functions. </para>    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/fpro.h"/>
  </compounddef>
</doxygen>
