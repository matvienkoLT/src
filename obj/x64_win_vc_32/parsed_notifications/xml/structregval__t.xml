<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="structregval__t" kind="struct" language="C++" prot="public">
    <compoundname>regval_t</compoundname>
    <includes refid="idd_8hpp" local="no">idd.hpp</includes>
      <sectiondef kind="user-defined">
      <header>Setters</header>
      <description><para>These functions ensure that the previous value is cleared </para></description>
      <memberdef kind="function" id="structregval__t_1ad024607b8d0679b8549aa099a675cc54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void regval_t::set_int</definition>
        <argsstring>(uint64 x)</argsstring>
        <name>set_int</name>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Set int value (ival) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="522" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="522" bodyend="522"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1a2e77fa7460a7856274d6270af04d77c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void regval_t::set_float</definition>
        <argsstring>(const ushort *x)</argsstring>
        <name>set_float</name>
        <param>
          <type>const <ref refid="pro_8h_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref> *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Set float value (fval) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="524" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="524" bodyend="524"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1a60cd409b0864b58350023af4059f1dbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void regval_t::set_bytes</definition>
        <argsstring>(const uchar *data, size_t size)</argsstring>
        <name>set_bytes</name>
        <param>
          <type>const <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Set custom regval with raw data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="526" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="526" bodyend="526"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1a9b39d320e1d82093ed33ad59381a55da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void regval_t::set_bytes</definition>
        <argsstring>(const bytevec_t &amp;v)</argsstring>
        <name>set_bytes</name>
        <param>
          <type>const <ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Set custom value with existing bytevec. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="528" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="528" bodyend="528"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1afc04968785226cdee8c4198079f25f99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
        <definition>bytevec_t&amp; regval_t::set_bytes</definition>
        <argsstring>(void)</argsstring>
        <name>set_bytes</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Initialize this regval to an empty custom value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="530" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="530" bodyend="530"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Getters</header>
      <memberdef kind="function" id="structregval__t_1a7f7a413ba5091b5664b5cfe8e8f18452" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
        <definition>bytevec_t&amp; regval_t::bytes</definition>
        <argsstring>(void)</argsstring>
        <name>bytes</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get custom value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="536" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="536" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1ad99792f48845e9c39e99004f7b4462dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
        <definition>const bytevec_t&amp; regval_t::bytes</definition>
        <argsstring>(void) const</argsstring>
        <name>bytes</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get const custom value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="538" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="538" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1a9d8e52f18d8609aa172a162454762c03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* regval_t::get_data</definition>
        <argsstring>(void)</argsstring>
        <name>get_data</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get pointer to value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="540" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="540" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1ade35fca2d270e6f1e1e02d1574e7d440" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* regval_t::get_data</definition>
        <argsstring>(void) const</argsstring>
        <name>get_data</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get const pointer to value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="542" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="542" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1ab221259c7d3ce3f88db491896d114b0a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t regval_t::get_data_size</definition>
        <argsstring>(void) const</argsstring>
        <name>get_data_size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get size of value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="544" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="544" bodyend="553"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structregval__t_1af1dfaca7c318cf9f55554f6b481eee2a" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 regval_t::rvtype</definition>
        <argsstring></argsstring>
        <name>rvtype</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>one of <ref refid="group___r_v_t__" kindref="compound">Register value types</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="432" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structregval__t_1a33cd6d09e4e5dd378be9876878d365ad" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
        <definition>uint64 regval_t::ival</definition>
        <argsstring></argsstring>
        <name>ival</name>
        <briefdescription>
<para>8: integer value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="445" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="445" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structregval__t_1a1866570a9323758985ddf6400caad672" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a05f6b0ae8f6a6e135b0e290c25fe0e4e" kindref="member">uint16</ref></type>
        <definition>uint16 regval_t::fval[6]</definition>
        <argsstring>[6]</argsstring>
        <name>fval</name>
        <briefdescription>
<para>12: floating point value in the internal representation (see <ref refid="ieee_8h" kindref="compound">ieee.h</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="446" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="446" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structregval__t_1ab2ef7248aed54134af3e0d8c561fd971" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
        <definition>uchar regval_t::reserve[sizeof(bytevec_t)]</definition>
        <argsstring>[sizeof(bytevec_t)]</argsstring>
        <name>reserve</name>
        <briefdescription>
<para><ref refid="classbytevec__t" kindref="compound">bytevec_t</ref>: custom data type (use <ref refid="structregval__t_1a7f7a413ba5091b5664b5cfe8e8f18452" kindref="member">bytes()</ref> to access it) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="448" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structregval__t_1abc8cafa51bf17f89b81ac07eebc0d380" prot="public" static="no" mutable="no">
        <type>union regval_t::@128</type>
        <definition>union regval_t::@128 regval_t::@129</definition>
        <argsstring></argsstring>
        <name>@129</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="449" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structregval__t_1ad1172af7593ef8894e5ed5f718e35bf9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>regval_t::regval_t</definition>
        <argsstring>(void)</argsstring>
        <name>regval_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="451" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="451" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1a469942bb1addb1766547faee222208f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>regval_t::~regval_t</definition>
        <argsstring>(void)</argsstring>
        <name>~regval_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="452" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="452" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1a2eddab111ed75e4dc07eeca3b3f7a37b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>regval_t::regval_t</definition>
        <argsstring>(const regval_t &amp;r)</argsstring>
        <name>regval_t</name>
        <param>
          <type>const <ref refid="structregval__t" kindref="compound">regval_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="453" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="453" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1ac74e0fc4391b47542b8359ae008325b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structregval__t" kindref="compound">regval_t</ref> &amp;</type>
        <definition>regval_t&amp; regval_t::operator=</definition>
        <argsstring>(const regval_t &amp;r)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structregval__t" kindref="compound">regval_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Assign this regval to the given value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="456" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="456" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1a0882627c2a66d50e7e0a71ad5aaf8d71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void regval_t::clear</definition>
        <argsstring>(void)</argsstring>
        <name>clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear register value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="478" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="478" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1a3e253cd5404a4b71a3388f19d0640dfe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool regval_t::operator==</definition>
        <argsstring>(const regval_t &amp;r) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structregval__t" kindref="compound">regval_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Compare two regvals with &apos;==&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="488" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="488" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1aad42e07c087b062febba5a7e2039e94d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool regval_t::operator!=</definition>
        <argsstring>(const regval_t &amp;r) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structregval__t" kindref="compound">regval_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Compare two regvals with &apos;!=&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="502" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="502" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1ab9f39547c73e2a0f8a9706c1ed5cd799" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void regval_t::swap</definition>
        <argsstring>(regval_t &amp;r)</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="structregval__t" kindref="compound">regval_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
<para>Set this = r and r = this. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="505" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="505" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1a555b7796b3942fa3829b6405e37025c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void regval_t::_set_int</definition>
        <argsstring>(uint64 x)</argsstring>
        <name>_set_int</name>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Use <ref refid="structregval__t_1ad024607b8d0679b8549aa099a675cc54" kindref="member">set_int()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="508" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="508" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1a7eb14aa99eb8c6582e2e64b754ea3752" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void regval_t::_set_float</definition>
        <argsstring>(const ushort *x)</argsstring>
        <name>_set_float</name>
        <param>
          <type>const <ref refid="pro_8h_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref> *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Use <ref refid="structregval__t_1a2e77fa7460a7856274d6270af04d77c9" kindref="member">set_float()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="510" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="510" bodyend="510"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1ab3639545e15ee0b860b4bd8b065f6ef1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void regval_t::_set_bytes</definition>
        <argsstring>(const uchar *data, size_t size)</argsstring>
        <name>_set_bytes</name>
        <param>
          <type>const <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Use <ref refid="structregval__t_1a60cd409b0864b58350023af4059f1dbc" kindref="member">set_bytes(const uchar *, size_t)</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="512" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="512" bodyend="512"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1a401c86340081a530506ee56b820cd741" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void regval_t::_set_bytes</definition>
        <argsstring>(const bytevec_t &amp;v)</argsstring>
        <name>_set_bytes</name>
        <param>
          <type>const <ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Use <ref refid="structregval__t_1a9b39d320e1d82093ed33ad59381a55da" kindref="member">set_bytes(const bytevec_t &amp;)</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="514" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="514" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="structregval__t_1a05decd37f9e2efb3f9806d2d29642bf2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
        <definition>bytevec_t&amp; regval_t::_set_bytes</definition>
        <argsstring>(void)</argsstring>
        <name>_set_bytes</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Use <ref refid="structregval__t_1afc04968785226cdee8c4198079f25f99" kindref="member">set_bytes(void)</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="516" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="516" bodyend="516"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Structure to hold a register value. Small values (up to 64-bit integers and floating point values) use <ref refid="group___r_v_t___1gace86c5cf47d920bc7aa4bbd745b49311" kindref="member">RVT_INT</ref> and <ref refid="group___r_v_t___1gaab32738e7258ef855bb27cc84260fc34" kindref="member">RVT_FLOAT</ref> types. For bigger values the <ref refid="structregval__t_1a7f7a413ba5091b5664b5cfe8e8f18452" kindref="member">bytes()</ref> vector is used. </para>    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="431" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="430" bodyend="555"/>
    <listofallmembers>
      <member refid="structregval__t_1ab3639545e15ee0b860b4bd8b065f6ef1" prot="public" virt="non-virtual"><scope>regval_t</scope><name>_set_bytes</name></member>
      <member refid="structregval__t_1a401c86340081a530506ee56b820cd741" prot="public" virt="non-virtual"><scope>regval_t</scope><name>_set_bytes</name></member>
      <member refid="structregval__t_1a05decd37f9e2efb3f9806d2d29642bf2" prot="public" virt="non-virtual"><scope>regval_t</scope><name>_set_bytes</name></member>
      <member refid="structregval__t_1a7eb14aa99eb8c6582e2e64b754ea3752" prot="public" virt="non-virtual"><scope>regval_t</scope><name>_set_float</name></member>
      <member refid="structregval__t_1a555b7796b3942fa3829b6405e37025c3" prot="public" virt="non-virtual"><scope>regval_t</scope><name>_set_int</name></member>
      <member refid="structregval__t_1a7f7a413ba5091b5664b5cfe8e8f18452" prot="public" virt="non-virtual"><scope>regval_t</scope><name>bytes</name></member>
      <member refid="structregval__t_1ad99792f48845e9c39e99004f7b4462dc" prot="public" virt="non-virtual"><scope>regval_t</scope><name>bytes</name></member>
      <member refid="structregval__t_1a0882627c2a66d50e7e0a71ad5aaf8d71" prot="public" virt="non-virtual"><scope>regval_t</scope><name>clear</name></member>
      <member refid="structregval__t_1a1866570a9323758985ddf6400caad672" prot="public" virt="non-virtual"><scope>regval_t</scope><name>fval</name></member>
      <member refid="structregval__t_1a9d8e52f18d8609aa172a162454762c03" prot="public" virt="non-virtual"><scope>regval_t</scope><name>get_data</name></member>
      <member refid="structregval__t_1ade35fca2d270e6f1e1e02d1574e7d440" prot="public" virt="non-virtual"><scope>regval_t</scope><name>get_data</name></member>
      <member refid="structregval__t_1ab221259c7d3ce3f88db491896d114b0a" prot="public" virt="non-virtual"><scope>regval_t</scope><name>get_data_size</name></member>
      <member refid="structregval__t_1a33cd6d09e4e5dd378be9876878d365ad" prot="public" virt="non-virtual"><scope>regval_t</scope><name>ival</name></member>
      <member refid="structregval__t_1aad42e07c087b062febba5a7e2039e94d" prot="public" virt="non-virtual"><scope>regval_t</scope><name>operator!=</name></member>
      <member refid="structregval__t_1ac74e0fc4391b47542b8359ae008325b0" prot="public" virt="non-virtual"><scope>regval_t</scope><name>operator=</name></member>
      <member refid="structregval__t_1a3e253cd5404a4b71a3388f19d0640dfe" prot="public" virt="non-virtual"><scope>regval_t</scope><name>operator==</name></member>
      <member refid="structregval__t_1ad1172af7593ef8894e5ed5f718e35bf9" prot="public" virt="non-virtual"><scope>regval_t</scope><name>regval_t</name></member>
      <member refid="structregval__t_1a2eddab111ed75e4dc07eeca3b3f7a37b" prot="public" virt="non-virtual"><scope>regval_t</scope><name>regval_t</name></member>
      <member refid="structregval__t_1ab2ef7248aed54134af3e0d8c561fd971" prot="public" virt="non-virtual"><scope>regval_t</scope><name>reserve</name></member>
      <member refid="structregval__t_1af1dfaca7c318cf9f55554f6b481eee2a" prot="public" virt="non-virtual"><scope>regval_t</scope><name>rvtype</name></member>
      <member refid="structregval__t_1a60cd409b0864b58350023af4059f1dbc" prot="public" virt="non-virtual"><scope>regval_t</scope><name>set_bytes</name></member>
      <member refid="structregval__t_1a9b39d320e1d82093ed33ad59381a55da" prot="public" virt="non-virtual"><scope>regval_t</scope><name>set_bytes</name></member>
      <member refid="structregval__t_1afc04968785226cdee8c4198079f25f99" prot="public" virt="non-virtual"><scope>regval_t</scope><name>set_bytes</name></member>
      <member refid="structregval__t_1a2e77fa7460a7856274d6270af04d77c9" prot="public" virt="non-virtual"><scope>regval_t</scope><name>set_float</name></member>
      <member refid="structregval__t_1ad024607b8d0679b8549aa099a675cc54" prot="public" virt="non-virtual"><scope>regval_t</scope><name>set_int</name></member>
      <member refid="structregval__t_1ab9f39547c73e2a0f8a9706c1ed5cd799" prot="public" virt="non-virtual"><scope>regval_t</scope><name>swap</name></member>
      <member refid="structregval__t_1a469942bb1addb1766547faee222208f2" prot="public" virt="non-virtual"><scope>regval_t</scope><name>~regval_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
