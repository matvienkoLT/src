<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="group___f_f__opfuncs3" kind="group">
    <compoundname>FF_opfuncs3</compoundname>
    <title>Functions: get type information bits for flags</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga2afc147b3d4d195096d1d48318be4fc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi char_flag</definition>
        <argsstring>(void)</argsstring>
        <name>char_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1278" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga487d7ad60c8e43e528af188e6def836b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi off_flag</definition>
        <argsstring>(void)</argsstring>
        <name>off_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1279" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1279" bodyend="1278"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga391ab6f43b35bb8d106aa639fe0c85a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi enum_flag</definition>
        <argsstring>(void)</argsstring>
        <name>enum_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1280" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1280" bodyend="1279"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga1d7b351000c5a71e47ef0e1f78d7a5e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi stroff_flag</definition>
        <argsstring>(void)</argsstring>
        <name>stroff_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1281" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1281" bodyend="1280"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga2024a71f2a269bef33a71b399781d0b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi stkvar_flag</definition>
        <argsstring>(void)</argsstring>
        <name>stkvar_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1282" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1282" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga6d400ac9b71376def3b63e72684a596e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi flt_flag</definition>
        <argsstring>(void)</argsstring>
        <name>flt_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1283" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1283" bodyend="1282"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1gab9a9bb341101cd92bbdf468e8b7d4713" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi custfmt_flag</definition>
        <argsstring>(void)</argsstring>
        <name>custfmt_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1284" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1284" bodyend="1283"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga0c5c5dda870eb2d11ee81309f9ea05bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi seg_flag</definition>
        <argsstring>(void)</argsstring>
        <name>seg_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1285" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1285" bodyend="1284"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1gaa2b780d9ba5eddf86fcbea6cad730bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> ida_export</type>
        <definition>idaman flags_t ida_export num_flag</definition>
        <argsstring>(void)</argsstring>
        <name>num_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of default base (bin, oct, dec, hex) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1gaae77e3835c3ea4ffa2e8464576a956ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi hex_flag</definition>
        <argsstring>(void)</argsstring>
        <name>hex_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number flag of the base, regardless of current processor - better to use <ref refid="group___f_f__opfuncs3_1gaa2b780d9ba5eddf86fcbea6cad730bd0" kindref="member">num_flag()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1289" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1289" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1gab5bef3630157cf7375f852a1de07ceca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi dec_flag</definition>
        <argsstring>(void)</argsstring>
        <name>dec_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number flag of the base, regardless of current processor - better to use <ref refid="group___f_f__opfuncs3_1gaa2b780d9ba5eddf86fcbea6cad730bd0" kindref="member">num_flag()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1290" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga777a1ae1ee5d1c9ed05cabc954fc4509" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi oct_flag</definition>
        <argsstring>(void)</argsstring>
        <name>oct_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number flag of the base, regardless of current processor - better to use <ref refid="group___f_f__opfuncs3_1gaa2b780d9ba5eddf86fcbea6cad730bd0" kindref="member">num_flag()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1291" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1291" bodyend="1290"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1gae6a46678a4e686b236128952a0a3fd68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi bin_flag</definition>
        <argsstring>(void)</argsstring>
        <name>bin_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number flag of the base, regardless of current processor - better to use <ref refid="group___f_f__opfuncs3_1gaa2b780d9ba5eddf86fcbea6cad730bd0" kindref="member">num_flag()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1292" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1292" bodyend="1291"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Values of these functions are used as input to <ref refid="group___f_f__op_1ga8b28b22efcf9dfcbed00bfedb371dc93" kindref="member">set_op_type()</ref> function </para>    </detaileddescription>
  </compounddef>
</doxygen>
