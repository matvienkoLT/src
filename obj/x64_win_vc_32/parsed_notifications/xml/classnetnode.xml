<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="classnetnode" kind="class" language="C++" prot="public">
    <compoundname>netnode</compoundname>
    <includes refid="netnode_8hpp" local="no">netnode.hpp</includes>
      <sectiondef kind="user-defined">
      <header>Constructors, conversions and assignments</header>
      <memberdef kind="function" id="classnetnode_1a87b9bf7c4d490d4a3846a170a09a1df5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>netnode::netnode</definition>
        <argsstring>(void)</argsstring>
        <name>netnode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Empty constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="242" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="242" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a7c9f14edd6e05f462e50f83e3e311fae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>netnode::netnode</definition>
        <argsstring>(nodeidx_t num)</argsstring>
        <name>netnode</name>
        <param>
          <type>nodeidx_t</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor to create a netnode to access information about the specified linear address </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="246" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="246" bodyend="246"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a9b6ba5f86b2642479de6392dcd8f25ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>netnode::operator nodeidx_t</definition>
        <argsstring>() const</argsstring>
        <name>operator nodeidx_t</name>
        <briefdescription>
<para>Conversion from netnode to linear address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="249" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="249" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a2bce30734bdec4cb4f50fd5608dd72d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>netnode::netnode</definition>
        <argsstring>(const char *_name, size_t namlen=0, bool do_create=false)</argsstring>
        <name>netnode</name>
        <param>
          <type>const char *</type>
          <declname>_name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>namlen</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>do_create</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct an instance of netnode class to access the specified netnode. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of netnode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>namlen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the name. may be omitted, in this case the length will be calculated with strlen() </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>do_create</parametername>
</parameternamelist>
<parameterdescription>
<para>true: create the netnode if it doesn&apos;t exist yet. false: don&apos;t create the netnode, set netnumber to <ref refid="netnode_8hpp_1ab745219216aec4e8abf2c1dcc5d5eac0" kindref="member">BADNODE</ref> if it doesn&apos;t exist </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="258" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="258" bodyend="261"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Create/Delete</header>
      <description><para><simplesect kind="note"><para>You can check if a netnode already exists with <ref refid="classnetnode_1a068ec9e5b9d414a27fe09df7cf9e9708" kindref="member">exist()</ref> </para></simplesect>
</para></description>
      <memberdef kind="function" id="classnetnode_1ac384a479be1e5b1d5cbd4b305a77bd1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::create</definition>
        <argsstring>(const char *_name, size_t namlen=0)</argsstring>
        <name>create</name>
        <param>
          <type>const char *</type>
          <declname>_name</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>namlen</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a named netnode. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of netnode to create. names of user-defined netnodes must have the &quot;$ &quot; prefix in order to avoid clashes with program byte names. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>namlen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the name. if not specified, it will be calculated using strlen() </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok, the node is created </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>the node already exists. you may use the netnode class to access it. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="285" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="285" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a8106a7da9e25c8df5e02cd62e91c1111" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::create</definition>
        <argsstring>(void)</argsstring>
        <name>create</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create unnamed netnode. <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>should not happen, indicates internal error </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="293" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="293" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1adff0f5ec77bf7e1ae625885bc973fae5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void netnode::kill</definition>
        <argsstring>(void)</argsstring>
        <name>kill</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Delete a netnode with all information attached to it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="296" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="296" bodyend="296"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Netnode names</header>
      <memberdef kind="function" id="classnetnode_1aafbfc4e994f450f555798fc94b61e2aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::get_name</definition>
        <argsstring>(qstring *buf) const</argsstring>
        <name>get_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the netnode name. <simplesect kind="return"><para>-1 if netnode is unnamed (buf is untouched in this case), otherwise the name length </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="307" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="307" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a488aa5c55e53b8373e66d554b29945ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::rename</definition>
        <argsstring>(const char *newname, size_t namlen=0)</argsstring>
        <name>rename</name>
        <param>
          <type>const char *</type>
          <declname>newname</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>namlen</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rename a netnode. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newname</parametername>
</parameternamelist>
<parameterdescription>
<para>new name of netnode. NULL or &quot;&quot; means to delete name. names of user-defined netnodes must have the &quot;$ &quot; prefix in order to avoid clashes with program byte names. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>namlen</parametername>
</parameternamelist>
<parameterdescription>
<para>length of new name. if not specified, it will be calculated using strlen() </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>failed, newname is already used </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="320" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="320" bodyend="323"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Value of netnode</header>
      <memberdef kind="function" id="classnetnode_1ac7ce35300520a995fbe06c8c6d1cc472" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::valobj</definition>
        <argsstring>(void *buf, size_t bufsize) const</argsstring>
        <name>valobj</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get value of netnode. Netnode values are arbitrary sized objects with max size is <ref refid="netnode_8hpp_1ae8c4a26e225e65819ce7f26e69022c47" kindref="member">MAXSPECSIZE</ref>. NB: do not use this function for strings - see <ref refid="classnetnode_1a949151701f6165be21af02f63149044d" kindref="member">valstr()</ref>. <simplesect kind="return"><para>length of value, -1 if no value present </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="335" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="335" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a949151701f6165be21af02f63149044d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::valstr</definition>
        <argsstring>(qstring *buf) const</argsstring>
        <name>valstr</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get string value of netnode. See explanations for <ref refid="classnetnode_1a52dc5b4115f49917af4fcf68f82bcbc8" kindref="member">supstr()</ref> function about the differences between <ref refid="classnetnode_1ac7ce35300520a995fbe06c8c6d1cc472" kindref="member">valobj()</ref> and <ref refid="classnetnode_1a949151701f6165be21af02f63149044d" kindref="member">valstr()</ref> <simplesect kind="return"><para>length of value, -1 if no value present </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="344" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="344" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1afdeafc950dcdaaa0b73a5df735447c06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::valstr</definition>
        <argsstring>(char *buf, size_t bufsize) const</argsstring>
        <name>valstr</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnetnode_1a949151701f6165be21af02f63149044d" kindref="member">valstr(qstring *buf) const </ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="350" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="350" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a275c5c24c24eac6ce8a6a758c6b99efb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::set</definition>
        <argsstring>(const void *value, size_t length=0)</argsstring>
        <name>set</name>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set value of netnode. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of value. if not specified, it will be calculated using strlen() </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 - ok </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="360" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="360" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1abac449a9625ff3f69252f27690b2be48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::delvalue</definition>
        <argsstring>(void)</argsstring>
        <name>delvalue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete value of netnode. <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>failed, netnode is bad or other error </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="368" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="368" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a64ae447ad8cf8f3a1d5b38c282f54674" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::set_long</definition>
        <argsstring>(nodeidx_t x)</argsstring>
        <name>set_long</name>
        <param>
          <type>nodeidx_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Value of netnode as a long number: </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="374" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="374" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1af9646611caff1991a62e8fb78ec234cd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::value_exists</definition>
        <argsstring>(void) const</argsstring>
        <name>value_exists</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="375" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="375" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a61721ff551527b06d128dca96c9f4849" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::long_value</definition>
        <argsstring>(void) const</argsstring>
        <name>long_value</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="376" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="376" bodyend="382"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arrays of altvals.</header>
      <description><para>altvals: a sparse array of 32-bit values. indexes in this array may be 8-bit or 32-bit values </para></description>
      <memberdef kind="function" id="classnetnode_1a3c1667125e76a7b218b010b187c8b00e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::altval</definition>
        <argsstring>(nodeidx_t alt, uchar tag=atag) const</argsstring>
        <name>altval</name>
        <param>
          <type>nodeidx_t</type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga510bd25a8aa555688d611db3a33e3902" kindref="member">atag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get altval element of the specified array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alt</parametername>
</parameternamelist>
<parameterdescription>
<para>index into array of altvals </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array. may be omitted </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of altval element. nonexistent altval members are returned as zeroes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="397" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a6f8426d4dc4a63c15804b572cc008f03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::altval_ea</definition>
        <argsstring>(ea_t ea, uchar tag=atag) const</argsstring>
        <name>altval_ea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga510bd25a8aa555688d611db3a33e3902" kindref="member">atag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="401" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="401" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a6ce81ff84f2365815c81f6fce22c4c72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::altset</definition>
        <argsstring>(nodeidx_t alt, nodeidx_t value, uchar tag=atag)</argsstring>
        <name>altset</name>
        <param>
          <type>nodeidx_t</type>
          <declname>alt</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga510bd25a8aa555688d611db3a33e3902" kindref="member">atag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set value of altval array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alt</parametername>
</parameternamelist>
<parameterdescription>
<para>index into array of altvals </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>new value of altval element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>failed, normally should not occur </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="412" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="412" bodyend="415"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1afb0710c300407bed853cdb1a8323b337" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::altset_ea</definition>
        <argsstring>(ea_t ea, nodeidx_t value, uchar tag=atag)</argsstring>
        <name>altset_ea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga510bd25a8aa555688d611db3a33e3902" kindref="member">atag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="416" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="416" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1af4bd3720edfbc6ae77de792c9e72473d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::altdel</definition>
        <argsstring>(nodeidx_t alt, uchar tag=atag)</argsstring>
        <name>altdel</name>
        <param>
          <type>nodeidx_t</type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga510bd25a8aa555688d611db3a33e3902" kindref="member">atag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete element of altval array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alt</parametername>
</parameternamelist>
<parameterdescription>
<para>index into array of altvals </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>failed, element doesn&apos;t exist </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="426" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="426" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ac2a349f37f13a4eb147fb6dbb4f2b447" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::altdel_ea</definition>
        <argsstring>(ea_t ea, uchar tag=atag)</argsstring>
        <name>altdel_ea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga510bd25a8aa555688d611db3a33e3902" kindref="member">atag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="430" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="430" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ac50e98f884a348b1ce6e507d2a4d5936" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::easet</definition>
        <argsstring>(ea_t ea, ea_t addr, uchar tag)</argsstring>
        <name>easet</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Store/retrieve/delete an address value in the netnode that corresponds to an address. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="437" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="437" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1acfbff1eac856a10afc49e0b56a8c27b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t</type>
        <definition>ea_t netnode::eaget</definition>
        <argsstring>(ea_t ea, uchar tag) const</argsstring>
        <name>eaget</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="441" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="441" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a1f4d27b5e4c96ab661949580c264ca7d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::eadel</definition>
        <argsstring>(ea_t ea, uchar tag)</argsstring>
        <name>eadel</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="445" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="445" bodyend="448"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1afcf636887f40f2488aa8753146baec6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::easet_idx</definition>
        <argsstring>(nodeidx_t idx, ea_t addr, uchar tag)</argsstring>
        <name>easet_idx</name>
        <param>
          <type>nodeidx_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="450" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="450" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a8016746d8338e4ff0e14349b8a53ee49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t</type>
        <definition>ea_t netnode::eaget_idx</definition>
        <argsstring>(nodeidx_t idx, uchar tag)</argsstring>
        <name>eaget_idx</name>
        <param>
          <type>nodeidx_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="454" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="454" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a74e8cf1d772e9ea1bd9d60db103d23ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::easet_idx8</definition>
        <argsstring>(uchar idx, ea_t addr, uchar tag)</argsstring>
        <name>easet_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>idx</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="459" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="459" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a40bdd79f54f1ce212c8620ed65e4fadf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t</type>
        <definition>ea_t netnode::eaget_idx8</definition>
        <argsstring>(uchar idx, uchar tag) const</argsstring>
        <name>eaget_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="463" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="463" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a55d6138f9804089275ea2af0bc7f0cbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::eadel_idx8</definition>
        <argsstring>(uchar idx, uchar tag)</argsstring>
        <name>eadel_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="467" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="467" bodyend="470"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a394d8222c7c78f45973133ef971b57ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::altfirst</definition>
        <argsstring>(uchar tag=atag) const</argsstring>
        <name>altfirst</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga510bd25a8aa555688d611db3a33e3902" kindref="member">atag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get first existing element of altval array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>index of first existing element of altval array, <ref refid="netnode_8hpp_1ab745219216aec4e8abf2c1dcc5d5eac0" kindref="member">BADNODE</ref> if altval array is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="476" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="476" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a1742ea72dc4e43f915d435f261cd7668" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::altnext</definition>
        <argsstring>(nodeidx_t cur, uchar tag=atag) const</argsstring>
        <name>altnext</name>
        <param>
          <type>nodeidx_t</type>
          <declname>cur</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga510bd25a8aa555688d611db3a33e3902" kindref="member">atag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get next existing element of altval array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cur</parametername>
</parameternamelist>
<parameterdescription>
<para>current index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>index of the next existing element of altval array, <ref refid="netnode_8hpp_1ab745219216aec4e8abf2c1dcc5d5eac0" kindref="member">BADNODE</ref> if no more altval array elements exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="486" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="486" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a69af3db2f71f2997a283d63262d130c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::altlast</definition>
        <argsstring>(uchar tag=atag) const</argsstring>
        <name>altlast</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga510bd25a8aa555688d611db3a33e3902" kindref="member">atag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get last element of altval array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>index of last existing element of altval array, <ref refid="netnode_8hpp_1ab745219216aec4e8abf2c1dcc5d5eac0" kindref="member">BADNODE</ref> if altval array is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="495" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="495" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a14ce9b0f75515ef3a9bc53809c5b9cc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::altprev</definition>
        <argsstring>(nodeidx_t cur, uchar tag=atag) const</argsstring>
        <name>altprev</name>
        <param>
          <type>nodeidx_t</type>
          <declname>cur</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga510bd25a8aa555688d611db3a33e3902" kindref="member">atag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get previous existing element of altval array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cur</parametername>
</parameternamelist>
<parameterdescription>
<para>current index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>index of the previous existing element of altval array, <ref refid="netnode_8hpp_1ab745219216aec4e8abf2c1dcc5d5eac0" kindref="member">BADNODE</ref> if no more altval array elements exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="505" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="505" bodyend="508"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1af686d9db26188b6b1da6bd46c3089a49" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t netnode::altshift</definition>
        <argsstring>(nodeidx_t from, nodeidx_t to, nodeidx_t size, uchar tag=atag)</argsstring>
        <name>altshift</name>
        <param>
          <type>nodeidx_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga510bd25a8aa555688d611db3a33e3902" kindref="member">atag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shift the altval array elements. Moves the array elements at (from..from+size) to (to..to+size) <simplesect kind="return"><para>number of shifted elements </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="513" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="513" bodyend="516"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ac0867c78a57578fab36d83020f58e2d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void netnode::altadjust</definition>
        <argsstring>(nodeidx_t from, nodeidx_t to, nodeidx_t size, bool(idaapi *should_skip)(nodeidx_t ea)=NULL)</argsstring>
        <name>altadjust</name>
        <param>
          <type>nodeidx_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool(idaapi *)(nodeidx_t ea)</type>
          <declname>should_skip</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adjust values of altval arrays elements. All altvals in the range from+1..from+size+1 and adjusted to have values in the range to+1..to+size+1. The parameter should_skip() can be used to skip the adjustment of some altvals </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="522" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="522" bodyend="525"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arrays of altvals: 8-bit values</header>
      <description><para>The following functions behave in the same manner as the functions described above. The only difference is that the array value is 8-bits.<itemizedlist>
<listitem><para>index: 32 bits</para></listitem><listitem><para>value: 8 bits </para></listitem></itemizedlist>
</para></description>
      <memberdef kind="function" id="classnetnode_1a53758e85c3ce8ed6ef3ed5f71dfb5d1d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
        <definition>uchar netnode::charval</definition>
        <argsstring>(nodeidx_t alt, uchar tag) const</argsstring>
        <name>charval</name>
        <param>
          <type>nodeidx_t</type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="535" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="535" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ae6720c0fa48ad06005a09dc8adabb375" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::charset</definition>
        <argsstring>(nodeidx_t alt, uchar val, uchar tag)</argsstring>
        <name>charset</name>
        <param>
          <type>nodeidx_t</type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="536" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="536" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1aa1363c1280d65fbca48ac2165d1d8415" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::chardel</definition>
        <argsstring>(nodeidx_t alt, uchar tag)</argsstring>
        <name>chardel</name>
        <param>
          <type>nodeidx_t</type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="537" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="537" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a566c682f2f10e65951c0999c9b98a698" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
        <definition>uchar netnode::charval_ea</definition>
        <argsstring>(ea_t ea, uchar tag) const</argsstring>
        <name>charval_ea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="538" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="538" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a20a2fbcb548a12d11b69937c67372c0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::charset_ea</definition>
        <argsstring>(ea_t ea, uchar val, uchar tag)</argsstring>
        <name>charset_ea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="539" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="539" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1acd9b5e938bd3093d30f8f1572aed3ee0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::chardel_ea</definition>
        <argsstring>(ea_t ea, uchar tag)</argsstring>
        <name>chardel_ea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="540" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="540" bodyend="540"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ae5828f8d0a9cb90f5d4b5b7db7b20c9f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::charfirst</definition>
        <argsstring>(uchar tag) const</argsstring>
        <name>charfirst</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="541" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="541" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a4c0ddf62c1aacc98a33f48b6fa89f789" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::charnext</definition>
        <argsstring>(nodeidx_t cur, uchar tag) const</argsstring>
        <name>charnext</name>
        <param>
          <type>nodeidx_t</type>
          <declname>cur</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="542" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="542" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1add15ffc42b129c4766bdcb8a2ec0d3ce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::charlast</definition>
        <argsstring>(uchar tag) const</argsstring>
        <name>charlast</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="543" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="543" bodyend="543"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1afe473ac84fef1194a90570314f75d6dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::charprev</definition>
        <argsstring>(nodeidx_t cur, uchar tag) const</argsstring>
        <name>charprev</name>
        <param>
          <type>nodeidx_t</type>
          <declname>cur</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="544" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="544" bodyend="544"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a6eb580afc1c06dc155792dc876d6fdb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t netnode::charshift</definition>
        <argsstring>(nodeidx_t from, nodeidx_t to, nodeidx_t size, uchar tag)</argsstring>
        <name>charshift</name>
        <param>
          <type>nodeidx_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="545" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="545" bodyend="546"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arrays of altvals: 8-bit indexes</header>
      <description><para>Another set of functions to work with altvals. The only difference is that the array index is 8-bits, and therefore the array may contain up to 256 elements only.<itemizedlist>
<listitem><para>index: 8 bits</para></listitem><listitem><para>value: 32 bits </para></listitem></itemizedlist>
</para></description>
      <memberdef kind="function" id="classnetnode_1a5e1befa6971ab533e5952bd26a278a02" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::altval_idx8</definition>
        <argsstring>(uchar alt, uchar tag) const</argsstring>
        <name>altval_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="556" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="556" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a08e423c786291a27924fa8609ee17753" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::altset_idx8</definition>
        <argsstring>(uchar alt, nodeidx_t val, uchar tag)</argsstring>
        <name>altset_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alt</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="557" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="557" bodyend="557"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a5f7903d5eb618d50852b783f2fcec1a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::altdel_idx8</definition>
        <argsstring>(uchar alt, uchar tag)</argsstring>
        <name>altdel_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="558" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="558" bodyend="558"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ab841c1f8a06e3bb17a0534db1d9bc79c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::altfirst_idx8</definition>
        <argsstring>(uchar tag) const</argsstring>
        <name>altfirst_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="559" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="559" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a13d1cf13188dbb6ad6e6bf3d8a0210c3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::altnext_idx8</definition>
        <argsstring>(uchar cur, uchar tag) const</argsstring>
        <name>altnext_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>cur</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="560" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="560" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a9490c7ad7a7e7c58aa2ea02f812dd163" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::altlast_idx8</definition>
        <argsstring>(uchar tag) const</argsstring>
        <name>altlast_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="561" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="561" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a38b409967334ea0ff9275b1bc659766a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::altprev_idx8</definition>
        <argsstring>(uchar cur, uchar tag) const</argsstring>
        <name>altprev_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>cur</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="562" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="562" bodyend="562"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>More altvals</header>
      <description><para>Another set of functions to work with altvals.<itemizedlist>
<listitem><para>index: 8 bits</para></listitem><listitem><para>value: 8 bits </para></listitem></itemizedlist>
</para></description>
      <memberdef kind="function" id="classnetnode_1a97237bbd173be9d66fcc4b87ab274366" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
        <definition>uchar netnode::charval_idx8</definition>
        <argsstring>(uchar alt, uchar tag) const</argsstring>
        <name>charval_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="570" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="570" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a69ed6f60a3022f6d5ca3572f72ddae4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::charset_idx8</definition>
        <argsstring>(uchar alt, uchar val, uchar tag)</argsstring>
        <name>charset_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>val</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="571" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="571" bodyend="571"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a2c9622176b37bc7b43be4ac19a44f832" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::chardel_idx8</definition>
        <argsstring>(uchar alt, uchar tag)</argsstring>
        <name>chardel_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="573" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="573" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a876d3df619fd6a059c34960405734dcc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::charfirst_idx8</definition>
        <argsstring>(uchar tag) const</argsstring>
        <name>charfirst_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="574" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="574" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a4cc0bbf78b45c1e35c7ad9498bb6f404" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::charnext_idx8</definition>
        <argsstring>(uchar cur, uchar tag) const</argsstring>
        <name>charnext_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>cur</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="575" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="575" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a5d08e31e24e502ec2803461b57e7eb17" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::charlast_idx8</definition>
        <argsstring>(uchar tag) const</argsstring>
        <name>charlast_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="576" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="576" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a5636ff04e9a706a578c713ab0f5f22c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::charprev_idx8</definition>
        <argsstring>(uchar cur, uchar tag) const</argsstring>
        <name>charprev_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>cur</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="577" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="577" bodyend="577"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Delete altvals</header>
      <description><para><simplesect kind="note"><para>To delete range of elements in an altval array, see <ref refid="classnetnode_1ab3fd65f0c25e23ea5bac46b7254fe46a" kindref="member">supdel_range()</ref> </para></simplesect>
</para></description>
      <memberdef kind="function" id="classnetnode_1abb3587565aeb0c551fe4bc3c567bba85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::altdel</definition>
        <argsstring>(void)</argsstring>
        <name>altdel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete all elements of altval array. This function may be applied to 32-bit and 8-bit altval arrays. This function deletes the whole altval array. <simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="588" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="588" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a9f32ede9b8da8b853cb60b76f2a9a306" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::altdel_all</definition>
        <argsstring>(uchar tag)</argsstring>
        <name>altdel_all</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete all elements of the specified altval array. This function may be applied to 32-bit and 8-bit altval arrays. This function deletes the whole altval array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="598" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="598" bodyend="601"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arrays of supvals</header>
      <description><para>supvals: an array of arbitrary sized objects. (size of each object is limited by <ref refid="netnode_8hpp_1ae8c4a26e225e65819ce7f26e69022c47" kindref="member">MAXSPECSIZE</ref>). indexes in this array may be 8-bit or 32-bit values. </para></description>
      <memberdef kind="function" id="classnetnode_1a4778b40eae5752fbf1ccff356713c7dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::supval</definition>
        <argsstring>(nodeidx_t alt, void *buf, size_t bufsize, uchar tag=stag) const</argsstring>
        <name>supval</name>
        <param>
          <type>nodeidx_t</type>
          <declname>alt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get value of the specified supval array element. NB: do not use this function to retrieve strings, see <ref refid="classnetnode_1a52dc5b4115f49917af4fcf68f82bcbc8" kindref="member">supstr()</ref>! <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alt</parametername>
</parameternamelist>
<parameterdescription>
<para>index into array of supvals </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer, may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array. Default: stag </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of value, -1 if element doesn&apos;t exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="619" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="619" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a51b954b6c60cf60ee47189462f8798a8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::supval_ea</definition>
        <argsstring>(ea_t ea, void *buf, size_t bufsize, uchar tag=stag) const</argsstring>
        <name>supval_ea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="621" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="621" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a52dc5b4115f49917af4fcf68f82bcbc8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::supstr</definition>
        <argsstring>(qstring *buf, nodeidx_t alt, uchar tag=stag) const</argsstring>
        <name>supstr</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get string value of the specified supval array element. The differences between <ref refid="classnetnode_1a4778b40eae5752fbf1ccff356713c7dd" kindref="member">supval()</ref> and <ref refid="classnetnode_1a52dc5b4115f49917af4fcf68f82bcbc8" kindref="member">supstr()</ref> are the following:<orderedlist>
<listitem><para>Strings are stored with the terminating zero in the old databases. <ref refid="classnetnode_1a4778b40eae5752fbf1ccff356713c7dd" kindref="member">supval()</ref> returns the exact size of the stored object (with the terminating zero) but supstr returns the string length without the terminating zero. <ref refid="classnetnode_1a52dc5b4115f49917af4fcf68f82bcbc8" kindref="member">supstr()</ref> can handle strings stored with or without the terminating zero.</para></listitem><listitem><para><ref refid="classnetnode_1a52dc5b4115f49917af4fcf68f82bcbc8" kindref="member">supstr()</ref> makes sure that the string is terminated with 0 even if the string was stored in the database without it or the output buffer is too small to hold the entire string. In the latter case the string will be truncated but still will have the terminating zero.</para></listitem></orderedlist>
</para><para>If you do not use the string length returned by supval/supstr() functions and you are sure that the output buffer is big enough to hold the entire string and the string has been stored in the database with the terminating zero, then you can continue to use <ref refid="classnetnode_1a4778b40eae5752fbf1ccff356713c7dd" kindref="member">supval()</ref> instead of <ref refid="classnetnode_1a52dc5b4115f49917af4fcf68f82bcbc8" kindref="member">supstr()</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer, may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>alt</parametername>
</parameternamelist>
<parameterdescription>
<para>index into array of supvals </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array. Default: stag </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of the output string, -1 if element doesn&apos;t exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="645" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="645" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a82bc28b9b4fe53266bbb52096382732c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::supstr_ea</definition>
        <argsstring>(qstring *buf, ea_t ea, uchar tag=stag) const</argsstring>
        <name>supstr_ea</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="647" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="647" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1aa4de5434452f8470f35cb0f234a36a8b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::supstr</definition>
        <argsstring>(nodeidx_t alt, char *buf, size_t bufsize, uchar tag=stag) const</argsstring>
        <name>supstr</name>
        <param>
          <type>nodeidx_t</type>
          <declname>alt</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnetnode_1a52dc5b4115f49917af4fcf68f82bcbc8" kindref="member">supstr</ref>(<ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *buf, nodeidx_t alt, <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> tag=<ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref>) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="651" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="651" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a7d003b49ab6aab40ade94f43bbe6be29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::supstr_ea</definition>
        <argsstring>(ea_t ea, char *buf, size_t bufsize, uchar tag=stag) const</argsstring>
        <name>supstr_ea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="653" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="653" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ad6b099bc586fc052bcdc1e9ec4960626" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::supset</definition>
        <argsstring>(nodeidx_t alt, const void *value, size_t length=0, uchar tag=stag)</argsstring>
        <name>supset</name>
        <param>
          <type>nodeidx_t</type>
          <declname>alt</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set value of supval array element. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alt</parametername>
</parameternamelist>
<parameterdescription>
<para>index into array of supvals </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to supval value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of &apos;value&apos;. If not specified, the length is calculated using strlen()+1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>should not occur - indicates internal error </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="664" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="664" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a6405f04a7e9979748a7f11417b78df29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::supset_ea</definition>
        <argsstring>(ea_t ea, const void *value, size_t length=0, uchar tag=stag)</argsstring>
        <name>supset_ea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="666" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="666" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a201b30d018d09050f9192f0deb191062" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::supdel</definition>
        <argsstring>(nodeidx_t alt, uchar tag=stag)</argsstring>
        <name>supdel</name>
        <param>
          <type>nodeidx_t</type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete supval element. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alt</parametername>
</parameternamelist>
<parameterdescription>
<para>index into array of supvals </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>deleted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>element does not exist </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="674" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="674" bodyend="675"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a04cb7ab516b273a9a2198f05f206abe8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::supdel_ea</definition>
        <argsstring>(ea_t ea, uchar tag=stag)</argsstring>
        <name>supdel_ea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="676" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="676" bodyend="677"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a436108393b0d5ba53c2a1f8254906b5f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::lower_bound</definition>
        <argsstring>(nodeidx_t cur, uchar tag=stag) const</argsstring>
        <name>lower_bound</name>
        <param>
          <type>nodeidx_t</type>
          <declname>cur</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get lower bound of existing elements of supval array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cur</parametername>
</parameternamelist>
<parameterdescription>
<para>current index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>index of first existing element of supval array &gt;= cur <ref refid="netnode_8hpp_1ab745219216aec4e8abf2c1dcc5d5eac0" kindref="member">BADNODE</ref> if supval array is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="684" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="684" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a3554f090f45e92d73a10b6e3c4aa34b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::lower_bound_ea</definition>
        <argsstring>(ea_t ea, uchar tag=stag) const</argsstring>
        <name>lower_bound_ea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="686" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="686" bodyend="687"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1afe399e9b776d7a9a0acee7c744a356ac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::supfirst</definition>
        <argsstring>(uchar tag=stag) const</argsstring>
        <name>supfirst</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get first existing element of supval array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>index of first existing element of supval array, <ref refid="netnode_8hpp_1ab745219216aec4e8abf2c1dcc5d5eac0" kindref="member">BADNODE</ref> if supval array is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="693" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="693" bodyend="694"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1af812e0dca86345918c2b98d6d0f42d75" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::supnext</definition>
        <argsstring>(nodeidx_t cur, uchar tag=stag) const</argsstring>
        <name>supnext</name>
        <param>
          <type>nodeidx_t</type>
          <declname>cur</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get next existing element of supval array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cur</parametername>
</parameternamelist>
<parameterdescription>
<para>current index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>index of the next existing element of supval array, <ref refid="netnode_8hpp_1ab745219216aec4e8abf2c1dcc5d5eac0" kindref="member">BADNODE</ref> if no more supval array elements exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="701" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="701" bodyend="702"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a4d7434722d5df238699353ac108ee1db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::suplast</definition>
        <argsstring>(uchar tag=stag) const</argsstring>
        <name>suplast</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get last existing element of supval array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>index of last existing element of supval array, <ref refid="netnode_8hpp_1ab745219216aec4e8abf2c1dcc5d5eac0" kindref="member">BADNODE</ref> if supval array is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="708" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="708" bodyend="709"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a90d9ecac5351752a10ea3010e6538439" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::supprev</definition>
        <argsstring>(nodeidx_t cur, uchar tag=stag) const</argsstring>
        <name>supprev</name>
        <param>
          <type>nodeidx_t</type>
          <declname>cur</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get previous existing element of supval array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cur</parametername>
</parameternamelist>
<parameterdescription>
<para>current index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>index of the previous existing element of supval array <ref refid="netnode_8hpp_1ab745219216aec4e8abf2c1dcc5d5eac0" kindref="member">BADNODE</ref> if no more supval array elements exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="716" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="716" bodyend="717"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ab6d79271d16cbf4e1afefde9f0d15cd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t netnode::supshift</definition>
        <argsstring>(nodeidx_t from, nodeidx_t to, nodeidx_t size, uchar tag=stag)</argsstring>
        <name>supshift</name>
        <param>
          <type>nodeidx_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1gae6dbe815b6c62ada91022a3f3e1a0f3c" kindref="member">stag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Shift the supval array elements. Moves the array elements at (from..from+size) to (to..to+size) <simplesect kind="return"><para>number of shifted elements </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="723" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="723" bodyend="724"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Arrays of supvals: 8-bit indexes</header>
      <description><para>The following functions behave in the same manner as the functions described above. The only difference is that the array index is 8-bits and therefore the array may contains up to 256 elements only. </para></description>
      <memberdef kind="function" id="classnetnode_1a625360c946e801428ea1be02a0f85fe8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::supval_idx8</definition>
        <argsstring>(uchar alt, void *buf, size_t bufsize, uchar tag) const</argsstring>
        <name>supval_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="733" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="733" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ac740167bfc4bb19ecb3e80a342f25793" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::supstr_idx8</definition>
        <argsstring>(uchar alt, char *buf, size_t bufsize, uchar tag) const</argsstring>
        <name>supstr_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alt</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="734" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="734" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a9d317621569e4a88691310019b5056a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::supstr_idx8</definition>
        <argsstring>(qstring *buf, uchar alt, uchar tag) const</argsstring>
        <name>supstr_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="735" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="735" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1abef0d668e75fd81bf4af8c7cb75ed4b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::supset_idx8</definition>
        <argsstring>(uchar alt, const void *value, size_t length, uchar tag)</argsstring>
        <name>supset_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alt</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="736" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="736" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ab72d7fab751ddd4e4f7a28c9095ed8d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::supdel_idx8</definition>
        <argsstring>(uchar alt, uchar tag)</argsstring>
        <name>supdel_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="737" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="737" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a74ad813301f0f542b2c1c09da67bd18b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::lower_bound_idx8</definition>
        <argsstring>(uchar alt, uchar tag) const</argsstring>
        <name>lower_bound_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="738" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="738" bodyend="738"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a5eec96266acf5082501632928040639a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::supfirst_idx8</definition>
        <argsstring>(uchar tag) const</argsstring>
        <name>supfirst_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="739" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="739" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a8dbaa9dfc0e4fe32265e06c4336a49b1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::supnext_idx8</definition>
        <argsstring>(uchar alt, uchar tag) const</argsstring>
        <name>supnext_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="740" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="740" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1aaa61b8b699e666d9764379b33db30494" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::suplast_idx8</definition>
        <argsstring>(uchar tag) const</argsstring>
        <name>suplast_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="741" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="741" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ad441ff8206ab75eb42132fbd7a520767" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::supprev_idx8</definition>
        <argsstring>(uchar alt, uchar tag) const</argsstring>
        <name>supprev_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>alt</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="742" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="742" bodyend="742"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Delete supvals</header>
      <memberdef kind="function" id="classnetnode_1ad5235083bc990e0d878c5c7de28d8fe0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::supdel</definition>
        <argsstring>(void)</argsstring>
        <name>supdel</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete all elements of supval array. This function may be applied to 32-bit and 8-bit supval arrays. This function deletes the whole supval array. <simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="752" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="752" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1aa64845a0b4c5ac528db4d70d9cf686eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::supdel_all</definition>
        <argsstring>(uchar tag)</argsstring>
        <name>supdel_all</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete all elements of the specified supval array. This function may be applied to 32-bit and 8-bit supval arrays. This function deletes the whole supval array. <simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="761" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="761" bodyend="764"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ab3fd65f0c25e23ea5bac46b7254fe46a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int netnode::supdel_range</definition>
        <argsstring>(nodeidx_t idx1, nodeidx_t idx2, uchar tag)</argsstring>
        <name>supdel_range</name>
        <param>
          <type>nodeidx_t</type>
          <declname>idx1</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>idx2</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete range of elements in the specified supval array. Elements in range [idx1, idx2) will be deleted. <simplesect kind="note"><para>This function can also be used to delete a range of altval elements </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx1</parametername>
</parameternamelist>
<parameterdescription>
<para>first element to delete </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx2</parametername>
</parameternamelist>
<parameterdescription>
<para>last element to delete + 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of deleted elements </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="773" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="773" bodyend="776"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ac4acd90886a8f6b096b35b8987893d98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int netnode::supdel_range_idx8</definition>
        <argsstring>(uchar idx1, uchar idx2, uchar tag)</argsstring>
        <name>supdel_range_idx8</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>idx1</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>idx2</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Same as above, but accepts 8-bit indexes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="778" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="778" bodyend="781"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Hashes</header>
      <description><para>Associative arrays indexed by strings. hashvals: Indexes in this array are strings. Values are arbitrary sized (max size is <ref refid="netnode_8hpp_1ae8c4a26e225e65819ce7f26e69022c47" kindref="member">MAXSPECSIZE</ref>) </para></description>
      <memberdef kind="function" id="classnetnode_1a94487290d6ba7402ecef29c7f8bc65e1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::hashval</definition>
        <argsstring>(const char *idx, void *buf, size_t bufsize, uchar tag=htag) const</argsstring>
        <name>hashval</name>
        <param>
          <type>const char *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get value of the specified hash element. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index into hash </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer, may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of hash. Default: htag </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if element doesn&apos;t exist or idx is NULL. otherwise returns the value size in bytes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="799" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="799" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1af4a55fee57724479936c9bc9de91aae3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::hashstr</definition>
        <argsstring>(qstring *buf, const char *idx, uchar tag=htag) const</argsstring>
        <name>hashstr</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
<para>Similar to <ref refid="classnetnode_1a52dc5b4115f49917af4fcf68f82bcbc8" kindref="member">supstr()</ref>, but accepts a hash index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="803" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="803" bodyend="804"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a3acc8c4e81848e833f94f2c73caa40c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::hashstr</definition>
        <argsstring>(const char *idx, char *buf, size_t bufsize, uchar tag=htag) const</argsstring>
        <name>hashstr</name>
        <param>
          <type>const char *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnetnode_1af4a55fee57724479936c9bc9de91aae3" kindref="member">hashstr</ref>(<ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *buf, const char *idx, <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> tag=<ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref>) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="807" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="807" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ab44f74a138ccfad2e0bd7266edef97cd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::hashval_long</definition>
        <argsstring>(const char *idx, uchar tag=htag) const</argsstring>
        <name>hashval_long</name>
        <param>
          <type>const char *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get value of the specified hash element. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index into hash </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of hash. Default: htag </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of hash element (it should be set using hashset(nodeidx_t)), 0 if the element does not exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="815" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="815" bodyend="816"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a3e73712f3cc839fd3b2ab6a0747d1ab1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::hashset</definition>
        <argsstring>(const char *idx, const void *value, size_t length=0, uchar tag=htag)</argsstring>
        <name>hashset</name>
        <param>
          <type>const char *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set value of hash element. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index into hash </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>length of &apos;value&apos;. If not specified, the length is calculated using strlen()+1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of hash. Default: htag </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>should not occur - indicates internal error </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="826" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="826" bodyend="827"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a3150ee15967404d29f5036e0f4f37169" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::hashset</definition>
        <argsstring>(const char *idx, nodeidx_t value, uchar tag=htag)</argsstring>
        <name>hashset</name>
        <param>
          <type>const char *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set value of hash element to long value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index into hash </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>new value of hash element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of hash. Default: htag </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>should not occur - indicates internal error </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="835" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="835" bodyend="836"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a2e6b87843e7a53c63b76e4d7ee628e26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::hashdel</definition>
        <argsstring>(const char *idx, uchar tag=htag)</argsstring>
        <name>hashdel</name>
        <param>
          <type>const char *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete hash element. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>index into hash </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of hash. Default: htag </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>deleted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>element does not exist </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="843" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="843" bodyend="844"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a781710d011b33c34de40d40825474b9d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::hashfirst</definition>
        <argsstring>(qstring *buf, uchar tag=htag) const</argsstring>
        <name>hashfirst</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get first existing element of hash. <simplesect kind="note"><para>elements of hash are kept sorted in lexical order </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer, may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of hash. Default: htag </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of index of first existing element of hash, -1 if hash is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="852" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="852" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a07e290cc8c92d294c70c81d27e7c25a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::hashfirst</definition>
        <argsstring>(char *buf, size_t bufsize, uchar tag=htag) const</argsstring>
        <name>hashfirst</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnetnode_1a781710d011b33c34de40d40825474b9d" kindref="member">hashfirst</ref>(<ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *buf, <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> tag=<ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref>) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="856" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="856" bodyend="857"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1aca2ced5a6fef33f56b1116bab94e404e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::hashnext</definition>
        <argsstring>(qstring *buf, const char *idx, uchar tag=htag) const</argsstring>
        <name>hashnext</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get next existing element of hash. <simplesect kind="note"><para>elements of hash are kept sorted in lexical order </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer, may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>current index into hash </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of hash. Default: htag </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of index of the next existing element of hash, -1 if no more hash elements exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="866" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="866" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ae0b32641742d3ba38d9b2bfb9d2426fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::hashnext</definition>
        <argsstring>(const char *idx, char *buf, size_t bufsize, uchar tag=htag) const</argsstring>
        <name>hashnext</name>
        <param>
          <type>const char *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnetnode_1aca2ced5a6fef33f56b1116bab94e404e" kindref="member">hashnext</ref>(<ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *buf, const char *idx, <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> tag=<ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref>) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="870" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="870" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a4ccca361586e6a1d24bc205fc6d0e462" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::hashlast</definition>
        <argsstring>(qstring *buf, uchar tag=htag) const</argsstring>
        <name>hashlast</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get last existing element of hash. <simplesect kind="note"><para>elements of hash are kept sorted in lexical order </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer, may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of hash. Default: htag </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of index of last existing element of hash, -1 if hash is empty </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="879" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="879" bodyend="880"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a6241a71ee7002cb2819f3cf371f82677" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::hashlast</definition>
        <argsstring>(char *buf, size_t bufsize, uchar tag=htag) const</argsstring>
        <name>hashlast</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnetnode_1a4ccca361586e6a1d24bc205fc6d0e462" kindref="member">hashlast</ref>(<ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *buf, <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> tag=<ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref>) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="883" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="883" bodyend="884"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a9502d89159c5ff530d4a3b8894bf88d9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::hashprev</definition>
        <argsstring>(qstring *buf, const char *idx, uchar tag=htag) const</argsstring>
        <name>hashprev</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get previous existing element of supval array. <simplesect kind="note"><para>elements of hash are kept sorted in lexical order </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer, may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>current index into hash </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of hash. Default: htag </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of index of the previous existing element of hash, -1 if no more hash elements exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="893" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="893" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a3eee4ba048081822b60a60be8dd240cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::hashprev</definition>
        <argsstring>(const char *idx, char *buf, size_t bufsize, uchar tag=htag) const</argsstring>
        <name>hashprev</name>
        <param>
          <type>const char *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="classnetnode_1a9502d89159c5ff530d4a3b8894bf88d9" kindref="member">hashprev</ref>(<ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *buf, const char *idx, <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> tag=<ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref>) const </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="897" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="897" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a06b896e135ff29e561a001e791879a77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::hashdel_all</definition>
        <argsstring>(uchar tag=htag)</argsstring>
        <name>hashdel_all</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
          <defval><ref refid="group__nn__res_1ga2d24406d0dc001d3d7a6e99adf73ad20" kindref="member">htag</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete all elements of hash. This function deletes the whole hash. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of hash. Default: htag </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="904" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="904" bodyend="907"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Blobs</header>
      <description><para>Virtually unlimited size binary objects. Blobs are stored in several supval array elements. </para></description>
      <memberdef kind="function" id="classnetnode_1ac7ebaa0a3d0243a15621b8e78d1bcebc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t netnode::blobsize</definition>
        <argsstring>(nodeidx_t _start, uchar tag)</argsstring>
        <name>blobsize</name>
        <param>
          <type>nodeidx_t</type>
          <declname>_start</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get size of blob. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_start</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the first supval element used to store blob </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of supval array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of bytes required to store a blob </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="921" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="921" bodyend="924"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a702f099bd3ccc33fef348ae3cb1758bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t netnode::blobsize_ea</definition>
        <argsstring>(ea_t ea, uchar tag)</argsstring>
        <name>blobsize_ea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="925" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="925" bodyend="928"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ab3a42c01f0192121c51ae39759fbddb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* netnode::getblob</definition>
        <argsstring>(void *buf, size_t *bufsize, nodeidx_t _start, uchar tag)</argsstring>
        <name>getblob</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>_start</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get blob from a netnode. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to read into. if NULL, the buffer will be allocated using <ref refid="pro_8h_1a2806c6575b58eb42bb0d2b96f92fc39b" kindref="member">qalloc()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>in: size of &apos;buf&apos; in bytes (if buf == NULL then meaningless). out: size of the blob if it exists. bufsize may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_start</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the first supval element used to store blob </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of supval array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if blob doesn&apos;t exist, otherwise returns pointer to blob </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="940" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="940" bodyend="947"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a05b43bc8813c143346d6b07be0a2db06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void* netnode::getblob_ea</definition>
        <argsstring>(void *buf, size_t *bufsize, ea_t ea, uchar tag)</argsstring>
        <name>getblob_ea</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="948" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="948" bodyend="955"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ae02adac47bf09699f0eac8ff933188de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::getblob</definition>
        <argsstring>(qvector&lt; T &gt; *blob, nodeidx_t _start, uchar tag)</argsstring>
        <name>getblob</name>
        <param>
          <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; T &gt; *</type>
          <declname>blob</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>_start</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get blob from a netnode. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blob</parametername>
</parameternamelist>
<parameterdescription>
<para>output <ref refid="classqvector" kindref="compound">qvector</ref> buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_start</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the first supval element used to store blob </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of supval array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if blob doesn&apos;t exist, size of blob otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="963" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="963" bodyend="969"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a64507384c710269fdb170eb1d254bbf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::getblob_ea</definition>
        <argsstring>(qvector&lt; T &gt; *blob, ea_t ea, uchar tag)</argsstring>
        <name>getblob_ea</name>
        <param>
          <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; T &gt; *</type>
          <declname>blob</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="971" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="971" bodyend="977"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ac7757507f886d19903cee592d0871e53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::getblob</definition>
        <argsstring>(qstring *buf, nodeidx_t _start, uchar tag)</argsstring>
        <name>getblob</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>_start</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get blob from a netnode into a qstring* and make sure the string is null-terminated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>output <ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_start</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the first supval element used to store blob </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of supval array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if blob doesn&apos;t exist size of string (including terminating null) otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="986" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="986" bodyend="992"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a34876bc4629bf260ea4271ee382aacf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::setblob</definition>
        <argsstring>(const void *buf, size_t size, nodeidx_t _start, uchar tag)</argsstring>
        <name>setblob</name>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>_start</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Store a blob in a netnode. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to blob to save </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of blob in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_start</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the first supval element used to store blob </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of supval array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1000" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1000" bodyend="1007"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1afed1632f4f1c63b2103000ac3bfedbe1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::setblob_ea</definition>
        <argsstring>(const void *buf, size_t size, ea_t ea, uchar tag)</argsstring>
        <name>setblob_ea</name>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1008" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1008" bodyend="1015"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a69d3953ab38655250e7f2d3e776964ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int netnode::delblob</definition>
        <argsstring>(nodeidx_t _start, uchar tag)</argsstring>
        <name>delblob</name>
        <param>
          <type>nodeidx_t</type>
          <declname>_start</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a blob. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_start</parametername>
</parameternamelist>
<parameterdescription>
<para>index of the first supval element used to store blob </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>tag of supval array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of deleted supvals </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1021" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1021" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a23b73da2e3d91275e72d2d948d572416" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int netnode::delblob_ea</definition>
        <argsstring>(ea_t ea, uchar tag)</argsstring>
        <name>delblob_ea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1025" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1025" bodyend="1028"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Links</header>
      <description><para><simplesect kind="warning"><para>links are deprecated! (We can not delete them because they are used in ancient databases) </para></simplesect>
</para></description>
      <memberdef kind="function" id="classnetnode_1a9e8094943b1a7d506fa55fc133a82037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int netnode::link</definition>
        <argsstring>(netnode to, netlink linktype, const char *linkspec)</argsstring>
        <name>link</name>
        <param>
          <type><ref refid="classnetnode" kindref="compound">netnode</ref></type>
          <declname>to</declname>
        </param>
        <param>
          <type>netlink</type>
          <declname>linktype</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>linkspec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1046" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a0f6688c3c3a393c59721f109284f4fb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void netnode::unlink</definition>
        <argsstring>(netnode to, netlink linktype)</argsstring>
        <name>unlink</name>
        <param>
          <type><ref refid="classnetnode" kindref="compound">netnode</ref></type>
          <declname>to</declname>
        </param>
        <param>
          <type>netlink</type>
          <declname>linktype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1051" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ad9b4154f1ded0562304d050dad01b3c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t netnode::linkspec</definition>
        <argsstring>(netnode to, char *buf, size_t bufsize, netlink linktype) const</argsstring>
        <name>linkspec</name>
        <param>
          <type><ref refid="classnetnode" kindref="compound">netnode</ref></type>
          <declname>to</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type>netlink</type>
          <declname>linktype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1059" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Enumerate all netnodes</header>
      <memberdef kind="function" id="classnetnode_1a1859569dc7330a3145478399d29ec379" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::start</definition>
        <argsstring>(void)</argsstring>
        <name>start</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get first netnode in the graph. Sets netnodenumber to the lowest existing number. <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>graph is empty </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1072" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1072" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1af65bbe7b18f852f6be06013223af2157" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::end</definition>
        <argsstring>(void)</argsstring>
        <name>end</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get last netnode in the graph. Sets netnodenumber to the highest existing number. <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>graph is empty </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1081" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1081" bodyend="1084"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a988dbd86ebdc8fa249f6343c3ad729ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::next</definition>
        <argsstring>(void)</argsstring>
        <name>next</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get next netnode in the graph. Sets netnodenumber to the next existing number <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>no more netnodes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1090" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1090" bodyend="1093"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a5f92d582b6b8d492356204027238d5e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::prev</definition>
        <argsstring>(void)</argsstring>
        <name>prev</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get prev netnode in the graph. Sets netnodenumber to the previous existing number <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>no more netnodes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1099" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1099" bodyend="1102"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Move and copy netnodes</header>
      <description><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>the target netnode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>how many netnodes to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of copied/moved keys, <ref refid="netnode_8hpp_1ab745219216aec4e8abf2c1dcc5d5eac0" kindref="member">BADNODE</ref> if failure or not enough memory </para></simplesect>
</para></description>
      <memberdef kind="function" id="classnetnode_1a66a9ae9d803fbc50c2b58341bf0b8386" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t netnode::copyto</definition>
        <argsstring>(netnode target, nodeidx_t count=1)</argsstring>
        <name>copyto</name>
        <param>
          <type><ref refid="classnetnode" kindref="compound">netnode</ref></type>
          <declname>target</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1112" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1112" bodyend="1112"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ad9b3d2c41fa7eddacc9a886524c79a94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t netnode::moveto</definition>
        <argsstring>(netnode target, nodeidx_t count=1)</argsstring>
        <name>moveto</name>
        <param>
          <type><ref refid="classnetnode" kindref="compound">netnode</ref></type>
          <declname>target</declname>
        </param>
        <param>
          <type>nodeidx_t</type>
          <declname>count</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1113" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1113" bodyend="1113"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Netnode comparisons</header>
      <memberdef kind="function" id="classnetnode_1a71cc0d60c655c808887301eadd1d5020" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::operator==</definition>
        <argsstring>(netnode &amp;n) const</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classnetnode" kindref="compound">netnode</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1119" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1119" bodyend="1119"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1ab1b42c0c0bf156126742ae20bb210b14" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::operator!=</definition>
        <argsstring>(netnode &amp;n) const</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classnetnode" kindref="compound">netnode</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1120" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1120" bodyend="1120"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a9de43f1a2e2bca4f87a417dc7edc5ee0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::operator==</definition>
        <argsstring>(nodeidx_t x) const</argsstring>
        <name>operator==</name>
        <param>
          <type>nodeidx_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1121" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1121" bodyend="1121"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1abfbb7057db622c31fb4c9e379463a37c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::operator!=</definition>
        <argsstring>(nodeidx_t x) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>nodeidx_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1122" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1122" bodyend="1122"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classnetnode_1a7707281275d49dc66e2d7dd4d0594f01" prot="private" static="no" mutable="no">
        <type>nodeidx_t</type>
        <definition>nodeidx_t netnode::netnodenumber</definition>
        <argsstring></argsstring>
        <name>netnodenumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1136" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classnetnode_1a0a42beca4447cf6a14c9b0fd15cfe922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend bool ida_export</type>
        <definition>bool ida_export netnode_exist</definition>
        <argsstring>(const netnode &amp;n)</argsstring>
        <name>netnode_exist</name>
        <param>
          <type>const <ref refid="classnetnode" kindref="compound">netnode</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>See <ref refid="classnetnode_1a068ec9e5b9d414a27fe09df7cf9e9708" kindref="member">exist()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="266" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="classnetnode_1a068ec9e5b9d414a27fe09df7cf9e9708" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool exist</definition>
        <argsstring>(const netnode &amp;n)</argsstring>
        <name>exist</name>
        <param>
          <type>const <ref refid="classnetnode" kindref="compound">netnode</ref> &amp;</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does the specified netnode exist?. <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>there is some information attached to the netnode. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>unnamed netnode without any information </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="270" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="270" bodyend="270"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classnetnode_1abfaf65a77be85e543570d003aa8cab23" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool netnode::inited</definition>
        <argsstring>(void)</argsstring>
        <name>inited</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1127" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1127" bodyend="1127"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classnetnode_1a389251d0e808955cc3968908ba2bf3d8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool netnode::check</definition>
        <argsstring>(const char *oldname, size_t namlen=0)</argsstring>
        <name>check</name>
        <param>
          <type>const char *</type>
          <declname>oldname</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>namlen</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1139" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="1139" bodyend="1140"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1a5a49e2e44c3e08c7f7f2ab9fc8afd84b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref></type>
        <definition>qstring netnode::qsupval</definition>
        <argsstring>(nodeidx_t ea, uchar tag) const</argsstring>
        <name>qsupval</name>
        <param>
          <type>nodeidx_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classnetnode_1aa6fb55f0aeeb151119f5bea132212ab3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void netnode::qsupset</definition>
        <argsstring>(nodeidx_t ea, const qstring &amp;x, uchar tag)</argsstring>
        <name>qsupset</name>
        <param>
          <type>nodeidx_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="1143" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Definition of the IDA database node. Note that the size of the &apos;netnode&apos; class is 4 bytes and it can be freely casted to &apos;uint32&apos; and back. This makes it easy to store information about the program location in the netnodes. Please pass netnodes to functions by value. </para>    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" line="222" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/netnode.hpp" bodystart="221" bodyend="1144"/>
    <listofallmembers>
      <member refid="classnetnode_1ac0867c78a57578fab36d83020f58e2d3" prot="public" virt="non-virtual"><scope>netnode</scope><name>altadjust</name></member>
      <member refid="classnetnode_1af4bd3720edfbc6ae77de792c9e72473d" prot="public" virt="non-virtual"><scope>netnode</scope><name>altdel</name></member>
      <member refid="classnetnode_1abb3587565aeb0c551fe4bc3c567bba85" prot="public" virt="non-virtual"><scope>netnode</scope><name>altdel</name></member>
      <member refid="classnetnode_1a9f32ede9b8da8b853cb60b76f2a9a306" prot="public" virt="non-virtual"><scope>netnode</scope><name>altdel_all</name></member>
      <member refid="classnetnode_1ac2a349f37f13a4eb147fb6dbb4f2b447" prot="public" virt="non-virtual"><scope>netnode</scope><name>altdel_ea</name></member>
      <member refid="classnetnode_1a5f7903d5eb618d50852b783f2fcec1a1" prot="public" virt="non-virtual"><scope>netnode</scope><name>altdel_idx8</name></member>
      <member refid="classnetnode_1a394d8222c7c78f45973133ef971b57ee" prot="public" virt="non-virtual"><scope>netnode</scope><name>altfirst</name></member>
      <member refid="classnetnode_1ab841c1f8a06e3bb17a0534db1d9bc79c" prot="public" virt="non-virtual"><scope>netnode</scope><name>altfirst_idx8</name></member>
      <member refid="classnetnode_1a69af3db2f71f2997a283d63262d130c7" prot="public" virt="non-virtual"><scope>netnode</scope><name>altlast</name></member>
      <member refid="classnetnode_1a9490c7ad7a7e7c58aa2ea02f812dd163" prot="public" virt="non-virtual"><scope>netnode</scope><name>altlast_idx8</name></member>
      <member refid="classnetnode_1a1742ea72dc4e43f915d435f261cd7668" prot="public" virt="non-virtual"><scope>netnode</scope><name>altnext</name></member>
      <member refid="classnetnode_1a13d1cf13188dbb6ad6e6bf3d8a0210c3" prot="public" virt="non-virtual"><scope>netnode</scope><name>altnext_idx8</name></member>
      <member refid="classnetnode_1a14ce9b0f75515ef3a9bc53809c5b9cc4" prot="public" virt="non-virtual"><scope>netnode</scope><name>altprev</name></member>
      <member refid="classnetnode_1a38b409967334ea0ff9275b1bc659766a" prot="public" virt="non-virtual"><scope>netnode</scope><name>altprev_idx8</name></member>
      <member refid="classnetnode_1a6ce81ff84f2365815c81f6fce22c4c72" prot="public" virt="non-virtual"><scope>netnode</scope><name>altset</name></member>
      <member refid="classnetnode_1afb0710c300407bed853cdb1a8323b337" prot="public" virt="non-virtual"><scope>netnode</scope><name>altset_ea</name></member>
      <member refid="classnetnode_1a08e423c786291a27924fa8609ee17753" prot="public" virt="non-virtual"><scope>netnode</scope><name>altset_idx8</name></member>
      <member refid="classnetnode_1af686d9db26188b6b1da6bd46c3089a49" prot="public" virt="non-virtual"><scope>netnode</scope><name>altshift</name></member>
      <member refid="classnetnode_1a3c1667125e76a7b218b010b187c8b00e" prot="public" virt="non-virtual"><scope>netnode</scope><name>altval</name></member>
      <member refid="classnetnode_1a6f8426d4dc4a63c15804b572cc008f03" prot="public" virt="non-virtual"><scope>netnode</scope><name>altval_ea</name></member>
      <member refid="classnetnode_1a5e1befa6971ab533e5952bd26a278a02" prot="public" virt="non-virtual"><scope>netnode</scope><name>altval_idx8</name></member>
      <member refid="classnetnode_1ac7ebaa0a3d0243a15621b8e78d1bcebc" prot="public" virt="non-virtual"><scope>netnode</scope><name>blobsize</name></member>
      <member refid="classnetnode_1a702f099bd3ccc33fef348ae3cb1758bd" prot="public" virt="non-virtual"><scope>netnode</scope><name>blobsize_ea</name></member>
      <member refid="classnetnode_1aa1363c1280d65fbca48ac2165d1d8415" prot="public" virt="non-virtual"><scope>netnode</scope><name>chardel</name></member>
      <member refid="classnetnode_1acd9b5e938bd3093d30f8f1572aed3ee0" prot="public" virt="non-virtual"><scope>netnode</scope><name>chardel_ea</name></member>
      <member refid="classnetnode_1a2c9622176b37bc7b43be4ac19a44f832" prot="public" virt="non-virtual"><scope>netnode</scope><name>chardel_idx8</name></member>
      <member refid="classnetnode_1ae5828f8d0a9cb90f5d4b5b7db7b20c9f" prot="public" virt="non-virtual"><scope>netnode</scope><name>charfirst</name></member>
      <member refid="classnetnode_1a876d3df619fd6a059c34960405734dcc" prot="public" virt="non-virtual"><scope>netnode</scope><name>charfirst_idx8</name></member>
      <member refid="classnetnode_1add15ffc42b129c4766bdcb8a2ec0d3ce" prot="public" virt="non-virtual"><scope>netnode</scope><name>charlast</name></member>
      <member refid="classnetnode_1a5d08e31e24e502ec2803461b57e7eb17" prot="public" virt="non-virtual"><scope>netnode</scope><name>charlast_idx8</name></member>
      <member refid="classnetnode_1a4c0ddf62c1aacc98a33f48b6fa89f789" prot="public" virt="non-virtual"><scope>netnode</scope><name>charnext</name></member>
      <member refid="classnetnode_1a4cc0bbf78b45c1e35c7ad9498bb6f404" prot="public" virt="non-virtual"><scope>netnode</scope><name>charnext_idx8</name></member>
      <member refid="classnetnode_1afe473ac84fef1194a90570314f75d6dd" prot="public" virt="non-virtual"><scope>netnode</scope><name>charprev</name></member>
      <member refid="classnetnode_1a5636ff04e9a706a578c713ab0f5f22c9" prot="public" virt="non-virtual"><scope>netnode</scope><name>charprev_idx8</name></member>
      <member refid="classnetnode_1ae6720c0fa48ad06005a09dc8adabb375" prot="public" virt="non-virtual"><scope>netnode</scope><name>charset</name></member>
      <member refid="classnetnode_1a20a2fbcb548a12d11b69937c67372c0f" prot="public" virt="non-virtual"><scope>netnode</scope><name>charset_ea</name></member>
      <member refid="classnetnode_1a69ed6f60a3022f6d5ca3572f72ddae4a" prot="public" virt="non-virtual"><scope>netnode</scope><name>charset_idx8</name></member>
      <member refid="classnetnode_1a6eb580afc1c06dc155792dc876d6fdb3" prot="public" virt="non-virtual"><scope>netnode</scope><name>charshift</name></member>
      <member refid="classnetnode_1a53758e85c3ce8ed6ef3ed5f71dfb5d1d" prot="public" virt="non-virtual"><scope>netnode</scope><name>charval</name></member>
      <member refid="classnetnode_1a566c682f2f10e65951c0999c9b98a698" prot="public" virt="non-virtual"><scope>netnode</scope><name>charval_ea</name></member>
      <member refid="classnetnode_1a97237bbd173be9d66fcc4b87ab274366" prot="public" virt="non-virtual"><scope>netnode</scope><name>charval_idx8</name></member>
      <member refid="classnetnode_1a389251d0e808955cc3968908ba2bf3d8" prot="private" virt="non-virtual"><scope>netnode</scope><name>check</name></member>
      <member refid="classnetnode_1a66a9ae9d803fbc50c2b58341bf0b8386" prot="public" virt="non-virtual"><scope>netnode</scope><name>copyto</name></member>
      <member refid="classnetnode_1ac384a479be1e5b1d5cbd4b305a77bd1d" prot="public" virt="non-virtual"><scope>netnode</scope><name>create</name></member>
      <member refid="classnetnode_1a8106a7da9e25c8df5e02cd62e91c1111" prot="public" virt="non-virtual"><scope>netnode</scope><name>create</name></member>
      <member refid="classnetnode_1a69d3953ab38655250e7f2d3e776964ca" prot="public" virt="non-virtual"><scope>netnode</scope><name>delblob</name></member>
      <member refid="classnetnode_1a23b73da2e3d91275e72d2d948d572416" prot="public" virt="non-virtual"><scope>netnode</scope><name>delblob_ea</name></member>
      <member refid="classnetnode_1abac449a9625ff3f69252f27690b2be48" prot="public" virt="non-virtual"><scope>netnode</scope><name>delvalue</name></member>
      <member refid="classnetnode_1a1f4d27b5e4c96ab661949580c264ca7d" prot="public" virt="non-virtual"><scope>netnode</scope><name>eadel</name></member>
      <member refid="classnetnode_1a55d6138f9804089275ea2af0bc7f0cbe" prot="public" virt="non-virtual"><scope>netnode</scope><name>eadel_idx8</name></member>
      <member refid="classnetnode_1acfbff1eac856a10afc49e0b56a8c27b0" prot="public" virt="non-virtual"><scope>netnode</scope><name>eaget</name></member>
      <member refid="classnetnode_1a8016746d8338e4ff0e14349b8a53ee49" prot="public" virt="non-virtual"><scope>netnode</scope><name>eaget_idx</name></member>
      <member refid="classnetnode_1a40bdd79f54f1ce212c8620ed65e4fadf" prot="public" virt="non-virtual"><scope>netnode</scope><name>eaget_idx8</name></member>
      <member refid="classnetnode_1ac50e98f884a348b1ce6e507d2a4d5936" prot="public" virt="non-virtual"><scope>netnode</scope><name>easet</name></member>
      <member refid="classnetnode_1afcf636887f40f2488aa8753146baec6d" prot="public" virt="non-virtual"><scope>netnode</scope><name>easet_idx</name></member>
      <member refid="classnetnode_1a74e8cf1d772e9ea1bd9d60db103d23ae" prot="public" virt="non-virtual"><scope>netnode</scope><name>easet_idx8</name></member>
      <member refid="classnetnode_1af65bbe7b18f852f6be06013223af2157" prot="public" virt="non-virtual"><scope>netnode</scope><name>end</name></member>
      <member refid="classnetnode_1a068ec9e5b9d414a27fe09df7cf9e9708" prot="public" virt="non-virtual"><scope>netnode</scope><name>exist</name></member>
      <member refid="classnetnode_1aafbfc4e994f450f555798fc94b61e2aa" prot="public" virt="non-virtual"><scope>netnode</scope><name>get_name</name></member>
      <member refid="classnetnode_1ab3a42c01f0192121c51ae39759fbddb4" prot="public" virt="non-virtual"><scope>netnode</scope><name>getblob</name></member>
      <member refid="classnetnode_1ae02adac47bf09699f0eac8ff933188de" prot="public" virt="non-virtual"><scope>netnode</scope><name>getblob</name></member>
      <member refid="classnetnode_1ac7757507f886d19903cee592d0871e53" prot="public" virt="non-virtual"><scope>netnode</scope><name>getblob</name></member>
      <member refid="classnetnode_1a05b43bc8813c143346d6b07be0a2db06" prot="public" virt="non-virtual"><scope>netnode</scope><name>getblob_ea</name></member>
      <member refid="classnetnode_1a64507384c710269fdb170eb1d254bbf6" prot="public" virt="non-virtual"><scope>netnode</scope><name>getblob_ea</name></member>
      <member refid="classnetnode_1a2e6b87843e7a53c63b76e4d7ee628e26" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashdel</name></member>
      <member refid="classnetnode_1a06b896e135ff29e561a001e791879a77" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashdel_all</name></member>
      <member refid="classnetnode_1a781710d011b33c34de40d40825474b9d" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashfirst</name></member>
      <member refid="classnetnode_1a07e290cc8c92d294c70c81d27e7c25a4" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashfirst</name></member>
      <member refid="classnetnode_1a4ccca361586e6a1d24bc205fc6d0e462" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashlast</name></member>
      <member refid="classnetnode_1a6241a71ee7002cb2819f3cf371f82677" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashlast</name></member>
      <member refid="classnetnode_1aca2ced5a6fef33f56b1116bab94e404e" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashnext</name></member>
      <member refid="classnetnode_1ae0b32641742d3ba38d9b2bfb9d2426fe" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashnext</name></member>
      <member refid="classnetnode_1a9502d89159c5ff530d4a3b8894bf88d9" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashprev</name></member>
      <member refid="classnetnode_1a3eee4ba048081822b60a60be8dd240cf" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashprev</name></member>
      <member refid="classnetnode_1a3e73712f3cc839fd3b2ab6a0747d1ab1" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashset</name></member>
      <member refid="classnetnode_1a3150ee15967404d29f5036e0f4f37169" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashset</name></member>
      <member refid="classnetnode_1af4a55fee57724479936c9bc9de91aae3" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashstr</name></member>
      <member refid="classnetnode_1a3acc8c4e81848e833f94f2c73caa40c5" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashstr</name></member>
      <member refid="classnetnode_1a94487290d6ba7402ecef29c7f8bc65e1" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashval</name></member>
      <member refid="classnetnode_1ab44f74a138ccfad2e0bd7266edef97cd" prot="public" virt="non-virtual"><scope>netnode</scope><name>hashval_long</name></member>
      <member refid="classnetnode_1abfaf65a77be85e543570d003aa8cab23" prot="public" virt="non-virtual"><scope>netnode</scope><name>inited</name></member>
      <member refid="classnetnode_1adff0f5ec77bf7e1ae625885bc973fae5" prot="public" virt="non-virtual"><scope>netnode</scope><name>kill</name></member>
      <member refid="classnetnode_1a9e8094943b1a7d506fa55fc133a82037" prot="public" virt="non-virtual"><scope>netnode</scope><name>link</name></member>
      <member refid="classnetnode_1ad9b4154f1ded0562304d050dad01b3c6" prot="public" virt="non-virtual"><scope>netnode</scope><name>linkspec</name></member>
      <member refid="classnetnode_1a61721ff551527b06d128dca96c9f4849" prot="public" virt="non-virtual"><scope>netnode</scope><name>long_value</name></member>
      <member refid="classnetnode_1a436108393b0d5ba53c2a1f8254906b5f" prot="public" virt="non-virtual"><scope>netnode</scope><name>lower_bound</name></member>
      <member refid="classnetnode_1a3554f090f45e92d73a10b6e3c4aa34b6" prot="public" virt="non-virtual"><scope>netnode</scope><name>lower_bound_ea</name></member>
      <member refid="classnetnode_1a74ad813301f0f542b2c1c09da67bd18b" prot="public" virt="non-virtual"><scope>netnode</scope><name>lower_bound_idx8</name></member>
      <member refid="classnetnode_1ad9b3d2c41fa7eddacc9a886524c79a94" prot="public" virt="non-virtual"><scope>netnode</scope><name>moveto</name></member>
      <member refid="classnetnode_1a87b9bf7c4d490d4a3846a170a09a1df5" prot="public" virt="non-virtual"><scope>netnode</scope><name>netnode</name></member>
      <member refid="classnetnode_1a7c9f14edd6e05f462e50f83e3e311fae" prot="public" virt="non-virtual"><scope>netnode</scope><name>netnode</name></member>
      <member refid="classnetnode_1a2bce30734bdec4cb4f50fd5608dd72d4" prot="public" virt="non-virtual"><scope>netnode</scope><name>netnode</name></member>
      <member refid="classnetnode_1a0a42beca4447cf6a14c9b0fd15cfe922" prot="public" virt="non-virtual"><scope>netnode</scope><name>netnode_exist</name></member>
      <member refid="classnetnode_1a7707281275d49dc66e2d7dd4d0594f01" prot="private" virt="non-virtual"><scope>netnode</scope><name>netnodenumber</name></member>
      <member refid="classnetnode_1a988dbd86ebdc8fa249f6343c3ad729ae" prot="public" virt="non-virtual"><scope>netnode</scope><name>next</name></member>
      <member refid="classnetnode_1a9b6ba5f86b2642479de6392dcd8f25ed" prot="public" virt="non-virtual"><scope>netnode</scope><name>operator nodeidx_t</name></member>
      <member refid="classnetnode_1ab1b42c0c0bf156126742ae20bb210b14" prot="public" virt="non-virtual"><scope>netnode</scope><name>operator!=</name></member>
      <member refid="classnetnode_1abfbb7057db622c31fb4c9e379463a37c" prot="public" virt="non-virtual"><scope>netnode</scope><name>operator!=</name></member>
      <member refid="classnetnode_1a71cc0d60c655c808887301eadd1d5020" prot="public" virt="non-virtual"><scope>netnode</scope><name>operator==</name></member>
      <member refid="classnetnode_1a9de43f1a2e2bca4f87a417dc7edc5ee0" prot="public" virt="non-virtual"><scope>netnode</scope><name>operator==</name></member>
      <member refid="classnetnode_1a5f92d582b6b8d492356204027238d5e7" prot="public" virt="non-virtual"><scope>netnode</scope><name>prev</name></member>
      <member refid="classnetnode_1aa6fb55f0aeeb151119f5bea132212ab3" prot="private" virt="non-virtual"><scope>netnode</scope><name>qsupset</name></member>
      <member refid="classnetnode_1a5a49e2e44c3e08c7f7f2ab9fc8afd84b" prot="private" virt="non-virtual"><scope>netnode</scope><name>qsupval</name></member>
      <member refid="classnetnode_1a488aa5c55e53b8373e66d554b29945ea" prot="public" virt="non-virtual"><scope>netnode</scope><name>rename</name></member>
      <member refid="classnetnode_1a275c5c24c24eac6ce8a6a758c6b99efb" prot="public" virt="non-virtual"><scope>netnode</scope><name>set</name></member>
      <member refid="classnetnode_1a64ae447ad8cf8f3a1d5b38c282f54674" prot="public" virt="non-virtual"><scope>netnode</scope><name>set_long</name></member>
      <member refid="classnetnode_1a34876bc4629bf260ea4271ee382aacf4" prot="public" virt="non-virtual"><scope>netnode</scope><name>setblob</name></member>
      <member refid="classnetnode_1afed1632f4f1c63b2103000ac3bfedbe1" prot="public" virt="non-virtual"><scope>netnode</scope><name>setblob_ea</name></member>
      <member refid="classnetnode_1a1859569dc7330a3145478399d29ec379" prot="public" virt="non-virtual"><scope>netnode</scope><name>start</name></member>
      <member refid="classnetnode_1a201b30d018d09050f9192f0deb191062" prot="public" virt="non-virtual"><scope>netnode</scope><name>supdel</name></member>
      <member refid="classnetnode_1ad5235083bc990e0d878c5c7de28d8fe0" prot="public" virt="non-virtual"><scope>netnode</scope><name>supdel</name></member>
      <member refid="classnetnode_1aa64845a0b4c5ac528db4d70d9cf686eb" prot="public" virt="non-virtual"><scope>netnode</scope><name>supdel_all</name></member>
      <member refid="classnetnode_1a04cb7ab516b273a9a2198f05f206abe8" prot="public" virt="non-virtual"><scope>netnode</scope><name>supdel_ea</name></member>
      <member refid="classnetnode_1ab72d7fab751ddd4e4f7a28c9095ed8d1" prot="public" virt="non-virtual"><scope>netnode</scope><name>supdel_idx8</name></member>
      <member refid="classnetnode_1ab3fd65f0c25e23ea5bac46b7254fe46a" prot="public" virt="non-virtual"><scope>netnode</scope><name>supdel_range</name></member>
      <member refid="classnetnode_1ac4acd90886a8f6b096b35b8987893d98" prot="public" virt="non-virtual"><scope>netnode</scope><name>supdel_range_idx8</name></member>
      <member refid="classnetnode_1afe399e9b776d7a9a0acee7c744a356ac" prot="public" virt="non-virtual"><scope>netnode</scope><name>supfirst</name></member>
      <member refid="classnetnode_1a5eec96266acf5082501632928040639a" prot="public" virt="non-virtual"><scope>netnode</scope><name>supfirst_idx8</name></member>
      <member refid="classnetnode_1a4d7434722d5df238699353ac108ee1db" prot="public" virt="non-virtual"><scope>netnode</scope><name>suplast</name></member>
      <member refid="classnetnode_1aaa61b8b699e666d9764379b33db30494" prot="public" virt="non-virtual"><scope>netnode</scope><name>suplast_idx8</name></member>
      <member refid="classnetnode_1af812e0dca86345918c2b98d6d0f42d75" prot="public" virt="non-virtual"><scope>netnode</scope><name>supnext</name></member>
      <member refid="classnetnode_1a8dbaa9dfc0e4fe32265e06c4336a49b1" prot="public" virt="non-virtual"><scope>netnode</scope><name>supnext_idx8</name></member>
      <member refid="classnetnode_1a90d9ecac5351752a10ea3010e6538439" prot="public" virt="non-virtual"><scope>netnode</scope><name>supprev</name></member>
      <member refid="classnetnode_1ad441ff8206ab75eb42132fbd7a520767" prot="public" virt="non-virtual"><scope>netnode</scope><name>supprev_idx8</name></member>
      <member refid="classnetnode_1ad6b099bc586fc052bcdc1e9ec4960626" prot="public" virt="non-virtual"><scope>netnode</scope><name>supset</name></member>
      <member refid="classnetnode_1a6405f04a7e9979748a7f11417b78df29" prot="public" virt="non-virtual"><scope>netnode</scope><name>supset_ea</name></member>
      <member refid="classnetnode_1abef0d668e75fd81bf4af8c7cb75ed4b4" prot="public" virt="non-virtual"><scope>netnode</scope><name>supset_idx8</name></member>
      <member refid="classnetnode_1ab6d79271d16cbf4e1afefde9f0d15cd5" prot="public" virt="non-virtual"><scope>netnode</scope><name>supshift</name></member>
      <member refid="classnetnode_1a52dc5b4115f49917af4fcf68f82bcbc8" prot="public" virt="non-virtual"><scope>netnode</scope><name>supstr</name></member>
      <member refid="classnetnode_1aa4de5434452f8470f35cb0f234a36a8b" prot="public" virt="non-virtual"><scope>netnode</scope><name>supstr</name></member>
      <member refid="classnetnode_1a82bc28b9b4fe53266bbb52096382732c" prot="public" virt="non-virtual"><scope>netnode</scope><name>supstr_ea</name></member>
      <member refid="classnetnode_1a7d003b49ab6aab40ade94f43bbe6be29" prot="public" virt="non-virtual"><scope>netnode</scope><name>supstr_ea</name></member>
      <member refid="classnetnode_1ac740167bfc4bb19ecb3e80a342f25793" prot="public" virt="non-virtual"><scope>netnode</scope><name>supstr_idx8</name></member>
      <member refid="classnetnode_1a9d317621569e4a88691310019b5056a4" prot="public" virt="non-virtual"><scope>netnode</scope><name>supstr_idx8</name></member>
      <member refid="classnetnode_1a4778b40eae5752fbf1ccff356713c7dd" prot="public" virt="non-virtual"><scope>netnode</scope><name>supval</name></member>
      <member refid="classnetnode_1a51b954b6c60cf60ee47189462f8798a8" prot="public" virt="non-virtual"><scope>netnode</scope><name>supval_ea</name></member>
      <member refid="classnetnode_1a625360c946e801428ea1be02a0f85fe8" prot="public" virt="non-virtual"><scope>netnode</scope><name>supval_idx8</name></member>
      <member refid="classnetnode_1a0f6688c3c3a393c59721f109284f4fb6" prot="public" virt="non-virtual"><scope>netnode</scope><name>unlink</name></member>
      <member refid="classnetnode_1ac7ce35300520a995fbe06c8c6d1cc472" prot="public" virt="non-virtual"><scope>netnode</scope><name>valobj</name></member>
      <member refid="classnetnode_1a949151701f6165be21af02f63149044d" prot="public" virt="non-virtual"><scope>netnode</scope><name>valstr</name></member>
      <member refid="classnetnode_1afdeafc950dcdaaa0b73a5df735447c06" prot="public" virt="non-virtual"><scope>netnode</scope><name>valstr</name></member>
      <member refid="classnetnode_1af9646611caff1991a62e8fb78ec234cd" prot="public" virt="non-virtual"><scope>netnode</scope><name>value_exists</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
