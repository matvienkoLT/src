<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="typeinf_8hpp" kind="file" language="C++">
    <compoundname>typeinf.hpp</compoundname>
    <includes refid="idp_8hpp" local="no">idp.hpp</includes>
    <includes refid="name_8hpp" local="no">name.hpp</includes>
    <includedby refid="lumina_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/lumina.hpp</includedby>
    <includedby refid="hexrays_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp</includedby>
    <includedby refid="intel_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/intel.hpp</includedby>
    <incdepgraph>
      <node id="1470">
        <label>sys/stat.h</label>
      </node>
      <node id="1454">
        <label>stdarg.h</label>
      </node>
      <node id="1457">
        <label>assert.h</label>
      </node>
      <node id="1473">
        <label>ida.hpp</label>
        <link refid="ida_8hpp"/>
        <childnode refid="1452" relation="include">
        </childnode>
        <childnode refid="1474" relation="include">
        </childnode>
      </node>
      <node id="1453">
        <label>stdlib.h</label>
      </node>
      <node id="1480">
        <label>ua.hpp</label>
        <link refid="ua_8hpp"/>
        <childnode refid="1481" relation="include">
        </childnode>
        <childnode refid="1479" relation="include">
        </childnode>
        <childnode refid="1482" relation="include">
        </childnode>
        <childnode refid="1478" relation="include">
        </childnode>
      </node>
      <node id="1483">
        <label>bitrange.hpp</label>
        <link refid="bitrange_8hpp"/>
      </node>
      <node id="1465">
        <label>io.h</label>
      </node>
      <node id="1468">
        <label>fcntl.h</label>
      </node>
      <node id="1471">
        <label>llong.hpp</label>
        <link refid="llong_8hpp_source"/>
      </node>
      <node id="1463">
        <label>malloc.h</label>
      </node>
      <node id="1462">
        <label>string</label>
      </node>
      <node id="1467">
        <label>map</label>
      </node>
      <node id="1450">
        <label>idp.hpp</label>
        <link refid="idp_8hpp"/>
        <childnode refid="1451" relation="include">
        </childnode>
        <childnode refid="1472" relation="include">
        </childnode>
        <childnode refid="1476" relation="include">
        </childnode>
        <childnode refid="1477" relation="include">
        </childnode>
        <childnode refid="1480" relation="include">
        </childnode>
        <childnode refid="1483" relation="include">
        </childnode>
        <childnode refid="1484" relation="include">
        </childnode>
      </node>
      <node id="1466">
        <label>direct.h</label>
      </node>
      <node id="1455">
        <label>stddef.h</label>
      </node>
      <node id="1472">
        <label>nalt.hpp</label>
        <link refid="nalt_8hpp"/>
        <childnode refid="1473" relation="include">
        </childnode>
        <childnode refid="1475" relation="include">
        </childnode>
      </node>
      <node id="1479">
        <label>lines.hpp</label>
        <link refid="lines_8hpp"/>
        <childnode refid="1473" relation="include">
        </childnode>
      </node>
      <node id="1485">
        <label>name.hpp</label>
        <link refid="name_8hpp"/>
        <childnode refid="1473" relation="include">
        </childnode>
      </node>
      <node id="1458">
        <label>limits.h</label>
      </node>
      <node id="1469">
        <label>sys/types.h</label>
      </node>
      <node id="1464">
        <label>string.h</label>
      </node>
      <node id="1461">
        <label>new</label>
      </node>
      <node id="1482">
        <label>xref.hpp</label>
        <link refid="xref_8hpp"/>
      </node>
      <node id="1477">
        <label>funcs.hpp</label>
        <link refid="funcs_8hpp"/>
        <childnode refid="1474" relation="include">
        </childnode>
        <childnode refid="1478" relation="include">
        </childnode>
      </node>
      <node id="1452">
        <label>pro.h</label>
        <link refid="pro_8h"/>
        <childnode refid="1453" relation="include">
        </childnode>
        <childnode refid="1454" relation="include">
        </childnode>
        <childnode refid="1455" relation="include">
        </childnode>
        <childnode refid="1456" relation="include">
        </childnode>
        <childnode refid="1457" relation="include">
        </childnode>
        <childnode refid="1458" relation="include">
        </childnode>
        <childnode refid="1459" relation="include">
        </childnode>
        <childnode refid="1460" relation="include">
        </childnode>
        <childnode refid="1461" relation="include">
        </childnode>
        <childnode refid="1462" relation="include">
        </childnode>
        <childnode refid="1463" relation="include">
        </childnode>
        <childnode refid="1464" relation="include">
        </childnode>
        <childnode refid="1465" relation="include">
        </childnode>
        <childnode refid="1466" relation="include">
        </childnode>
        <childnode refid="1467" relation="include">
        </childnode>
        <childnode refid="1468" relation="include">
        </childnode>
        <childnode refid="1469" relation="include">
        </childnode>
        <childnode refid="1470" relation="include">
        </childnode>
        <childnode refid="1471" relation="include">
        </childnode>
      </node>
      <node id="1476">
        <label>segment.hpp</label>
        <link refid="segment_8hpp"/>
        <childnode refid="1473" relation="include">
        </childnode>
        <childnode refid="1474" relation="include">
        </childnode>
      </node>
      <node id="1460">
        <label>time.h</label>
      </node>
      <node id="1451">
        <label>fpro.h</label>
        <link refid="fpro_8h"/>
        <childnode refid="1452" relation="include">
        </childnode>
        <childnode refid="1456" relation="include">
        </childnode>
      </node>
      <node id="1484">
        <label>config.hpp</label>
        <link refid="config_8hpp_source"/>
      </node>
      <node id="1478">
        <label>bytes.hpp</label>
        <link refid="bytes_8hpp"/>
        <childnode refid="1472" relation="include">
        </childnode>
        <childnode refid="1479" relation="include">
        </childnode>
        <childnode refid="1474" relation="include">
        </childnode>
      </node>
      <node id="1459">
        <label>ctype.h</label>
      </node>
      <node id="1474">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
      </node>
      <node id="1449">
        <label>obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp</label>
        <link refid="typeinf_8hpp"/>
        <childnode refid="1450" relation="include">
        </childnode>
        <childnode refid="1485" relation="include">
        </childnode>
      </node>
      <node id="1475">
        <label>netnode.hpp</label>
        <link refid="netnode_8hpp"/>
        <childnode refid="1474" relation="include">
        </childnode>
      </node>
      <node id="1481">
        <label>kernwin.hpp</label>
        <link refid="kernwin_8hpp"/>
      </node>
      <node id="1456">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1489">
        <label>obj/x64_linux_gcc_32_opt/idasdk/intel.hpp</label>
        <link refid="intel_8hpp_source"/>
      </node>
      <node id="1486">
        <label>obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp</label>
        <link refid="typeinf_8hpp"/>
        <childnode refid="1487" relation="include">
        </childnode>
        <childnode refid="1488" relation="include">
        </childnode>
        <childnode refid="1489" relation="include">
        </childnode>
      </node>
      <node id="1488">
        <label>obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp</label>
        <link refid="hexrays_8hpp_source"/>
      </node>
      <node id="1487">
        <label>obj/x64_linux_gcc_32_opt/idasdk/lumina.hpp</label>
        <link refid="lumina_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structtype__attr__t" prot="public">type_attr_t</innerclass>
    <innerclass refid="structtil__t" prot="public">til_t</innerclass>
    <innerclass refid="structrrel__t" prot="public">rrel_t</innerclass>
    <innerclass refid="structcustloc__desc__t" prot="public">custloc_desc_t</innerclass>
    <innerclass refid="classargloc__t" prot="public">argloc_t</innerclass>
    <innerclass refid="structargpart__t" prot="public">argpart_t</innerclass>
    <innerclass refid="classscattered__aloc__t" prot="public">scattered_aloc_t</innerclass>
    <innerclass refid="structaloc__visitor__t" prot="public">aloc_visitor_t</innerclass>
    <innerclass refid="structconst__aloc__visitor__t" prot="public">const_aloc_visitor_t</innerclass>
    <innerclass refid="classcallregs__t" prot="public">callregs_t</innerclass>
    <innerclass refid="classtinfo__t" prot="public">tinfo_t</innerclass>
    <innerclass refid="structsimd__info__t" prot="public">simd_info_t</innerclass>
    <innerclass refid="structptr__type__data__t" prot="public">ptr_type_data_t</innerclass>
    <innerclass refid="structarray__type__data__t" prot="public">array_type_data_t</innerclass>
    <innerclass refid="structfuncarg__t" prot="public">funcarg_t</innerclass>
    <innerclass refid="structfunc__type__data__t" prot="public">func_type_data_t</innerclass>
    <innerclass refid="structenum__member__t" prot="public">enum_member_t</innerclass>
    <innerclass refid="structenum__type__data__t" prot="public">enum_type_data_t</innerclass>
    <innerclass refid="structtypedef__type__data__t" prot="public">typedef_type_data_t</innerclass>
    <innerclass refid="structudt__member__t" prot="public">udt_member_t</innerclass>
    <innerclass refid="structudt__type__data__t" prot="public">udt_type_data_t</innerclass>
    <innerclass refid="structbitfield__type__data__t" prot="public">bitfield_type_data_t</innerclass>
    <innerclass refid="structtype__mods__t" prot="public">type_mods_t</innerclass>
    <innerclass refid="structtinfo__visitor__t" prot="public">tinfo_visitor_t</innerclass>
    <innerclass refid="structregobj__t" prot="public">regobj_t</innerclass>
    <innerclass refid="structregobjs__t" prot="public">regobjs_t</innerclass>
    <innerclass refid="classlowertype__helper__t" prot="public">lowertype_helper_t</innerclass>
    <innerclass refid="classida__lowertype__helper__t" prot="public">ida_lowertype_helper_t</innerclass>
    <innerclass refid="structformat__data__info__t" prot="public">format_data_info_t</innerclass>
    <innerclass refid="structvalinfo__t" prot="public">valinfo_t</innerclass>
    <innerclass refid="classvalstr__t" prot="public">valstr_t</innerclass>
    <innerclass refid="structvalstr__t_1_1flatten__args__t" prot="private">valstr_t::flatten_args_t</innerclass>
    <innerclass refid="structvalstrs__t" prot="public">valstrs_t</innerclass>
    <innerclass refid="structtext__sink__t" prot="public">text_sink_t</innerclass>
    <innerclass refid="structtil__symbol__t" prot="public">til_symbol_t</innerclass>
    <innerclass refid="structpredicate__t" prot="public">predicate_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="typeinf_8hpp_1a8ac9fa3da7151dc5ffd9fbf0563a9417" prot="public" static="no">
        <name>RESERVED_BYTE</name>
        <initializer>0xFF</initializer>
        <briefdescription>
<para>multifunctional purpose </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="44" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr_1ga4d014aaf0adefbc58fe6f6331ce7463f" prot="public" static="no">
        <name>TAH_BYTE</name>
        <initializer>0xFE</initializer>
        <briefdescription>
<para>type attribute header byte </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="452" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr_1gab68b66c0853e4271d2ab199fa3a50f3f" prot="public" static="no">
        <name>FAH_BYTE</name>
        <initializer>0xFF</initializer>
        <briefdescription>
<para>function argument attribute header byte </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="453" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr_1ga82df752b4c58e1cd29da4c2d4fbac83f" prot="public" static="no">
        <name>MAX_DECL_ALIGN</name>
        <initializer>0x000F</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="455" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr__ext_1ga916d3ac71d35862753a03da1dad9ae3f" prot="public" static="no">
        <name>TAH_HASATTRS</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para>has extended attributes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="459" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr__udt_1ga81ae2c2bf042458d4fc491cfd36a1911" prot="public" static="no">
        <name>TAUDT_UNALIGNED</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para>struct: unaligned struct </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="464" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="464" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr__udt_1ga83281db9fdbee27bcda12845c5e4a864" prot="public" static="no">
        <name>TAUDT_MSSTRUCT</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>struct: gcc msstruct attribute </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="465" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="465" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr__udt_1gab368afc5cc062fe59b4c983d1b630dbd" prot="public" static="no">
        <name>TAUDT_CPPOBJ</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>struct: a c++ object, not simple pod type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="466" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr__udt_1ga7472d4a2330849f0f77a3dbd4fafa895" prot="public" static="no">
        <name>TAUDT_VFTABLE</name>
        <initializer>0x0100</initializer>
        <briefdescription>
<para>struct: is virtual function table </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="467" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr__field_1ga0ab00c307a36c53a11b2dbcf7d727b88" prot="public" static="no">
        <name>TAFLD_BASECLASS</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>field: do not include but inherit from the current field </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="472" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="472" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr__field_1ga00b7e17baf9740c9798df7f0cf4d2aeb" prot="public" static="no">
        <name>TAFLD_UNALIGNED</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para>field: unaligned field </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="473" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr__field_1gaf8e55aa9978345a61f18ccdedc773d4a" prot="public" static="no">
        <name>TAFLD_VIRTBASE</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>field: virtual base (not supported yet) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="474" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="474" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr__field_1ga9061798631889a6bfc3aaf846266cc02" prot="public" static="no">
        <name>TAFLD_VFTABLE</name>
        <initializer>0x0100</initializer>
        <briefdescription>
<para>field: ptr to virtual function table </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="475" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr__ptr_1gaf777c7d25915e872577ad083a7d41c72" prot="public" static="no">
        <name>TAPTR_PTR32</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>ptr: __ptr32 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="480" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr__ptr_1ga1fc50904a31ca70cc52336b97a79f7ba" prot="public" static="no">
        <name>TAPTR_PTR64</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para>ptr: __ptr64 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="481" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr__ptr_1gab402eeeb093941cab4c5591b9493d59d" prot="public" static="no">
        <name>TAPTR_RESTRICT</name>
        <initializer>0x0060</initializer>
        <briefdescription>
<para>ptr: __restrict </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="482" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="482" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr__ptr_1ga9fc0e4c4ae2bec591baa6c19ab7d6f02" prot="public" static="no">
        <name>TAPTR_SHIFTED</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>ptr: __shifted(parent_struct, delta) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="483" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr__enum_1ga31fa401c2f279d191558e81c4f331f76" prot="public" static="no">
        <name>TAENUM_64BIT</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>enum: store 64-bit values </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="488" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__tattr_1gae3c9c788d7c5c02a4159bd84cc2bccf8" prot="public" static="no">
        <name>TAH_ALL</name>
        <initializer>0x01F0</initializer>
        <briefdescription>
<para>all defined bits </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="491" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="491" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_l___1ga5f8e20be490cde97b1bee4d26d513b13" prot="public" static="no">
        <name>TIL_ZIP</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>pack buckets using zip </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="617" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_l___1ga1f74661c533ae3f9e912d2407a5cf789" prot="public" static="no">
        <name>TIL_MAC</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>til has macro table </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="618" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="618" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_l___1gabc0f0ec96c78c8d64826acda52858e7a" prot="public" static="no">
        <name>TIL_ESI</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>extended sizeof info (short, long, longlong) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="619" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_l___1ga3a557dd3f34c36916e9efd02761a14e0" prot="public" static="no">
        <name>TIL_UNI</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>universal til for any compiler </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="620" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="620" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_l___1gaab7d816683f98e6d7f2818b580722988" prot="public" static="no">
        <name>TIL_ORD</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para>type ordinal numbers are present </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="621" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_l___1ga72bbc047d02e335aaddeef63e9ea2f29" prot="public" static="no">
        <name>TIL_ALI</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>type aliases are present (this bit is used only on the disk) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="622" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="622" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_l___1gaff79474fab46b219eb0c3742ad8a7760" prot="public" static="no">
        <name>TIL_MOD</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para>til has been modified, should be saved </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="623" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="623" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_l___1gad0e55d20cec4a151520a8cd2f6a75331" prot="public" static="no">
        <name>TIL_STM</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>til has extra streams </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="624" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="624" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_l___1ga052bbb807f2442e196a3491cb0999399" prot="public" static="no">
        <name>TIL_SLD</name>
        <initializer>0x0100</initializer>
        <briefdescription>
<para>sizeof(long double) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="625" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="625" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_l___a_d_d___1ga7ce913832e5d048d6f27551fb01b0f19" prot="public" static="no">
        <name>TIL_ADD_FAILED</name>
        <initializer>0</initializer>
        <briefdescription>
<para>see errbuf </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="660" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_l___a_d_d___1ga03512c4fb24398232153bf591a68dee7" prot="public" static="no">
        <name>TIL_ADD_OK</name>
        <initializer>1</initializer>
        <briefdescription>
<para>some tils were added </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="661" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_l___a_d_d___1gaada17fd23631b72662f75c17f6474fc5" prot="public" static="no">
        <name>TIL_ADD_ALREADY</name>
        <initializer>2</initializer>
        <briefdescription>
<para>the base til was already added </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="662" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="662" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1a1065a51e16a3c2c241ab10e9d2b87b07" prot="public" static="no">
        <name>ARGLOC_HELPER_DEFINITIONS</name>
        <param><defname>decl</defname></param>
        <initializer>decl void ida_export copy_argloc(<ref refid="classargloc__t" kindref="compound">argloc_t</ref> *dst, const <ref refid="classargloc__t" kindref="compound">argloc_t</ref> *src); \
decl void ida_export cleanup_argloc(<ref refid="classargloc__t" kindref="compound">argloc_t</ref> *vloc);\
decl int ida_export compare_arglocs(const <ref refid="classargloc__t" kindref="compound">argloc_t</ref> &amp;a, const <ref refid="classargloc__t" kindref="compound">argloc_t</ref> &amp;b);</initializer>
        <briefdescription>
<para>Helper to declare common <ref refid="classargloc__t" kindref="compound">argloc_t</ref> related functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="791" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="791" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__argloc_1gad116a63144af8d2ec22c38fe52a83afc" prot="public" static="no">
        <name>PRALOC_VERIFY</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para>interr if illegal argloc </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1206" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__argloc_1ga51017e98e13d8514261572bba7766e75" prot="public" static="no">
        <name>PRALOC_STKOFF</name>
        <initializer>0x02</initializer>
        <briefdescription>
<para>print stack offsets </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1207" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_e_t_c_o_m_p___1gad56c8127b00e8320c3d8d055b28febf1" prot="public" static="no">
        <name>SETCOMP_OVERRIDE</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>may override old compiler info </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1484" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1484" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_e_t_c_o_m_p___1gaaeecd262c386f90bffb8b60a17fc1e69" prot="public" static="no">
        <name>SETCOMP_ONLY_ID</name>
        <initializer>0x0002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>cc has only &apos;id&apos; field the rest will be set to defaults corresponding to the program bitness </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1485" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1485" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_e_t_c_o_m_p___1ga4ac2eeb3b722e6839795598d40beaa24" prot="public" static="no">
        <name>SETCOMP_ONLY_ABI</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>ignore cc field complete, use only abiname </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1488" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1488" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_e_t_c_o_m_p___1ga79055d3e62cc32d2178681d62dadcc2d" prot="public" static="no">
        <name>SETCOMP_BY_USER</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>invoked by user, can not be replaced by module/loader </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1489" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1489" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1a37518bc74bd0a87c02ca65a1fe8a5842" prot="public" static="no">
        <name>MAX_FUNC_ARGS</name>
        <initializer>256</initializer>
        <briefdescription>
<para>max number of function arguments </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1536" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1536" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga49cce1e1fc7eabd7b9eed24de066fb45" prot="public" static="no">
        <name>HTI_CPP</name>
        <initializer>0x00000001</initializer>
        <briefdescription>
<para>C++ mode (not implemented) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1559" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1559" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga4dbb0ec83121e0da97f2a3d5f8004adf" prot="public" static="no">
        <name>HTI_INT</name>
        <initializer>0x00000002</initializer>
        <briefdescription>
<para>debug: print internal representation of types </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1560" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1560" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1gadbca1dd0a7f2e5018f5cae7a25368c32" prot="public" static="no">
        <name>HTI_EXT</name>
        <initializer>0x00000004</initializer>
        <briefdescription>
<para>debug: print external representation of types </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1561" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1561" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1gaa54721f91611a9e1204882276172b1b8" prot="public" static="no">
        <name>HTI_LEX</name>
        <initializer>0x00000008</initializer>
        <briefdescription>
<para>debug: print tokens </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1562" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1562" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga707bfb6bc9b4b8ae415124f0fbae003a" prot="public" static="no">
        <name>HTI_UNP</name>
        <initializer>0x00000010</initializer>
        <briefdescription>
<para>debug: check the result by unpacking it </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1563" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1563" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga4a519695c936b5be4f4f980abf6a6067" prot="public" static="no">
        <name>HTI_TST</name>
        <initializer>0x00000020</initializer>
        <briefdescription>
<para>test mode: discard the result </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1564" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1gaba1213cf554de359b9ee23ab2bd4da40" prot="public" static="no">
        <name>HTI_FIL</name>
        <initializer>0x00000040</initializer>
        <briefdescription>
<para>otherwise &quot;input&quot; contains a C declaration </para>        </briefdescription>
        <detaileddescription>
<para>&quot;input&quot; is file name, </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1565" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1565" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga5c9bd5e9585c1eb1faab1575c535c115" prot="public" static="no">
        <name>HTI_MAC</name>
        <initializer>0x00000080</initializer>
        <briefdescription>
<para>define macros from the base tils </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1567" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1567" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1gad26c399e91cd381483f91ef070f2ff37" prot="public" static="no">
        <name>HTI_NWR</name>
        <initializer>0x00000100</initializer>
        <briefdescription>
<para>no warning messages </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1568" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1568" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1gad26c5cf9257e85b6ec981e43dc6fc7e4" prot="public" static="no">
        <name>HTI_NER</name>
        <initializer>0x00000200</initializer>
        <briefdescription>
<para>ignore all errors but display them </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1569" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1569" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga7eadeea97aa05317c41e939b70714a56" prot="public" static="no">
        <name>HTI_DCL</name>
        <initializer>0x00000400</initializer>
        <briefdescription>
<para>don&apos;t complain about redeclarations </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1570" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1570" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga162a5cfcabc80d65c8e50a4c36c68b3e" prot="public" static="no">
        <name>HTI_NDC</name>
        <initializer>0x00000800</initializer>
        <briefdescription>
<para>don&apos;t decorate names </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1571" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1571" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1gadf2bfd701e01e14726882db806328b93" prot="public" static="no">
        <name>HTI_PAK</name>
        <initializer>0x00007000</initializer>
        <briefdescription>
<para>explicit structure pack value (#pragma pack) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1572" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga01db4a44ee642c8b9cb2fc022c9ee615" prot="public" static="no">
        <name>HTI_PAK_SHIFT</name>
        <initializer>12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>shift for <ref refid="group___h_t_i___1gadf2bfd701e01e14726882db806328b93" kindref="member">HTI_PAK</ref>. This field should be used if you want to remember an explicit pack value for each structure/union type. See <ref refid="group___h_t_i___1gadf2bfd701e01e14726882db806328b93" kindref="member">HTI_PAK</ref>... definitions </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1573" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1573" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga04f214d59147447ad7fd889d4287d216" prot="public" static="no">
        <name>HTI_PAKDEF</name>
        <initializer>0x00000000</initializer>
        <briefdescription>
<para>default pack value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1577" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1577" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga3e27d22a23d0b4424fcb397f8a8bd0fa" prot="public" static="no">
        <name>HTI_PAK1</name>
        <initializer>0x00001000</initializer>
        <briefdescription>
<para>#pragma pack(1) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1578" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1578" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga51bbc6117e0f39f556ecf367ea5efd5e" prot="public" static="no">
        <name>HTI_PAK2</name>
        <initializer>0x00002000</initializer>
        <briefdescription>
<para>#pragma pack(2) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1579" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga9f1ac9d3ee42f13f54139d4835e290f1" prot="public" static="no">
        <name>HTI_PAK4</name>
        <initializer>0x00003000</initializer>
        <briefdescription>
<para>#pragma pack(4) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1580" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1580" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1gad316fbc28b048f2e5c44249026791f8c" prot="public" static="no">
        <name>HTI_PAK8</name>
        <initializer>0x00004000</initializer>
        <briefdescription>
<para>#pragma pack(8) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1581" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1581" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga78a272c42dee0ca7a79e087587573688" prot="public" static="no">
        <name>HTI_PAK16</name>
        <initializer>0x00005000</initializer>
        <briefdescription>
<para>#pragma pack(16) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1582" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga1a2d19a5da522effe48cfe67e14fc479" prot="public" static="no">
        <name>HTI_HIGH</name>
        <initializer>0x00008000</initializer>
        <briefdescription>
<para>(with hidden args, etc) </para>        </briefdescription>
        <detaileddescription>
<para>assume high level prototypes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1584" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1584" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga10ab57fb403189b513dc0af7286383d9" prot="public" static="no">
        <name>HTI_LOWER</name>
        <initializer>0x00010000</initializer>
        <briefdescription>
<para>lower the function prototypes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1586" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1586" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___h_t_i___1ga2236cc615e41a0bc67e86a93ed82fb46" prot="public" static="no">
        <name>HTI_RAWARGS</name>
        <initializer>0x00020000</initializer>
        <briefdescription>
<para>leave argument names unchanged (do not remove underscores) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1587" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1587" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t___1gadd54cb3cb262adaa24e8e0a064db915c" prot="public" static="no">
        <name>PT_SIL</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>silent, no messages </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1658" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t___1ga57609d69c3433c3a5e4a7cfcf33ceaeb" prot="public" static="no">
        <name>PT_NDC</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>don&apos;t decorate names </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1659" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1659" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t___1ga275f154b9415ddab5d773d3f2ce48a30" prot="public" static="no">
        <name>PT_TYP</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>return declared type information </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1660" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t___1ga2372a33ffe07dcfaae46a1873a453e8f" prot="public" static="no">
        <name>PT_VAR</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>return declared object information </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1661" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1661" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t___1ga218f8fa41b94eb9d4065d2a6e70ca991" prot="public" static="no">
        <name>PT_PACKMASK</name>
        <initializer>0x0070</initializer>
        <briefdescription>
<para>mask for pack alignment values </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1662" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1662" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t___1gac6284f488e8820aee39aa19cfab3c583" prot="public" static="no">
        <name>PT_HIGH</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>(with hidden args, etc) </para>        </briefdescription>
        <detaileddescription>
<para>assume high level prototypes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1663" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1663" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t___1ga8d8c7cbf15346f19cfab0634f38668b3" prot="public" static="no">
        <name>PT_LOWER</name>
        <initializer>0x0100</initializer>
        <briefdescription>
<para>lower the function prototypes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1665" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1665" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t___1gab04abaa7e18028fd14722db3ca00f900" prot="public" static="no">
        <name>PT_REPLACE</name>
        <initializer>0x0200</initializer>
        <briefdescription>
<para>replace the old type (used in idc) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1666" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1666" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t___1ga596fed0e18a485e36cc46e6f3d4961ba" prot="public" static="no">
        <name>PT_RAWARGS</name>
        <initializer>0x0400</initializer>
        <briefdescription>
<para>leave argument names unchanged (do not remove underscores) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1667" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1667" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_r_t_y_p_e___1gab3719af59224847206f30d143bc0decb" prot="public" static="no">
        <name>PRTYPE_1LINE</name>
        <initializer>0x0000</initializer>
        <briefdescription>
<para>print to one line </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1709" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1709" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_r_t_y_p_e___1gab647e3d3753c1c87cf1143ca1202f1a3" prot="public" static="no">
        <name>PRTYPE_MULTI</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>print to many lines </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1710" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1710" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_r_t_y_p_e___1ga56f70431b8da99f5cae4aa98fd93e6be" prot="public" static="no">
        <name>PRTYPE_TYPE</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>print type declaration (not variable declaration) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1711" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1711" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_r_t_y_p_e___1gae564107f5a98219d717438e18213095e" prot="public" static="no">
        <name>PRTYPE_PRAGMA</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>print pragmas for alignment </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1712" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_r_t_y_p_e___1gac6ba5f1ae2f27c58cc3024729c17bba4" prot="public" static="no">
        <name>PRTYPE_SEMI</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>append ; to the end </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1713" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1713" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_r_t_y_p_e___1ga379c0608ff4f6420333d7ef966acdf44" prot="public" static="no">
        <name>PRTYPE_CPP</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para>use c++ name (only for <ref refid="group__parse__tinfo_1ga43ef73f0df2c860b554c5fef7ce273f3" kindref="member">print_type()</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1714" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_r_t_y_p_e___1gad6a717c29896809ca1da80bf94d50992" prot="public" static="no">
        <name>PRTYPE_DEF</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref>: print definition, if available </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1715" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1715" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_r_t_y_p_e___1gaacbe8109e29629334e9ebfa118398491" prot="public" static="no">
        <name>PRTYPE_NOARGS</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref>: do not print function argument names </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1716" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_r_t_y_p_e___1gadb0abdd33ca089e3b78da3aa1c1fe168" prot="public" static="no">
        <name>PRTYPE_NOARRS</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref>: print arguments with <ref refid="group___f_a_i___1ga7cd5b032edc5675d9853779744009f72" kindref="member">FAI_ARRAY</ref> as pointers </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1717" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_r_t_y_p_e___1ga8bf11cbf1abb08f4f30a2626c23d1b67" prot="public" static="no">
        <name>PRTYPE_NORES</name>
        <initializer>0x0100</initializer>
        <briefdescription>
<para><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref>: never resolve types (meaningful with PRTYPE_DEF) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1718" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_r_t_y_p_e___1gae6026ba171330f529e96e996ca1b022d" prot="public" static="no">
        <name>PRTYPE_RESTORE</name>
        <initializer>0x0200</initializer>
        <briefdescription>
<para><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref>: print restored types for <ref refid="group___f_a_i___1ga7cd5b032edc5675d9853779744009f72" kindref="member">FAI_ARRAY</ref> and <ref refid="group___f_a_i___1ga81b8d1889e7b8f7f54fc4240ac181752" kindref="member">FAI_STRUCT</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1719" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1719" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t_f___1ga4844995290490378ae0dd75d3acf1e9c" prot="public" static="no">
        <name>NTF_TYPE</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>type name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1761" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1761" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t_f___1gafcee89fdd77d983c812bc8d42053cf2a" prot="public" static="no">
        <name>NTF_SYMU</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>symbol, name is unmangled (&apos;func&apos;) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1762" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1762" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t_f___1gacd3cda8cc0f916fe6af7c2227c096ca6" prot="public" static="no">
        <name>NTF_SYMM</name>
        <initializer>0x0000</initializer>
        <briefdescription>
<para>only one of <ref refid="group___n_t_f___1ga4844995290490378ae0dd75d3acf1e9c" kindref="member">NTF_TYPE</ref> and <ref refid="group___n_t_f___1gafcee89fdd77d983c812bc8d42053cf2a" kindref="member">NTF_SYMU</ref>, <ref refid="group___n_t_f___1gacd3cda8cc0f916fe6af7c2227c096ca6" kindref="member">NTF_SYMM</ref> can be used </para>        </briefdescription>
        <detaileddescription>
<para>symbol, name is mangled (&apos;_func&apos;) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1763" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1763" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t_f___1ga59f1cf2eee24fa287b41be608cd5c82e" prot="public" static="no">
        <name>NTF_NOBASE</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>don&apos;t inspect base tils (for get_named_type) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1765" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1765" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t_f___1ga99d425180386ad9f256f191e88ff1ffe" prot="public" static="no">
        <name>NTF_REPLACE</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>replace original type (for set_named_type) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1766" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1766" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t_f___1gaf45f8c82851006366914ec555fe963f8" prot="public" static="no">
        <name>NTF_UMANGLED</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>name is unmangled (don&apos;t use this flag) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1767" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1767" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t_f___1ga73410ff512a73114b2c564717dcfa58a" prot="public" static="no">
        <name>NTF_NOCUR</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>don&apos;t inspect current til file (for get_named_type) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1768" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1768" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t_f___1gac6c63d1c35028b20e395e0a5bc814404" prot="public" static="no">
        <name>NTF_64BIT</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para>value is 64bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1769" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1769" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t_f___1ga298db04cef52eff57f0c2d719eb023aa" prot="public" static="no">
        <name>NTF_FIXNAME</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>(set_named_type, set_numbered_type only) </para>        </briefdescription>
        <detaileddescription>
<para>force-validate the name of the type when setting </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1770" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1770" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t_f___1ga7ebc3745a16bce97c72110fa02f73abd" prot="public" static="no">
        <name>NTF_IDBENC</name>
        <initializer>0x0100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the name is given in the IDB encoding; non-ASCII bytes will be decoded accordingly (set_named_type, set_numbered_type only) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1772" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1772" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t_f___1ga30e3d4dd73519597bbf1ae60c7fad21c" prot="public" static="no">
        <name>NTF_CHKSYNC</name>
        <initializer>0x0200</initializer>
        <briefdescription>
<para>(set_numbered_type, set_named_type) </para>        </briefdescription>
        <detaileddescription>
<para>check that synchronization to IDB passed OK </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1775" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_c_n___1ga72e351d20547e76f7da3ef1dfc8b5e58" prot="public" static="no">
        <name>CCN_C</name>
        <initializer>0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1885" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1885" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_c_n___1gace8b06d552bacb452c8ca005a4914dc5" prot="public" static="no">
        <name>CCN_CPP</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1886" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1886" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i_m_p_t_y_p_e___1ga6cd91fbe162e41d37b8f02af78cc2c58" prot="public" static="no">
        <name>IMPTYPE_VERBOSE</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>more verbose output (dialog boxes may appear) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2104" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i_m_p_t_y_p_e___1ga299edee3b2cde79401bfb9fb118c2fab" prot="public" static="no">
        <name>IMPTYPE_OVERRIDE</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>override existing type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2105" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i_m_p_t_y_p_e___1gaced117327d7b21c347311a28a8676fe2" prot="public" static="no">
        <name>IMPTYPE_LOCAL</name>
        <initializer>0x0004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the type is local, the struct/enum won&apos;t be marked as til type. there is no need to specify this bit if til==idati, the kernel will set it automatically </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2106" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_d_t_i_l___f_1gab0bdef9bff72c4d21c3499d5a5c98af4" prot="public" static="no">
        <name>ADDTIL_DEFAULT</name>
        <initializer>0x0000</initializer>
        <briefdescription>
<para>default behavior </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2121" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_d_t_i_l___f_1ga92892b6a857c38374ab2516f275f02fd" prot="public" static="no">
        <name>ADDTIL_INCOMP</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>load incompatible tils </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2122" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_d_t_i_l___f_1ga150b63463349508a1eb9b89fee0f8405" prot="public" static="no">
        <name>ADDTIL_SILENT</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>do not ask any questions </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2123" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_d_t_i_l___r_1ga2a998ce8353062744feb51868a406ea1" prot="public" static="no">
        <name>ADDTIL_FAILED</name>
        <initializer>0</initializer>
        <briefdescription>
<para>something bad, the warning is displayed </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2129" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2129" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_d_t_i_l___r_1gaf86de707a0a8d30d9fbe3b234782b98f" prot="public" static="no">
        <name>ADDTIL_OK</name>
        <initializer>1</initializer>
        <briefdescription>
<para>ok, til is loaded </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2130" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_d_d_t_i_l___r_1gaa45e1faf7bbc42c19c79ab78cc21ae94" prot="public" static="no">
        <name>ADDTIL_COMP</name>
        <initializer>2</initializer>
        <briefdescription>
<para>ok, but til is not compatible with the current compiler </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2131" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_n_f_o___1ga5cd0c6ab9a8d3e5c8efc95b5d3783265" prot="public" static="no">
        <name>TINFO_GUESSED</name>
        <initializer>0x0000</initializer>
        <briefdescription>
<para>this is a guessed type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2164" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_n_f_o___1ga2a831ce211c89ef0c30c59d7e893ba5a" prot="public" static="no">
        <name>TINFO_DEFINITE</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>this is a definite type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2165" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_n_f_o___1ga9c75f13fbbb9bfab7a32f08d2f24c064" prot="public" static="no">
        <name>TINFO_DELAYFUNC</name>
        <initializer>0x0002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if type is a function and no function exists at ea, schedule its creation and argument renaming to auto-analysis otherwise try to create it immediately </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2166" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2166" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_i_n_f_o___1ga083af7d8f46a0cae66ada17dbc613ed1" prot="public" static="no">
        <name>TINFO_STRICT</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>never convert given type to another one before applying </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2169" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_u_e_s_s___1gaa77927ed8d33d6a42525ac865cb93ef0" prot="public" static="no">
        <name>GUESS_FUNC_FAILED</name>
        <initializer>0</initializer>
        <briefdescription>
<para>couldn&apos;t guess the function type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2240" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_u_e_s_s___1ga0adfb6d3e179afe44a502cee3ee03ae9" prot="public" static="no">
        <name>GUESS_FUNC_TRIVIAL</name>
        <initializer>1</initializer>
        <briefdescription>
<para>the function type doesn&apos;t have interesting info </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2241" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_u_e_s_s___1gaa689955199b1c9e70e092cba214682fe" prot="public" static="no">
        <name>GUESS_FUNC_OK</name>
        <initializer>2</initializer>
        <briefdescription>
<para>ok, some non-trivial information is gathered </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2242" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_u_d_t___1ga7becf33db69eeae6168435acb39b0010" prot="public" static="no">
        <name>SUDT_SORT</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>fields are not sorted by offset, sort them first </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2363" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_u_d_t___1gab935733a0cdd7a9dd608f372c0164381" prot="public" static="no">
        <name>SUDT_ALIGN</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>to match the offsets and size info </para>        </briefdescription>
        <detaileddescription>
<para>recalculate field alignments, struct packing, etc </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2364" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_u_d_t___1gac25d2bd3d8185187ceae4cc16f4cc3dc" prot="public" static="no">
        <name>SUDT_GAPS</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>allow to fill gaps with additional members (_BYTE[]) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2366" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_u_d_t___1gaa2d5efeca5c98ebbe16208d506df4231" prot="public" static="no">
        <name>SUDT_UNEX</name>
        <initializer>0x0008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>references to nonexistent member types are acceptable in this case it is better to set the corresponding <ref refid="structudt__member__t_1aa2531c429ae5d76784c359fd1ef07105" kindref="member">udt_member_t::fda</ref> field to the type alignment. if this field is not set, ida will try to guess the alignment. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2367" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_u_d_t___1gaeaa511ce041efaeb0ce9659fcb35b7a7" prot="public" static="no">
        <name>SUDT_FAST</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para>serialize without verifying offsets and alignments </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2371" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2371" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_u_d_t___1ga9a49c1f8d93c62e3a8c3ba35f10be585" prot="public" static="no">
        <name>SUDT_CONST</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para>only for serialize_udt: make type const </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2373" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2373" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_u_d_t___1gadc68f14b473c222381efd52ca7cb90d4" prot="public" static="no">
        <name>SUDT_VOLATILE</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>only for serialize_udt: make type volatile </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2374" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2374" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_u_d_t___1ga1e082c951f7e37bafdf409d66aa785a2" prot="public" static="no">
        <name>SUDT_TRUNC</name>
        <initializer>0x0100</initializer>
        <briefdescription>
<para>serialize: truncate useless strings from fields, fldcmts </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2376" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1a653346f8c2f0accc90038d22c91abd09" prot="public" static="no">
        <name>DECLARE_TINFO_HELPERS</name>
        <param><defname>decl</defname></param>
        <initializer>decl void ida_export copy_tinfo_t(<ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *_this, const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;r); \
decl void ida_export clear_tinfo_t(<ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *_this);\
decl bool ida_export create_tinfo(<ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *_this, <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> bt, <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> bt2, void *ptr);\
decl int  ida_export verify_tinfo(<ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> typid);\
decl bool ida_export get_tinfo_details(<ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> typid, <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> bt2, void *buf);\
decl size_t ida_export get_tinfo_size(<ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> *p_effalign, <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> typid, int gts_code);\
decl size_t ida_export get_tinfo_pdata(void *outptr, <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> typid, int what);\
decl size_t ida_export get_tinfo_property(<ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> typid, int gta_prop);\
decl size_t ida_export set_tinfo_property(<ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *tif, int sta_prop, size_t x);\
decl bool ida_export serialize_tinfo(<ref refid="pro_8h_1a7fad0f3973de5825c480e27517e159f3" kindref="member">qtype</ref> *type, <ref refid="pro_8h_1a7fad0f3973de5825c480e27517e159f3" kindref="member">qtype</ref> *fields, <ref refid="pro_8h_1a7fad0f3973de5825c480e27517e159f3" kindref="member">qtype</ref> *fldcmts, const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *tif, int sudt_flags);\
decl bool ida_export deserialize_tinfo(<ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *tif, const <ref refid="structtil__t" kindref="compound">til_t</ref> *til, const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> **ptype, const <ref refid="typeinf_8hpp_1a828c7e985f83b1e74eb4ea7b716abfb1" kindref="member">p_list</ref> **pfields, const <ref refid="typeinf_8hpp_1a828c7e985f83b1e74eb4ea7b716abfb1" kindref="member">p_list</ref> **pfldcmts);\
decl int  ida_export find_tinfo_udt_member(struct <ref refid="structudt__member__t" kindref="compound">udt_member_t</ref> *udm, <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> typid, int strmem_flags);\
decl bool ida_export print_tinfo(<ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *result, const char *prefix, int indent, int cmtindent, int flags, const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *tif, const char *name, const char *cmt);\
decl const char *ida_export dstr_tinfo(const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *tif);\
decl int  ida_export visit_subtypes(struct <ref refid="structtinfo__visitor__t" kindref="compound">tinfo_visitor_t</ref> *visitor, struct <ref refid="structtype__mods__t" kindref="compound">type_mods_t</ref> *out, const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;tif, const char *name, const char *cmt);\
decl bool ida_export compare_tinfo(<ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> t1, <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> t2, int tcflags);\
decl int  ida_export lexcompare_tinfo(<ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> t1, <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> t2, int);\
decl bool ida_export get_stock_tinfo(<ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *tif, <ref refid="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211" kindref="member">stock_type_id_t</ref> id);\
decl <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> ida_export read_tinfo_bitfield_value(<ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> typid, <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> v, int bitoff);\
decl <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> ida_export write_tinfo_bitfield_value(<ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> typid, <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> dst, <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> v, int bitoff);\
decl bool ida_export get_tinfo_attr(<ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> typid, const <ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> &amp;key, <ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> *bv, bool all_attrs);\
decl bool ida_export set_tinfo_attr(<ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *tif, const <ref refid="structtype__attr__t" kindref="compound">type_attr_t</ref> &amp;ta, bool may_overwrite);\
decl bool ida_export del_tinfo_attr(<ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *tif, const <ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> &amp;key, bool make_copy);\
decl bool ida_export get_tinfo_attrs(<ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> typid, <ref refid="group__tattr__ext_1ga59ddf13221681bc7444911f100dc5f5b" kindref="member">type_attrs_t</ref> *tav, bool include_ref_attrs);\
decl bool ida_export set_tinfo_attrs(<ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *tif, <ref refid="group__tattr__ext_1ga59ddf13221681bc7444911f100dc5f5b" kindref="member">type_attrs_t</ref> *ta);\
decl <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> ida_export score_tinfo(const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *tif);\
decl <ref refid="group__named__types_1ga4b2c98771820db5f78f2e754c97c0aaa" kindref="member">tinfo_code_t</ref> ida_export save_tinfo(<ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *tif, <ref refid="structtil__t" kindref="compound">til_t</ref> *til, size_t ord, const char *name, int ntf_flags);\
decl bool ida_export append_tinfo_covered(<ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> *out, <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> typid, <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> offset);\
decl bool ida_export calc_tinfo_gaps(<ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> *out, <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> typid);\
decl bool ida_export name_requires_qualifier(<ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *out, <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> typid, const char *name, <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> offset);\</initializer>
        <briefdescription>
<para>Macro to declare common <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> related functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2380" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2380" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_m_e_m___1gaf528bfd6d968b17ae57aee1dee443c29" prot="public" static="no">
        <name>STRMEM_MASK</name>
        <initializer>0x0007</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2861" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2861" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_m_e_m___1gafc7e55c621c65b2a81792e39a67d75b2" prot="public" static="no">
        <name>STRMEM_OFFSET</name>
        <initializer>0x0000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get member by offset- in: udm-&gt;offset - is a member offset in bits </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2862" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2862" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_m_e_m___1gaad91f2151cfd8e41e7f937287bf18f56" prot="public" static="no">
        <name>STRMEM_INDEX</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get member by number- in: udm-&gt;offset - is a member number </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2864" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2864" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_m_e_m___1ga0b5ba39c4308bbc445aaa8bfc5315bfd" prot="public" static="no">
        <name>STRMEM_AUTO</name>
        <initializer>0x0002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get member by offset if struct, or get member by index if union - nb: union: index is stored in the udm-&gt;offset field!<itemizedlist>
<listitem><para>nb: struct: offset is in bytes (not in bits)! </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2866" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2866" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_m_e_m___1ga8c04aa29f158d3544957d5bf9513115a" prot="public" static="no">
        <name>STRMEM_NAME</name>
        <initializer>0x0003</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get member by name- in: udm-&gt;name - the desired member name. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2869" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2869" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_m_e_m___1ga62e2d52ab4b1acb0ed5571b7135ee6dd" prot="public" static="no">
        <name>STRMEM_TYPE</name>
        <initializer>0x0004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get member by type. - in: udm-&gt;type - the desired member type. member types are compared with tinfo_t::equals_to() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2871" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2871" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_m_e_m___1ga0e3a31e8de28a5b68b31fd42d8465048" prot="public" static="no">
        <name>STRMEM_SIZE</name>
        <initializer>0x0005</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get member by size.- in: udm-&gt;size - the desired member size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2874" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2874" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_m_e_m___1gaecfb7742720049da887ac63077488b74" prot="public" static="no">
        <name>STRMEM_MINS</name>
        <initializer>0x0006</initializer>
        <briefdescription>
<para>get smallest member by size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2876" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2876" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_m_e_m___1ga85e977634794b06f003f4827d9df5028" prot="public" static="no">
        <name>STRMEM_MAXS</name>
        <initializer>0x0007</initializer>
        <briefdescription>
<para>get biggest member by size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2877" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2877" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_m_e_m___1gaa3a1dad69d95268c390c2d859b0334b3" prot="public" static="no">
        <name>STRMEM_VFTABLE</name>
        <initializer>0x10000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>can be combined with <ref refid="group___s_t_r_m_e_m___1gafc7e55c621c65b2a81792e39a67d75b2" kindref="member">STRMEM_OFFSET</ref>, <ref refid="group___s_t_r_m_e_m___1ga0b5ba39c4308bbc445aaa8bfc5315bfd" kindref="member">STRMEM_AUTO</ref> get vftable instead of the base class </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2878" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2878" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_m_e_m___1gaf9ab6d5aeb400abaec8c64d4849d049d" prot="public" static="no">
        <name>STRMEM_SKIP_EMPTY</name>
        <initializer>0x20000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>can be combined with <ref refid="group___s_t_r_m_e_m___1gafc7e55c621c65b2a81792e39a67d75b2" kindref="member">STRMEM_OFFSET</ref>, <ref refid="group___s_t_r_m_e_m___1ga0b5ba39c4308bbc445aaa8bfc5315bfd" kindref="member">STRMEM_AUTO</ref> skip empty members (i.e. having zero size) only last empty member can be returned </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2881" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2881" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_m_e_m___1ga454bfbfea961d64f7efdea9fa565a18a" prot="public" static="no">
        <name>STRMEM_CASTABLE_TO</name>
        <initializer>0x40000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>can be combined with <ref refid="group___s_t_r_m_e_m___1ga62e2d52ab4b1acb0ed5571b7135ee6dd" kindref="member">STRMEM_TYPE</ref>: member type must be castable to the specified type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2885" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2885" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_m_e_m___1gae70e5a781439aef62e61cdfe061f7170" prot="public" static="no">
        <name>STRMEM_ANON</name>
        <initializer>0x80000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>can be combined with <ref refid="group___s_t_r_m_e_m___1ga8c04aa29f158d3544957d5bf9513115a" kindref="member">STRMEM_NAME</ref>: look inside anonymous members too. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2888" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2888" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_c_m_p___1ga73745575ef1ce96d1128c32c78056473" prot="public" static="no">
        <name>TCMP_EQUAL</name>
        <initializer>0x0000</initializer>
        <briefdescription>
<para>are types equal? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3095" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3095" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_c_m_p___1ga9b9729204bc8db15ef336290593ead04" prot="public" static="no">
        <name>TCMP_IGNMODS</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>ignore const/volatile modifiers </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3096" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3096" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_c_m_p___1gadd983394ea2843e6eecf832ce89864b7" prot="public" static="no">
        <name>TCMP_AUTOCAST</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>can t1 be cast into t2 automatically? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3097" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3097" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_c_m_p___1gaec10cd8cb06035bff94cadb3ad0c0316" prot="public" static="no">
        <name>TCMP_MANCAST</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>can t1 be cast into t2 manually? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3098" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3098" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_c_m_p___1ga2fd06c6ff9de33211639458ea969b8ab" prot="public" static="no">
        <name>TCMP_CALL</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>can t1 be called with t2 type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3099" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3099" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_c_m_p___1ga15f73445bfc95b7b0398bfbb4ab82246" prot="public" static="no">
        <name>TCMP_DELPTR</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para>remove pointer from types before comparing </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3100" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_c_m_p___1ga7a9335b458b4c944621b97db52be82c8" prot="public" static="no">
        <name>TCMP_DECL</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>compare declarations without resolving them </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3101" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_c_m_p___1ga0a7c9bb69a7cbb588177d53af41a0e7a" prot="public" static="no">
        <name>TCMP_ANYBASE</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para>accept any base class when casting </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3102" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_c_m_p___1ga7368b5ef3f6e74c9e2686774ccc91c9c" prot="public" static="no">
        <name>TCMP_SKIPTHIS</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>skip the first function argument in comparison </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3103" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_a_i___1ga91038fc97378aa2a884552f82d0e05ce" prot="public" static="no">
        <name>FAI_HIDDEN</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>hidden argument </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3218" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_a_i___1ga9f89490f56d1255bf75cdd57b512966f" prot="public" static="no">
        <name>FAI_RETPTR</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>pointer to return value. implies hidden </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3219" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_a_i___1ga81b8d1889e7b8f7f54fc4240ac181752" prot="public" static="no">
        <name>FAI_STRUCT</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>was initially a structure </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3220" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_a_i___1ga7cd5b032edc5675d9853779744009f72" prot="public" static="no">
        <name>FAI_ARRAY</name>
        <initializer>0x0008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>was initially an array see &quot;__org_typedef&quot; or &quot;__org_arrdim&quot; type attributes to determine the original type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3221" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_a_i___1gaecee61a83c985dbc2af27e5b1c323093" prot="public" static="no">
        <name>TA_ORG_TYPEDEF</name>
        <initializer>&quot;__org_typedef&quot;</initializer>
        <briefdescription>
<para>the original typedef name (simple string) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3224" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_a_i___1ga5925981bcc6ef6ede47737ecebbd5bca" prot="public" static="no">
        <name>TA_ORG_ARRDIM</name>
        <initializer>&quot;__org_arrdim&quot;</initializer>
        <briefdescription>
<para>the original array dimension (append_dd) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3225" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_t_i___1ga8df339dbafd18e09dff205606dd74ef7" prot="public" static="no">
        <name>FTI_SPOILED</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>information about spoiled registers is present </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3247" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_t_i___1ga22493ebc3efb1464a49a1da0a51743ca" prot="public" static="no">
        <name>FTI_NORET</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>noreturn </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3248" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_t_i___1ga3e26f297fe482ab7a5c7cb2251d013f0" prot="public" static="no">
        <name>FTI_PURE</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>__pure </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3249" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_t_i___1ga59c49eb47a2f43c602070b01684ba871" prot="public" static="no">
        <name>FTI_HIGH</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>high level prototype (with possibly hidden args) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3250" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_t_i___1gac532957fbd5ccc4e337b40d112dd7c54" prot="public" static="no">
        <name>FTI_STATIC</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para>static </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3251" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_t_i___1ga5467592f5c51d137ea24c78d8d4a8e45" prot="public" static="no">
        <name>FTI_VIRTUAL</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>virtual </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3252" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_t_i___1ga05b1697e6881a620be7decafeabea9bb" prot="public" static="no">
        <name>FTI_CALLTYPE</name>
        <initializer>0x00C0</initializer>
        <briefdescription>
<para>mask for FTI_*CALL </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3253" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_t_i___1gaa8ac9279d74c695f58e7a06109748443" prot="public" static="no">
        <name>FTI_DEFCALL</name>
        <initializer>0x0000</initializer>
        <briefdescription>
<para>default call </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3254" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_t_i___1ga165cf2a53a0f7a76e0149c3078fee21a" prot="public" static="no">
        <name>FTI_NEARCALL</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para>near call </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3255" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_t_i___1gace01167eeb994769a54d1e1ea40de29c" prot="public" static="no">
        <name>FTI_FARCALL</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>far call </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3256" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3256" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_t_i___1gab5100aea70d3aa7ba318cf1d83b3685b" prot="public" static="no">
        <name>FTI_INTCALL</name>
        <initializer>0x00C0</initializer>
        <briefdescription>
<para>interrupt call </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3257" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_t_i___1gae2d459fcaacc13e99f99317207c1b7c6" prot="public" static="no">
        <name>FTI_ARGLOCS</name>
        <initializer>0x0100</initializer>
        <briefdescription>
<para>(stkargs and retloc too) </para>        </briefdescription>
        <detaileddescription>
<para>info about argument locations has been calculated </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3258" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_t_i___1ga0f8e33f82e8adebf5a6a837c58b92040" prot="public" static="no">
        <name>FTI_ALL</name>
        <initializer>0x01FF</initializer>
        <briefdescription>
<para>all defined bits </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3260" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1ad7695b0c12296a19b769ba883e7bcf61" prot="public" static="no">
        <name>CC_CDECL_OK</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para>can use __cdecl calling convention? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3290" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1a11ec64457731f1b6382e6eb6d2e02c2f" prot="public" static="no">
        <name>CC_ALLOW_ARGPERM</name>
        <initializer>0x02</initializer>
        <briefdescription>
<para>disregard argument order? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3291" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1a8aef6a321d05d94745b70be88e1d67b6" prot="public" static="no">
        <name>CC_ALLOW_REGHOLES</name>
        <initializer>0x04</initializer>
        <briefdescription>
<para>allow holes in register argument list? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3292" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1a7531e798f24ea3515247abe3f9b7aa3e" prot="public" static="no">
        <name>CC_HAS_ELLIPSIS</name>
        <initializer>0x08</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>function has a variable list of arguments? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3293" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1a6f8e344ef06861c61ccee2926fccc775" prot="public" static="no">
        <name>VTBL_SUFFIX</name>
        <initializer>&quot;_vtbl&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3468" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3468" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1a88d38b0a4ce18e318f9cebfe8d23efde" prot="public" static="no">
        <name>VTBL_MEMNAME</name>
        <initializer>&quot;__vftable&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3473" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3473" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_v_i_s___1ga411b1c97d919f52e0eaf374eac7fd506" prot="public" static="no">
        <name>TVIS_TYPE</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>new type info is present </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3631" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3631" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_v_i_s___1gaeb0634cf54218951d620298127a022c6" prot="public" static="no">
        <name>TVIS_NAME</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>new name is present </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3632" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3632" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_v_i_s___1ga8107421a9d4b0158d826de18607845d3" prot="public" static="no">
        <name>TVIS_CMT</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>new comment is present </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3633" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3633" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_v_s_t___1ga5ecd7fc21799f6bc2a0c107f93237fb4" prot="public" static="no">
        <name>TVST_PRUNE</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para>don&apos;t visit children of current type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3658" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_v_s_t___1gad79530cdefdd426b9253ebd4f5a197db" prot="public" static="no">
        <name>TVST_DEF</name>
        <initializer>0x02</initializer>
        <briefdescription>
<para>visit type definition (meaningful for typerefs) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3659" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3659" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___t_v_s_t___1gaf2310b06eb52fdf48ff6a05400f1fdc7" prot="public" static="no">
        <name>TVST_LEVEL</name>
        <initializer>0x04</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3660" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3660" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1ab938d9be9a5d674172a6ccdc612c97e1" prot="public" static="no">
        <name>PIO_NOATTR_FAIL</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>missing attributes are not ok </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3715" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3715" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1a3c114dc666c6867c10132e1957607a14" prot="public" static="no">
        <name>PIO_IGNORE_PTRS</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>do not follow pointers </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3716" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t_v___1gac2cd3059626ab4ab40a530fdfcc99abb" prot="public" static="no">
        <name>PTV_DEREF</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>take value to print from the debugged process. <ref refid="group___v_t___1ga9366c439f83b49166170067f8ee071fc" kindref="member">VT_LONG</ref>: the address is specified by <ref refid="classidc__value__t_1aa09e4449f34001012e2f53248eb349fb" kindref="member">idc_value_t::num</ref> <ref refid="group___v_t___1ga73ee8713be7855fc5fece9efd07517c0" kindref="member">VT_PVOID</ref>: <ref refid="classargloc__t" kindref="compound">argloc_t</ref> is pointed by <ref refid="classidc__value__t_1af712265fb1474ef495db2cf84d6ec6cc" kindref="member">idc_value_t::pvoid</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3912" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3912" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t_v___1ga156121be3a2cd423ebd876f26f5c5b85" prot="public" static="no">
        <name>PTV_QUEST</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>print &apos;?&apos; for uninited data </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3915" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3915" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t_v___1ga0177bf01caa85ed297e8a2c206ccde52" prot="public" static="no">
        <name>PTV_EMPTY</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>should not specify PTV_QUEST and PTV_EMPTY together </para>        </briefdescription>
        <detaileddescription>
<para>return empty string for uninited data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3916" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3916" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t_v___1ga5843023faccf3e228bcaaf102978d667" prot="public" static="no">
        <name>PTV_CSTR</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>print constant strings inline </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3918" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3918" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t_v___1ga3961c67927e9f622c548d492555ecda7" prot="public" static="no">
        <name>PTV_EXPAND</name>
        <initializer>0x0010</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>print only top level on separate lines max_length applies to separate lines margin is ignored </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3919" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3919" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t_v___1ga652ab7f0c08c4c906ca21617dd9f2041" prot="public" static="no">
        <name>PTV_LZHEX</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>print hex numbers with leading zeroes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3922" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3922" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t_v___1ga373eeb90ac754fe4e80ef450c210ed24" prot="public" static="no">
        <name>PTV_STPFLT</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para>(if not set, just print ?flt for them) </para>        </briefdescription>
        <detaileddescription>
<para>fail on bad floating point numbers </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3923" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3923" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t_v___1gaa76a9c7baf7bddf882d963855ffa120e" prot="public" static="no">
        <name>PTV_SPACE</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>add spaces after commas and around braces </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3925" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3925" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t_v___1ga8a1cfa4d03ebded255c8564ae86758e4" prot="public" static="no">
        <name>PTV_DEBUG</name>
        <initializer>0x0100</initializer>
        <briefdescription>
<para>format output for debugger </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3926" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3926" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t_v___1gaff4fe127ed5ba1b21d33b44dbf161833" prot="public" static="no">
        <name>PTV_NOPTR</name>
        <initializer>0x0200</initializer>
        <briefdescription>
<para>prevent pointer values from appearing in the output </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3927" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3927" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t_v___1ga64ab5cf5e31d427494eccc50753e956e" prot="public" static="no">
        <name>PTV_NTOP</name>
        <initializer>0x40000000</initializer>
        <briefdescription>
<para>internal flag, do not use </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3928" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3928" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_t_v___1ga99a74deafea6f8166a3083351852f418" prot="public" static="no">
        <name>PTV_KEEP</name>
        <initializer>0x80000000</initializer>
        <briefdescription>
<para>internal flag, do not use </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3929" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3929" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1ab48e19cb49e4c575c66e6f09cb740e99" prot="public" static="no">
        <name>VALSTR_OPEN</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para>printed opening curly brace &apos;{&apos; </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3981" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3981" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1ad9ff1cf61b5fd76fd24f6d29e5a6b326" prot="public" static="no">
        <name>PDF_INCL_DEPS</name>
        <initializer>0x1</initializer>
        <briefdescription>
<para>Include all type dependencies. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4060" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="4060" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1a2250bf6beb5da6b346fb6436ab3c51c6" prot="public" static="no">
        <name>PDF_DEF_FWD</name>
        <initializer>0x2</initializer>
        <briefdescription>
<para>Allow forward declarations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4061" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="4061" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1a3300d368429d8077549d501d98091b75" prot="public" static="no">
        <name>PDF_DEF_BASE</name>
        <initializer>0x4</initializer>
        <briefdescription>
<para>Include base types: __int8, __int16, etc.. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4062" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="4062" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="typeinf_8hpp_1aefe52addf8e1d8d9ff975fdec23011ce" prot="public" static="no">
        <name>PDF_HEADER_CMT</name>
        <initializer>0x8</initializer>
        <briefdescription>
<para>Prepend output with a descriptive comment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4063" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="4063" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_n___1ga7756d1cbc54de302daabf331a5acb409" prot="public" static="no">
        <name>PCN_RADIX</name>
        <initializer>0x07</initializer>
        <briefdescription>
<para>number base to use </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4116" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="4116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_n___1ga01db281c510426448f4ba6690093bb1f" prot="public" static="no">
        <name>PCN_DEC</name>
        <initializer>0x00</initializer>
        <briefdescription>
<para>decimal </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4117" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="4117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_n___1gaa1d28f6fee65104f5348690ea800904f" prot="public" static="no">
        <name>PCN_HEX</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para>hexadecimal </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4118" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="4118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_n___1ga4236f5ff0be0d8954080a8d88356c12f" prot="public" static="no">
        <name>PCN_OCT</name>
        <initializer>0x02</initializer>
        <briefdescription>
<para>octal </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4119" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="4119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_n___1gaa0ad228fd673e70dc3520b8ecb5af13a" prot="public" static="no">
        <name>PCN_CHR</name>
        <initializer>0x03</initializer>
        <briefdescription>
<para>character </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4120" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="4120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_n___1ga0a8cdf42eea0a4b38d69701b8f66ee0b" prot="public" static="no">
        <name>PCN_UNSIGNED</name>
        <initializer>0x08</initializer>
        <briefdescription>
<para>add &apos;u&apos; suffix </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4121" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="4121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_n___1ga198c99d83d30fe9c74e1db215a6c4b21" prot="public" static="no">
        <name>PCN_LZHEX</name>
        <initializer>0x10</initializer>
        <briefdescription>
<para>print leading zeroes for hexdecimal number </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4122" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="4122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_c_n___1ga72e49c27b6a7848a5d13f7f86d1ce8e8" prot="public" static="no">
        <name>PCN_NEGSIGN</name>
        <initializer>0x20</initializer>
        <briefdescription>
<para>print negated value (-N) for negative numbers </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4123" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="4123" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__argloc_1ga1213616e618bb2e2eeef3789c5a3066a" prot="public" static="no">
        <name>argreg_policy_t</name>
        <enumvalue id="group__argloc_1gga1213616e618bb2e2eeef3789c5a3066aa7baed8ca2e6bc4cfe859a3709339b309" prot="public">
          <name>ARGREGS_POLICY_UNDEFINED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__argloc_1gga1213616e618bb2e2eeef3789c5a3066aa78b105fc74836db7dfc4892af9e69c06" prot="public">
          <name>ARGREGS_GP_ONLY</name>
          <briefdescription>
<para>GP registers used for all arguments. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__argloc_1gga1213616e618bb2e2eeef3789c5a3066aaed785e829f5e0b1f404dc2b512cb0698" prot="public">
          <name>ARGREGS_INDEPENDENT</name>
          <briefdescription>
<para>FP/GP registers used separately (like gcc64) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__argloc_1gga1213616e618bb2e2eeef3789c5a3066aae440e0d293e7994fec765a045ec0b7de" prot="public">
          <name>ARGREGS_BY_SLOTS</name>
          <briefdescription>
<para>fixed FP/GP register per each slot (like vc64) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__argloc_1gga1213616e618bb2e2eeef3789c5a3066aaa5cdf7a88dcb45b3f820bb4a854229d6" prot="public">
          <name>ARGREGS_FP_CONSUME_GP</name>
          <briefdescription>
<para>FP register also consumes one or more GP regs but not vice versa (aix ppc ABI) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Function argument passing: how GP &amp; FP registers cooperate with each other. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1286" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1285" bodyend="1292"/>
      </memberdef>
      <memberdef kind="enum" id="typeinf_8hpp_1a784254a39507ac759a9f373a52a75ac1" prot="public" static="no">
        <name>abs_t</name>
        <enumvalue id="typeinf_8hpp_1a784254a39507ac759a9f373a52a75ac1a47317118ddb156438b44cdbdd98787ac" prot="public">
          <name>abs_unk</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a784254a39507ac759a9f373a52a75ac1aac573dbfc68ebda6e1859910fb70a515" prot="public">
          <name>abs_no</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a784254a39507ac759a9f373a52a75ac1a533418e0cf8adffc94efffc6ef96c182" prot="public">
          <name>abs_yes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>abstractness of declaration (see <ref refid="group__parse__tinfo_1gae9ae4eb67c4fdf5d59e22ba23af55f1f" kindref="member">h2ti()</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1540" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1540" bodyend="1540"/>
      </memberdef>
      <memberdef kind="enum" id="typeinf_8hpp_1a9c9a05934a8418932a82a2d39476d97d" prot="public" static="no">
        <name>sclass_t</name>
        <enumvalue id="typeinf_8hpp_1a9c9a05934a8418932a82a2d39476d97da89e3586b675e0685da04bfd54a2502a9" prot="public">
          <name>sc_unk</name>
          <briefdescription>
<para>unknown </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a9c9a05934a8418932a82a2d39476d97dacf0ce1cb3d478a7f62557c3f8f446e11" prot="public">
          <name>sc_type</name>
          <briefdescription>
<para>typedef </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a9c9a05934a8418932a82a2d39476d97da0c593cc88b83620bdb34f43f9e5dda31" prot="public">
          <name>sc_ext</name>
          <briefdescription>
<para>extern </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a9c9a05934a8418932a82a2d39476d97da551b28b82cb4482f30efa4ebe9b4e473" prot="public">
          <name>sc_stat</name>
          <briefdescription>
<para>static </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a9c9a05934a8418932a82a2d39476d97da962c56792f11d705f2feba400d5a7d09" prot="public">
          <name>sc_reg</name>
          <briefdescription>
<para>register </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a9c9a05934a8418932a82a2d39476d97da172b8da8be19c3ba9754022815316154" prot="public">
          <name>sc_auto</name>
          <briefdescription>
<para>auto </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a9c9a05934a8418932a82a2d39476d97da5e33945d971e16746389317965a7ac10" prot="public">
          <name>sc_friend</name>
          <briefdescription>
<para>friend </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a9c9a05934a8418932a82a2d39476d97da9a8553f5d79dbbec9b4c5d572a2e3489" prot="public">
          <name>sc_virt</name>
          <briefdescription>
<para>virtual </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>&lt; storage class </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1542" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1541" bodyend="1551"/>
      </memberdef>
      <memberdef kind="enum" id="group__named__types_1ga4b2c98771820db5f78f2e754c97c0aaa" prot="public" static="no">
        <name>tinfo_code_t</name>
        <enumvalue id="group__named__types_1gga4b2c98771820db5f78f2e754c97c0aaaaf1e302c7895bfa27324ea87b2613f934" prot="public">
          <name>TERR_OK</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>ok </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__named__types_1gga4b2c98771820db5f78f2e754c97c0aaaab5040c8d0d7d40aaec3229056feeb441" prot="public">
          <name>TERR_SAVE</name>
          <initializer>= -1</initializer>
          <briefdescription>
<para>failed to save </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__named__types_1gga4b2c98771820db5f78f2e754c97c0aaaa8d887bee845b2f1ef5f2b91509a7d8a7" prot="public">
          <name>TERR_SERIALIZE</name>
          <initializer>= -2</initializer>
          <briefdescription>
<para>failed to serialize </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__named__types_1gga4b2c98771820db5f78f2e754c97c0aaaaed75b318f4c08674eb57ba88cdd7c420" prot="public">
          <name>TERR_WRONGNAME</name>
          <initializer>= -3</initializer>
          <briefdescription>
<para>name is not acceptable </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__named__types_1gga4b2c98771820db5f78f2e754c97c0aaaad5b485a8aea98a39638a33b0fdf3aece" prot="public">
          <name>TERR_BADSYNC</name>
          <initializer>= -4</initializer>
          <briefdescription>
<para>failed to synchronize with IDB </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Error codes for save_tinfo functions: </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1802" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1801" bodyend="1808"/>
      </memberdef>
      <memberdef kind="enum" id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211" prot="public" static="no">
        <name>stock_type_id_t</name>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211ad2201926ec41b27053183ae1156551d2" prot="public">
          <name>STI_PCHAR</name>
          <briefdescription>
<para>char * </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211ad8ed5a69facf5f0d115305508d4360c0" prot="public">
          <name>STI_PUCHAR</name>
          <briefdescription>
<para>uint8 * </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a47647669a95737a405ea759a47ebe6d4" prot="public">
          <name>STI_PCCHAR</name>
          <briefdescription>
<para>const char * </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a6b69598b89a319945d2378755bceda3b" prot="public">
          <name>STI_PCUCHAR</name>
          <briefdescription>
<para>const uint8 * </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211af1c5fab58b7522abba89c3e8ea011585" prot="public">
          <name>STI_PBYTE</name>
          <briefdescription>
<para>_BYTE * </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a0294096331b11299a1725d47b0ec48aa" prot="public">
          <name>STI_PINT</name>
          <briefdescription>
<para>int * </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a4ce84ce1b31df9af7da92ed166efc855" prot="public">
          <name>STI_PUINT</name>
          <briefdescription>
<para>unsigned int * </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211ab91aef96c15480ad770574620493a5b5" prot="public">
          <name>STI_PVOID</name>
          <briefdescription>
<para>void * </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211ac38dccd05b2c93cae2e8ea71a52d9548" prot="public">
          <name>STI_PPVOID</name>
          <briefdescription>
<para>void ** </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a0f808184209169009a1de95bc6ed64eb" prot="public">
          <name>STI_PCVOID</name>
          <briefdescription>
<para>const void * </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a3b3eef78afdcd967b0314486de96f371" prot="public">
          <name>STI_ACHAR</name>
          <briefdescription>
<para>char[] </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a2cd9c8e886dddfe900bd01e68c1a46bc" prot="public">
          <name>STI_AUCHAR</name>
          <briefdescription>
<para>uint8[] </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a69a9601f852e149baf5c28ac900bd91d" prot="public">
          <name>STI_ACCHAR</name>
          <briefdescription>
<para>const char[] </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211adc44280551009cc2b281ee7f540c8d4a" prot="public">
          <name>STI_ACUCHAR</name>
          <briefdescription>
<para>const uint8[] </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211ad16bb6ab5bc017c2c424c0b43a4ba8a1" prot="public">
          <name>STI_FPURGING</name>
          <briefdescription>
<para>void __userpurge(int) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a95e3539d8614d7c1f78e480397fe785d" prot="public">
          <name>STI_FDELOP</name>
          <briefdescription>
<para>void __cdecl(void *) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a8512c62f2fdd18bc875a81aab1acfffc" prot="public">
          <name>STI_MSGSEND</name>
          <briefdescription>
<para>void *(void *, const char *, ...) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a1243182dde00b57ae0fdcd93578f8b91" prot="public">
          <name>STI_AEABI_LCMP</name>
          <briefdescription>
<para>int __fastcall(int64 x, int64 y) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211acfbfbda5305515c6c8bffea0c24a7d59" prot="public">
          <name>STI_AEABI_ULCMP</name>
          <briefdescription>
<para>int __fastcall(uint64 x, uint64 y) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a43f6e82ab8b5f5927ea126930f42d83d" prot="public">
          <name>STI_DONT_USE</name>
          <briefdescription>
<para>unused stock type id; should not be used </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211af6f297c7ffa79618a21fb2ae0205d107" prot="public">
          <name>STI_SIZE_T</name>
          <briefdescription>
<para>size_t </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a17d3a099be27bc57e7d2ceaecc78cbbb" prot="public">
          <name>STI_SSIZE_T</name>
          <briefdescription>
<para>ssize_t </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a7db708741cdccbe41aa9418614365ab4" prot="public">
          <name>STI_AEABI_MEMCPY</name>
          <briefdescription>
<para>void __fastcall(void *, const void *, size_t) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a2dae55494874e37f19ea88efdcec3310" prot="public">
          <name>STI_AEABI_MEMSET</name>
          <briefdescription>
<para>void __fastcall(void *, size_t, int) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211acfde347b9ce367f40c8a54d664e5d67e" prot="public">
          <name>STI_AEABI_MEMCLR</name>
          <briefdescription>
<para>void __fastcall(void *, size_t) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a79e42d641f074eaca76bb67e7e40fc85" prot="public">
          <name>STI_RTC_CHECK_2</name>
          <briefdescription>
<para>int16 __fastcall(int16 x) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a7cab85c891644bed71779929562d3d44" prot="public">
          <name>STI_RTC_CHECK_4</name>
          <briefdescription>
<para>int32 __fastcall(int32 x) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a162e68c27d6d04f6ac4c2d9997866a1c" prot="public">
          <name>STI_RTC_CHECK_8</name>
          <briefdescription>
<para>int64 __fastcall(int64 x) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a3d5cba82dd91a1d49c2e0cdd8f5d5211a87865cee356559ac2c60db706ee75414" prot="public">
          <name>STI_LAST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>IDs for common types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2302" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2301" bodyend="2332"/>
      </memberdef>
      <memberdef kind="enum" id="typeinf_8hpp_1a6a3b7b00fcc1f35943355ff4a59ee27b" prot="public" static="no">
        <name>gtd_udt_t</name>
        <enumvalue id="typeinf_8hpp_1a6a3b7b00fcc1f35943355ff4a59ee27ba1c0801cf7075c0d784cf8d66c608160c" prot="public">
          <name>GTD_CALC_LAYOUT</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>calculate udt layout </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a6a3b7b00fcc1f35943355ff4a59ee27ba5fcc07edfa8f3f3d7a8df7e224ddea59" prot="public">
          <name>GTD_NO_LAYOUT</name>
          <initializer>= BTM_VOLATILE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>don&apos;t calculate udt layout please note that udt layout may have been calculated earlier </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a6a3b7b00fcc1f35943355ff4a59ee27badb23c2ea9cfb7587fd7afbeb4fc61f93" prot="public">
          <name>GTD_DEL_BITFLDS</name>
          <initializer>= BTM_CONST</initializer>
          <briefdescription>
<para>delete udt bitfields </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Constants to be used with get_udt_details() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2336" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2335" bodyend="2342"/>
      </memberdef>
      <memberdef kind="enum" id="typeinf_8hpp_1ab7f0a2e39ac376a1f6e903e970e527c9" prot="public" static="no">
        <name>gtd_func_t</name>
        <enumvalue id="typeinf_8hpp_1ab7f0a2e39ac376a1f6e903e970e527c9a5bd1413dc6a22cf8e0b2d924da8db70b" prot="public">
          <name>GTD_CALC_ARGLOCS</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>calculate func arg locations </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1ab7f0a2e39ac376a1f6e903e970e527c9a10a6bd6a4e21f49a406a5d5b81ca0504" prot="public">
          <name>GTD_NO_ARGLOCS</name>
          <initializer>= BTM_VOLATILE</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>don&apos;t calculate func arg locations please note that the locations may have been calculated earlier </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Constants to be used with get_func_details() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2346" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2345" bodyend="2351"/>
      </memberdef>
      <memberdef kind="enum" id="typeinf_8hpp_1a0f68192de992d505e6ba381993bccc5b" prot="public" static="no">
        <name>gts_code_t</name>
        <enumvalue id="typeinf_8hpp_1a0f68192de992d505e6ba381993bccc5bace4d40b057bf8f9dd9af50fa4e1bbddb" prot="public">
          <name>GTS_NESTED</name>
          <initializer>= 0x01</initializer>
          <briefdescription>
<para>nested type (embedded into a udt) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a0f68192de992d505e6ba381993bccc5badf69b340e31e11338120b48af3ec52f5" prot="public">
          <name>GTS_BASECLASS</name>
          <initializer>= 0x02</initializer>
          <briefdescription>
<para>is baseclass of a udt </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Constants to be used with get_size() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2355" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2354" bodyend="2358"/>
      </memberdef>
      <memberdef kind="enum" id="typeinf_8hpp_1a7ae46ad265dbaedeab1f06346a4d9f98" prot="public" static="no">
        <name>update_type_t</name>
        <enumvalue id="typeinf_8hpp_1a7ae46ad265dbaedeab1f06346a4d9f98a937394c13b73ff169df03b9085daacd0" prot="public">
          <name>UTP_ENUM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="typeinf_8hpp_1a7ae46ad265dbaedeab1f06346a4d9f98a832e7051761cab59f7974f32012e9fea" prot="public">
          <name>UTP_STRUCT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>See <ref refid="typeinf_8hpp_1aa417d7c0601ec34392c906300e20107c" kindref="member">begin_type_updating()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3801" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3800" bodyend="3804"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" prot="public" static="no">
        <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
        <definition>typedef uchar type_t</definition>
        <argsstring></argsstring>
        <name>type_t</name>
        <briefdescription>
<para>byte sequence used to describe a type in IDA (see <ref refid="group__tf" kindref="compound">Type flags</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="30" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typeinf_8hpp_1a3c34de97522bfad60d58ac37f150f81a" prot="public" static="no">
        <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
        <definition>typedef uchar p_string</definition>
        <argsstring></argsstring>
        <name>p_string</name>
        <briefdescription>
<para>pascal-like string: dt length, characters </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="32" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typeinf_8hpp_1a828c7e985f83b1e74eb4ea7b716abfb1" prot="public" static="no">
        <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
        <definition>typedef uchar p_list</definition>
        <argsstring></argsstring>
        <name>p_list</name>
        <briefdescription>
<para>several <ref refid="typeinf_8hpp_1a3c34de97522bfad60d58ac37f150f81a" kindref="member">p_string</ref>&apos;s </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="34" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__tf__enum_1ga9ae7aa54dbc597ec17cbb17555306a02" prot="public" static="no">
        <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
        <definition>typedef uchar bte_t</definition>
        <argsstring></argsstring>
        <name>bte_t</name>
        <briefdescription>
<para>Enum type flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="261" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="261" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__tattr__ext_1ga59ddf13221681bc7444911f100dc5f5b" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structtype__attr__t" kindref="compound">type_attr_t</ref> &gt;</type>
        <definition>typedef qvector&lt;type_attr_t&gt; type_attrs_t</definition>
        <argsstring></argsstring>
        <name>type_attrs_t</name>
        <briefdescription>
<para>this vector must be sorted by keys </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="555" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="552" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__tattr__ext_1ga91970b0d779fe968b3b22572526048a0" prot="public" static="no">
        <type>int</type>
        <definition>typedef int type_sign_t</definition>
        <argsstring></argsstring>
        <name>type_sign_t</name>
        <briefdescription>
<para>type signedness </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="557" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="557" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__argloc_1gafaa486b80f279565c5e29558d6694afd" prot="public" static="no">
        <type>int</type>
        <definition>typedef int argloc_type_t</definition>
        <argsstring></argsstring>
        <name>argloc_type_t</name>
        <briefdescription>
<para>Specifies the location type of a function argument - see <ref refid="group___a_l_o_c__" kindref="compound">Argument location types</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="805" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="805" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__argloc_1gad3d78bf064365f662c656f53d9296358" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="classargloc__t" kindref="compound">argloc_t</ref> &gt;</type>
        <definition>typedef qvector&lt;argloc_t&gt; arglocs_t</definition>
        <argsstring></argsstring>
        <name>arglocs_t</name>
        <briefdescription>
<para>vector of argument locations </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1142" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group___c_c__funcs_1ga6d65e448c6e1903b22a2ad528ed9d9d7" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref> &gt;</type>
        <definition>typedef qvector&lt;comp_t&gt; compvec_t</definition>
        <argsstring></argsstring>
        <name>compvec_t</name>
        <briefdescription>
<para>Collection of compiler descriptions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1433" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__parse__tinfo_1ga034013ece7194a003ffd1727075100d2" prot="public" static="no">
        <type>int idaapi</type>
        <definition>typedef int idaapi h2ti_type_cb(const char *name, const tinfo_t &amp;tif, const char *cmt, const uint64 *value, void *cb_data)</definition>
        <argsstring>(const char *name, const tinfo_t &amp;tif, const char *cmt, const uint64 *value, void *cb_data)</argsstring>
        <name>h2ti_type_cb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This callback will be called for each type/variable declaration. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>var/func/type name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tif</parametername>
</parameternamelist>
<parameterdescription>
<para>type info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmt</parametername>
</parameternamelist>
<parameterdescription>
<para>main comment </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>symbol value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb_data</parametername>
</parameternamelist>
<parameterdescription>
<para>data passed to callback </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>T_CBBRKDEF</parametername>
</parameternamelist>
<parameterdescription>
<para>the type declaration won&apos;t be saved in the til </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1599" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1599" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__parse__tinfo_1gabcc521f1e3d068d8cdf760885a8f53c4" prot="public" static="no">
        <type>int</type>
        <definition>typedef int printer_t(const char *format,...)</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>printer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specify a printing callback when parsing types. See <ref refid="group__parse__tinfo_1gae9ae4eb67c4fdf5d59e22ba23af55f1f" kindref="member">h2ti()</ref> and <ref refid="group__parse__tinfo_1gae4cec61d812cfc0acc08453742b729b3" kindref="member">parse_decls()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1609" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typeinf_8hpp_1a48fd6c6a8661308225119ef20b1fed47" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &gt;</type>
        <definition>typedef qvector&lt;tinfo_t&gt; tinfovec_t</definition>
        <argsstring></argsstring>
        <name>tinfovec_t</name>
        <briefdescription>
<para>vector of tinfo objects </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3112" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typeinf_8hpp_1ac0da5f34cdb584f01f870e5f7bbbdbf0" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structsimd__info__t" kindref="compound">simd_info_t</ref> &gt;</type>
        <definition>typedef qvector&lt;simd_info_t&gt; simd_info_vec_t</definition>
        <argsstring></argsstring>
        <name>simd_info_vec_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3149" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typeinf_8hpp_1a6b5faeba43c9a59ec3aae166657ff78a" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structfuncarg__t" kindref="compound">funcarg_t</ref> &gt;</type>
        <definition>typedef qvector&lt;funcarg_t&gt; funcargvec_t</definition>
        <argsstring></argsstring>
        <name>funcargvec_t</name>
        <briefdescription>
<para>vector of function argument objects </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3238" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typeinf_8hpp_1adf64cba541ab89373b2447edd3d5b041" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structudt__member__t" kindref="compound">udt_member_t</ref> &gt;</type>
        <definition>typedef qvector&lt;udt_member_t&gt; udtmembervec_t</definition>
        <argsstring></argsstring>
        <name>udtmembervec_t</name>
        <briefdescription>
<para>vector of udt member objects </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3427" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typeinf_8hpp_1ab35b734018443383d34fd235516a3689" prot="public" static="no">
        <type>bool idaapi</type>
        <definition>typedef bool idaapi set_op_tinfo_t(const insn_t &amp;insn, const op_t &amp;x, const tinfo_t &amp;type, const char *name)</definition>
        <argsstring>(const insn_t &amp;insn, const op_t &amp;x, const tinfo_t &amp;type, const char *name)</argsstring>
        <name>set_op_tinfo_t</name>
        <briefdescription>
<para>Set the operand type as specified. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3770" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3770" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typeinf_8hpp_1af3d430d1bfb3ac0fd08e2b3f87b91a3c" prot="public" static="no">
        <type>bool idaapi</type>
        <definition>typedef bool idaapi is_stkarg_load_t(const insn_t &amp;insn, int *src, int *dst)</definition>
        <argsstring>(const insn_t &amp;insn, int *src, int *dst)</argsstring>
        <name>is_stkarg_load_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the current insn a stkarg load?. if yes:<itemizedlist>
<listitem><para>src: index of the source operand in {ops}</para></listitem><listitem><para>dst: index of the destination operand in {ops} {ops}[dst].addr is expected to have the stack offset </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3779" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3779" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typeinf_8hpp_1a186be23cab16ac728b75a3a4c29d6350" prot="public" static="no">
        <type>bool idaapi</type>
        <definition>typedef bool idaapi has_delay_slot_t(ea_t caller)</definition>
        <argsstring>(ea_t caller)</argsstring>
        <name>has_delay_slot_t</name>
        <briefdescription>
<para>The call instruction with a delay slot?. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3784" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typeinf_8hpp_1a6e20ac5ddb94b98b2c0826f3615c5c57" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> &gt;</type>
        <definition>typedef qvector&lt;uint32&gt; ordvec_t</definition>
        <argsstring></argsstring>
        <name>ordvec_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4065" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="4065" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="typeinf_8hpp_1ab50d6548ef1add1a4a33341539d9f737" prot="public" static="no">
        <type>int idaapi</type>
        <definition>typedef int idaapi local_tinfo_predicate_t(uint32 ord, const tinfo_t &amp;type, void *ud)</definition>
        <argsstring>(uint32 ord, const tinfo_t &amp;type, void *ud)</argsstring>
        <name>local_tinfo_predicate_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Controls which types are displayed/selected when choosing local types. <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>skip type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>include </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4197" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="4197" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__tf__mask_1gae890bf98baf7dcadf121a9b5ee1eed51" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t TYPE_BASE_MASK</definition>
        <argsstring></argsstring>
        <name>TYPE_BASE_MASK</name>
        <initializer>= 0x0F</initializer>
        <briefdescription>
<para>the low 4 bits define the basic type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="52" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__mask_1gaac5ec5ef511fe0323471b0f2765d85cf" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t TYPE_FLAGS_MASK</definition>
        <argsstring></argsstring>
        <name>TYPE_FLAGS_MASK</name>
        <initializer>= 0x30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>type flags - they have different meaning depending on the basic type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="53" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__mask_1gafba446d2cb3b761e1af374cd209a911e" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t TYPE_MODIF_MASK</definition>
        <argsstring></argsstring>
        <name>TYPE_MODIF_MASK</name>
        <initializer>= 0xC0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>modifiers.<itemizedlist>
<listitem><para>for <ref refid="group__tf__array_1ga8c17124d38e796e7cd8804808e4bb5b3" kindref="member">BT_ARRAY</ref> see <ref refid="group__tf__array" kindref="compound">Derived type: array</ref></para></listitem><listitem><para><ref refid="group__tf__unk_1gaf99e9832d21e1b090117fc2feab1c2b5" kindref="member">BT_VOID</ref> can have them ONLY in &apos;void *&apos; </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="55" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__mask_1ga0546e0e6a47765f33245d7a9d6b175aa" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t TYPE_FULL_MASK</definition>
        <argsstring></argsstring>
        <name>TYPE_FULL_MASK</name>
        <initializer>= (<ref refid="group__tf__mask_1gae890bf98baf7dcadf121a9b5ee1eed51" kindref="member">TYPE_BASE_MASK</ref> | <ref refid="group__tf__mask_1gaac5ec5ef511fe0323471b0f2765d85cf" kindref="member">TYPE_FLAGS_MASK</ref>)</initializer>
        <briefdescription>
<para>basic type with type flags </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="59" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__unk_1ga9c2f460ca1ce121f26cf35a2fd56435c" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_UNK</definition>
        <argsstring></argsstring>
        <name>BT_UNK</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
<para>unknown </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="72" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__unk_1gaf99e9832d21e1b090117fc2feab1c2b5" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_VOID</definition>
        <argsstring></argsstring>
        <name>BT_VOID</name>
        <initializer>= 0x01</initializer>
        <briefdescription>
<para>void </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="73" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__unk_1gae57d28bf34d646a18be655f3a3e75cad" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_SIZE0</definition>
        <argsstring></argsstring>
        <name>BTMT_SIZE0</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
<para><ref refid="group__tf__unk_1gaf99e9832d21e1b090117fc2feab1c2b5" kindref="member">BT_VOID</ref> - normal void; <ref refid="group__tf__unk_1ga9c2f460ca1ce121f26cf35a2fd56435c" kindref="member">BT_UNK</ref> - don&apos;t use </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="74" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__unk_1ga90ce5c51a92ecb3d1b44ffc6d08a5e05" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_SIZE12</definition>
        <argsstring></argsstring>
        <name>BTMT_SIZE12</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
<para>size = 1 byte if <ref refid="group__tf__unk_1gaf99e9832d21e1b090117fc2feab1c2b5" kindref="member">BT_VOID</ref>; 2 if <ref refid="group__tf__unk_1ga9c2f460ca1ce121f26cf35a2fd56435c" kindref="member">BT_UNK</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="75" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__unk_1ga9ed1420856f2a445e0f0977f576d6bf5" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_SIZE48</definition>
        <argsstring></argsstring>
        <name>BTMT_SIZE48</name>
        <initializer>= 0x20</initializer>
        <briefdescription>
<para>size = 4 bytes if <ref refid="group__tf__unk_1gaf99e9832d21e1b090117fc2feab1c2b5" kindref="member">BT_VOID</ref>; 8 if <ref refid="group__tf__unk_1ga9c2f460ca1ce121f26cf35a2fd56435c" kindref="member">BT_UNK</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="76" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__unk_1gae249f36ee88b26f66602b505aacb62d6" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_SIZE128</definition>
        <argsstring></argsstring>
        <name>BTMT_SIZE128</name>
        <initializer>= 0x30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>size = 16 bytes if <ref refid="group__tf__unk_1gaf99e9832d21e1b090117fc2feab1c2b5" kindref="member">BT_VOID</ref>; unknown if <ref refid="group__tf__unk_1ga9c2f460ca1ce121f26cf35a2fd56435c" kindref="member">BT_UNK</ref> (IN struct alignment - see below) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="77" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__int_1gad44635e5f36e3ff87017e674a0ba1e96" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_INT8</definition>
        <argsstring></argsstring>
        <name>BT_INT8</name>
        <initializer>= 0x02</initializer>
        <briefdescription>
<para>__int8 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="83" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__int_1ga111f1b71efa2a45245d7ba9469ceb18f" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_INT16</definition>
        <argsstring></argsstring>
        <name>BT_INT16</name>
        <initializer>= 0x03</initializer>
        <briefdescription>
<para>__int16 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="84" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__int_1ga6e8a1235fb794ee0e5bfab074d2dfc7d" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_INT32</definition>
        <argsstring></argsstring>
        <name>BT_INT32</name>
        <initializer>= 0x04</initializer>
        <briefdescription>
<para>__int32 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="85" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__int_1ga245e5fd5f4a2eac20183c1e3e6c81837" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_INT64</definition>
        <argsstring></argsstring>
        <name>BT_INT64</name>
        <initializer>= 0x05</initializer>
        <briefdescription>
<para>__int64 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="86" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__int_1ga248c7431d9792b1a4d48f422368bb77b" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_INT128</definition>
        <argsstring></argsstring>
        <name>BT_INT128</name>
        <initializer>= 0x06</initializer>
        <briefdescription>
<para>__int128 (for alpha &amp; future use) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="87" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__int_1ga0247bd6d30b0ca1725ec2cf6cbccdc83" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_INT</definition>
        <argsstring></argsstring>
        <name>BT_INT</name>
        <initializer>= 0x07</initializer>
        <briefdescription>
<para>natural int. (size provided by idp module) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="88" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__int_1ga12d0f4299a2a72b0c39bf42def60559f" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_UNKSIGN</definition>
        <argsstring></argsstring>
        <name>BTMT_UNKSIGN</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
<para>unknown signedness </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="89" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__int_1gaed538a73e5a21b72509b0dd0edf6574c" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_SIGNED</definition>
        <argsstring></argsstring>
        <name>BTMT_SIGNED</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
<para>signed </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="90" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__int_1gae657884ce0de31e6bc235c3bd6dea235" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_USIGNED</definition>
        <argsstring></argsstring>
        <name>BTMT_USIGNED</name>
        <initializer>= 0x20</initializer>
        <briefdescription>
<para>unsigned </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="91" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__int_1gabb9f1f16dab55f10effb4ca9ecc1cf57" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_UNSIGNED</definition>
        <argsstring></argsstring>
        <name>BTMT_UNSIGNED</name>
        <initializer>= <ref refid="group__tf__int_1gae657884ce0de31e6bc235c3bd6dea235" kindref="member">BTMT_USIGNED</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="92" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__int_1ga2fc0128b8f9f51961efa661bd6c36523" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_CHAR</definition>
        <argsstring></argsstring>
        <name>BTMT_CHAR</name>
        <initializer>= 0x30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>specify char or segment register<itemizedlist>
<listitem><para><ref refid="group__tf__int_1gad44635e5f36e3ff87017e674a0ba1e96" kindref="member">BT_INT8</ref> - char</para></listitem><listitem><para><ref refid="group__tf__int_1ga0247bd6d30b0ca1725ec2cf6cbccdc83" kindref="member">BT_INT</ref> - segment register</para></listitem><listitem><para>other BT_INT... - don&apos;t use </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="93" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__bool_1ga356f8955bf9845e4dba1316fc2b29b80" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_BOOL</definition>
        <argsstring></argsstring>
        <name>BT_BOOL</name>
        <initializer>= 0x08</initializer>
        <briefdescription>
<para>bool </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="101" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__bool_1gaea57d16afee0d49d86834c3deb3352b4" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_DEFBOOL</definition>
        <argsstring></argsstring>
        <name>BTMT_DEFBOOL</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
<para>size is model specific or unknown(?) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="102" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__bool_1gaf16d1493a800576d13e42832260e49a6" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_BOOL1</definition>
        <argsstring></argsstring>
        <name>BTMT_BOOL1</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
<para>size 1byte </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="103" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__bool_1ga8c47f90c1908d79b293a1907c9095159" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_BOOL2</definition>
        <argsstring></argsstring>
        <name>BTMT_BOOL2</name>
        <initializer>= 0x20</initializer>
        <briefdescription>
<para>size 2bytes - !inf.is_64bit() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="104" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__bool_1ga58fd807e7569cda6d67b2170e24b5053" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_BOOL8</definition>
        <argsstring></argsstring>
        <name>BTMT_BOOL8</name>
        <initializer>= 0x20</initializer>
        <briefdescription>
<para>size 8bytes - inf.is_64bit() </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="105" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__bool_1gab3a24de12bf3ca6dccf07cb87c398cd8" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_BOOL4</definition>
        <argsstring></argsstring>
        <name>BTMT_BOOL4</name>
        <initializer>= 0x30</initializer>
        <briefdescription>
<para>size 4bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="106" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__float_1ga59a226ec408b8610feafdd4c32267a82" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_FLOAT</definition>
        <argsstring></argsstring>
        <name>BT_FLOAT</name>
        <initializer>= 0x09</initializer>
        <briefdescription>
<para>float </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="111" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__float_1gacebc0abbf7692bfdf20dff86e9bf588f" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_FLOAT</definition>
        <argsstring></argsstring>
        <name>BTMT_FLOAT</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
<para>float (4 bytes) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="112" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__float_1gad53977235765c0dd13fcbdfd21150cea" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_DOUBLE</definition>
        <argsstring></argsstring>
        <name>BTMT_DOUBLE</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
<para>double (8 bytes) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="113" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__float_1ga3f4c3be08ef760f80e6123e5f43ada38" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_LNGDBL</definition>
        <argsstring></argsstring>
        <name>BTMT_LNGDBL</name>
        <initializer>= 0x20</initializer>
        <briefdescription>
<para>long double (compiler specific) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="114" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__float_1ga34f394b71c9b27c46560178e0054f79b" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_SPECFLT</definition>
        <argsstring></argsstring>
        <name>BTMT_SPECFLT</name>
        <initializer>= 0x30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>float (variable size). if {use_tbyte()} then use {tbyte_size}, otherwise 2 bytes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="115" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__last__basic_1gadd35f3c45f5a8e13b0ce6603702c1445" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t _BT_LAST_BASIC</definition>
        <argsstring></argsstring>
        <name>_BT_LAST_BASIC</name>
        <initializer>= <ref refid="group__tf__float_1ga59a226ec408b8610feafdd4c32267a82" kindref="member">BT_FLOAT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the last basic type, all basic types may be followed by [tah-typeattrs] </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="122" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__ptr_1ga1ea9ae22535f9fb09b2c74f6e7526d4e" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_PTR</definition>
        <argsstring></argsstring>
        <name>BT_PTR</name>
        <initializer>= 0x0A</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pointer. has the following format: [db sizeof(ptr)]; [tah-typeattrs]; type_t... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="131" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__ptr_1ga3c44b2a54003ba7ba132a52e84b64d8e" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_DEFPTR</definition>
        <argsstring></argsstring>
        <name>BTMT_DEFPTR</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
<para>default for model </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="134" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__ptr_1ga24fd022fe6b8de3ed2f0ab1eb3b52d88" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_NEAR</definition>
        <argsstring></argsstring>
        <name>BTMT_NEAR</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
<para>near </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="135" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__ptr_1ga3d0f144fc969457fd435987e0ca8295b" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_FAR</definition>
        <argsstring></argsstring>
        <name>BTMT_FAR</name>
        <initializer>= 0x20</initializer>
        <briefdescription>
<para>far </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="136" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__ptr_1ga17a80f306cfd595df0d7bd2f5a9ddc64" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_CLOSURE</definition>
        <argsstring></argsstring>
        <name>BTMT_CLOSURE</name>
        <initializer>= 0x30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>closure.<itemizedlist>
<listitem><para>if ptr to <ref refid="group__tf__func_1ga7b7fee21f21237beb6d91e854410e0fa" kindref="member">BT_FUNC</ref> - __closure. in this case next byte MUST be <ref refid="typeinf_8hpp_1a8ac9fa3da7151dc5ffd9fbf0563a9417" kindref="member">RESERVED_BYTE</ref>, and after it <ref refid="group__tf__func_1ga7b7fee21f21237beb6d91e854410e0fa" kindref="member">BT_FUNC</ref></para></listitem><listitem><para>else the next byte contains sizeof(ptr) allowed values are 1 - {ph,<ref refid="structprocessor__t" kindref="compound">processor_t</ref>,max_ptr_size}</para></listitem><listitem><para>if value is bigger than {ph,<ref refid="structprocessor__t" kindref="compound">processor_t</ref>,max_ptr_size}, based_ptr_name_and_size() is called to find out the typeinfo </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="137" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__array_1ga8c17124d38e796e7cd8804808e4bb5b3" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_ARRAY</definition>
        <argsstring></argsstring>
        <name>BT_ARRAY</name>
        <initializer>= 0x0B</initializer>
        <briefdescription>
<para>array </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="152" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__array_1ga0590f6ba2edff6c58152908be5137f6c" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_NONBASED</definition>
        <argsstring></argsstring>
        <name>BTMT_NONBASED</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><programlisting><codeline><highlight class="normal">if<sp/>set</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>array<sp/>base==0</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>format:<sp/>dt<sp/>num_elem;<sp/>[tah-typeattrs];<sp/>type_t...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>if<sp/>num_elem==0<sp/>then<sp/>the<sp/>array<sp/>size<sp/>is<sp/>unknown</highlight></codeline>
<codeline><highlight class="normal">else</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>format:<sp/>da<sp/>num_elem,<sp/>base;<sp/>[tah-typeattrs];<sp/>type_t...<sp/></highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="153" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__array_1ga7433356ef536da1289e2633ab4e5d052" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_ARRESERV</definition>
        <argsstring></argsstring>
        <name>BTMT_ARRESERV</name>
        <initializer>= 0x20</initializer>
        <briefdescription>
<para>reserved bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="160" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__func_1ga7b7fee21f21237beb6d91e854410e0fa" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_FUNC</definition>
        <argsstring></argsstring>
        <name>BT_FUNC</name>
        <initializer>= 0x0C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>function. format: <preformatted>
      optional: <ref refid="group___c_m___c_c___1ga81fe26502529dff431e52823a24db36b" kindref="member">CM_CC_SPOILED</ref> | num_of_spoiled_regs
                if num_of_spoiled_reg == 15:
                  next byte is function attribute byte (see <ref refid="group___b_f_a__" kindref="compound">Function attribute byte</ref>...)
                else:
                  num_of_spoiled_reg times: spoiled reg info (see extract_spoiledreg)
      <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref> ... calling convention and memory model
      [tah-typeattrs];
      <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> ... return type;
      [serialized <ref refid="classargloc__t" kindref="compound">argloc_t</ref> of returned value (if <ref refid="group___c_m___c_c___1ga377054c414ac35be6e5e9bf6c550b390" kindref="member">CM_CC_SPECIAL</ref>{PE} &amp;&amp; !return void);
      if !<ref refid="group___c_m___c_c___1gaecea308116df480106f38d080f73ab8e" kindref="member">CM_CC_VOIDARG</ref>:
        dt N (N=number of parameters)
        if ( N == 0 )
        if <ref refid="group___c_m___c_c___1ga8e4d072bec04a20754290978b8b141be" kindref="member">CM_CC_ELLIPSIS</ref> or <ref refid="group___c_m___c_c___1ga6c042d42c6daf03444d06907a8498b06" kindref="member">CM_CC_SPECIALE</ref>
            func(...)
          else
            parameters are unknown
        else
          N records:
            <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> ... (i.e. type of each parameter)
            [serialized <ref refid="classargloc__t" kindref="compound">argloc_t</ref> (if <ref refid="group___c_m___c_c___1ga377054c414ac35be6e5e9bf6c550b390" kindref="member">CM_CC_SPECIAL</ref>{PE})] (i.e. place of each parameter)
            [<ref refid="group__tattr_1gab68b66c0853e4271d2ab199fa3a50f3f" kindref="member">FAH_BYTE</ref> + de( <ref refid="structfuncarg__t_1ad8e3c72762a709b04a234fbb8cc1c9ec" kindref="member">funcarg_t::flags</ref> )] </preformatted> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="168" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__func_1ga5147e087dec7232a85eac3899ba2f4b9" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_DEFCALL</definition>
        <argsstring></argsstring>
        <name>BTMT_DEFCALL</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
<para>call method - default for model or unknown </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="192" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__func_1ga85ede61600f614010e42d95f261c4114" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_NEARCALL</definition>
        <argsstring></argsstring>
        <name>BTMT_NEARCALL</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
<para>function returns by retn </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="193" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__func_1ga45c5f0228b87ce9cfb16925be2d41ea3" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_FARCALL</definition>
        <argsstring></argsstring>
        <name>BTMT_FARCALL</name>
        <initializer>= 0x20</initializer>
        <briefdescription>
<para>function returns by retf </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="194" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__func_1gaf9a3fbfc64a1aea9f98765619e1628fc" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_INTCALL</definition>
        <argsstring></argsstring>
        <name>BTMT_INTCALL</name>
        <initializer>= 0x30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>function returns by iret in this case cc MUST be &apos;unknown&apos; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="195" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__complex_1ga86c5e589737e005ba4741423fd2ca5c6" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_COMPLEX</definition>
        <argsstring></argsstring>
        <name>BT_COMPLEX</name>
        <initializer>= 0x0D</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>struct/union/enum/typedef. format: <preformatted>
       [dt N (N=field count) if !<ref refid="group__tf__complex_1gaa4e0907e07d1538053682550c2117290" kindref="member">BTMT_TYPEDEF</ref>]
       if N == 0:
         p_string name (unnamed types have names &quot;anon_...&quot;)
         [sdacl-typeattrs];
       else, for struct &amp; union:
         if N == 0x7FFE   // Support for high (i.e., &gt; 4095) members count
           N = deserialize_de()
         ALPOW = N &amp; 0x7
         MCNT = N &gt;&gt; 3
         if MCNT == 0
           empty struct
         if ALPOW == 0
           ALIGN = <ref refid="typeinf_8hpp_1a370b5b72b6b9d2935babdd8dbb98bfdf" kindref="member">get_default_align()</ref>
         else
           ALIGN = (1 &lt;&lt; (ALPOW - 1))
         [sdacl-typeattrs];
       else, for enums:
         if N == 0x7FFE   // Support for high enum entries count.
           N = deserialize_de()
         [tah-typeattrs]; </preformatted> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="201" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__complex_1gacf095fd2f25df783b0f5a321d91c6adc" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_STRUCT</definition>
        <argsstring></argsstring>
        <name>BTMT_STRUCT</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>struct: MCNT records: type_t; [sdacl-typeattrs]; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="224" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__complex_1gaf117f7735078132037de2553d7ea393a" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_UNION</definition>
        <argsstring></argsstring>
        <name>BTMT_UNION</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>union: MCNT records: type_t... </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="226" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__complex_1gaa364f5b01c60e09fd5b216162817037c" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_ENUM</definition>
        <argsstring></argsstring>
        <name>BTMT_ENUM</name>
        <initializer>= 0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>enum: next byte bte_t (see below) N records: de delta(s) OR blocks (see below) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="228" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__complex_1gaa4e0907e07d1538053682550c2117290" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_TYPEDEF</definition>
        <argsstring></argsstring>
        <name>BTMT_TYPEDEF</name>
        <initializer>= 0x30</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>named reference always p_string name </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="233" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__complex_1ga0d1af452c81ac917f9eab9d456f52454" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_BITFIELD</definition>
        <argsstring></argsstring>
        <name>BT_BITFIELD</name>
        <initializer>= 0x0E</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>bitfield (only in struct) [&apos;bitmasked&apos; enum see below] next byte is dt ((size in bits &lt;&lt; 1) | (unsigned ? 1 : 0)) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="236" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__complex_1gacc19d1408e022d7ff9e2fc1ffc5a4484" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_BFLDI8</definition>
        <argsstring></argsstring>
        <name>BTMT_BFLDI8</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
<para>__int8 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="240" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__complex_1ga07c7dad369abd97a935635f71ec96d13" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_BFLDI16</definition>
        <argsstring></argsstring>
        <name>BTMT_BFLDI16</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
<para>__int16 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="241" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__complex_1ga49c2a5454a1c362bf1a7afb07562bb7d" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_BFLDI32</definition>
        <argsstring></argsstring>
        <name>BTMT_BFLDI32</name>
        <initializer>= 0x20</initializer>
        <briefdescription>
<para>__int32 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="242" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__complex_1ga7677d88a97c48e5bf103e78eee7286df" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTMT_BFLDI64</definition>
        <argsstring></argsstring>
        <name>BTMT_BFLDI64</name>
        <initializer>= 0x30</initializer>
        <briefdescription>
<para>__int64 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="243" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf_1ga0eeb3ad9c7649364d76cdd6b18d616fe" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_RESERVED</definition>
        <argsstring></argsstring>
        <name>BT_RESERVED</name>
        <initializer>= 0x0F</initializer>
        <briefdescription>
<para>RESERVED. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="246" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__modifiers_1ga9620c6eab27564299c432f6f22c963e0" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTM_CONST</definition>
        <argsstring></argsstring>
        <name>BTM_CONST</name>
        <initializer>= 0x40</initializer>
        <briefdescription>
<para>const </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="254" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="254" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__modifiers_1ga980855dd322c9bc15ac45421c7267d13" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTM_VOLATILE</definition>
        <argsstring></argsstring>
        <name>BTM_VOLATILE</name>
        <initializer>= 0x80</initializer>
        <briefdescription>
<para>volatile </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="255" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="255" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__enum_1gaec042ce7c6f887be34b76ae5f404e482" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__tf__enum_1ga9ae7aa54dbc597ec17cbb17555306a02" kindref="member">bte_t</ref></type>
        <definition>const bte_t BTE_SIZE_MASK</definition>
        <argsstring></argsstring>
        <name>BTE_SIZE_MASK</name>
        <initializer>= 0x07</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>storage size.<itemizedlist>
<listitem><para>if == 0 ph.get_default_enum_size()</para></listitem><listitem><para>else 1 &lt;&lt; (n -1) = 1,2,4...64 </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="263" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="263" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__enum_1ga957cc71b55104bf133afcb87c473c9ff" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__tf__enum_1ga9ae7aa54dbc597ec17cbb17555306a02" kindref="member">bte_t</ref></type>
        <definition>const bte_t BTE_RESERVED</definition>
        <argsstring></argsstring>
        <name>BTE_RESERVED</name>
        <initializer>= 0x08</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>must be 0, in order to distinguish from a tah-byte </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="266" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="266" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__enum_1ga11628b413da4de1841d54d3684fbbf4f" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__tf__enum_1ga9ae7aa54dbc597ec17cbb17555306a02" kindref="member">bte_t</ref></type>
        <definition>const bte_t BTE_BITFIELD</definition>
        <argsstring></argsstring>
        <name>BTE_BITFIELD</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>&apos;subarrays&apos;. In this case ANY record has the following format:<itemizedlist>
<listitem><para>&apos;de&apos; mask (has name)</para></listitem><listitem><para>&apos;dt&apos; cnt</para></listitem><listitem><para>cnt records of &apos;de&apos; values (cnt CAN be 0) <simplesect kind="note"><para>delta for ALL subsegment is ONE </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="268" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="268" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__enum_1gaf4b0baf37318155a69ccfe296b1fbd52" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__tf__enum_1ga9ae7aa54dbc597ec17cbb17555306a02" kindref="member">bte_t</ref></type>
        <definition>const bte_t BTE_OUT_MASK</definition>
        <argsstring></argsstring>
        <name>BTE_OUT_MASK</name>
        <initializer>= 0x60</initializer>
        <briefdescription>
<para>output style mask </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="275" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__enum_1ga3de0de21213c2c200fd54aeb9c0605e6" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__tf__enum_1ga9ae7aa54dbc597ec17cbb17555306a02" kindref="member">bte_t</ref></type>
        <definition>const bte_t BTE_HEX</definition>
        <argsstring></argsstring>
        <name>BTE_HEX</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
<para>hex </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="276" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__enum_1gab71103d2d6504f0edd910fc56550edcf" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__tf__enum_1ga9ae7aa54dbc597ec17cbb17555306a02" kindref="member">bte_t</ref></type>
        <definition>const bte_t BTE_CHAR</definition>
        <argsstring></argsstring>
        <name>BTE_CHAR</name>
        <initializer>= 0x20</initializer>
        <briefdescription>
<para>char or hex </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="277" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__enum_1gac92e3e234e6950c3639bc876773a2086" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__tf__enum_1ga9ae7aa54dbc597ec17cbb17555306a02" kindref="member">bte_t</ref></type>
        <definition>const bte_t BTE_SDEC</definition>
        <argsstring></argsstring>
        <name>BTE_SDEC</name>
        <initializer>= 0x40</initializer>
        <briefdescription>
<para>signed decimal </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="278" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__enum_1ga66bf216f79e79290a36155daf2383076" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__tf__enum_1ga9ae7aa54dbc597ec17cbb17555306a02" kindref="member">bte_t</ref></type>
        <definition>const bte_t BTE_UDEC</definition>
        <argsstring></argsstring>
        <name>BTE_UDEC</name>
        <initializer>= 0x60</initializer>
        <briefdescription>
<para>unsigned decimal </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="279" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__enum_1gad84679a3c7bef0696668437e12448fa0" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__tf__enum_1ga9ae7aa54dbc597ec17cbb17555306a02" kindref="member">bte_t</ref></type>
        <definition>const bte_t BTE_ALWAYS</definition>
        <argsstring></argsstring>
        <name>BTE_ALWAYS</name>
        <initializer>= 0x80</initializer>
        <briefdescription>
<para>this bit MUST be present </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="280" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__conv__segreg_1ga549d73cebdc532cb21dee4ae31fe79a3" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_SEGREG</definition>
        <argsstring></argsstring>
        <name>BT_SEGREG</name>
        <initializer>= (<ref refid="group__tf__int_1ga0247bd6d30b0ca1725ec2cf6cbccdc83" kindref="member">BT_INT</ref> | <ref refid="group__tf__int_1ga2fc0128b8f9f51961efa661bd6c36523" kindref="member">BTMT_CHAR</ref>)</initializer>
        <briefdescription>
<para>segment register </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="285" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__conv__unk_1ga32cbdc29ec5e3a236ed7386f405e1000" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_UNK_BYTE</definition>
        <argsstring></argsstring>
        <name>BT_UNK_BYTE</name>
        <initializer>= (<ref refid="group__tf__unk_1gaf99e9832d21e1b090117fc2feab1c2b5" kindref="member">BT_VOID</ref> | <ref refid="group__tf__unk_1ga90ce5c51a92ecb3d1b44ffc6d08a5e05" kindref="member">BTMT_SIZE12</ref>)</initializer>
        <briefdescription>
<para>1 byte </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="290" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__conv__unk_1gadf0a5933fa90878f5ffd4126fd648672" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_UNK_WORD</definition>
        <argsstring></argsstring>
        <name>BT_UNK_WORD</name>
        <initializer>= (<ref refid="group__tf__unk_1ga9c2f460ca1ce121f26cf35a2fd56435c" kindref="member">BT_UNK</ref>  | <ref refid="group__tf__unk_1ga90ce5c51a92ecb3d1b44ffc6d08a5e05" kindref="member">BTMT_SIZE12</ref>)</initializer>
        <briefdescription>
<para>2 bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="291" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__conv__unk_1ga0d9a53ec936f70a19f148da72cb63a86" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_UNK_DWORD</definition>
        <argsstring></argsstring>
        <name>BT_UNK_DWORD</name>
        <initializer>= (<ref refid="group__tf__unk_1gaf99e9832d21e1b090117fc2feab1c2b5" kindref="member">BT_VOID</ref> | <ref refid="group__tf__unk_1ga9ed1420856f2a445e0f0977f576d6bf5" kindref="member">BTMT_SIZE48</ref>)</initializer>
        <briefdescription>
<para>4 bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="292" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__conv__unk_1ga926d9ea4bad748875f526cb874c5cf05" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_UNK_QWORD</definition>
        <argsstring></argsstring>
        <name>BT_UNK_QWORD</name>
        <initializer>= (<ref refid="group__tf__unk_1ga9c2f460ca1ce121f26cf35a2fd56435c" kindref="member">BT_UNK</ref>  | <ref refid="group__tf__unk_1ga9ed1420856f2a445e0f0977f576d6bf5" kindref="member">BTMT_SIZE48</ref>)</initializer>
        <briefdescription>
<para>8 bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="293" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="293" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__conv__unk_1gad042887c6328b4fe30da2e6d359f78d6" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_UNK_OWORD</definition>
        <argsstring></argsstring>
        <name>BT_UNK_OWORD</name>
        <initializer>= (<ref refid="group__tf__unk_1gaf99e9832d21e1b090117fc2feab1c2b5" kindref="member">BT_VOID</ref> | <ref refid="group__tf__unk_1gae249f36ee88b26f66602b505aacb62d6" kindref="member">BTMT_SIZE128</ref>)</initializer>
        <briefdescription>
<para>16 bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="294" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="294" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__conv__unk_1ga15de9552b0654e950d709fd9c165f7aa" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BT_UNKNOWN</definition>
        <argsstring></argsstring>
        <name>BT_UNKNOWN</name>
        <initializer>= (<ref refid="group__tf__unk_1ga9c2f460ca1ce121f26cf35a2fd56435c" kindref="member">BT_UNK</ref>  | <ref refid="group__tf__unk_1gae249f36ee88b26f66602b505aacb62d6" kindref="member">BTMT_SIZE128</ref>)</initializer>
        <briefdescription>
<para>unknown size - for parameters </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="295" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="295" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga443b50fef52ac60e2c4d5017243b522e" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_BYTE</definition>
        <argsstring></argsstring>
        <name>BTF_BYTE</name>
        <initializer>= <ref refid="group__tf__conv__unk_1ga32cbdc29ec5e3a236ed7386f405e1000" kindref="member">BT_UNK_BYTE</ref></initializer>
        <briefdescription>
<para>byte </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="301" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="301" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga15315b0907cec492e3533f5fdb48510d" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_UNK</definition>
        <argsstring></argsstring>
        <name>BTF_UNK</name>
        <initializer>= <ref refid="group__tf__conv__unk_1ga15de9552b0654e950d709fd9c165f7aa" kindref="member">BT_UNKNOWN</ref></initializer>
        <briefdescription>
<para>unknown </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="302" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga8e3b664437b42978e3549134abf2ea26" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_VOID</definition>
        <argsstring></argsstring>
        <name>BTF_VOID</name>
        <initializer>= <ref refid="group__tf__unk_1gaf99e9832d21e1b090117fc2feab1c2b5" kindref="member">BT_VOID</ref> | <ref refid="group__tf__unk_1gae57d28bf34d646a18be655f3a3e75cad" kindref="member">BTMT_SIZE0</ref></initializer>
        <briefdescription>
<para>void </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="303" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1gab212446be82a416e3f8c109265cff94c" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_INT8</definition>
        <argsstring></argsstring>
        <name>BTF_INT8</name>
        <initializer>= <ref refid="group__tf__int_1gad44635e5f36e3ff87017e674a0ba1e96" kindref="member">BT_INT8</ref> | <ref refid="group__tf__int_1gaed538a73e5a21b72509b0dd0edf6574c" kindref="member">BTMT_SIGNED</ref></initializer>
        <briefdescription>
<para>signed byte </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="305" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga8f698f8ece0ae90a9b49c9c1335620e8" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_CHAR</definition>
        <argsstring></argsstring>
        <name>BTF_CHAR</name>
        <initializer>= <ref refid="group__tf__int_1gad44635e5f36e3ff87017e674a0ba1e96" kindref="member">BT_INT8</ref> | <ref refid="group__tf__int_1ga2fc0128b8f9f51961efa661bd6c36523" kindref="member">BTMT_CHAR</ref></initializer>
        <briefdescription>
<para>signed char </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="306" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga7133ca0feba2a5aaff3cd2ad9e80ac00" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_UCHAR</definition>
        <argsstring></argsstring>
        <name>BTF_UCHAR</name>
        <initializer>= <ref refid="group__tf__int_1gad44635e5f36e3ff87017e674a0ba1e96" kindref="member">BT_INT8</ref> | <ref refid="group__tf__int_1gae657884ce0de31e6bc235c3bd6dea235" kindref="member">BTMT_USIGNED</ref></initializer>
        <briefdescription>
<para>unsigned char </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="307" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="307" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1gae2ac263530b33759a569808ddc8c8838" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_UINT8</definition>
        <argsstring></argsstring>
        <name>BTF_UINT8</name>
        <initializer>= <ref refid="group__tf__int_1gad44635e5f36e3ff87017e674a0ba1e96" kindref="member">BT_INT8</ref> | <ref refid="group__tf__int_1gae657884ce0de31e6bc235c3bd6dea235" kindref="member">BTMT_USIGNED</ref></initializer>
        <briefdescription>
<para>unsigned byte </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="308" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="308" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga24323887798e85234cf23638dbae9607" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_INT16</definition>
        <argsstring></argsstring>
        <name>BTF_INT16</name>
        <initializer>= <ref refid="group__tf__int_1ga111f1b71efa2a45245d7ba9469ceb18f" kindref="member">BT_INT16</ref> | <ref refid="group__tf__int_1gaed538a73e5a21b72509b0dd0edf6574c" kindref="member">BTMT_SIGNED</ref></initializer>
        <briefdescription>
<para>signed short </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="310" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="310" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga11cd0cd85c8e0bf67add7ecda0c8519c" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_UINT16</definition>
        <argsstring></argsstring>
        <name>BTF_UINT16</name>
        <initializer>= <ref refid="group__tf__int_1ga111f1b71efa2a45245d7ba9469ceb18f" kindref="member">BT_INT16</ref> | <ref refid="group__tf__int_1gae657884ce0de31e6bc235c3bd6dea235" kindref="member">BTMT_USIGNED</ref></initializer>
        <briefdescription>
<para>unsigned short </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="311" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="311" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1gad76905baf63ca3ef00306cff010075ae" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_INT32</definition>
        <argsstring></argsstring>
        <name>BTF_INT32</name>
        <initializer>= <ref refid="group__tf__int_1ga6e8a1235fb794ee0e5bfab074d2dfc7d" kindref="member">BT_INT32</ref> | <ref refid="group__tf__int_1gaed538a73e5a21b72509b0dd0edf6574c" kindref="member">BTMT_SIGNED</ref></initializer>
        <briefdescription>
<para>signed int </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="313" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga5c66f893953d1b56d97a19fad216b9cd" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_UINT32</definition>
        <argsstring></argsstring>
        <name>BTF_UINT32</name>
        <initializer>= <ref refid="group__tf__int_1ga6e8a1235fb794ee0e5bfab074d2dfc7d" kindref="member">BT_INT32</ref> | <ref refid="group__tf__int_1gae657884ce0de31e6bc235c3bd6dea235" kindref="member">BTMT_USIGNED</ref></initializer>
        <briefdescription>
<para>unsigned int </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="314" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="314" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga09e667dddebe3b599a1a22d43adc279b" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_INT64</definition>
        <argsstring></argsstring>
        <name>BTF_INT64</name>
        <initializer>= <ref refid="group__tf__int_1ga245e5fd5f4a2eac20183c1e3e6c81837" kindref="member">BT_INT64</ref> | <ref refid="group__tf__int_1gaed538a73e5a21b72509b0dd0edf6574c" kindref="member">BTMT_SIGNED</ref></initializer>
        <briefdescription>
<para>signed long </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="316" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga2aedc026ad655dba0ad0d99349be3987" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_UINT64</definition>
        <argsstring></argsstring>
        <name>BTF_UINT64</name>
        <initializer>= <ref refid="group__tf__int_1ga245e5fd5f4a2eac20183c1e3e6c81837" kindref="member">BT_INT64</ref> | <ref refid="group__tf__int_1gae657884ce0de31e6bc235c3bd6dea235" kindref="member">BTMT_USIGNED</ref></initializer>
        <briefdescription>
<para>unsigned long </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="317" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1gac322889131d82624af938508a3bae29b" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_INT128</definition>
        <argsstring></argsstring>
        <name>BTF_INT128</name>
        <initializer>= <ref refid="group__tf__int_1ga248c7431d9792b1a4d48f422368bb77b" kindref="member">BT_INT128</ref> | <ref refid="group__tf__int_1gaed538a73e5a21b72509b0dd0edf6574c" kindref="member">BTMT_SIGNED</ref></initializer>
        <briefdescription>
<para>signed 128-bit value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="319" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga1b72aa0e7ce565e0da5cad1d37e20f84" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_UINT128</definition>
        <argsstring></argsstring>
        <name>BTF_UINT128</name>
        <initializer>= <ref refid="group__tf__int_1ga248c7431d9792b1a4d48f422368bb77b" kindref="member">BT_INT128</ref> | <ref refid="group__tf__int_1gae657884ce0de31e6bc235c3bd6dea235" kindref="member">BTMT_USIGNED</ref></initializer>
        <briefdescription>
<para>unsigned 128-bit value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="320" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1gac08e7706701efe77af085823db0102f9" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_INT</definition>
        <argsstring></argsstring>
        <name>BTF_INT</name>
        <initializer>= <ref refid="group__tf__int_1ga0247bd6d30b0ca1725ec2cf6cbccdc83" kindref="member">BT_INT</ref> | <ref refid="group__tf__int_1ga12d0f4299a2a72b0c39bf42def60559f" kindref="member">BTMT_UNKSIGN</ref></initializer>
        <briefdescription>
<para>int, unknown signedness </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="322" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga4806703d16672e5666cbd8d183539f0d" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_UINT</definition>
        <argsstring></argsstring>
        <name>BTF_UINT</name>
        <initializer>= <ref refid="group__tf__int_1ga0247bd6d30b0ca1725ec2cf6cbccdc83" kindref="member">BT_INT</ref> | <ref refid="group__tf__int_1gae657884ce0de31e6bc235c3bd6dea235" kindref="member">BTMT_USIGNED</ref></initializer>
        <briefdescription>
<para>unsigned int </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="323" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1gae8349cd42fa6fc5ed0d43ce09cd2b015" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_SINT</definition>
        <argsstring></argsstring>
        <name>BTF_SINT</name>
        <initializer>= <ref refid="group__tf__int_1ga0247bd6d30b0ca1725ec2cf6cbccdc83" kindref="member">BT_INT</ref> | <ref refid="group__tf__int_1gaed538a73e5a21b72509b0dd0edf6574c" kindref="member">BTMT_SIGNED</ref></initializer>
        <briefdescription>
<para>singed int </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="324" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1gaecd76b18e7247eae4cc2ab7b5ce07722" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_BOOL</definition>
        <argsstring></argsstring>
        <name>BTF_BOOL</name>
        <initializer>= <ref refid="group__tf__bool_1ga356f8955bf9845e4dba1316fc2b29b80" kindref="member">BT_BOOL</ref></initializer>
        <briefdescription>
<para>boolean </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="326" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1gae2965fc7a244e1147d99547e97284848" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_FLOAT</definition>
        <argsstring></argsstring>
        <name>BTF_FLOAT</name>
        <initializer>= <ref refid="group__tf__float_1ga59a226ec408b8610feafdd4c32267a82" kindref="member">BT_FLOAT</ref> | <ref refid="group__tf__float_1gacebc0abbf7692bfdf20dff86e9bf588f" kindref="member">BTMT_FLOAT</ref></initializer>
        <briefdescription>
<para>float </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="328" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga14c776e37b0c4461f737a2f14d5401f9" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_DOUBLE</definition>
        <argsstring></argsstring>
        <name>BTF_DOUBLE</name>
        <initializer>= <ref refid="group__tf__float_1ga59a226ec408b8610feafdd4c32267a82" kindref="member">BT_FLOAT</ref> | <ref refid="group__tf__float_1gad53977235765c0dd13fcbdfd21150cea" kindref="member">BTMT_DOUBLE</ref></initializer>
        <briefdescription>
<para>double </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="329" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1gaa86134b88d5f0c1c33a482ba02e5a314" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_LDOUBLE</definition>
        <argsstring></argsstring>
        <name>BTF_LDOUBLE</name>
        <initializer>= <ref refid="group__tf__float_1ga59a226ec408b8610feafdd4c32267a82" kindref="member">BT_FLOAT</ref> | <ref refid="group__tf__float_1ga3f4c3be08ef760f80e6123e5f43ada38" kindref="member">BTMT_LNGDBL</ref></initializer>
        <briefdescription>
<para>long double </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="330" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1gab1d2b6cae3e1bc50dac609db191e33bc" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_TBYTE</definition>
        <argsstring></argsstring>
        <name>BTF_TBYTE</name>
        <initializer>= <ref refid="group__tf__float_1ga59a226ec408b8610feafdd4c32267a82" kindref="member">BT_FLOAT</ref> | <ref refid="group__tf__float_1ga34f394b71c9b27c46560178e0054f79b" kindref="member">BTMT_SPECFLT</ref></initializer>
        <briefdescription>
<para>see <ref refid="group__tf__float_1ga34f394b71c9b27c46560178e0054f79b" kindref="member">BTMT_SPECFLT</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="331" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga861f45bbf58b9d699897e234b0905009" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_STRUCT</definition>
        <argsstring></argsstring>
        <name>BTF_STRUCT</name>
        <initializer>= <ref refid="group__tf__complex_1ga86c5e589737e005ba4741423fd2ca5c6" kindref="member">BT_COMPLEX</ref> | <ref refid="group__tf__complex_1gacf095fd2f25df783b0f5a321d91c6adc" kindref="member">BTMT_STRUCT</ref></initializer>
        <briefdescription>
<para>struct </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="333" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="333" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga0a5536b8782826bb2b925fc65c49788c" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_UNION</definition>
        <argsstring></argsstring>
        <name>BTF_UNION</name>
        <initializer>= <ref refid="group__tf__complex_1ga86c5e589737e005ba4741423fd2ca5c6" kindref="member">BT_COMPLEX</ref> | <ref refid="group__tf__complex_1gaf117f7735078132037de2553d7ea393a" kindref="member">BTMT_UNION</ref></initializer>
        <briefdescription>
<para>union </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="334" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="334" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga5eee5573060ab34fdee9230f37d8369f" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_ENUM</definition>
        <argsstring></argsstring>
        <name>BTF_ENUM</name>
        <initializer>= <ref refid="group__tf__complex_1ga86c5e589737e005ba4741423fd2ca5c6" kindref="member">BT_COMPLEX</ref> | <ref refid="group__tf__complex_1gaa364f5b01c60e09fd5b216162817037c" kindref="member">BTMT_ENUM</ref></initializer>
        <briefdescription>
<para>enum </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="335" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="335" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__shortcuts_1ga64e49eed2f4e754689e7bcc7f6efdd74" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BTF_TYPEDEF</definition>
        <argsstring></argsstring>
        <name>BTF_TYPEDEF</name>
        <initializer>= <ref refid="group__tf__complex_1ga86c5e589737e005ba4741423fd2ca5c6" kindref="member">BT_COMPLEX</ref> | <ref refid="group__tf__complex_1gaa4e0907e07d1538053682550c2117290" kindref="member">BTMT_TYPEDEF</ref></initializer>
        <briefdescription>
<para>typedef </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="336" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tattr__ext_1gab2774527d973c5dd40e9f7e579c7af36" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__tattr__ext_1ga91970b0d779fe968b3b22572526048a0" kindref="member">type_sign_t</ref></type>
        <definition>const type_sign_t no_sign</definition>
        <argsstring></argsstring>
        <name>no_sign</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>no sign, or unknown </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="559" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="559" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tattr__ext_1gaf45de3aa578ef02a11d2bf2b17359862" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__tattr__ext_1ga91970b0d779fe968b3b22572526048a0" kindref="member">type_sign_t</ref></type>
        <definition>const type_sign_t type_signed</definition>
        <argsstring></argsstring>
        <name>type_signed</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>signed type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="560" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="560" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tattr__ext_1ga1de8496252de025e429aec933c9c8aa3" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__tattr__ext_1ga91970b0d779fe968b3b22572526048a0" kindref="member">type_sign_t</ref></type>
        <definition>const type_sign_t type_unsigned</definition>
        <argsstring></argsstring>
        <name>type_unsigned</name>
        <initializer>= 2</initializer>
        <briefdescription>
<para>unsigned type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="561" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="561" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m__ptr_1gac26159e027c25ac6883ebe5a4da05740" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_MASK</definition>
        <argsstring></argsstring>
        <name>CM_MASK</name>
        <initializer>= 0x03</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="721" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="721" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m__ptr_1ga771c3366e1b6919acfe35a80c54290c3" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_UNKNOWN</definition>
        <argsstring></argsstring>
        <name>CM_UNKNOWN</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="722" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="722" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m__ptr_1ga9206003f6cc49fbd8d3d06d0e6f439ce" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_N8_F16</definition>
        <argsstring></argsstring>
        <name>CM_N8_F16</name>
        <initializer>= 0x01</initializer>
        <briefdescription>
<para>1: near 1byte, far 2bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="723" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="723" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m__ptr_1gac8a7ae79db16213bffc6e707fb3421e3" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_N64</definition>
        <argsstring></argsstring>
        <name>CM_N64</name>
        <initializer>= 0x01</initializer>
        <briefdescription>
<para>if sizeof(int)&gt;2 then ptr size is 8bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="724" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="724" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m__ptr_1ga1ab29a6197838fd27762bfa444d02869" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_N16_F32</definition>
        <argsstring></argsstring>
        <name>CM_N16_F32</name>
        <initializer>= 0x02</initializer>
        <briefdescription>
<para>2: near 2bytes, far 4bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="725" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m__ptr_1ga13e9b0b738a1057a74b1be34d526d745" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_N32_F48</definition>
        <argsstring></argsstring>
        <name>CM_N32_F48</name>
        <initializer>= 0x03</initializer>
        <briefdescription>
<para>4: near 4bytes, far 6bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="726" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="726" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___m___1ga2922449d0afbf620fd4fffc6ea1118a5" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_M_MASK</definition>
        <argsstring></argsstring>
        <name>CM_M_MASK</name>
        <initializer>= 0x0C</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="730" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="730" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___m___1ga61152e81d5d4984da816ff4eea5e38e1" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_M_NN</definition>
        <argsstring></argsstring>
        <name>CM_M_NN</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
<para>small: code=near, data=near (or unknown if CM_UNKNOWN) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="731" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___m___1gabbcc3b1abcde2c94f9351342fd1fb126" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_M_FF</definition>
        <argsstring></argsstring>
        <name>CM_M_FF</name>
        <initializer>= 0x04</initializer>
        <briefdescription>
<para>large: code=far, data=far </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="732" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="732" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___m___1gaec1ac661734fbd809f3c1e4c749b85cf" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_M_NF</definition>
        <argsstring></argsstring>
        <name>CM_M_NF</name>
        <initializer>= 0x08</initializer>
        <briefdescription>
<para>compact: code=near, data=far </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="733" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="733" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___m___1ga87afd41e475f92f6b6f1e1dbb61ed659" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_M_FN</definition>
        <argsstring></argsstring>
        <name>CM_M_FN</name>
        <initializer>= 0x0C</initializer>
        <briefdescription>
<para>medium: code=far, data=near </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="734" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1ga624b5fdba452b1a35e3e37a665aa25da" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_MASK</definition>
        <argsstring></argsstring>
        <name>CM_CC_MASK</name>
        <initializer>= 0xF0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="744" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="744" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1ga1f9fb8e1b23900c01e00c80be3a57ea5" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_INVALID</definition>
        <argsstring></argsstring>
        <name>CM_CC_INVALID</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
<para>this value is invalid </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="745" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="745" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1ga1d8607c930b67577c7f39ac7a5d24612" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_UNKNOWN</definition>
        <argsstring></argsstring>
        <name>CM_CC_UNKNOWN</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
<para>unknown calling convention </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="746" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="746" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1gaecea308116df480106f38d080f73ab8e" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_VOIDARG</definition>
        <argsstring></argsstring>
        <name>CM_CC_VOIDARG</name>
        <initializer>= 0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>function without arguments if has other cc and argnum == 0, represent as f() - unknown list </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="747" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="747" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1ga11b8d9fb7c859971c035e23efe3cda0e" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_CDECL</definition>
        <argsstring></argsstring>
        <name>CM_CC_CDECL</name>
        <initializer>= 0x30</initializer>
        <briefdescription>
<para>stack </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="750" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="750" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1ga8e4d072bec04a20754290978b8b141be" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_ELLIPSIS</definition>
        <argsstring></argsstring>
        <name>CM_CC_ELLIPSIS</name>
        <initializer>= 0x40</initializer>
        <briefdescription>
<para>cdecl + ellipsis </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="751" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="751" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1ga1d547c299b4716ea45c11fe81a7dbbbc" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_STDCALL</definition>
        <argsstring></argsstring>
        <name>CM_CC_STDCALL</name>
        <initializer>= 0x50</initializer>
        <briefdescription>
<para>stack, purged </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="752" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="752" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1gaad53854e65b7d43e106739ce74f8f0f9" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_PASCAL</definition>
        <argsstring></argsstring>
        <name>CM_CC_PASCAL</name>
        <initializer>= 0x60</initializer>
        <briefdescription>
<para>stack, purged, reverse order of args </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="753" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="753" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1gacdb6a32c8e2932de0b3dc51a7fe4c42e" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_FASTCALL</definition>
        <argsstring></argsstring>
        <name>CM_CC_FASTCALL</name>
        <initializer>= 0x70</initializer>
        <briefdescription>
<para>stack, purged (x86), first args are in regs (compiler-dependent) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="754" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="754" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1gab857ab54b65bc64f6dbcafc03f1c7e6c" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_THISCALL</definition>
        <argsstring></argsstring>
        <name>CM_CC_THISCALL</name>
        <initializer>= 0x80</initializer>
        <briefdescription>
<para>stack, purged (x86), first arg is in reg (compiler-dependent) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="755" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="755" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1ga463e98044d088a7e4d5c497269647094" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_MANUAL</definition>
        <argsstring></argsstring>
        <name>CM_CC_MANUAL</name>
        <initializer>= 0x90</initializer>
        <briefdescription>
<para>special case for compiler specific </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="756" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="756" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1ga81fe26502529dff431e52823a24db36b" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_SPOILED</definition>
        <argsstring></argsstring>
        <name>CM_CC_SPOILED</name>
        <initializer>= 0xA0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is NOT a cc! Mark of __spoil record the low nibble is count and after n {spoilreg_t} present real cm_t byte. if n == 15, the next byte is the function attribute byte. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="757" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="757" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1gaa335ce687c31dba9bfa57ba71778b59d" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_RESERVE4</definition>
        <argsstring></argsstring>
        <name>CM_CC_RESERVE4</name>
        <initializer>= 0xB0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="761" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="761" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1gac3b54fd88189de0df1945653a40c52d9" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_RESERVE3</definition>
        <argsstring></argsstring>
        <name>CM_CC_RESERVE3</name>
        <initializer>= 0xC0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="762" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="762" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1ga6c042d42c6daf03444d06907a8498b06" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_SPECIALE</definition>
        <argsstring></argsstring>
        <name>CM_CC_SPECIALE</name>
        <initializer>= 0xD0</initializer>
        <briefdescription>
<para><ref refid="group___c_m___c_c___1ga377054c414ac35be6e5e9bf6c550b390" kindref="member">CM_CC_SPECIAL</ref> with ellipsis </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="763" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="763" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1ga1eb1e9290d190ce7234dd016344f9ecd" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_SPECIALP</definition>
        <argsstring></argsstring>
        <name>CM_CC_SPECIALP</name>
        <initializer>= 0xE0</initializer>
        <briefdescription>
<para>Equal to <ref refid="group___c_m___c_c___1ga377054c414ac35be6e5e9bf6c550b390" kindref="member">CM_CC_SPECIAL</ref>, but with purged stack. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="764" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="764" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_m___c_c___1ga377054c414ac35be6e5e9bf6c550b390" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t CM_CC_SPECIAL</definition>
        <argsstring></argsstring>
        <name>CM_CC_SPECIAL</name>
        <initializer>= 0xF0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>locations of all arguments and the return value are present in the function declaration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="765" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="765" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___b_f_a___1ga3e4f09353c2f3f849f1c6250145f613e" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BFA_NORET</definition>
        <argsstring></argsstring>
        <name>BFA_NORET</name>
        <initializer>= 0x01</initializer>
        <briefdescription>
<para>__noreturn </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="782" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="782" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___b_f_a___1gadbaa327b8d82c192ac8efd26706c47a5" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BFA_PURE</definition>
        <argsstring></argsstring>
        <name>BFA_PURE</name>
        <initializer>= 0x02</initializer>
        <briefdescription>
<para>__pure </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="783" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="783" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___b_f_a___1gaba64992f3e9d281bd429c91a40f93825" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BFA_HIGH</definition>
        <argsstring></argsstring>
        <name>BFA_HIGH</name>
        <initializer>= 0x04</initializer>
        <briefdescription>
<para>high level prototype (with possibly hidden args) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="784" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="784" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___b_f_a___1ga17307c5ad75c6bfc26d3225481ad713d" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BFA_STATIC</definition>
        <argsstring></argsstring>
        <name>BFA_STATIC</name>
        <initializer>= 0x08</initializer>
        <briefdescription>
<para>static </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="785" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="785" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___b_f_a___1ga99cbb6e31f044cb533ff5fd95ba37d28" prot="public" static="no" mutable="no">
        <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>const type_t BFA_VIRTUAL</definition>
        <argsstring></argsstring>
        <name>BFA_VIRTUAL</name>
        <initializer>= 0x10</initializer>
        <briefdescription>
<para>virtual </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="786" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="786" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___a_l_o_c___1ga5981f9b45ff7e81a6cb884107e73ffe7" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__argloc_1gafaa486b80f279565c5e29558d6694afd" kindref="member">argloc_type_t</ref></type>
        <definition>const argloc_type_t ALOC_NONE</definition>
        <argsstring></argsstring>
        <name>ALOC_NONE</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>none </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="809" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="809" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___a_l_o_c___1gade41123f7b84aadd16552c2d52943842" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__argloc_1gafaa486b80f279565c5e29558d6694afd" kindref="member">argloc_type_t</ref></type>
        <definition>const argloc_type_t ALOC_STACK</definition>
        <argsstring></argsstring>
        <name>ALOC_STACK</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>stack offset </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="810" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="810" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___a_l_o_c___1ga77ee658648b8a9f916838508ab40fb5a" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__argloc_1gafaa486b80f279565c5e29558d6694afd" kindref="member">argloc_type_t</ref></type>
        <definition>const argloc_type_t ALOC_DIST</definition>
        <argsstring></argsstring>
        <name>ALOC_DIST</name>
        <initializer>= 2</initializer>
        <briefdescription>
<para>distributed (scattered) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="811" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="811" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___a_l_o_c___1gaac0445d0ad6d0681841a3ff71c1d2305" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__argloc_1gafaa486b80f279565c5e29558d6694afd" kindref="member">argloc_type_t</ref></type>
        <definition>const argloc_type_t ALOC_REG1</definition>
        <argsstring></argsstring>
        <name>ALOC_REG1</name>
        <initializer>= 3</initializer>
        <briefdescription>
<para>one register (and offset within it) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="812" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="812" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___a_l_o_c___1ga7d78615d7e58de9c53e5036c09c7f558" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__argloc_1gafaa486b80f279565c5e29558d6694afd" kindref="member">argloc_type_t</ref></type>
        <definition>const argloc_type_t ALOC_REG2</definition>
        <argsstring></argsstring>
        <name>ALOC_REG2</name>
        <initializer>= 4</initializer>
        <briefdescription>
<para>register pair </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="813" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="813" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___a_l_o_c___1ga72931cfa80f89bd8e4c6bf512391d695" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__argloc_1gafaa486b80f279565c5e29558d6694afd" kindref="member">argloc_type_t</ref></type>
        <definition>const argloc_type_t ALOC_RREL</definition>
        <argsstring></argsstring>
        <name>ALOC_RREL</name>
        <initializer>= 5</initializer>
        <briefdescription>
<para>register relative </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="814" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="814" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___a_l_o_c___1ga9342b6c4b8dcb9c10ee69c2a5251f3dc" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__argloc_1gafaa486b80f279565c5e29558d6694afd" kindref="member">argloc_type_t</ref></type>
        <definition>const argloc_type_t ALOC_STATIC</definition>
        <argsstring></argsstring>
        <name>ALOC_STATIC</name>
        <initializer>= 6</initializer>
        <briefdescription>
<para>global address </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="815" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="815" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___a_l_o_c___1ga6be7eb6681fc4a4396bfd4ba9b28af95" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__argloc_1gafaa486b80f279565c5e29558d6694afd" kindref="member">argloc_type_t</ref></type>
        <definition>const argloc_type_t ALOC_CUSTOM</definition>
        <argsstring></argsstring>
        <name>ALOC_CUSTOM</name>
        <initializer>= 7</initializer>
        <briefdescription>
<para>custom argloc (7 or higher) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="816" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="816" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c___p_c___1ga703ec61bdd676dec86e178dc1ab255c0" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t C_PC_TINY</definition>
        <argsstring></argsstring>
        <name>C_PC_TINY</name>
        <initializer>= (<ref refid="group___c_m__ptr_1ga1ab29a6197838fd27762bfa444d02869" kindref="member">CM_N16_F32</ref> | <ref refid="group___c_m___m___1ga61152e81d5d4984da816ff4eea5e38e1" kindref="member">CM_M_NN</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1241" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c___p_c___1ga38ca0f5efb2f441cd9512d91011521d3" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t C_PC_SMALL</definition>
        <argsstring></argsstring>
        <name>C_PC_SMALL</name>
        <initializer>= (<ref refid="group___c_m__ptr_1ga1ab29a6197838fd27762bfa444d02869" kindref="member">CM_N16_F32</ref> | <ref refid="group___c_m___m___1ga61152e81d5d4984da816ff4eea5e38e1" kindref="member">CM_M_NN</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1242" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c___p_c___1gaabbda27c9e20233632dd8581a325533e" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t C_PC_COMPACT</definition>
        <argsstring></argsstring>
        <name>C_PC_COMPACT</name>
        <initializer>= (<ref refid="group___c_m__ptr_1ga1ab29a6197838fd27762bfa444d02869" kindref="member">CM_N16_F32</ref> | <ref refid="group___c_m___m___1gaec1ac661734fbd809f3c1e4c749b85cf" kindref="member">CM_M_NF</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1243" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c___p_c___1ga5310ac65e3ba84567e76cf0cb41ddc8a" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t C_PC_MEDIUM</definition>
        <argsstring></argsstring>
        <name>C_PC_MEDIUM</name>
        <initializer>= (<ref refid="group___c_m__ptr_1ga1ab29a6197838fd27762bfa444d02869" kindref="member">CM_N16_F32</ref> | <ref refid="group___c_m___m___1ga87afd41e475f92f6b6f1e1dbb61ed659" kindref="member">CM_M_FN</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1244" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c___p_c___1ga5e6bfe8be98dcc8fa524f116c7232eef" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t C_PC_LARGE</definition>
        <argsstring></argsstring>
        <name>C_PC_LARGE</name>
        <initializer>= (<ref refid="group___c_m__ptr_1ga1ab29a6197838fd27762bfa444d02869" kindref="member">CM_N16_F32</ref> | <ref refid="group___c_m___m___1gabbcc3b1abcde2c94f9351342fd1fb126" kindref="member">CM_M_FF</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1245" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1245" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c___p_c___1ga8fe0a366ce567586f794ed1e06df1fa2" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t C_PC_HUGE</definition>
        <argsstring></argsstring>
        <name>C_PC_HUGE</name>
        <initializer>= (<ref refid="group___c_m__ptr_1ga1ab29a6197838fd27762bfa444d02869" kindref="member">CM_N16_F32</ref> | <ref refid="group___c_m___m___1gabbcc3b1abcde2c94f9351342fd1fb126" kindref="member">CM_M_FF</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1246" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c___p_c___1ga20dd6b7917cae74db81257c8b3eb8744" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>const cm_t C_PC_FLAT</definition>
        <argsstring></argsstring>
        <name>C_PC_FLAT</name>
        <initializer>= (<ref refid="group___c_m__ptr_1ga13e9b0b738a1057a74b1be34d526d745" kindref="member">CM_N32_F48</ref> | <ref refid="group___c_m___m___1ga61152e81d5d4984da816ff4eea5e38e1" kindref="member">CM_M_NN</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1247" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_o_m_p___1ga3c5c611a8605bf67f12b8dbf02227074" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
        <definition>const comp_t COMP_MASK</definition>
        <argsstring></argsstring>
        <name>COMP_MASK</name>
        <initializer>= 0x0F</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1400" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_o_m_p___1ga5a92f388d41e4a0996e66763eb09092b" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
        <definition>const comp_t COMP_UNK</definition>
        <argsstring></argsstring>
        <name>COMP_UNK</name>
        <initializer>= 0x00</initializer>
        <briefdescription>
<para>Unknown. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1401" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_o_m_p___1gad876a67415a612fa2148b9290eb202cf" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
        <definition>const comp_t COMP_MS</definition>
        <argsstring></argsstring>
        <name>COMP_MS</name>
        <initializer>= 0x01</initializer>
        <briefdescription>
<para>Visual C++. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1402" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_o_m_p___1ga8451a3a255400096698c33f576aa3a27" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
        <definition>const comp_t COMP_BC</definition>
        <argsstring></argsstring>
        <name>COMP_BC</name>
        <initializer>= 0x02</initializer>
        <briefdescription>
<para>Borland C++. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1403" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1403" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_o_m_p___1ga0a36a8eeecb37fdf4bfd38967b3abc42" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
        <definition>const comp_t COMP_WATCOM</definition>
        <argsstring></argsstring>
        <name>COMP_WATCOM</name>
        <initializer>= 0x03</initializer>
        <briefdescription>
<para>Watcom C++. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1404" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_o_m_p___1ga8f72af77206ae6e513468b0b2d0d8d7d" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
        <definition>const comp_t COMP_GNU</definition>
        <argsstring></argsstring>
        <name>COMP_GNU</name>
        <initializer>= 0x06</initializer>
        <briefdescription>
<para>GNU C++. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1407" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_o_m_p___1gafc1030f9c3d3971db56005d7f6709078" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
        <definition>const comp_t COMP_VISAGE</definition>
        <argsstring></argsstring>
        <name>COMP_VISAGE</name>
        <initializer>= 0x07</initializer>
        <briefdescription>
<para>Visual Age C++. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1408" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_o_m_p___1ga09579faa922db2326a2d339ee77f4d39" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
        <definition>const comp_t COMP_BP</definition>
        <argsstring></argsstring>
        <name>COMP_BP</name>
        <initializer>= 0x08</initializer>
        <briefdescription>
<para>Delphi. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1409" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group___c_o_m_p___1gae1bdf23b2ef18f213d7b492be498c40e" prot="public" static="no" mutable="no">
        <type>const <ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
        <definition>const comp_t COMP_UNSURE</definition>
        <argsstring></argsstring>
        <name>COMP_UNSURE</name>
        <initializer>= 0x80</initializer>
        <briefdescription>
<para>uncertain compiler id </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1411" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="typeinf_8hpp_1a8dfbf55f283e8e1deaf195dc2576f63d" prot="public" static="no" mutable="no">
        <type>const size_t</type>
        <definition>const size_t BADSIZE</definition>
        <argsstring></argsstring>
        <name>BADSIZE</name>
        <initializer>= size_t(-1)</initializer>
        <briefdescription>
<para>bad type size </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1535" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1535" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__numbered__types_1gad447f7a11c27974f14c5b6d303ed4213" prot="public" static="no" mutable="no">
        <type>const <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
        <definition>const uint32 BADORD</definition>
        <argsstring></argsstring>
        <name>BADORD</name>
        <initializer>= <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref>(-1)</initializer>
        <briefdescription>
<para>invalid type ordinal </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2027" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2027" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__nontrivial_1ga41407e17da4d0e535fb1384b498ebb43" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int FIRST_NONTRIVIAL_TYPID</definition>
        <argsstring></argsstring>
        <name>FIRST_NONTRIVIAL_TYPID</name>
        <initializer>= 0x100</initializer>
        <briefdescription>
<para>Denotes the first bit describing a nontrivial type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2422" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__nontrivial_1ga54d99d30a296a37f01b39f6d84986ebf" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int TYPID_ISREF</definition>
        <argsstring></argsstring>
        <name>TYPID_ISREF</name>
        <initializer>= 0x100</initializer>
        <briefdescription>
<para>Identifies that a type that is a typeref. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2423" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__tf__nontrivial_1ga21aa59fbf8ebded3aa6b709cd8c0d782" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int TYPID_SHIFT</definition>
        <argsstring></argsstring>
        <name>TYPID_SHIFT</name>
        <initializer>= 9</initializer>
        <briefdescription>
<para>First type detail bit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2424" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2424" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="typeinf_8hpp_1a5600637357881b01f287352dc9c2f0c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_const</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_const</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__modifiers_1ga9620c6eab27564299c432f6f22c963e0" kindref="member">BTM_CONST</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="344" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="344" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1adde8e08567e4911d1543dffc887f11be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_volatile</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_volatile</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__modifiers_1ga980855dd322c9bc15ac45421c7267d13" kindref="member">BTM_VOLATILE</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="345" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="345" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a02c03bae7fa4ae861b89c9a02f912874" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>THREAD_SAFE type_t get_base_type</definition>
        <argsstring>(type_t t)</argsstring>
        <name>get_base_type</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Get get basic type bits (<ref refid="group__tf__mask_1gae890bf98baf7dcadf121a9b5ee1eed51" kindref="member">TYPE_BASE_MASK</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="347" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="347" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1aa01a1ac75916e6d0d660825232bf2617" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>THREAD_SAFE type_t get_type_flags</definition>
        <argsstring>(type_t t)</argsstring>
        <name>get_type_flags</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Get type flags (<ref refid="group__tf__mask_1gaac5ec5ef511fe0323471b0f2765d85cf" kindref="member">TYPE_FLAGS_MASK</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="348" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="348" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a073b3c678f297e564eed971b2122e2d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
        <definition>THREAD_SAFE type_t get_full_type</definition>
        <argsstring>(type_t t)</argsstring>
        <name>get_full_type</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Get basic type bits + type flags (<ref refid="group__tf__mask_1ga0546e0e6a47765f33245d7a9d6b175aa" kindref="member">TYPE_FULL_MASK</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="349" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="349" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ae05ad7eaa75d2591180350701c160e5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_typeid_last</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_typeid_last</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the type_t the last byte of type declaration? (there are no additional bytes after a basic type, see <ref refid="group__tf__last__basic_1gadd35f3c45f5a8e13b0ce6603702c1445" kindref="member">_BT_LAST_BASIC</ref>) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="353" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="353" bodyend="353"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a4740b6818574b8ccd7a13cbffe1fbc17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_partial</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_partial</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Identifies an unknown or void type with a known size (see <ref refid="group__tf__unk" kindref="compound">Basic type: unknown &amp; void</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="356" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="356" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a78e700eca7128e0100c9778faa98c944" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_void</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_void</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1ga8e3b664437b42978e3549134abf2ea26" kindref="member">BTF_VOID</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="358" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ab9d2ab5739b4d2798e0ef0a0113507d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_unknown</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_unknown</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__conv__unk_1ga15de9552b0654e950d709fd9c165f7aa" kindref="member">BT_UNKNOWN</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="359" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="359" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ad1d6f93c0f425eeb4bebd31613b136fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_ptr</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_ptr</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__ptr_1ga1ea9ae22535f9fb09b2c74f6e7526d4e" kindref="member">BT_PTR</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="361" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="361" bodyend="359"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a6c5c0a9ff8f7a72797e673386816308a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_complex</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_complex</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__complex_1ga86c5e589737e005ba4741423fd2ca5c6" kindref="member">BT_COMPLEX</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="362" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="362" bodyend="361"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a0d08b523bb014e791bedcdc95f49877a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_func</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_func</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__func_1ga7b7fee21f21237beb6d91e854410e0fa" kindref="member">BT_FUNC</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="363" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="363" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a6cb6719ddbacfb1990b3370c8f716b7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_array</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_array</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__array_1ga8c17124d38e796e7cd8804808e4bb5b3" kindref="member">BT_ARRAY</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="364" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="364" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a21130607735a1b00bab3f6a0a2e559ef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_typedef</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_typedef</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1ga64e49eed2f4e754689e7bcc7f6efdd74" kindref="member">BTF_TYPEDEF</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="366" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="366" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ae683f03a9c04f99d6cd408e1c6a8469b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_sue</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_sue</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Is the type a struct/union/enum? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="367" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="367" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a18f44db5315948a00d037f6ba43adbb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_struct</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_struct</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1ga861f45bbf58b9d699897e234b0905009" kindref="member">BTF_STRUCT</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="368" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="368" bodyend="367"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a39de099aa2205375ac1f8c3f193c8eb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_union</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_union</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1ga0a5536b8782826bb2b925fc65c49788c" kindref="member">BTF_UNION</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="369" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="369" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a919fdffd7f3cc91d8001c89ff495dda2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_struni</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_struni</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Is the type a struct or union? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="370" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="370" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a6aa5a8654c3b7a645353b6010b843e43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_enum</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_enum</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1ga5eee5573060ab34fdee9230f37d8369f" kindref="member">BTF_ENUM</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="371" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="371" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a3bc35245ae4a50b2a11b923d8b0db885" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_bitfld</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_bitfld</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__complex_1ga0d1af452c81ac917f9eab9d456f52454" kindref="member">BT_BITFIELD</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="373" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="373" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a5154911973164c300adab0bf2938bdb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_int</definition>
        <argsstring>(type_t bt)</argsstring>
        <name>is_type_int</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>bt</declname>
        </param>
        <briefdescription>
<para>Does the type_t specify one of the basic types in <ref refid="group__tf__int" kindref="compound">Basic type: integer</ref>? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="377" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="377" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1af4313d6e8e35ce13f232ab09db6e05e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_int128</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_int128</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Does the type specify a 128-bit value? (signed or unsigned, see <ref refid="group__tf__int" kindref="compound">Basic type: integer</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="380" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="380" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1aefc824eb005d77267941ad1b4a24a3cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_int64</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_int64</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Does the type specify a 64-bit value? (signed or unsigned, see <ref refid="group__tf__int" kindref="compound">Basic type: integer</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="387" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="387" bodyend="391"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a3d67917b0bac1d2bc82fe62b3b8ba4c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_int32</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_int32</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Does the type specify a 32-bit value? (signed or unsigned, see <ref refid="group__tf__int" kindref="compound">Basic type: integer</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="394" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="394" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a0bdc90751ea6f751a67862e4ec166b4f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_int16</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_int16</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Does the type specify a 16-bit value? (signed or unsigned, see <ref refid="group__tf__int" kindref="compound">Basic type: integer</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="401" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="401" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a18d46944648115d1443b220d590c154f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_char</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_char</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Does the type specify a char value? (signed or unsigned, see <ref refid="group__tf__int" kindref="compound">Basic type: integer</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="408" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="408" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1aa43c8d9be5b623ba5d70b8b80c438b98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_paf</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_paf</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Is the type a pointer, array, or function type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="415" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="415" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a28faf30cb1cc755210f3d5003f2da69b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_ptr_or_array</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_ptr_or_array</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Is the type a pointer or array type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="422" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="422" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a41e60192598d88a85050400ff2fdc1f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_floating</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_floating</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Is the type a floating point type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="424" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="424" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a376bbcfe511295ad874cd413ef335d53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_integral</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_integral</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Is the type an integral type (char/short/int/long/bool)? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="426" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="426" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a94a325be0e026ad4a44c1a1e062090e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_ext_integral</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_ext_integral</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Is the type an extended integral type? (integral or enum) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="428" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="428" bodyend="428"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a524514edcfac0b01b270cfba2263fac3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_arithmetic</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_arithmetic</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Is the type an arithmetic type? (floating or integral) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="430" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="430" bodyend="430"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a023942e426aad17e816b4469ad9dfc1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_ext_arithmetic</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_ext_arithmetic</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Is the type an extended arithmetic type? (arithmetic or enum) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="432" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="432" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a45eef29001c30761de2110fdae05dc7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_uint</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_uint</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1ga4806703d16672e5666cbd8d183539f0d" kindref="member">BTF_UINT</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="434" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a3fe426b58e85f7c3aeb7687d64d6f243" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_uchar</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_uchar</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1ga7133ca0feba2a5aaff3cd2ad9e80ac00" kindref="member">BTF_UCHAR</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="435" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="435" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a3214bd58b29238944413a31b11d66099" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_uint16</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_uint16</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1ga11cd0cd85c8e0bf67add7ecda0c8519c" kindref="member">BTF_UINT16</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="436" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="436" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a006a6f759ec4f748604894153174dff4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_uint32</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_uint32</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1ga5c66f893953d1b56d97a19fad216b9cd" kindref="member">BTF_UINT32</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="437" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="437" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a9ef5964f95636e66f91a4e6b32b8fb3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_uint64</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_uint64</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1ga2aedc026ad655dba0ad0d99349be3987" kindref="member">BTF_UINT64</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="438" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="438" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ab33327282e0c1b1acbc1af071f1a08bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_uint128</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_uint128</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1ga1b72aa0e7ce565e0da5cad1d37e20f84" kindref="member">BTF_UINT128</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="439" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="439" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a7aee950119ac903e5ee4205c6f159699" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_ldouble</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_ldouble</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1gaa86134b88d5f0c1c33a482ba02e5a314" kindref="member">BTF_LDOUBLE</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="440" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="440" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a20fc48e703859445ccfdd68f98c97549" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_double</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_double</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1ga14c776e37b0c4461f737a2f14d5401f9" kindref="member">BTF_DOUBLE</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="441" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="441" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1acebaafcc39a2e90d181213bbe1fd08f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_float</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_float</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1gae2965fc7a244e1147d99547e97284848" kindref="member">BTF_FLOAT</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="442" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="442" bodyend="441"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1aa54ef5e371058262cc75d5644392c8e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_tbyte</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_tbyte</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1gae2965fc7a244e1147d99547e97284848" kindref="member">BTF_FLOAT</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="443" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="443" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a85c68448fa5a9120e6b87b2f3d45af02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_type_bool</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_type_bool</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group__tf__shortcuts_1gaecd76b18e7247eae4cc2ab7b5ce07722" kindref="member">BTF_BOOL</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="444" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="444" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a3b044ce67e074ad66bb905809f8461aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_tah_byte</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_tah_byte</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The TAH byte (type attribute header byte) denotes the start of type attributes. (see &quot;tah-typeattrs&quot; in the type bit definitions) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="499" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="499" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a9d20f03e4434bdd91c0b012bc847b610" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_sdacl_byte</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_sdacl_byte</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Identify an sdacl byte. The first sdacl byte has the following format: 11xx000x. The sdacl bytes are appended to udt fields. They indicate the start of type attributes (as the tah-bytes do). The sdacl bytes are used in the udt headers instead of the tah-byte. This is done for compatibility with old databases, they were already using sdacl bytes in udt headers and as udt field postfixes. (see &quot;sdacl-typeattrs&quot; in the type bit definitions) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="514" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="514" bodyend="517"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1aaeb51dca7f479be755b0487951ec0491" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool operator&lt;</definition>
        <argsstring>(const bytevec_t &amp;v1, const bytevec_t &amp;v2)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>const <ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const <ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare two bytevecs with &apos;&lt;&apos;. v1 is considered less than v2 if either:<itemizedlist>
<listitem><para>v1.size() &lt; v2.size()</para></listitem><listitem><para>there is some i such that v1[i] &lt; v2[i] </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="525" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="525" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ad7aa328bbcde5b9d3bd290624b199967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export append_argloc</definition>
        <argsstring>(qtype *out, const argloc_t &amp;vloc)</argsstring>
        <name>append_argloc</name>
        <param>
          <type><ref refid="pro_8h_1a7fad0f3973de5825c480e27517e159f3" kindref="member">qtype</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classargloc__t" kindref="compound">argloc_t</ref> &amp;</type>
          <declname>vloc</declname>
        </param>
        <briefdescription>
<para>Serialize argument location. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="565" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a1f4badde4e7f067828da32314fb1b9d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export extract_argloc</definition>
        <argsstring>(argloc_t *vloc, const type_t **ptype, bool is_retval)</argsstring>
        <name>extract_argloc</name>
        <param>
          <type><ref refid="classargloc__t" kindref="compound">argloc_t</ref> *</type>
          <declname>vloc</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> **</type>
          <declname>ptype</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_retval</declname>
        </param>
        <briefdescription>
<para>Deserialize argument location. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="566" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ac0939f550d67c97e80e4c90d36b52f72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> *ida_export</type>
        <definition>idaman const type_t* ida_export resolve_typedef</definition>
        <argsstring>(const til_t *til, const type_t *type)</argsstring>
        <name>resolve_typedef</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="568" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a2421768ac6d8f0891017ea68f36c78dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_restype_void</definition>
        <argsstring>(const til_t *til, const type_t *type)</argsstring>
        <name>is_restype_void</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="572" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="572" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ab1327544b02a64d8f998662976793374" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_restype_enum</definition>
        <argsstring>(const til_t *til, const type_t *type)</argsstring>
        <name>is_restype_enum</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="578" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="578" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a59481543f6668ac26f86277278c82a86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_restype_struni</definition>
        <argsstring>(const til_t *til, const type_t *type)</argsstring>
        <name>is_restype_struni</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="584" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="584" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a99a8bbe759f74bd07c1ed9988c1b1b3c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_restype_struct</definition>
        <argsstring>(const til_t *til, const type_t *type)</argsstring>
        <name>is_restype_struct</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="590" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="590" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a29aa2b3c49855b156d0c338a780112fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> ida_export</type>
        <definition>idaman type_t ida_export get_scalar_bt</definition>
        <argsstring>(int size)</argsstring>
        <name>get_scalar_bt</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="601" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a13d90323712fdc9d0a8bc3966950a357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="structtil__t" kindref="compound">til_t</ref> *ida_export</type>
        <definition>idaman til_t* ida_export new_til</definition>
        <argsstring>(const char *name, const char *desc)</argsstring>
        <name>new_til</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>desc</declname>
        </param>
        <briefdescription>
<para>Initialize a til. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a23c795a3694bc7b47a7e425f9c8d72b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int add_base_tils</definition>
        <argsstring>(til_t *ti, const char *tildir, const char *bases, qstring *errbuf)</argsstring>
        <name>add_base_tils</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tildir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>bases</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add multiple base tils. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ti</parametername>
</parameternamelist>
<parameterdescription>
<para>target til </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tildir</parametername>
</parameternamelist>
<parameterdescription>
<para>directory where specified tils can be found. NULL means all default til subdirectories. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bases</parametername>
</parameternamelist>
<parameterdescription>
<para>comma separated list of til names </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">errbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>error message </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>one of <ref refid="group___t_i_l___a_d_d__" kindref="compound">Add TIL result codes</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="655" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a56fd5083686a287b39212105adec4d81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="structtil__t" kindref="compound">til_t</ref> *ida_export</type>
        <definition>idaman til_t* ida_export load_til</definition>
        <argsstring>(const char *name, qstring *errbuf, const char *tildir=NULL)</argsstring>
        <name>load_til</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tildir</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load til from a file. Failure to load base tils are reported into &apos;errbuf&apos;. They do not prevent loading of the main til. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>filename of the til. If it&apos;s an absolute path, tildir is ignored.<itemizedlist>
<listitem><para>NB: the file extension is forced to .til </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">errbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>error message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tildir</parametername>
</parameternamelist>
<parameterdescription>
<para>directory where to load the til from. NULL means default til subdirectories. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to resulting til, NULL if failed and error message is in errbuf </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="676" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1aaec1f9582d33fb9d15bbf2f0102b693c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export sort_til</definition>
        <argsstring>(til_t *ti)</argsstring>
        <name>sort_til</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sort til (use after modifying it). <simplesect kind="return"><para>false if no memory or bad parameter </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="682" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a85d12b7291be52278d2d193b82165639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export compact_til</definition>
        <argsstring>(til_t *ti)</argsstring>
        <name>compact_til</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Collect garbage in til. Must be called before storing the til. <simplesect kind="return"><para>true if any memory was freed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a8a3076c45c4329974096cc8923658f0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export store_til</definition>
        <argsstring>(til_t *ti, const char *tildir, const char *name)</argsstring>
        <name>store_til</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>tildir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Store til to a file. If the til contains garbage, it will be collected before storing the til. Your plugin should call <ref refid="typeinf_8hpp_1a85d12b7291be52278d2d193b82165639" kindref="member">compact_til()</ref> before calling <ref refid="typeinf_8hpp_1a8a3076c45c4329974096cc8923658f0e" kindref="member">store_til()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ti</parametername>
</parameternamelist>
<parameterdescription>
<para>type library to store </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tildir</parametername>
</parameternamelist>
<parameterdescription>
<para>directory where to store the til. NULL means current directory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>filename of the til. If it&apos;s an absolute path, tildir is ignored.<itemizedlist>
<listitem><para>NB: the file extension is forced to .til </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="701" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a7fc9cf4e476ff8d150c1e77bb0746301" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export free_til</definition>
        <argsstring>(til_t *ti)</argsstring>
        <name>free_til</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <briefdescription>
<para>Free memory allocated by til. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a55869e652e977f6295339a935c8acd42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="structtil__t" kindref="compound">til_t</ref> *ida_export</type>
        <definition>idaman til_t* ida_export load_til_header</definition>
        <argsstring>(const char *tildir, const char *name, qstring *errbuf)</argsstring>
        <name>load_til_header</name>
        <param>
          <type>const char *</type>
          <declname>tildir</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
        </param>
        <briefdescription>
<para>Get human-readable til description. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="711" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_m___m___1ga4a0649e56c68ff049219d68104deab26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_code_far</definition>
        <argsstring>(cm_t cm)</argsstring>
        <name>is_code_far</name>
        <param>
          <type><ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
          <declname>cm</declname>
        </param>
        <briefdescription>
<para>Does the given model specify far code?. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="737" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="737" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="group___c_m___m___1ga514b71d0e58c2de4f8470bb2b2a0b34f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_data_far</definition>
        <argsstring>(cm_t cm)</argsstring>
        <name>is_data_far</name>
        <param>
          <type><ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
          <declname>cm</declname>
        </param>
        <briefdescription>
<para>Does the given model specify far data?. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="739" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="739" bodyend="739"/>
      </memberdef>
      <memberdef kind="function" id="group__argloc_1ga4a684d3b5a6369163f377a94585edb77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export install_custom_argloc</definition>
        <argsstring>(const custloc_desc_t *custloc)</argsstring>
        <name>install_custom_argloc</name>
        <param>
          <type>const <ref refid="structcustloc__desc__t" kindref="compound">custloc_desc_t</ref> *</type>
          <declname>custloc</declname>
        </param>
        <briefdescription>
<para>Save a custom argloc. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="945" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__argloc_1gadb953830132811494989955976c4e119" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export remove_custom_argloc</definition>
        <argsstring>(int idx)</argsstring>
        <name>remove_custom_argloc</name>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Delete the custom argloc at the given index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="947" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__argloc_1ga137f0ff547d4ccd97f6792a35cb209a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman const <ref refid="structcustloc__desc__t" kindref="compound">custloc_desc_t</ref> *ida_export</type>
        <definition>idaman const custloc_desc_t* ida_export retrieve_custom_argloc</definition>
        <argsstring>(int idx)</argsstring>
        <name>retrieve_custom_argloc</name>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Retrieve the custom argloc at the given index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="949" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__argloc_1ga12d82624c71c4f04c749344171cf4978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export verify_argloc</definition>
        <argsstring>(const argloc_t &amp;vloc, int size, const rangeset_t *gaps)</argsstring>
        <name>verify_argloc</name>
        <param>
          <type>const <ref refid="classargloc__t" kindref="compound">argloc_t</ref> &amp;</type>
          <declname>vloc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> *</type>
          <declname>gaps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify <ref refid="classargloc__t" kindref="compound">argloc_t</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>total size of the variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gaps</parametername>
</parameternamelist>
<parameterdescription>
<para>if not NULL, specifies gaps in structure definition. these gaps should not map to any argloc, but everything else must be covered </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, otherwise an interr code. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__argloc_1gad7b916c550685f48f02b3fd5c97d3f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export optimize_argloc</definition>
        <argsstring>(argloc_t *vloc, int size, const rangeset_t *gaps)</argsstring>
        <name>optimize_argloc</name>
        <param>
          <type><ref refid="classargloc__t" kindref="compound">argloc_t</ref> *</type>
          <declname>vloc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>const <ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> *</type>
          <declname>gaps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify and optimize scattered argloc into simple form. All new arglocs must be processed by this function. <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>the input argloc was illegal </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__argloc_1gab5504a4c1f4f3d888ed051b1ab90ae4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman size_t ida_export</type>
        <definition>idaman size_t ida_export print_argloc</definition>
        <argsstring>(char *buf, size_t bufsize, const argloc_t &amp;vloc, int size=0, int vflags=0)</argsstring>
        <name>print_argloc</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type>const <ref refid="classargloc__t" kindref="compound">argloc_t</ref> &amp;</type>
          <declname>vloc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>vflags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Convert an argloc to human readable form. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__argloc_1gac7c5abb53c08b173798499df9e582fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export for_all_arglocs</definition>
        <argsstring>(aloc_visitor_t &amp;vv, argloc_t &amp;vloc, int size, int off=0)</argsstring>
        <name>for_all_arglocs</name>
        <param>
          <type><ref refid="structaloc__visitor__t" kindref="compound">aloc_visitor_t</ref> &amp;</type>
          <declname>vv</declname>
        </param>
        <param>
          <type><ref refid="classargloc__t" kindref="compound">argloc_t</ref> &amp;</type>
          <declname>vloc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>off</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Compress larger argloc types and initiate the aloc visitor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__argloc_1ga51d822a5bc687700adcce53f23f9e7aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi for_all_const_arglocs</definition>
        <argsstring>(const_aloc_visitor_t &amp;vv, const argloc_t &amp;vloc, int size, int off=0)</argsstring>
        <name>for_all_const_arglocs</name>
        <param>
          <type><ref refid="structconst__aloc__visitor__t" kindref="compound">const_aloc_visitor_t</ref> &amp;</type>
          <declname>vv</declname>
        </param>
        <param>
          <type>const <ref refid="classargloc__t" kindref="compound">argloc_t</ref> &amp;</type>
          <declname>vloc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>off</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>See <ref refid="group__argloc_1gac7c5abb53c08b173798499df9e582fad" kindref="member">for_all_arglocs()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1229" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1229" bodyend="1235"/>
      </memberdef>
      <memberdef kind="function" id="group__argloc_1ga1c697931d24c6ab239a1522ac0f192b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
        <definition>THREAD_SAFE cm_t get_cc</definition>
        <argsstring>(cm_t cm)</argsstring>
        <name>get_cc</name>
        <param>
          <type><ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
          <declname>cm</declname>
        </param>
        <briefdescription>
<para>Get the calling convention. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1253" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1253" bodyend="1253"/>
      </memberdef>
      <memberdef kind="function" id="group__argloc_1gaf4e73d1437be74b284b39d366904387a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_user_cc</definition>
        <argsstring>(cm_t cm)</argsstring>
        <name>is_user_cc</name>
        <param>
          <type><ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
          <declname>cm</declname>
        </param>
        <briefdescription>
<para>Does the calling convention specify argument locations explicitly? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1258" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1258" bodyend="1262"/>
      </memberdef>
      <memberdef kind="function" id="group__argloc_1ga1c08ebbedf87be83e40027e1a47c8e70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_vararg_cc</definition>
        <argsstring>(cm_t cm)</argsstring>
        <name>is_vararg_cc</name>
        <param>
          <type><ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
          <declname>cm</declname>
        </param>
        <briefdescription>
<para>Does the calling convention use ellipsis? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1267" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1267" bodyend="1271"/>
      </memberdef>
      <memberdef kind="function" id="group__argloc_1ga2cc3cd9f8c8228a167357912934d8479" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_purging_cc</definition>
        <argsstring>(cm_t cm)</argsstring>
        <name>is_purging_cc</name>
        <param>
          <type><ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does the calling convention clean the stack arguments upon return?. <simplesect kind="note"><para>this function is valid only for x86 code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1277" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1277" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1ga30e57a44352ead957bfb35130f120b09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
        <definition>THREAD_SAFE comp_t get_comp</definition>
        <argsstring>(comp_t comp)</argsstring>
        <name>get_comp</name>
        <param>
          <type><ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
          <declname>comp</declname>
        </param>
        <briefdescription>
<para>Get compiler bits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1420" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1420" bodyend="1420"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1gac8a52f87eb72edbe2b17a82b7aa4f7fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman const char *ida_export</type>
        <definition>idaman const char* ida_export get_compiler_name</definition>
        <argsstring>(comp_t id)</argsstring>
        <name>get_compiler_name</name>
        <param>
          <type><ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get full compiler name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1425" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1ga6d0a38bc35c2fefa6d04bc972e7f0f65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman const char *ida_export</type>
        <definition>idaman const char* ida_export get_compiler_abbr</definition>
        <argsstring>(comp_t id)</argsstring>
        <name>get_compiler_abbr</name>
        <param>
          <type><ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get abbreviated compiler name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1430" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1ga0a99fccffa195ff8572c40f3b4adce85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export get_compilers</definition>
        <argsstring>(compvec_t *ids, qstrvec_t *names, qstrvec_t *abbrs)</argsstring>
        <name>get_compilers</name>
        <param>
          <type><ref refid="group___c_c__funcs_1ga6d65e448c6e1903b22a2ad528ed9d9d7" kindref="member">compvec_t</ref> *</type>
          <declname>ids</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a823b67c620f6cdca97e1d969ea4a9b02" kindref="member">qstrvec_t</ref> *</type>
          <declname>names</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a823b67c620f6cdca97e1d969ea4a9b02" kindref="member">qstrvec_t</ref> *</type>
          <declname>abbrs</declname>
        </param>
        <briefdescription>
<para>Get names of all built-in compilers. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1ga66e30616c89fad5dfe53c61bb867167a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
        <definition>THREAD_SAFE comp_t is_comp_unsure</definition>
        <argsstring>(comp_t comp)</argsstring>
        <name>is_comp_unsure</name>
        <param>
          <type><ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
          <declname>comp</declname>
        </param>
        <briefdescription>
<para>See <ref refid="group___c_o_m_p___1gae1bdf23b2ef18f213d7b492be498c40e" kindref="member">COMP_UNSURE</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1443" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1443" bodyend="1443"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1ga70c6ee0914c9e229b591dda5bac88abb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
        <definition>comp_t default_compiler</definition>
        <argsstring>(void)</argsstring>
        <name>default_compiler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get compiler specified by {inf,idainfo,cc}. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1448" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1448" bodyend="1448"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1ga33b0eb16a96e536a92973c27d2b51d04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_gcc</definition>
        <argsstring>(void)</argsstring>
        <name>is_gcc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is the target compiler <ref refid="group___c_o_m_p___1ga8f72af77206ae6e513468b0b2d0d8d7d" kindref="member">COMP_GNU</ref>? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1453" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1453" bodyend="1453"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1ga5985848fe5433e3906df2a1b9c27634b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_gcc32</definition>
        <argsstring>(void)</argsstring>
        <name>is_gcc32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is the target compiler 32 bit gcc? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1458" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1458" bodyend="1458"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1gaacfe0fce0e36d088e64aba5174bbcf3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_gcc64</definition>
        <argsstring>(void)</argsstring>
        <name>is_gcc64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is the target compiler 64 bit gcc? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1463" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1463" bodyend="1463"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1ga3ba2ea17113115bc15ad1db0134c021a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool gcc_layout</definition>
        <argsstring>(void)</argsstring>
        <name>gcc_layout</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Should use the struct/union layout as done by gcc? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1468" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1468" bodyend="1468"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1ga10b28e2835ecde9fe6e14072db87384a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_compiler</definition>
        <argsstring>(const compiler_info_t &amp;cc, int flags, const char *abiname=NULL)</argsstring>
        <name>set_compiler</name>
        <param>
          <type>const <ref refid="structcompiler__info__t" kindref="compound">compiler_info_t</ref> &amp;</type>
          <declname>cc</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>abiname</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change current compiler. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cc</parametername>
</parameternamelist>
<parameterdescription>
<para>compiler to switch to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___s_e_t_c_o_m_p__" kindref="compound">Set compiler flags</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>abiname</parametername>
</parameternamelist>
<parameterdescription>
<para>ABI name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1ga6eced74e7574153c9760fc3efab1aaf0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi set_compiler_id</definition>
        <argsstring>(comp_t id, const char *abiname=NULL)</argsstring>
        <name>set_compiler_id</name>
        <param>
          <type><ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>abiname</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Set the compiler id (see <ref refid="group___c_o_m_p__" kindref="compound">Compiler IDs</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1495" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1495" bodyend="1500"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1ga07a9e696c4065d281247c57acfccf3c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi set_abi_name</definition>
        <argsstring>(const char *abiname, bool user_level=false)</argsstring>
        <name>set_abi_name</name>
        <param>
          <type>const char *</type>
          <declname>abiname</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>user_level</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Set abi name (see <ref refid="group___c_o_m_p__" kindref="compound">Compiler IDs</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1504" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1504" bodyend="1510"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1ga574b887360c437eb564122c17a82c4ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_abi_name</definition>
        <argsstring>(qstring *out)</argsstring>
        <name>get_abi_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get ABI name. <simplesect kind="return"><para>length of the name (&gt;=0) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1gac867a63844cbacaf704143a9c52536ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export append_abi_opts</definition>
        <argsstring>(const char *abi_opts, bool user_level=false)</argsstring>
        <name>append_abi_opts</name>
        <param>
          <type>const char *</type>
          <declname>abi_opts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>user_level</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add/remove/check ABI option General form of full abi name: abiname-opt1-opt2-... or -opt1-opt2-... <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>abi_opts</parametername>
</parameternamelist>
<parameterdescription>
<para>- ABI options to add/remove in form opt1-opt2-... </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_level</parametername>
</parameternamelist>
<parameterdescription>
<para>- initiated by user if TRUE (==SETCOMP_BY_USER) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1523" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1ga5cdf0af38218418e61b04ec2ee813542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export remove_abi_opts</definition>
        <argsstring>(const char *abi_opts, bool user_level=false)</argsstring>
        <name>remove_abi_opts</name>
        <param>
          <type>const char *</type>
          <declname>abi_opts</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>user_level</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1524" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___c_c__funcs_1ga0c5949346c28023a7823aa3e481f6a72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_compiler_string</definition>
        <argsstring>(const char *compstr, bool user_level)</argsstring>
        <name>set_compiler_string</name>
        <param>
          <type>const char *</type>
          <declname>compstr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>user_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>compstr</parametername>
</parameternamelist>
<parameterdescription>
<para>- compiler description in form &lt;abbr&gt;:&lt;abiname&gt; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>user_level</parametername>
</parameternamelist>
<parameterdescription>
<para>- initiated by user if TRUE </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1529" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parse__tinfo_1gae9ae4eb67c4fdf5d59e22ba23af55f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export h2ti</definition>
        <argsstring>(til_t *ti, lexer_t *lx, const char *input, int flags=HTI_HIGH, h2ti_type_cb *type_cb=NULL, h2ti_type_cb *var_cb=NULL, printer_t *print_cb=NULL, void *_cb_data=NULL, abs_t _isabs=abs_unk)</argsstring>
        <name>h2ti</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>lexer_t *</type>
          <declname>lx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="group___h_t_i___1ga1a2d19a5da522effe48cfe67e14fc479" kindref="member">HTI_HIGH</ref></defval>
        </param>
        <param>
          <type><ref refid="group__parse__tinfo_1ga034013ece7194a003ffd1727075100d2" kindref="member">h2ti_type_cb</ref> *</type>
          <declname>type_cb</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="group__parse__tinfo_1ga034013ece7194a003ffd1727075100d2" kindref="member">h2ti_type_cb</ref> *</type>
          <declname>var_cb</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="group__parse__tinfo_1gabcc521f1e3d068d8cdf760885a8f53c4" kindref="member">printer_t</ref> *</type>
          <declname>print_cb</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>void *</type>
          <declname>_cb_data</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a784254a39507ac759a9f373a52a75ac1" kindref="member">abs_t</ref></type>
          <declname>_isabs</declname>
          <defval>abs_unk</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert declarations to type_t*. This is a low level function - use <ref refid="group__parse__tinfo_1gae4cec61d812cfc0acc08453742b729b3" kindref="member">parse_decls()</ref> or <ref refid="group__parse__tinfo_1gaa3ec4302201c52b95420edc3618b7eb2" kindref="member">parse_decl()</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ti</parametername>
</parameternamelist>
<parameterdescription>
<para>type info library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lx</parametername>
</parameternamelist>
<parameterdescription>
<para>input lexer. may be NULL. always destroyed by <ref refid="group__parse__tinfo_1gae9ae4eb67c4fdf5d59e22ba23af55f1f" kindref="member">h2ti()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>file name or C declaration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___h_t_i__" kindref="compound">Type formatting flags</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>callback - for each type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>var_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>callback - for each var </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>print_cb</parametername>
</parameternamelist>
<parameterdescription>
<para>may pass msg() here </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_cb_data</parametername>
</parameternamelist>
<parameterdescription>
<para>data passed to callbacks </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_isabs</parametername>
</parameternamelist>
<parameterdescription>
<para>the expected abstracness of the type declaration(s) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of errors (they are displayed using print_cb). zero means ok </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parse__tinfo_1gaa3ec4302201c52b95420edc3618b7eb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export parse_decl</definition>
        <argsstring>(tinfo_t *tif, qstring *out, til_t *til, const char *decl, int flags)</argsstring>
        <name>parse_decl</name>
        <param>
          <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>tif</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>decl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse ONE declaration. If the input string contains more than one declaration, the first complete type declaration (<ref refid="group___p_t___1ga275f154b9415ddab5d773d3f2ce48a30" kindref="member">PT_TYP</ref>) or the last variable declaration (<ref refid="group___p_t___1ga2372a33ffe07dcfaae46a1873a453e8f" kindref="member">PT_VAR</ref>) will be used. <simplesect kind="note"><para>name &amp; tif may be empty after the call! </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">tif</parametername>
</parameternamelist>
<parameterdescription>
<para>type info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>declared name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>til</parametername>
</parameternamelist>
<parameterdescription>
<para>type library to use. may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decl</parametername>
</parameternamelist>
<parameterdescription>
<para>C declaration to parse </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___p_t__" kindref="compound">Type parsing flags</ref> bits </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>declaration is bad, the error message is displayed if !PT_SIL </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parse__tinfo_1gaedfe2fcd29fba4ba9fe6da62bbbf4fa5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> int</type>
        <definition>THREAD_SAFE int convert_pt_flags_to_hti</definition>
        <argsstring>(int pt_flags)</argsstring>
        <name>convert_pt_flags_to_hti</name>
        <param>
          <type>int</type>
          <declname>pt_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert <ref refid="group___p_t__" kindref="compound">Type parsing flags</ref> to <ref refid="group___h_t_i__" kindref="compound">Type formatting flags</ref>. Type parsing flags lesser than 0x10 don&apos;t have stable meaning and will be ignored (more on these flags can be seen in idc.idc) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1675" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1675" bodyend="1678"/>
      </memberdef>
      <memberdef kind="function" id="group__parse__tinfo_1gae4cec61d812cfc0acc08453742b729b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export parse_decls</definition>
        <argsstring>(til_t *til, const char *input, printer_t *printer, int hti_flags)</argsstring>
        <name>parse_decls</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="group__parse__tinfo_1gabcc521f1e3d068d8cdf760885a8f53c4" kindref="member">printer_t</ref> *</type>
          <declname>printer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>hti_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parse many declarations and store them in a til. If there are any errors, they will be printed using &apos;printer&apos;. This function uses default include path and predefined macros from the database settings. It always uses the <ref refid="group___h_t_i___1ga7eadeea97aa05317c41e939b70714a56" kindref="member">HTI_DCL</ref> bit. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>til</parametername>
</parameternamelist>
<parameterdescription>
<para>type library to store the result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>input string or file name (see hti_flags) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>printer</parametername>
</parameternamelist>
<parameterdescription>
<para>function to output error messages (use msg or NULL or your own callback) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hti_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___h_t_i__" kindref="compound">Type formatting flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of errors, 0 means ok. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1691" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parse__tinfo_1ga43ef73f0df2c860b554c5fef7ce273f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export print_type</definition>
        <argsstring>(qstring *out, ea_t ea, int prtype_flags)</argsstring>
        <name>print_type</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prtype_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get type declaration for the specified address. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prtype_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___p_r_t_y_p_e__" kindref="compound">Type printing flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1704" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__named__types_1ga5ffa914dc0eff13ba02d9a1c9722db0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export get_named_type</definition>
        <argsstring>(const til_t *ti, const char *name, int ntf_flags, const type_t **type=NULL, const p_list **fields=NULL, const char **cmt=NULL, const p_list **fieldcmts=NULL, sclass_t *sclass=NULL, uint32 *value=NULL)</argsstring>
        <name>get_named_type</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ntf_flags</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> **</type>
          <declname>type</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a828c7e985f83b1e74eb4ea7b716abfb1" kindref="member">p_list</ref> **</type>
          <declname>fields</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const char **</type>
          <declname>cmt</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a828c7e985f83b1e74eb4ea7b716abfb1" kindref="member">p_list</ref> **</type>
          <declname>fieldcmts</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a9c9a05934a8418932a82a2d39476d97d" kindref="member">sclass_t</ref> *</type>
          <declname>sclass</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> *</type>
          <declname>value</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get named typeinfo. The returned pointers are pointers to static storage. <linebreak/>
They are valid until <ref refid="typeinf_8hpp_1a7fc9cf4e476ff8d150c1e77bb0746301" kindref="member">free_til()</ref>, set_named_type(), <ref refid="group__named__types_1ga1790476ab86ed2767f5c9c81ec3274ff" kindref="member">del_named_type()</ref>, <linebreak/>
rename_named_type(), <ref refid="group__numbered__types_1gaf2052794beeb4a5968dcf0b12a525801" kindref="member">set_numbered_type()</ref>, <ref refid="group__numbered__types_1ga63cf655e113e97c7d0abc8d42e7e98f4" kindref="member">del_numbered_type()</ref>, <linebreak/>
and idb structure/enum manipulation (in other words, until <ref refid="structtil__t" kindref="compound">til_t</ref> is changed). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ti</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to type information library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ntf_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___n_t_f__" kindref="compound">Flags for named types</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to ptr to output buffer for the type info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fields</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to ptr to the field/args names. may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmt</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to ptr to the main comment. may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fieldcmts</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to ptr to the field/args comments. may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sclass</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to storage class </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to symbol value. for types, ptr to the ordinal number </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>can&apos;t find the named type (or name==NULL) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok, the buffers are filled with information (if not NULL) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>2</parametername>
</parameternamelist>
<parameterdescription>
<para>ok, found it in a base til </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1748" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__named__types_1ga4455587bd938c7dbec64f0e1189204c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi get_named_type64</definition>
        <argsstring>(const til_t *ti, const char *name, int ntf_flags, const type_t **type=NULL, const p_list **fields=NULL, const char **cmt=NULL, const p_list **fieldcmts=NULL, sclass_t *sclass=NULL, uint64 *value=NULL)</argsstring>
        <name>get_named_type64</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ntf_flags</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> **</type>
          <declname>type</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a828c7e985f83b1e74eb4ea7b716abfb1" kindref="member">p_list</ref> **</type>
          <declname>fields</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const char **</type>
          <declname>cmt</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a828c7e985f83b1e74eb4ea7b716abfb1" kindref="member">p_list</ref> **</type>
          <declname>fieldcmts</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a9c9a05934a8418932a82a2d39476d97d" kindref="member">sclass_t</ref> *</type>
          <declname>sclass</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> *</type>
          <declname>value</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>See <ref refid="group__named__types_1ga5ffa914dc0eff13ba02d9a1c9722db0d" kindref="member">get_named_type()</ref> above. <simplesect kind="note"><para>If the value in the &apos;ti&apos; library is 32-bit, it will be sign-extended before being stored in the &apos;value&apos; pointer. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1784" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1784" bodyend="1797"/>
      </memberdef>
      <memberdef kind="function" id="group__named__types_1ga1790476ab86ed2767f5c9c81ec3274ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export del_named_type</definition>
        <argsstring>(til_t *ti, const char *name, int ntf_flags)</argsstring>
        <name>del_named_type</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ntf_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete information about a symbol. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ti</parametername>
</parameternamelist>
<parameterdescription>
<para>type library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of symbol </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ntf_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___n_t_f__" kindref="compound">Flags for named types</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1817" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__named__types_1gabf9c17f9c6bbf44ead03d36ed482e370" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman const char *ida_export</type>
        <definition>idaman const char* ida_export first_named_type</definition>
        <argsstring>(const til_t *ti, int ntf_flags)</argsstring>
        <name>first_named_type</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ntf_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerate types. Returns mangled names. Never returns anonymous types. To include it, enumerate types by ordinals. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1824" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__named__types_1ga9f87865992b1a307b5c5a2d6fffc0967" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman const char *ida_export</type>
        <definition>idaman const char* ida_export next_named_type</definition>
        <argsstring>(const til_t *ti, const char *name, int ntf_flags)</argsstring>
        <name>next_named_type</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ntf_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enumerate types. Returns mangled names. Never returns anonymous types. To include it, enumerate types by ordinals. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1829" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__named__types_1gad7fb8bcab798445a464639d699b6126f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> ida_export</type>
        <definition>idaman uint32 ida_export copy_named_type</definition>
        <argsstring>(til_t *dsttil, const til_t *srctil, const char *name)</argsstring>
        <name>copy_named_type</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>dsttil</declname>
        </param>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>srctil</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a named type from one til to another. This function will copy the specified type and all dependent types from the source type library to the destination library. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dsttil</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination til. It must have orginal types enabled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>srctil</parametername>
</parameternamelist>
<parameterdescription>
<para>Source til. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the type to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ordinal number of the copied type. 0 means error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1840" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__named__types_1ga85975fda1d0ba5c6a19b9b482f3007d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export decorate_name</definition>
        <argsstring>(qstring *out, const char *name, bool mangle, cm_t cc=CM_CC_UNKNOWN, const tinfo_t *type=NULL)</argsstring>
        <name>decorate_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mangle</declname>
        </param>
        <param>
          <type><ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
          <declname>cc</declname>
          <defval><ref refid="group___c_m___c_c___1ga1d8607c930b67577c7f39ac7a5d24612" kindref="member">CM_CC_UNKNOWN</ref></defval>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>type</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decorate/undecorate a C symbol name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of symbol </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mangle</parametername>
</parameternamelist>
<parameterdescription>
<para>true-mangle, false-unmangle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc</parametername>
</parameternamelist>
<parameterdescription>
<para>calling convention </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>name type (NULL-unknown) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1854" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__named__types_1gad6cf1ca0ea27834794b8034bc86a7087" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export gen_decorate_name</definition>
        <argsstring>(qstring *out, const char *name, bool mangle, cm_t cc, const tinfo_t *type)</argsstring>
        <name>gen_decorate_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mangle</declname>
        </param>
        <param>
          <type><ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Generic function for <ref refid="group__named__types_1ga85975fda1d0ba5c6a19b9b482f3007d5" kindref="member">decorate_name()</ref> (may be used in IDP modules) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1864" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__named__types_1ga059b898c85f397e3aadf4c409ec66c59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export calc_c_cpp_name</definition>
        <argsstring>(qstring *out, const char *name, const tinfo_t *type, int ccn_flags)</argsstring>
        <name>calc_c_cpp_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ccn_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get C or C++ form of the name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>original (mangled or decorated) name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>name type if known, otherwise NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ccn_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>one of <ref refid="group___c_c_n__" kindref="compound">C/C++ naming flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1878" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1gab1fb33088b41c01ab02e1d7739ae3d67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export enable_numbered_types</definition>
        <argsstring>(til_t *ti, bool enable)</argsstring>
        <name>enable_numbered_types</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable the use of numbered types in til. Currently it is impossible to disable numbered types once they are enabled </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1904" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1ga3d006198b689ee58c8832489cb87ea70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export get_numbered_type</definition>
        <argsstring>(const til_t *ti, uint32 ordinal, const type_t **type=NULL, const p_list **fields=NULL, const char **cmt=NULL, const p_list **fieldcmts=NULL, sclass_t *sclass=NULL)</argsstring>
        <name>get_numbered_type</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>ordinal</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> **</type>
          <declname>type</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a828c7e985f83b1e74eb4ea7b716abfb1" kindref="member">p_list</ref> **</type>
          <declname>fields</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const char **</type>
          <declname>cmt</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a828c7e985f83b1e74eb4ea7b716abfb1" kindref="member">p_list</ref> **</type>
          <declname>fieldcmts</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a9c9a05934a8418932a82a2d39476d97d" kindref="member">sclass_t</ref> *</type>
          <declname>sclass</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Retrieve a type by its ordinal number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1909" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1ga1f7a68bdec901b7fbf1c0bf324ddf126" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> ida_export</type>
        <definition>idaman uint32 ida_export alloc_type_ordinals</definition>
        <argsstring>(til_t *ti, int qty)</argsstring>
        <name>alloc_type_ordinals</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>int</type>
          <declname>qty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a range of ordinal numbers for new types. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ti</parametername>
</parameternamelist>
<parameterdescription>
<para>type library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>qty</parametername>
</parameternamelist>
<parameterdescription>
<para>number of ordinals to allocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the first ordinal. 0 means failure. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1924" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1ga42e79e63d11375aa35947c987ee15931" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
        <definition>uint32 alloc_type_ordinal</definition>
        <argsstring>(til_t *ti)</argsstring>
        <name>alloc_type_ordinal</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <briefdescription>
<para>{alloc_type_ordinals,ti,1} </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1929" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1929" bodyend="1929"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1gac850f1c54d5b4c607d64ddf76691814f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> ida_export</type>
        <definition>idaman uint32 ida_export get_ordinal_qty</definition>
        <argsstring>(const til_t *ti)</argsstring>
        <name>get_ordinal_qty</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of allocated ordinals. <simplesect kind="return"><para>uint32(-1) if failed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1935" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1gaf2052794beeb4a5968dcf0b12a525801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="group__named__types_1ga4b2c98771820db5f78f2e754c97c0aaa" kindref="member">tinfo_code_t</ref> ida_export</type>
        <definition>idaman tinfo_code_t ida_export set_numbered_type</definition>
        <argsstring>(til_t *ti, uint32 ordinal, int ntf_flags, const char *name, const type_t *type, const p_list *fields=NULL, const char *cmt=NULL, const p_list *fldcmts=NULL, const sclass_t *sclass=NULL)</argsstring>
        <name>set_numbered_type</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>ordinal</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ntf_flags</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a828c7e985f83b1e74eb4ea7b716abfb1" kindref="member">p_list</ref> *</type>
          <declname>fields</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>cmt</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a828c7e985f83b1e74eb4ea7b716abfb1" kindref="member">p_list</ref> *</type>
          <declname>fldcmts</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a9c9a05934a8418932a82a2d39476d97d" kindref="member">sclass_t</ref> *</type>
          <declname>sclass</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Store a type in the til. &apos;name&apos; may be NULL for anonymous types. The specified ordinal must be free (no other type is using it). For ntf_flags, only <ref refid="group___n_t_f___1ga99d425180386ad9f256f191e88ff1ffe" kindref="member">NTF_REPLACE</ref> is consulted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1943" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1ga63cf655e113e97c7d0abc8d42e7e98f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export del_numbered_type</definition>
        <argsstring>(til_t *ti, uint32 ordinal)</argsstring>
        <name>del_numbered_type</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>ordinal</declname>
        </param>
        <briefdescription>
<para>Delete a numbered type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1957" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1gaaa083016ad05fe5db5b57b25a98cf9d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_type_alias</definition>
        <argsstring>(til_t *ti, uint32 src_ordinal, uint32 dst_ordinal)</argsstring>
        <name>set_type_alias</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>src_ordinal</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>dst_ordinal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a type alias. Redirects all references to source type to the destination type. This is equivalent to instantaneous replacement all reference to srctype by dsttype. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1964" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1gaa3df2e4834eeaf173579f92c5feb3b88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> ida_export</type>
        <definition>idaman uint32 ida_export get_alias_target</definition>
        <argsstring>(const til_t *ti, uint32 ordinal)</argsstring>
        <name>get_alias_target</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>ordinal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the final alias destination. If the ordinal has not been aliased, return the specified ordinal itself If failed, returns 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1971" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1ga5a5f88db314fdff319b9d79ead7c3865" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 get_type_ordinal</definition>
        <argsstring>(const til_t *ti, const char *name)</argsstring>
        <name>get_type_ordinal</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get type ordinal by its name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1976" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="1976" bodyend="1981"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1gabbaa89dd65a0edd6a3a5c0528347f585" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman const char *ida_export</type>
        <definition>idaman const char* ida_export get_numbered_type_name</definition>
        <argsstring>(const til_t *ti, uint32 ordinal)</argsstring>
        <name>get_numbered_type_name</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>ordinal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get type name (if exists) by its ordinal. If the type is anonymous, returns &quot;&quot;. If failed, returns NULL </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1986" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1gab5ed1d69ef90da349923a780f84f851a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export create_numbered_type_name</definition>
        <argsstring>(qstring *buf, int32 ord)</argsstring>
        <name>create_numbered_type_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
          <declname>ord</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create anonymous name for numbered type. This name can be used to reference a numbered type by its ordinal Ordinal names have the following format: &apos;#&apos; + set_de(ord) Returns: -1 if error, otherwise the name length </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="1994" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1ga84bd5e43c505cc3103cad24ce05d6d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_ordinal_name</definition>
        <argsstring>(const char *name, uint32 *ord=NULL)</argsstring>
        <name>is_ordinal_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> *</type>
          <declname>ord</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check if the name is an ordinal name. Ordinal names have the following format: &apos;#&apos; + set_de(ord) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2000" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1gaf4c7701a03bd988d81f5ed27d2f5bb39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export get_ordinal_from_idb_type</definition>
        <argsstring>(const char *name, const type_t *type)</argsstring>
        <name>get_ordinal_from_idb_type</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get ordinal number of an idb type (struct/enum). The &apos;type&apos; parameter is used only to determine the kind of the type (struct or enum) Use this function to find out the correspondence between idb types and til types </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2007" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1ga3437c158380092035b7cae165d7512fd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi is_autosync</definition>
        <argsstring>(const char *name, const type_t *type)</argsstring>
        <name>is_autosync</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Is the specified idb type automatically synchronized? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2012" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2012" bodyend="2015"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1ga55a920a13cb45e4731cd68b7d2556588" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi is_autosync</definition>
        <argsstring>(const char *name, const tinfo_t &amp;tif)</argsstring>
        <name>is_autosync</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <briefdescription>
<para>copydoc <ref refid="group__numbered__types_1ga3437c158380092035b7cae165d7512fd" kindref="member">is_autosync(const char*, const type_t *)</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2016" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="4143" bodyend="4147"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1ga600c885cb0b722c6f392bf83f467442a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export build_anon_type_name</definition>
        <argsstring>(qstring *buf, const type_t *type, const p_list *fields)</argsstring>
        <name>build_anon_type_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a828c7e985f83b1e74eb4ea7b716abfb1" kindref="member">p_list</ref> *</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
<para>Generate a name like $hex_numbers based on the field types and names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2021" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__numbered__types_1ga8a8130d2b60d3ea3abd2cf53afafe6ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export compact_numbered_types</definition>
        <argsstring>(til_t *ti, uint32 min_ord=0, intvec_t *p_ordmap=NULL, int flags=0)</argsstring>
        <name>compact_numbered_types</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>min_ord</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref> *</type>
          <declname>p_ordmap</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compact numbered types to get rid of empty slots. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ti</parametername>
</parameternamelist>
<parameterdescription>
<para>type library to compact </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_ord</parametername>
</parameternamelist>
<parameterdescription>
<para>minimal ordinal number to start to compact. lower ordinals are not modified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_ordmap</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting mapping (for example, the new ordinal of min_ord will be in ordmap[0]) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>reserved </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of freed type slots </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2039" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a370b5b72b6b9d2935babdd8dbb98bfdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t get_default_align</definition>
        <argsstring>(void)</argsstring>
        <name>get_default_align</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get default alignment for structure fields. <simplesect kind="return"><para>one of 1,2,4,8,... </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2053" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2053" bodyend="2053"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a6e7ab0213381511f40cc337d22b32e7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> void</type>
        <definition>THREAD_SAFE void align_size</definition>
        <argsstring>(size_t &amp;cur_tot_size, size_t elem_size, size_t algn)</argsstring>
        <name>align_size</name>
        <param>
          <type>size_t &amp;</type>
          <declname>cur_tot_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>elem_size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>algn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get alignment delta for the a structure field. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cur_tot_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the structure size calculated so far </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>elem_size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the current field. the whole structure should be calculated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>algn</parametername>
</parameternamelist>
<parameterdescription>
<para>the structure alignment (0,1,2,4,8...) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2062" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2062" bodyend="2068"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a2103703cae8b160a3301310ab486a7a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export deref_ptr</definition>
        <argsstring>(ea_t *ptr_ea, const tinfo_t &amp;tif, ea_t *closure_obj=NULL)</argsstring>
        <name>deref_ptr</name>
        <param>
          <type>ea_t *</type>
          <declname>ptr_ea</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type>ea_t *</type>
          <declname>closure_obj</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dereference a pointer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">ptr_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>in/out parameter<itemizedlist>
<listitem><para>in: address of the pointer</para></listitem><listitem><para>out: the pointed address </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tif</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the pointer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">closure_obj</parametername>
</parameternamelist>
<parameterdescription>
<para>closure object (not used yet) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2078" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ac3ee93704798cbb83633b774a9a89e10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export remove_tinfo_pointer</definition>
        <argsstring>(tinfo_t *tif, const char **pname, const til_t *til=NULL)</argsstring>
        <name>remove_tinfo_pointer</name>
        <param>
          <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>tif</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>pname</declname>
        </param>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove pointer of a type. (i.e. convert &quot;char *&quot; into &quot;char&quot;). Optionally remove the &quot;lp&quot; (or similar) prefix of the input name. If the input type is not a pointer, then fail. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2089" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a8df9cceb079c76e3c2b7879c763eadea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ad8791d30d19843bc09b78bdf01a852ec" kindref="member">tid_t</ref> ida_export</type>
        <definition>idaman tid_t ida_export import_type</definition>
        <argsstring>(const til_t *til, int idx, const char *name, int flags=0)</argsstring>
        <name>import_type</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy a named type from til to idb. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>til</parametername>
</parameternamelist>
<parameterdescription>
<para>type library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idx</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of the new type in the list of types (structures or enums). -1 means at the end of the list </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the type name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___i_m_p_t_y_p_e__" kindref="compound">Import type flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="netnode_8hpp_1ab745219216aec4e8abf2c1dcc5d5eac0" kindref="member">BADNODE</ref> on error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2099" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a6ae3c9ab321e5107e8ba4df22de3fcbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export add_til</definition>
        <argsstring>(const char *name, int flags)</argsstring>
        <name>add_til</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a til file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>til name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___a_d_d_t_i_l___f" kindref="compound">Load TIL flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>one of <ref refid="group___a_d_d_t_i_l___r" kindref="compound">Load TIL result codes</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a1aa06050d6cd990f851d24585f8b4d6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export del_til</definition>
        <argsstring>(const char *name)</argsstring>
        <name>del_til</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Unload a til file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a07ce12846fdd890614f618c553fcebc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export apply_named_type</definition>
        <argsstring>(ea_t ea, const char *name)</argsstring>
        <name>apply_named_type</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply the specified named type to the address. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>the type name, e.g. &quot;FILE&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a5d2fbecf8fbab5dbd9ea0510d82b7e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export apply_tinfo</definition>
        <argsstring>(ea_t ea, const tinfo_t &amp;tif, uint32 flags)</argsstring>
        <name>apply_tinfo</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply the specified type to the specified address. This function sets the type and tries to convert the item at the specified address to conform the type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tif</parametername>
</parameternamelist>
<parameterdescription>
<para>type string in internal format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___t_i_n_f_o__" kindref="compound">Apply tinfo flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a546009cb5f00edba6fbbfd876787b9a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export apply_cdecl</definition>
        <argsstring>(til_t *til, ea_t ea, const char *decl, int flags=0)</argsstring>
        <name>apply_cdecl</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>decl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply the specified type to the address. This function parses the declaration and calls <ref refid="typeinf_8hpp_1a5d2fbecf8fbab5dbd9ea0510d82b7e99" kindref="member">apply_tinfo()</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>til</parametername>
</parameternamelist>
<parameterdescription>
<para>type library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>decl</parametername>
</parameternamelist>
<parameterdescription>
<para>type declaration in C form </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>flags to pass to apply_tinfo (<ref refid="group___t_i_n_f_o___1ga2a831ce211c89ef0c30c59d7e893ba5a" kindref="member">TINFO_DEFINITE</ref> is always passed) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ad1c3dc99b159f2f1bc3d07d897885ccd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export apply_callee_tinfo</definition>
        <argsstring>(ea_t caller, const tinfo_t &amp;tif)</argsstring>
        <name>apply_callee_tinfo</name>
        <param>
          <type>ea_t</type>
          <declname>caller</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply the type of the called function to the calling instruction. This function will append parameter comments and rename the local variables of the calling function. It also stores information about the instructions that initialize call arguments in the database. Use <ref refid="typeinf_8hpp_1a7ef863a47c0208d367489126c4a8ae6a" kindref="member">get_arg_addrs()</ref> to retrieve it if necessary. Alternatively it is possible to hook to processor_t::arg_addrs_ready event. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>caller</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of the calling instruction. must belong to a function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tif</parametername>
</parameternamelist>
<parameterdescription>
<para>type info </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a7ef863a47c0208d367489126c4a8ae6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export get_arg_addrs</definition>
        <argsstring>(eavec_t *out, ea_t caller)</argsstring>
        <name>get_arg_addrs</name>
        <param>
          <type><ref refid="pro_8h_1a9f46d9d52bbfcc78bc1836f4f2683da4" kindref="member">eavec_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>caller</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve argument initialization addresses. This function retrieves information about argument addresses. This information is stored in the database by <ref refid="typeinf_8hpp_1ad1c3dc99b159f2f1bc3d07d897885ccd" kindref="member">apply_callee_tinfo()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>linear addresses of the instructions that load call arguments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>caller</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the call instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ac2ae24e34543c7d43021db7907758c89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export apply_once_tinfo_and_name</definition>
        <argsstring>(ea_t dea, const tinfo_t &amp;tif, const char *name)</argsstring>
        <name>apply_once_tinfo_and_name</name>
        <param>
          <type>ea_t</type>
          <declname>dea</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply the specified type and name to the address. This function checks if the address already has a type. If the old type <linebreak/>
does not exist or the new type is &apos;better&apos; than the old type, then the <linebreak/>
new type will be applied. A type is considered better if it has more <linebreak/>
information (e.g. <ref refid="group__tf__complex_1gacf095fd2f25df783b0f5a321d91c6adc" kindref="member">BTMT_STRUCT</ref> is better than <ref refid="group__tf__int_1ga0247bd6d30b0ca1725ec2cf6cbccdc83" kindref="member">BT_INT</ref>). <linebreak/>
The same logic is with the name: if the address already have a meaningful <linebreak/>
name, it will be preserved. Only if the old name does not exist or it <linebreak/>
is a dummy name like byte_123, it will be replaced by the new name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tif</parametername>
</parameternamelist>
<parameterdescription>
<para>type string in the internal format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>new name for the address </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a1faae87435a3adfade45003c4df6c62d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export guess_tinfo</definition>
        <argsstring>(tinfo_t *tif, tid_t id)</argsstring>
        <name>guess_tinfo</name>
        <param>
          <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>tif</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1ad8791d30d19843bc09b78bdf01a852ec" kindref="member">tid_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a type information about the id from the disassembly. id can be a structure/union/enum id or an address. <simplesect kind="return"><para>one of <ref refid="group___g_u_e_s_s__" kindref="compound">Guess tinfo codes</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a23f29f873aebcf7aa451a9a295dde236" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void set_c_header_path</definition>
        <argsstring>(const char *incdir)</argsstring>
        <name>set_c_header_path</name>
        <param>
          <type>const char *</type>
          <declname>incdir</declname>
        </param>
        <briefdescription>
<para>Set include directory path the target compiler. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2250" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2250" bodyend="2250"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a225608f4fed360094a2dee5eaf233d14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t get_c_header_path</definition>
        <argsstring>(qstring *buf)</argsstring>
        <name>get_c_header_path</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get the include directory path of the target compiler. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2255" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2255" bodyend="2255"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ab968ece62fa1b6e22edf0caca4de4109" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void set_c_macros</definition>
        <argsstring>(const char *macros)</argsstring>
        <name>set_c_macros</name>
        <param>
          <type>const char *</type>
          <declname>macros</declname>
        </param>
        <briefdescription>
<para>Set predefined macros for the target compiler. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2260" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2260" bodyend="2260"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a6f696742665f2c9166b5bd50b27878c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t get_c_macros</definition>
        <argsstring>(qstring *buf)</argsstring>
        <name>get_c_macros</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Get predefined macros for the target compiler. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2265" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="2265" bodyend="2265"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ac66e49891de301e77b60109e18b1d0af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman const <ref refid="structtil__t" kindref="compound">til_t</ref> *ida_export</type>
        <definition>idaman const til_t* ida_export get_idati</definition>
        <argsstring>(void)</argsstring>
        <name>get_idati</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pointer to the local type library - this til is private for each IDB file Function that accepts til_t* uses local type library instead of NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1aa34546cf22ec780cf550412f571fdd3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export get_idainfo_by_type</definition>
        <argsstring>(size_t *out_size, flags_t *out_flags, opinfo_t *out_mt, const tinfo_t &amp;tif, size_t *out_alsize=NULL)</argsstring>
        <name>get_idainfo_by_type</name>
        <param>
          <type>size_t *</type>
          <declname>out_size</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> *</type>
          <declname>out_flags</declname>
        </param>
        <param>
          <type><ref refid="unionopinfo__t" kindref="compound">opinfo_t</ref> *</type>
          <declname>out_mt</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>out_alsize</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract information from a <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">psize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of tif </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">pflags</parametername>
</parameternamelist>
<parameterdescription>
<para>description of type using flags_t </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mt</parametername>
</parameternamelist>
<parameterdescription>
<para>info for non-scalar types </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tif</parametername>
</parameternamelist>
<parameterdescription>
<para>the type to inspect </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">alsize</parametername>
</parameternamelist>
<parameterdescription>
<para>alignment </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="2283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a88b3edb11f2772224b157750a2c95f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref> ida_export</type>
        <definition>idaman cm_t ida_export guess_func_cc</definition>
        <argsstring>(const func_type_data_t &amp;fti, int npurged, int cc_flags)</argsstring>
        <name>guess_func_cc</name>
        <param>
          <type>const <ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> &amp;</type>
          <declname>fti</declname>
        </param>
        <param>
          <type>int</type>
          <declname>npurged</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cc_flags</declname>
        </param>
        <briefdescription>
<para>Use <ref refid="structfunc__type__data__t_1abbe3746b3c724ebff39a901ae4660a5f" kindref="member">func_type_data_t::guess_cc()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a4c8b887ecb9fde0f20a2d5595e87ce99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export dump_func_type_data</definition>
        <argsstring>(qstring *out, const func_type_data_t &amp;fti, int praloc_bits)</argsstring>
        <name>dump_func_type_data</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> &amp;</type>
          <declname>fti</declname>
        </param>
        <param>
          <type>int</type>
          <declname>praloc_bits</declname>
        </param>
        <briefdescription>
<para>Use <ref refid="structfunc__type__data__t_1ae579895c3994102621b42363fd22e3a9" kindref="member">func_type_data_t::dump()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1aab054ee679d3a99179c391518ccb83c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int get_arg_align</definition>
        <argsstring>(int type_align, int slotsize)</argsstring>
        <name>get_arg_align</name>
        <param>
          <type>int</type>
          <declname>type_align</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slotsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3511" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3511" bodyend="3516"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a46dead30635ebde6c1b5e7b7d1ff6c9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int get_arg_align</definition>
        <argsstring>(const tinfo_t &amp;tif, int slotsize)</argsstring>
        <name>get_arg_align</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slotsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3518" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3518" bodyend="3523"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1aa85da9a5f009336945087aa24a8dcae2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref></type>
        <definition>sval_t align_stkarg_up</definition>
        <argsstring>(sval_t spoff, int type_align, int slotsize)</argsstring>
        <name>align_stkarg_up</name>
        <param>
          <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref></type>
          <declname>spoff</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type_align</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slotsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3525" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3525" bodyend="3529"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1aa930d9fd033ac07008995167ef094e7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref></type>
        <definition>sval_t align_stkarg_up</definition>
        <argsstring>(sval_t spoff, const tinfo_t &amp;tif, int slotsize)</argsstring>
        <name>align_stkarg_up</name>
        <param>
          <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref></type>
          <declname>spoff</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type>int</type>
          <declname>slotsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3531" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3531" bodyend="3535"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a4a197fc9ead77f71f0286b2be85e29fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref></type>
        <definition>tinfo_t remove_pointer</definition>
        <argsstring>(const tinfo_t &amp;tif)</argsstring>
        <name>remove_pointer</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group__tf__ptr_1ga1ea9ae22535f9fb09b2c74f6e7526d4e" kindref="member">BT_PTR</ref>: If the current type is a pointer, return the pointed object. If the current type is not a pointer, return the current type. See also get_ptrarr_object() and get_pointed_object() </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3614" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" bodystart="3614" bodyend="3619"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1af504617c1e963028d77c7fdb6ee99aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman error_t ida_export unpack_idcobj_from_idb</definition>
        <argsstring>(idc_value_t *obj, const tinfo_t &amp;tif, ea_t ea, const bytevec_t *off0, int pio_flags=0)</argsstring>
        <name>unpack_idcobj_from_idb</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const <ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> *</type>
          <declname>off0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pio_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Read a typed idc object from the database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3709" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a0ffe0e62534103fb7b607fc36abe7bf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman error_t ida_export unpack_idcobj_from_bv</definition>
        <argsstring>(idc_value_t *obj, const tinfo_t &amp;tif, const bytevec_t &amp;bytes, int pio_flags=0)</argsstring>
        <name>unpack_idcobj_from_bv</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type>const <ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pio_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Read a typed idc object from the byte vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3721" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a0e28933e48837792744ebdd30acd68b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman error_t ida_export pack_idcobj_to_idb</definition>
        <argsstring>(const idc_value_t *obj, const tinfo_t &amp;tif, ea_t ea, int pio_flags=0)</argsstring>
        <name>pack_idcobj_to_idb</name>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pio_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Write a typed idc object to the database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3730" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a3ce985da43933ab09dfc7c9e4106d518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman error_t ida_export pack_idcobj_to_bv</definition>
        <argsstring>(const idc_value_t *obj, const tinfo_t &amp;tif, relobj_t *bytes, void *objoff, int pio_flags=0)</argsstring>
        <name>pack_idcobj_to_bv</name>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type><ref refid="structrelobj__t" kindref="compound">relobj_t</ref> *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>objoff</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pio_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a typed idc object to the byte vector. Byte vector may be non-empty, this function will append data to it </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3740" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a4f2396d17985c39350c17886ce373b53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export apply_tinfo_to_stkarg</definition>
        <argsstring>(const insn_t &amp;insn, const op_t &amp;x, uval_t v, const tinfo_t &amp;tif, const char *name)</argsstring>
        <name>apply_tinfo_to_stkarg</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>const <ref refid="classop__t" kindref="compound">op_t</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Helper function for the processor modules. to be called from {use_stkarg_type} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3756" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ac456cf65f3a5214d2a122bc43a690da2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export gen_use_arg_tinfos</definition>
        <argsstring>(ea_t caller, func_type_data_t *fti, funcargvec_t *rargs, set_op_tinfo_t *set_optype, is_stkarg_load_t *is_stkarg_load, has_delay_slot_t *has_delay_slot)</argsstring>
        <name>gen_use_arg_tinfos</name>
        <param>
          <type>ea_t</type>
          <declname>caller</declname>
        </param>
        <param>
          <type><ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> *</type>
          <declname>fti</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a6b5faeba43c9a59ec3aae166657ff78a" kindref="member">funcargvec_t</ref> *</type>
          <declname>rargs</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1ab35b734018443383d34fd235516a3689" kindref="member">set_op_tinfo_t</ref> *</type>
          <declname>set_optype</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1af3d430d1bfb3ac0fd08e2b3f87b91a3c" kindref="member">is_stkarg_load_t</ref> *</type>
          <declname>is_stkarg_load</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1a186be23cab16ac728b75a3a4c29d6350" kindref="member">has_delay_slot_t</ref> *</type>
          <declname>has_delay_slot</declname>
        </param>
        <briefdescription>
<para>The main function using these callbacks: </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3790" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a2b5514519fbf80ceba7f301dde17ff16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export func_has_stkframe_hole</definition>
        <argsstring>(ea_t ea, const func_type_data_t &amp;fti)</argsstring>
        <name>func_has_stkframe_hole</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const <ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> &amp;</type>
          <declname>fti</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Looks for a hole at the beginning of the stack arguments. Will make use of the IDB&apos;s <ref refid="classfunc__t" kindref="compound">func_t</ref> function at that place (if present) to help determine the presence of such a hole. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3812" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a5ab9b68ff940fce89e0455cc0fe6a968" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export lower_type</definition>
        <argsstring>(til_t *til, tinfo_t *tif, const char *name=NULL, lowertype_helper_t *_helper=NULL)</argsstring>
        <name>lower_type</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>tif</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="classlowertype__helper__t" kindref="compound">lowertype_helper_t</ref> *</type>
          <declname>_helper</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Lower type. Inspect the type and lower all function subtypes using lower_func_type(). <linebreak/>
We call the prototypes usually encountered in source files &quot;high level&quot; <linebreak/>
They may have implicit arguments, array arguments, big structure retvals, etc <linebreak/>
We introduce explicit arguments (i.e. &apos;this&apos; pointer) and call the result <linebreak/>
&quot;low level prototype&quot;. See <ref refid="group___f_t_i___1ga59c49eb47a2f43c602070b01684ba871" kindref="member">FTI_HIGH</ref>.</para><para>In order to improve heuristics for recognition of big structure retvals, <linebreak/>
it is recommended to pass a helper that will be used to make decisions. <linebreak/>
That helper will be used only for lowering &apos;tif&apos;, and not for the children <linebreak/>
types walked through by recursion. <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>removed <ref refid="group___f_t_i___1ga59c49eb47a2f43c602070b01684ba871" kindref="member">FTI_HIGH</ref>, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>2</parametername>
</parameternamelist>
<parameterdescription>
<para>made substantial changes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>failure </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3876" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ad43f876ba9da3260d61d62789a0234e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export replace_ordinal_typerefs</definition>
        <argsstring>(til_t *til, tinfo_t *tif)</argsstring>
        <name>replace_ordinal_typerefs</name>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>tif</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace references to ordinal types by name references. This function &apos;unties&apos; the type from the current local type library and makes it easier to export it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>til</parametername>
</parameternamelist>
<parameterdescription>
<para>type library to use. may be NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tif</parametername>
</parameternamelist>
<parameterdescription>
<para>type to modify (in/out) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>of replaced subtypes, -1 on failure </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3890" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1aa417d7c0601ec34392c906300e20107c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export begin_type_updating</definition>
        <argsstring>(update_type_t utp)</argsstring>
        <name>begin_type_updating</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7ae46ad265dbaedeab1f06346a4d9f98" kindref="member">update_type_t</ref></type>
          <declname>utp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark the beginning of a large update operation on the types. Can be used with <ref refid="enum_8hpp_1aa655959dd35d5fe541c69b02ee76cf63" kindref="member">add_enum_member()</ref>, add_struc_member, etc... Also see <ref refid="typeinf_8hpp_1abd6ae8f80de9c5b0941701216296264e" kindref="member">end_type_updating()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3897" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1abd6ae8f80de9c5b0941701216296264e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export end_type_updating</definition>
        <argsstring>(update_type_t utp)</argsstring>
        <name>end_type_updating</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7ae46ad265dbaedeab1f06346a4d9f98" kindref="member">update_type_t</ref></type>
          <declname>utp</declname>
        </param>
        <briefdescription>
<para>Mark the end of a large update operation on the types (see <ref refid="typeinf_8hpp_1aa417d7c0601ec34392c906300e20107c" kindref="member">begin_type_updating()</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="3902" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a605a5f30a0a65c28675f011e216449dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export format_cdata</definition>
        <argsstring>(qstrvec_t *outvec, const idc_value_t &amp;idc_value, const tinfo_t *tif, valstr_t *vtree=NULL, const format_data_info_t *fdi=NULL)</argsstring>
        <name>format_cdata</name>
        <param>
          <type><ref refid="pro_8h_1a823b67c620f6cdca97e1d969ea4a9b02" kindref="member">qstrvec_t</ref> *</type>
          <declname>outvec</declname>
        </param>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> &amp;</type>
          <declname>idc_value</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>tif</declname>
        </param>
        <param>
          <type><ref refid="classvalstr__t" kindref="compound">valstr_t</ref> *</type>
          <declname>vtree</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const <ref refid="structformat__data__info__t" kindref="compound">format_data_info_t</ref> *</type>
          <declname>fdi</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Format a data value as a C initializer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outvec</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the formatted string(s). may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>idc_value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tif</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the data to format. if NULL and <ref refid="group___p_t_v___1gac2cd3059626ab4ab40a530fdfcc99abb" kindref="member">PTV_DEREF</ref> is specified, take tinfo from idb </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vtree</parametername>
</parameternamelist>
<parameterdescription>
<para>more detailed output info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fdi</parametername>
</parameternamelist>
<parameterdescription>
<para>formatting options </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success. if failed, see qerrno for more info </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4030" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a195fda639e40582c130fd1c26c5a13ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export print_cdata</definition>
        <argsstring>(text_sink_t &amp;printer, const idc_value_t &amp;idc_value, const tinfo_t *tif, const format_data_info_t *fdi=NULL)</argsstring>
        <name>print_cdata</name>
        <param>
          <type><ref refid="structtext__sink__t" kindref="compound">text_sink_t</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> &amp;</type>
          <declname>idc_value</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>tif</declname>
        </param>
        <param>
          <type>const <ref refid="structformat__data__info__t" kindref="compound">format_data_info_t</ref> *</type>
          <declname>fdi</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The same as <ref refid="typeinf_8hpp_1a605a5f30a0a65c28675f011e216449dc" kindref="member">format_cdata()</ref>, but instead of returning the answer in a vector, print it. This function can handle very huge data volume without using too much memory. As soon as the output text becomes too long, the function prints it and flushes its internal buffers. <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>printing failed, check qerrno </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>else</parametername>
</parameternamelist>
<parameterdescription>
<para>code returned by <ref refid="structtext__sink__t_1a7b570b7996829f9dbcd36a7811b4cb64" kindref="member">text_sink_t::print()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4053" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a8cab350c849ef8f7ad59907b19daa320" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export print_decls</definition>
        <argsstring>(text_sink_t &amp;printer, til_t *til, const ordvec_t *ordinals, uint32 flags)</argsstring>
        <name>print_decls</name>
        <param>
          <type><ref refid="structtext__sink__t" kindref="compound">text_sink_t</ref> &amp;</type>
          <declname>printer</declname>
        </param>
        <param>
          <type><ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>til</declname>
        </param>
        <param>
          <type>const <ref refid="classqvector" kindref="compound">ordvec_t</ref> *</type>
          <declname>ordinals</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print types (and possibly their dependencies) in a format suitable for use in a header file. This is the reverse <ref refid="group__parse__tinfo_1gae4cec61d812cfc0acc08453742b729b3" kindref="member">parse_decls()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>printer</parametername>
</parameternamelist>
<parameterdescription>
<para>a handler for printing text </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>til</parametername>
</parameternamelist>
<parameterdescription>
<para>the type library holding the ordinals </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ordinals</parametername>
</parameternamelist>
<parameterdescription>
<para>ordinals of types to export. NULL means: all ordinals in til </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>flags for the algorithm. A combination of PDF_* constants </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>0 the number of types exported </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>an error occurred </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;</parametername>
</parameternamelist>
<parameterdescription>
<para>0 the negated number of types exported. There were minor errors and the resulting output might not be compilable. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4078" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a054f399b8040e3504a6a0288e85ca4d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export calc_number_of_children</definition>
        <argsstring>(const argloc_t &amp;loc, const tinfo_t &amp;tif, bool dont_deref_ptr=false)</argsstring>
        <name>calc_number_of_children</name>
        <param>
          <type>const <ref refid="classargloc__t" kindref="compound">argloc_t</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>dont_deref_ptr</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate max number of lines of a formatted c data, when expanded (<ref refid="group___p_t_v___1ga3961c67927e9f622c548d492555ecda7" kindref="member">PTV_EXPAND</ref>). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>location of the data (<ref refid="group___a_l_o_c___1ga9342b6c4b8dcb9c10ee69c2a5251f3dc" kindref="member">ALOC_STATIC</ref> or <ref refid="group___a_l_o_c___1ga6be7eb6681fc4a4396bfd4ba9b28af95" kindref="member">ALOC_CUSTOM</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tif</parametername>
</parameternamelist>
<parameterdescription>
<para>type info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dont_deref_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>consider &apos;ea&apos; as the ptr value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>data is not expandable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>error, see qerrno </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>else</parametername>
</parameternamelist>
<parameterdescription>
<para>the max number of lines </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4093" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a9ba339494aea0462baa7558b05480e17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman size_t ida_export</type>
        <definition>idaman size_t ida_export format_c_number</definition>
        <argsstring>(char *buf, size_t bufsize, uint128 value, int size, int pcn=0)</argsstring>
        <name>format_c_number</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type><ref refid="classuint128" kindref="compound">uint128</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pcn</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Format a C number. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>number to format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the number in bytes (1,2,4,8,16) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pcn</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___p_c_n__" kindref="compound">C Number formatting flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a7779b7d833a30bcbeb313ae4be6b3547" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export get_enum_member_expr</definition>
        <argsstring>(qstring *buf, const tinfo_t &amp;tif, int serial, uint64 value)</argsstring>
        <name>get_enum_member_expr</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type>int</type>
          <declname>serial</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a C expression that can be used to represent an enum member. If the value does not correspond to any single enum member, this function tries to find a bitwise combination of enum members that correspond to it. If more than half of value bits do not match any enum members, it fails. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tif</parametername>
</parameternamelist>
<parameterdescription>
<para>enumeration type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>which enumeration member to use (0 means the first with the given value) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to search in the enumeration type. only 32-bit number can be handled yet </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1a57bb73ce890f66243d2bc808d929141d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export choose_named_type</definition>
        <argsstring>(til_symbol_t *out_sym, const til_t *root_til, const char *title, int ntf_flags, predicate_t *predicate=NULL)</argsstring>
        <name>choose_named_type</name>
        <param>
          <type><ref refid="structtil__symbol__t" kindref="compound">til_symbol_t</ref> *</type>
          <declname>out_sym</declname>
        </param>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>root_til</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ntf_flags</declname>
        </param>
        <param>
          <type><ref refid="structpredicate__t" kindref="compound">predicate_t</ref> *</type>
          <declname>predicate</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Choose a type from a type library. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_sym</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to be filled with the chosen type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>root_til</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to starting til (the function will inspect the base tils if allowed by flags) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>title of listbox to display </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ntf_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___n_t_f__" kindref="compound">Flags for named types</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>predicate</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate to select types to display (maybe NULL) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if nothing is chosen, otherwise true </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="typeinf_8hpp_1ab22f4fee23c47b76ab6bfa138e6740be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> ida_export</type>
        <definition>idaman uint32 ida_export choose_local_tinfo</definition>
        <argsstring>(const til_t *ti, const char *title, local_tinfo_predicate_t *func=NULL, uint32 def_ord=0, void *ud=NULL)</argsstring>
        <name>choose_local_tinfo</name>
        <param>
          <type>const <ref refid="structtil__t" kindref="compound">til_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type><ref refid="typeinf_8hpp_1ab50d6548ef1add1a4a33341539d9f737" kindref="member">local_tinfo_predicate_t</ref> *</type>
          <declname>func</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>def_ord</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>void *</type>
          <declname>ud</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Choose a type from the local type library. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ti</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to til </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>title</parametername>
</parameternamelist>
<parameterdescription>
<para>title of listbox to display </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>predicate to select types to display (maybe NULL) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>def_ord</parametername>
</parameternamelist>
<parameterdescription>
<para>ordinal to position cursor before choose </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ud</parametername>
</parameternamelist>
<parameterdescription>
<para>user data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>== 0 means nothing is chosen, otherwise an ordinal number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp" line="4208" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Describes the type information records in IDA. </para>    </briefdescription>
    <detaileddescription>
<para>The recommended way of using type info is to use the <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> class. The type information is internally kept as an array of bytes terminated by 0.</para><para>Items in brackets [] are optional and sometimes are omitted. <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref>... means a sequence of <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> bytes which defines a type.</para><para><simplesect kind="note"><para>to work with the types of instructions or data in the database, use get_tinfo()/set_tinfo() and similar functions. </para></simplesect>
</para>    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp"/>
  </compounddef>
</doxygen>
