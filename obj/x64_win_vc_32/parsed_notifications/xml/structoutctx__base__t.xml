<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="structoutctx__base__t" kind="struct" language="C++" prot="public">
    <compoundname>outctx_base_t</compoundname>
    <derivedcompoundref refid="structoutctx__t" prot="public" virt="non-virtual">outctx_t</derivedcompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structoutctx__base__t_1ae45c594e564e7b5b8e8d4cf201149b43" prot="public" static="no" mutable="no">
        <type>ea_t</type>
        <definition>ea_t outctx_base_t::insn_ea</definition>
        <argsstring></argsstring>
        <name>insn_ea</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="700" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="700" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1a95cd703a31059d26329d81b46220e814" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref></type>
        <definition>qstring outctx_base_t::outbuf</definition>
        <argsstring></argsstring>
        <name>outbuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="701" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1a30caec0b0ce566cdb32830c6c6f54988" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t outctx_base_t::regname_idx</definition>
        <argsstring></argsstring>
        <name>regname_idx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="703" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="703" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1ace442da79670b4aa0154736701d2dae4" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int outctx_base_t::suspop</definition>
        <argsstring></argsstring>
        <name>suspop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="704" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="704" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1a04543bea9eb62a3440e3534288c15b87" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
        <definition>flags_t outctx_base_t::F</definition>
        <argsstring></argsstring>
        <name>F</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="705" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="705" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1ad16d3b1cfb12df80bdc5f1802035878f" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> *</type>
        <definition>uval_t* outctx_base_t::outvalues</definition>
        <argsstring></argsstring>
        <name>outvalues</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="706" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="706" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1a4d05ebb172c6792a931a60107a40299a" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int outctx_base_t::outvalue_getn_flags</definition>
        <argsstring></argsstring>
        <name>outvalue_getn_flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="707" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="707" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1a93f2660553765adc140553cc64121f8a" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* outctx_base_t::user_data</definition>
        <argsstring></argsstring>
        <name>user_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="708" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="708" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1a7f8363ea5bb198ac7ade1b3681174024" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* outctx_base_t::kern_data</definition>
        <argsstring></argsstring>
        <name>kern_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="709" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="709" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1ac2768cee6e0696a7f1c23466c11ebf6b" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a823b67c620f6cdca97e1d969ea4a9b02" kindref="member">qstrvec_t</ref> *</type>
        <definition>qstrvec_t* outctx_base_t::lnar</definition>
        <argsstring></argsstring>
        <name>lnar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="712" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="712" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1aa12eef115ba89f37c696497cc17956b5" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int outctx_base_t::lnar_maxsize</definition>
        <argsstring></argsstring>
        <name>lnar_maxsize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="713" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="713" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1a9f0f2d523968ad07a08d40a8337f353c" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int outctx_base_t::default_lnnum</definition>
        <argsstring></argsstring>
        <name>default_lnnum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="714" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="714" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1a2a9c77c8d1e10f4608c105134a38cdb2" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref></type>
        <definition>qstring outctx_base_t::line_prefix</definition>
        <argsstring></argsstring>
        <name>line_prefix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="716" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="716" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1a5e7fb9b29852ac388b92c1659710e39f" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t outctx_base_t::prefix_len</definition>
        <argsstring></argsstring>
        <name>prefix_len</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="717" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="717" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1a99f2f3cf97eb5afc579f61b759ed5f08" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int outctx_base_t::ctxflags</definition>
        <argsstring></argsstring>
        <name>ctxflags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="718" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="718" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1af4f8545e34946821930e420164971232" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int outctx_base_t::ind0</definition>
        <argsstring></argsstring>
        <name>ind0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="743" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="743" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1a69ef671cf90d3be0fbf37e8131060287" prot="public" static="no" mutable="no">
        <type>ea_t</type>
        <definition>ea_t outctx_base_t::cmt_ea</definition>
        <argsstring></argsstring>
        <name>cmt_ea</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="744" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="744" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1a2b6b6294fe87cf127b8fef7910435885" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref></type>
        <definition>qstring outctx_base_t::cmtbuf</definition>
        <argsstring></argsstring>
        <name>cmtbuf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="745" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="745" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1ad1e18db803944e57a76651d1bfe23660" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* outctx_base_t::cmtptr</definition>
        <argsstring></argsstring>
        <name>cmtptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="746" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="746" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__base__t_1a5a5aebda0aa2b284a57909356b8e65c3" prot="public" static="no" mutable="no">
        <type><ref refid="kernwin_8hpp_1a051016ac92685c95d47a7c1850c19632" kindref="member">color_t</ref></type>
        <definition>color_t outctx_base_t::cmtcolor</definition>
        <argsstring></argsstring>
        <name>cmtcolor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="747" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="747" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structoutctx__base__t_1a60132d346ec19157b14b0df4908887cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool outctx_base_t::only_main_line</definition>
        <argsstring>() const</argsstring>
        <name>only_main_line</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="749" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="749" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a0cfa825b0ebb53b884c5f2b8c3a76460" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool outctx_base_t::multiline</definition>
        <argsstring>() const</argsstring>
        <name>multiline</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="750" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="750" bodyend="750"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1af3c142ad3affbbad30093156b0854954" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool outctx_base_t::force_code</definition>
        <argsstring>() const</argsstring>
        <name>force_code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="751" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="751" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1af3c27da0e67083e509d5f214033ce747" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool outctx_base_t::stack_view</definition>
        <argsstring>() const</argsstring>
        <name>stack_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="752" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="752" bodyend="752"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a81de957da1f6f5d77fbfb38a3abc6f66" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool outctx_base_t::display_voids</definition>
        <argsstring>() const</argsstring>
        <name>display_voids</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="753" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="753" bodyend="753"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a82d2d67d25940b8c3197113aebc7730b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void outctx_base_t::set_gen_xrefs</definition>
        <argsstring>(bool on=true)</argsstring>
        <name>set_gen_xrefs</name>
        <param>
          <type>bool</type>
          <declname>on</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="754" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="754" bodyend="754"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1af98a7747489eea3a308304ad700f7196" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int outctx_base_t::get_xrefgen_state</definition>
        <argsstring>() const</argsstring>
        <name>get_xrefgen_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="755" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="755" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a892d1e938c18de6d8badeeef0cb1bc7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void outctx_base_t::set_gen_cmt</definition>
        <argsstring>(bool on=true)</argsstring>
        <name>set_gen_cmt</name>
        <param>
          <type>bool</type>
          <declname>on</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="756" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="756" bodyend="756"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a0c3694c01abf9acccd3531402caecc79" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int outctx_base_t::get_cmtgen_state</definition>
        <argsstring>() const</argsstring>
        <name>get_cmtgen_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="757" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="757" bodyend="757"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a3f7f7d9e86c94541bfcbd83a43953534" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void outctx_base_t::clr_gen_label</definition>
        <argsstring>(void)</argsstring>
        <name>clr_gen_label</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="758" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="758" bodyend="758"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1ac9fd33270b5cf13438d0c108a7a2bb41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void outctx_base_t::set_gen_label</definition>
        <argsstring>(void)</argsstring>
        <name>set_gen_label</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="759" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="759" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a516f09039cc9c59d8f525822f724c170" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void outctx_base_t::set_gen_demangled_label</definition>
        <argsstring>(void)</argsstring>
        <name>set_gen_demangled_label</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="760" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="760" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a3eb8dc81c261f7c8695a147b6a70a666" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void outctx_base_t::set_comment_addr</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>set_comment_addr</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="761" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="761" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1aa52a96aeab2982c352e5818bdda5d502" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void outctx_base_t::set_dlbind_opnd</definition>
        <argsstring>(void)</argsstring>
        <name>set_dlbind_opnd</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="762" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="762" bodyend="762"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1ae91b7a0b72b6aa69d8656e49eea1438d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool outctx_base_t::print_label_now</definition>
        <argsstring>() const</argsstring>
        <name>print_label_now</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="763" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="763" bodyend="767"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1af916ab628deaa2088b1e359bedab71e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int outctx_base_t::forbid_annotations</definition>
        <argsstring>()</argsstring>
        <name>forbid_annotations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="768" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="768" bodyend="774"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1ade9993a8cc84bc2a62cca96fa32bfa4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void outctx_base_t::restore_ctxflags</definition>
        <argsstring>(int saved_flags)</argsstring>
        <name>restore_ctxflags</name>
        <param>
          <type>int</type>
          <declname>saved_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="775" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="775" bodyend="778"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a632d679e88e2630e906dd0d0c3e9ae58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>outctx_base_t::outctx_base_t</definition>
        <argsstring>(ea_t ea, flags_t flags, int _suspop=0)</argsstring>
        <name>outctx_base_t</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>_suspop</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="780" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="780" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1aa933e525a872d6129b39ff0a68322118" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual outctx_base_t::~outctx_base_t</definition>
        <argsstring>(void)</argsstring>
        <name>~outctx_base_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="788" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a77b6e4d8ec2f88b8b2acf9e56c763c0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void outctx_base_t::out_printf</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>out_printf</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Functions to append text to the current output buffer (outbuf) Append a formatted string to the output string. <simplesect kind="return"><para>the number of characters appended </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="795" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="795" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a7d401281f5d9bc0b9ed928887785b0d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>outctx_base_t::GCC_DIAG_OFF</definition>
        <argsstring>(format-nonliteral)</argsstring>
        <name>GCC_DIAG_OFF</name>
        <param>
          <type>format-</type>
          <declname>nonliteral</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="803" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1aba5186c07b048b28e86ff8e8e25ec84d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void outctx_base_t::nowarn_out_printf</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>nowarn_out_printf</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="804" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="804" bodyend="810"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a094dfadba896cac7737e91f896220477" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>outctx_base_t::GCC_DIAG_ON</definition>
        <argsstring>(format-nonliteral)</argsstring>
        <name>GCC_DIAG_ON</name>
        <param>
          <type>format-</type>
          <declname>nonliteral</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="811" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1aa54d2f1b003ff95abd24b32628ca900b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::out_vprintf</definition>
        <argsstring>(const char *format, va_list va)</argsstring>
        <name>out_vprintf</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>va</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="813" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a3fc65e57973d2014015df8c252d9f9a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>virtual flags_t idaapi outctx_base_t::out_value</definition>
        <argsstring>(const op_t &amp;x, int outf=0)</argsstring>
        <name>out_value</name>
        <param>
          <type>const <ref refid="classop__t" kindref="compound">op_t</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>outf</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output immediate value. Try to use this function to output all constants of instruction operands. This function outputs a number from x.addr or x.value in the form determined by ::uFlag. It outputs a colored text.<itemizedlist>
<listitem><para>-1 is output with <ref refid="group___c_o_l_o_r___1gafae3148d3c44b3a34f47875bf5510b3d" kindref="member">COLOR_ERROR</ref></para></listitem><listitem><para>0 is output as a number or character or segment <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>value to output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outflags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___o_o_f__" kindref="compound">Output value flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>flags of the output value </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="824" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a6451645d64a0df3e91a94df355b490c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::out_symbol</definition>
        <argsstring>(char c)</argsstring>
        <name>out_symbol</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Output a character with <ref refid="group___c_o_l_o_r___1gaf4f5b2ccf54e99565011d5c8dc552533" kindref="member">COLOR_SYMBOL</ref> color. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="857" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1ac196e4fdd5bfe5419ef8d08ff7ed8018" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::out_chars</definition>
        <argsstring>(char c, int n)</argsstring>
        <name>out_chars</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Append a character multiple times. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="860" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a7c0d0e1324960936eab349a52d5d1d93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void outctx_base_t::out_spaces</definition>
        <argsstring>(ssize_t len)</argsstring>
        <name>out_spaces</name>
        <param>
          <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Appends spaces to outbuf until its tag_strlen becomes &apos;len&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="863" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="863" bodyend="863"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a6427b2fedd6b99c5dfd6fc30ee7ccbd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::add_spaces</definition>
        <argsstring>(qstring *buf, ssize_t len)</argsstring>
        <name>add_spaces</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="864" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a5a3440052da5ee0a3fcb41c5b8b1a552" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::out_line</definition>
        <argsstring>(const char *str, color_t color=0)</argsstring>
        <name>out_line</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1a051016ac92685c95d47a7c1850c19632" kindref="member">color_t</ref></type>
          <declname>color</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Output a string with the specified color. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="867" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1aaf5d60224ce9c38e32ade7ff96e8ecc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void outctx_base_t::out_keyword</definition>
        <argsstring>(const char *str)</argsstring>
        <name>out_keyword</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Output a string with <ref refid="group___c_o_l_o_r___1ga7b971e552f935721d430c647b0cc2f2c" kindref="member">COLOR_KEYWORD</ref> color. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="870" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="870" bodyend="873"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a2f8e21d5a1936f71cffd6e206538ac7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void outctx_base_t::out_register</definition>
        <argsstring>(const char *str)</argsstring>
        <name>out_register</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Output a character with <ref refid="group___c_o_l_o_r___1ga7aafeb6706d140aee8d54c74bc3f9fed" kindref="member">COLOR_REG</ref> color. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="876" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="876" bodyend="879"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a639513d26c34ce5f4c2fc30b95bbe5b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::out_tagon</definition>
        <argsstring>(color_t tag)</argsstring>
        <name>out_tagon</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a051016ac92685c95d47a7c1850c19632" kindref="member">color_t</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Output &quot;turn color on&quot; escape sequence. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="882" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a47f50df01582acaa9bbfa7716fac4977" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::out_tagoff</definition>
        <argsstring>(color_t tag)</argsstring>
        <name>out_tagoff</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a051016ac92685c95d47a7c1850c19632" kindref="member">color_t</ref></type>
          <declname>tag</declname>
        </param>
        <briefdescription>
<para>Output &quot;turn color off&quot; escape sequence. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="885" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1aa66e3b29c5d4ad87c2a54cb600aa2e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::out_addr_tag</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>out_addr_tag</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Output &quot;address&quot; escape sequence. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="888" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a90b35141c0c7d292a505b9d1f08ed51a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::out_colored_register_line</definition>
        <argsstring>(const char *str)</argsstring>
        <name>out_colored_register_line</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output a colored line with register names in it. The register names will be substituted by user-defined names (<ref refid="structregvar__t" kindref="compound">regvar_t</ref>) Please note that out_tagoff tries to make substitutions too (when called with COLOR_REG) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="893" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a1d1ae88f3273ea6024a5ce45a077b05a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::out_char</definition>
        <argsstring>(char c)</argsstring>
        <name>out_char</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output one character. The character is output without color codes. see also <ref refid="structoutctx__base__t_1a6451645d64a0df3e91a94df355b490c9" kindref="member">out_symbol()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="898" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="898" bodyend="898"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1ade9771d59237aa100555a3e0ef118a4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::out_btoa</definition>
        <argsstring>(uval_t Word, char radix=0)</argsstring>
        <name>out_btoa</name>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>Word</declname>
        </param>
        <param>
          <type>char</type>
          <declname>radix</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output a number with the specified base (binary, octal, decimal, hex) The number is output without color codes. see also <ref refid="structoutctx__base__t_1aad62ea121d09c779b4cd141ef50b7662" kindref="member">out_long()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="903" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1aad62ea121d09c779b4cd141ef50b7662" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>void outctx_base_t::out_long</definition>
        <argsstring>(sval_t v, char radix)</argsstring>
        <name>out_long</name>
        <param>
          <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref></type>
          <declname>v</declname>
        </param>
        <param>
          <type>char</type>
          <declname>radix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output a number with appropriate color. Low level function. Use <ref refid="structoutctx__base__t_1a3fc65e57973d2014015df8c252d9f9a2" kindref="member">out_value()</ref> if you can. if &apos;suspop&apos; is set then this function uses <ref refid="group___c_o_l_o_r___1ga950298d6bbb40f6b9e2afed88dd85bcf" kindref="member">COLOR_VOIDOP</ref> instead of <ref refid="group___c_o_l_o_r___1ga448d134c3d37b267a3f1aeab4f81bc0d" kindref="member">COLOR_NUMBER</ref>. &apos;suspop&apos; is initialized:<itemizedlist>
<listitem><para>in out_one_operand()</para></listitem><listitem><para>in ...cpp (before calling {d_out()}) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>value to output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>radix</parametername>
</parameternamelist>
<parameterdescription>
<para>base (2,8,10,16) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>suspop</parametername>
</parameternamelist>
<parameterdescription>
<para>::suspop<itemizedlist>
<listitem><para>suspop==0: operand is ok</para></listitem><listitem><para>suspop==1: operand is suspicious and should be output with <ref refid="group___c_o_l_o_r___1ga950298d6bbb40f6b9e2afed88dd85bcf" kindref="member">COLOR_VOIDOP</ref></para></listitem><listitem><para>suspop==2: operand can&apos;t be output as requested and should be output with <ref refid="group___c_o_l_o_r___1gafae3148d3c44b3a34f47875bf5510b3d" kindref="member">COLOR_ERROR</ref> </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="919" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a973687090ecbc5a5f6cb11975c06e702" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool idaapi</type>
        <definition>virtual bool idaapi outctx_base_t::out_name_expr</definition>
        <argsstring>(const op_t &amp;x, ea_t ea, adiff_t off=BADADDR)</argsstring>
        <name>out_name_expr</name>
        <param>
          <type>const <ref refid="classop__t" kindref="compound">op_t</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>adiff_t</type>
          <declname>off</declname>
          <defval><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output a name expression. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>instruction operand referencing the name expression </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>address to convert to name expression </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of name expression. this parameter is used only to check that the name expression will have the wanted value. You may pass <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> for this parameter but I discourage it because it prohibits checks. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the name expression has been produced </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="929" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a5b38a4f57046a4d3a03a80adde91acd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void outctx_base_t::close_comment</definition>
        <argsstring>(void)</argsstring>
        <name>close_comment</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="936" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="936" bodyend="936"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a697aef3f367c1a6873c5a3f60c754a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool idaapi</type>
        <definition>virtual bool idaapi outctx_base_t::flush_outbuf</definition>
        <argsstring>(int indent=-1)</argsstring>
        <name>flush_outbuf</name>
        <param>
          <type>int</type>
          <declname>indent</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><hruler/>
 Functions to populate the output line array (lnar) Move the contents of the output buffer to the line array (outbuf-&gt;lnar) The kernel augments the outbuf contents with additional text like the line prefix, user-defined comments, xrefs, etc at this call. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="944" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a6e1373993b585eea1536fba376f9eaad" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool idaapi</type>
        <definition>virtual bool idaapi outctx_base_t::flush_buf</definition>
        <argsstring>(const char *buf, int indent=-1)</argsstring>
        <name>flush_buf</name>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append contents of &apos;buf&apos; to the line array. Behaves like flush_outbuf but accepts an arbitrary buffer </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="948" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a3b29803edf4262bd1e0b1afd895a3416" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int idaapi</type>
        <definition>virtual int idaapi outctx_base_t::term_outctx</definition>
        <argsstring>(const char *prefix=NULL)</argsstring>
        <name>term_outctx</name>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Finalize the output context. <simplesect kind="return"><para>the number of generated lines. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="952" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a2e6c7ced3298b77b8eaba2ab4d4b5858" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool idaapi</type>
        <definition>virtual bool idaapi outctx_base_t::gen_vprintf</definition>
        <argsstring>(int indent, const char *format, va_list va)</argsstring>
        <name>gen_vprintf</name>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>va</declname>
        </param>
        <briefdescription>
<para>See <ref refid="structoutctx__base__t_1af0f0f71a15e8ac7fbe65b5af59db9431" kindref="member">gen_printf()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="955" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1af0f0f71a15e8ac7fbe65b5af59db9431" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool outctx_base_t::gen_printf</definition>
        <argsstring>(int indent, const char *format,...)</argsstring>
        <name>gen_printf</name>
        <param>
          <type>int</type>
          <declname>indent</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>printf-like function to add lines to the line array. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>indent</parametername>
</parameternamelist>
<parameterdescription>
<para>indention of the line. if indent == -1, the kernel will indent the line at {indent}. if indent &lt; 0, -indent will be used for indention. The first line printed with indent &lt; 0 is considered as the most important line at the current address. Usually it is the line with the instruction itself. This line will be displayed in the cross-reference lists and other places. If you need to output an additional line before the main line then pass {indent} instead of -1. The kernel will know that your line is not the most important one. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>printf style colored line to generate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>overflow, lnar_maxsize has been reached </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="974" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="974" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a3f521d06ae6564f71ab3f38a827cd4ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool idaapi</type>
        <definition>virtual bool idaapi outctx_base_t::gen_empty_line</definition>
        <argsstring>(void)</argsstring>
        <name>gen_empty_line</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate empty line. This function does nothing if generation of empty lines is disabled. <simplesect kind="return"><para>overflow, lnar_maxsize has been reached </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="987" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a86bb1d1afcd92eac0d9136321bf8f126" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool idaapi</type>
        <definition>virtual bool idaapi outctx_base_t::gen_border_line</definition>
        <argsstring>(bool solid=false)</argsstring>
        <name>gen_border_line</name>
        <param>
          <type>bool</type>
          <declname>solid</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate thin border line. This function does nothing if generation of border lines is disabled. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>solid</parametername>
</parameternamelist>
<parameterdescription>
<para>generate solid border line (with =), otherwise with - </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>overflow, lnar_maxsize has been reached </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="995" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a5e08eef2ca0bea912fcf69693b0329aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool idaapi</type>
        <definition>virtual bool idaapi outctx_base_t::gen_colored_cmt_line_v</definition>
        <argsstring>(color_t color, const char *format, va_list va)</argsstring>
        <name>gen_colored_cmt_line_v</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a051016ac92685c95d47a7c1850c19632" kindref="member">color_t</ref></type>
          <declname>color</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>va</declname>
        </param>
        <briefdescription>
<para>See <ref refid="structoutctx__base__t_1a1866737882988e2a05fdc9127cbdff90" kindref="member">gen_cmt_line()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="998" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1adcb9c7c1c6b14a510bc21c03c320257e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool outctx_base_t::gen_cmt_line_v</definition>
        <argsstring>(const char *format, va_list va)</argsstring>
        <name>gen_cmt_line_v</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>va</declname>
        </param>
        <briefdescription>
<para>See <ref refid="structoutctx__base__t_1a1866737882988e2a05fdc9127cbdff90" kindref="member">gen_cmt_line()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1005" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1005" bodyend="1008"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a1866737882988e2a05fdc9127cbdff90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool outctx_base_t::gen_cmt_line</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>gen_cmt_line</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate one non-indented comment line, colored with <ref refid="group___c_o_l_o_r___1ga1ba160d785dc987a23b63a5d46139980" kindref="member">COLOR_AUTOCMT</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>printf() style format line. The resulting comment line should not include comment character (;) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>overflow, lnar_maxsize has been reached </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1015" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1015" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1afce0e2b5a36547e42e6d28a1d3d8b0cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool outctx_base_t::gen_collapsed_line</definition>
        <argsstring>(const char *format,...)</argsstring>
        <name>gen_collapsed_line</name>
        <param>
          <type>const char *</type>
          <declname>format</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate one non-indented comment line, colored with <ref refid="group___c_o_l_o_r___1ga59f86da1c99c60317fa5d482d06007fc" kindref="member">COLOR_COLLAPSED</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format</parametername>
</parameternamelist>
<parameterdescription>
<para>printf() style format line. The resulting comment line should not include comment character (;) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>overflow, lnar_maxsize has been reached </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1029" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1029" bodyend="1036"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a6f52709e1de03a4efc5ef3ea490df00a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool idaapi</type>
        <definition>virtual bool idaapi outctx_base_t::gen_block_cmt</definition>
        <argsstring>(const char *cmt, color_t color)</argsstring>
        <name>gen_block_cmt</name>
        <param>
          <type>const char *</type>
          <declname>cmt</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1a051016ac92685c95d47a7c1850c19632" kindref="member">color_t</ref></type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate big non-indented comment lines. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmt</parametername>
</parameternamelist>
<parameterdescription>
<para>comment text. may contain \n characters to denote new lines. should not contain comment character (;) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>color of comment text (one of <ref refid="group___c_o_l_o_r__" kindref="compound">Color tags</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>overflow, lnar_maxsize has been reached </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1044" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a1f66b8e1f5d886844a256194bf6e5233" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::setup_outctx</definition>
        <argsstring>(const char *prefix, int makeline_flags)</argsstring>
        <name>setup_outctx</name>
        <reimplementedby refid="structoutctx__t_1af2a2da4311f76bcf77f98d5d71684b76">setup_outctx</reimplementedby>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>makeline_flags</declname>
        </param>
        <briefdescription>
<para>Initialization; normally used only by the kernel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1048" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a2cf6a4045a526681613e07bff2c28e43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>virtual ssize_t idaapi outctx_base_t::retrieve_cmt</definition>
        <argsstring>(void)</argsstring>
        <name>retrieve_cmt</name>
        <reimplementedby refid="structoutctx__t_1aa76c4ebb2a861fb9e179ed66decbb213">retrieve_cmt</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1054" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1054" bodyend="1054"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1acd2074e477517775857f3a743f5cc47c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>virtual ssize_t idaapi outctx_base_t::retrieve_name</definition>
        <argsstring>(qstring *, color_t *)</argsstring>
        <name>retrieve_name</name>
        <reimplementedby refid="structoutctx__t_1a847f402c44a82aefeb34ecc7a87bc086">retrieve_name</reimplementedby>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1a051016ac92685c95d47a7c1850c19632" kindref="member">color_t</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1055" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1055" bodyend="1055"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1acda40f38f852f9662a31541a7dc30ef1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>bool idaapi</type>
        <definition>virtual bool idaapi outctx_base_t::gen_xref_lines</definition>
        <argsstring>(void)</argsstring>
        <name>gen_xref_lines</name>
        <reimplementedby refid="structoutctx__t_1a61e7f1fa3032032e11035f72dd49a3bf">gen_xref_lines</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1056" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1056" bodyend="1056"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1ac39cce0149cbd1ba7d7bd7d84465f616" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::init_lines_array</definition>
        <argsstring>(qstrvec_t *answers, int maxsize)</argsstring>
        <name>init_lines_array</name>
        <param>
          <type><ref refid="pro_8h_1a823b67c620f6cdca97e1d969ea4a9b02" kindref="member">qstrvec_t</ref> *</type>
          <declname>answers</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxsize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1058" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1ad9d4d1e51adbed57e51950a75fbf1625" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classmember__t" kindref="compound">member_t</ref> *idaapi</type>
        <definition>virtual member_t* idaapi outctx_base_t::get_stkvar</definition>
        <argsstring>(const op_t &amp;, uval_t, sval_t *, int *)</argsstring>
        <name>get_stkvar</name>
        <param>
          <type>const <ref refid="classop__t" kindref="compound">op_t</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
        </param>
        <param>
          <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref> *</type>
        </param>
        <param>
          <type>int *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1060" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1ac820c2171a30f696a59d7d72c5d64804" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void outctx_base_t::gen_empty_line_without_annotations</definition>
        <argsstring>(void)</argsstring>
        <name>gen_empty_line_without_annotations</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1062" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1062" bodyend="1067"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="structoutctx__base__t_1a960a0e7a7816440ff95cb6e7591df3c2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool idaapi</type>
        <definition>virtual bool idaapi outctx_base_t::flush_and_reinit</definition>
        <argsstring>(void)</argsstring>
        <name>flush_and_reinit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1072" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a60fd4ea0c60a5eb0561d1f2f4b98288e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::append_user_prefix</definition>
        <argsstring>(const char *, int)</argsstring>
        <name>append_user_prefix</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1073" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1073" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1af9cb330bbe46960c8069dd8e0a99e17f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::add_aux_prefix</definition>
        <argsstring>(const char *, int)</argsstring>
        <name>add_aux_prefix</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1074" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1074" bodyend="1074"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1ab3304de2da2c793b5ff64bdedf5a2bff" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::out_label_addr_tag</definition>
        <argsstring>(void)</argsstring>
        <name>out_label_addr_tag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1075" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1075" bodyend="1075"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__base__t_1a89bd26ae3352f4bea2a1d31c0e183221" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_base_t::out_aux_cmts</definition>
        <argsstring>(void)</argsstring>
        <name>out_aux_cmts</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1076" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1076" bodyend="1076"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2764">
        <label>outctx_t</label>
        <link refid="structoutctx__t"/>
        <childnode refid="2763" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2763">
        <label>outctx_base_t</label>
        <link refid="structoutctx__base__t"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2765">
        <label>outctx_base_t</label>
        <link refid="structoutctx__base__t"/>
        <childnode refid="2766" relation="usage">
          <edgelabel>lnar</edgelabel>
        </childnode>
        <childnode refid="2767" relation="usage">
          <edgelabel>outbuf</edgelabel>
          <edgelabel>cmtbuf</edgelabel>
          <edgelabel>line_prefix</edgelabel>
        </childnode>
      </node>
      <node id="2766">
        <label>qvector&lt; qstring &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2767">
        <label>_qstring&lt; char &gt;</label>
        <link refid="class__qstring"/>
      </node>
    </collaborationgraph>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="698" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="697" bodyend="1078"/>
    <listofallmembers>
      <member refid="structoutctx__base__t_1af9cb330bbe46960c8069dd8e0a99e17f" prot="protected" virt="virtual"><scope>outctx_base_t</scope><name>add_aux_prefix</name></member>
      <member refid="structoutctx__base__t_1a6427b2fedd6b99c5dfd6fc30ee7ccbd4" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>add_spaces</name></member>
      <member refid="structoutctx__base__t_1a60fd4ea0c60a5eb0561d1f2f4b98288e" prot="protected" virt="virtual"><scope>outctx_base_t</scope><name>append_user_prefix</name></member>
      <member refid="structoutctx__base__t_1a5b38a4f57046a4d3a03a80adde91acd1" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>close_comment</name></member>
      <member refid="structoutctx__base__t_1a3f7f7d9e86c94541bfcbd83a43953534" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>clr_gen_label</name></member>
      <member refid="structoutctx__base__t_1a69ef671cf90d3be0fbf37e8131060287" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>cmt_ea</name></member>
      <member refid="structoutctx__base__t_1a2b6b6294fe87cf127b8fef7910435885" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>cmtbuf</name></member>
      <member refid="structoutctx__base__t_1a5a5aebda0aa2b284a57909356b8e65c3" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>cmtcolor</name></member>
      <member refid="structoutctx__base__t_1ad1e18db803944e57a76651d1bfe23660" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>cmtptr</name></member>
      <member refid="structoutctx__base__t_1a99f2f3cf97eb5afc579f61b759ed5f08" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>ctxflags</name></member>
      <member refid="structoutctx__base__t_1a9f0f2d523968ad07a08d40a8337f353c" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>default_lnnum</name></member>
      <member refid="structoutctx__base__t_1a81de957da1f6f5d77fbfb38a3abc6f66" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>display_voids</name></member>
      <member refid="structoutctx__base__t_1a04543bea9eb62a3440e3534288c15b87" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>F</name></member>
      <member refid="structoutctx__base__t_1a960a0e7a7816440ff95cb6e7591df3c2" prot="protected" virt="virtual"><scope>outctx_base_t</scope><name>flush_and_reinit</name></member>
      <member refid="structoutctx__base__t_1a6e1373993b585eea1536fba376f9eaad" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>flush_buf</name></member>
      <member refid="structoutctx__base__t_1a697aef3f367c1a6873c5a3f60c754a9e" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>flush_outbuf</name></member>
      <member refid="structoutctx__base__t_1af916ab628deaa2088b1e359bedab71e1" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>forbid_annotations</name></member>
      <member refid="structoutctx__base__t_1af3c142ad3affbbad30093156b0854954" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>force_code</name></member>
      <member refid="structoutctx__base__t_1a7d401281f5d9bc0b9ed928887785b0d0" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>GCC_DIAG_OFF</name></member>
      <member refid="structoutctx__base__t_1a094dfadba896cac7737e91f896220477" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>GCC_DIAG_ON</name></member>
      <member refid="structoutctx__base__t_1a6f52709e1de03a4efc5ef3ea490df00a" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>gen_block_cmt</name></member>
      <member refid="structoutctx__base__t_1a86bb1d1afcd92eac0d9136321bf8f126" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>gen_border_line</name></member>
      <member refid="structoutctx__base__t_1a1866737882988e2a05fdc9127cbdff90" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>gen_cmt_line</name></member>
      <member refid="structoutctx__base__t_1adcb9c7c1c6b14a510bc21c03c320257e" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>gen_cmt_line_v</name></member>
      <member refid="structoutctx__base__t_1afce0e2b5a36547e42e6d28a1d3d8b0cf" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>gen_collapsed_line</name></member>
      <member refid="structoutctx__base__t_1a5e08eef2ca0bea912fcf69693b0329aa" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>gen_colored_cmt_line_v</name></member>
      <member refid="structoutctx__base__t_1a3f521d06ae6564f71ab3f38a827cd4ed" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>gen_empty_line</name></member>
      <member refid="structoutctx__base__t_1ac820c2171a30f696a59d7d72c5d64804" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>gen_empty_line_without_annotations</name></member>
      <member refid="structoutctx__base__t_1af0f0f71a15e8ac7fbe65b5af59db9431" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>gen_printf</name></member>
      <member refid="structoutctx__base__t_1a2e6c7ced3298b77b8eaba2ab4d4b5858" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>gen_vprintf</name></member>
      <member refid="structoutctx__base__t_1acda40f38f852f9662a31541a7dc30ef1" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>gen_xref_lines</name></member>
      <member refid="structoutctx__base__t_1a0c3694c01abf9acccd3531402caecc79" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>get_cmtgen_state</name></member>
      <member refid="structoutctx__base__t_1ad9d4d1e51adbed57e51950a75fbf1625" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>get_stkvar</name></member>
      <member refid="structoutctx__base__t_1af98a7747489eea3a308304ad700f7196" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>get_xrefgen_state</name></member>
      <member refid="structoutctx__base__t_1af4f8545e34946821930e420164971232" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>ind0</name></member>
      <member refid="structoutctx__base__t_1ac39cce0149cbd1ba7d7bd7d84465f616" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>init_lines_array</name></member>
      <member refid="structoutctx__base__t_1ae45c594e564e7b5b8e8d4cf201149b43" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>insn_ea</name></member>
      <member refid="structoutctx__base__t_1a7f8363ea5bb198ac7ade1b3681174024" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>kern_data</name></member>
      <member refid="structoutctx__base__t_1a2a9c77c8d1e10f4608c105134a38cdb2" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>line_prefix</name></member>
      <member refid="structoutctx__base__t_1ac2768cee6e0696a7f1c23466c11ebf6b" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>lnar</name></member>
      <member refid="structoutctx__base__t_1aa12eef115ba89f37c696497cc17956b5" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>lnar_maxsize</name></member>
      <member refid="structoutctx__base__t_1a0cfa825b0ebb53b884c5f2b8c3a76460" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>multiline</name></member>
      <member refid="structoutctx__base__t_1aba5186c07b048b28e86ff8e8e25ec84d" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>nowarn_out_printf</name></member>
      <member refid="structoutctx__base__t_1a60132d346ec19157b14b0df4908887cc" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>only_main_line</name></member>
      <member refid="structoutctx__base__t_1aa66e3b29c5d4ad87c2a54cb600aa2e0f" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>out_addr_tag</name></member>
      <member refid="structoutctx__base__t_1a89bd26ae3352f4bea2a1d31c0e183221" prot="protected" virt="virtual"><scope>outctx_base_t</scope><name>out_aux_cmts</name></member>
      <member refid="structoutctx__base__t_1ade9771d59237aa100555a3e0ef118a4c" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>out_btoa</name></member>
      <member refid="structoutctx__base__t_1a1d1ae88f3273ea6024a5ce45a077b05a" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>out_char</name></member>
      <member refid="structoutctx__base__t_1ac196e4fdd5bfe5419ef8d08ff7ed8018" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>out_chars</name></member>
      <member refid="structoutctx__base__t_1a90b35141c0c7d292a505b9d1f08ed51a" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>out_colored_register_line</name></member>
      <member refid="structoutctx__base__t_1aaf5d60224ce9c38e32ade7ff96e8ecc6" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>out_keyword</name></member>
      <member refid="structoutctx__base__t_1ab3304de2da2c793b5ff64bdedf5a2bff" prot="protected" virt="virtual"><scope>outctx_base_t</scope><name>out_label_addr_tag</name></member>
      <member refid="structoutctx__base__t_1a5a3440052da5ee0a3fcb41c5b8b1a552" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>out_line</name></member>
      <member refid="structoutctx__base__t_1aad62ea121d09c779b4cd141ef50b7662" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>out_long</name></member>
      <member refid="structoutctx__base__t_1a973687090ecbc5a5f6cb11975c06e702" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>out_name_expr</name></member>
      <member refid="structoutctx__base__t_1a77b6e4d8ec2f88b8b2acf9e56c763c0f" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>out_printf</name></member>
      <member refid="structoutctx__base__t_1a2f8e21d5a1936f71cffd6e206538ac7b" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>out_register</name></member>
      <member refid="structoutctx__base__t_1a7c0d0e1324960936eab349a52d5d1d93" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>out_spaces</name></member>
      <member refid="structoutctx__base__t_1a6451645d64a0df3e91a94df355b490c9" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>out_symbol</name></member>
      <member refid="structoutctx__base__t_1a47f50df01582acaa9bbfa7716fac4977" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>out_tagoff</name></member>
      <member refid="structoutctx__base__t_1a639513d26c34ce5f4c2fc30b95bbe5b3" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>out_tagon</name></member>
      <member refid="structoutctx__base__t_1a3fc65e57973d2014015df8c252d9f9a2" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>out_value</name></member>
      <member refid="structoutctx__base__t_1aa54d2f1b003ff95abd24b32628ca900b" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>out_vprintf</name></member>
      <member refid="structoutctx__base__t_1a95cd703a31059d26329d81b46220e814" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>outbuf</name></member>
      <member refid="structoutctx__base__t_1a632d679e88e2630e906dd0d0c3e9ae58" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>outctx_base_t</name></member>
      <member refid="structoutctx__base__t_1a4d05ebb172c6792a931a60107a40299a" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>outvalue_getn_flags</name></member>
      <member refid="structoutctx__base__t_1ad16d3b1cfb12df80bdc5f1802035878f" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>outvalues</name></member>
      <member refid="structoutctx__base__t_1a5e7fb9b29852ac388b92c1659710e39f" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>prefix_len</name></member>
      <member refid="structoutctx__base__t_1ae91b7a0b72b6aa69d8656e49eea1438d" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>print_label_now</name></member>
      <member refid="structoutctx__base__t_1a30caec0b0ce566cdb32830c6c6f54988" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>regname_idx</name></member>
      <member refid="structoutctx__base__t_1ade9993a8cc84bc2a62cca96fa32bfa4e" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>restore_ctxflags</name></member>
      <member refid="structoutctx__base__t_1a2cf6a4045a526681613e07bff2c28e43" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>retrieve_cmt</name></member>
      <member refid="structoutctx__base__t_1acd2074e477517775857f3a743f5cc47c" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>retrieve_name</name></member>
      <member refid="structoutctx__base__t_1a3eb8dc81c261f7c8695a147b6a70a666" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>set_comment_addr</name></member>
      <member refid="structoutctx__base__t_1aa52a96aeab2982c352e5818bdda5d502" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>set_dlbind_opnd</name></member>
      <member refid="structoutctx__base__t_1a892d1e938c18de6d8badeeef0cb1bc7e" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>set_gen_cmt</name></member>
      <member refid="structoutctx__base__t_1a516f09039cc9c59d8f525822f724c170" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>set_gen_demangled_label</name></member>
      <member refid="structoutctx__base__t_1ac9fd33270b5cf13438d0c108a7a2bb41" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>set_gen_label</name></member>
      <member refid="structoutctx__base__t_1a82d2d67d25940b8c3197113aebc7730b" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>set_gen_xrefs</name></member>
      <member refid="structoutctx__base__t_1a1f66b8e1f5d886844a256194bf6e5233" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>setup_outctx</name></member>
      <member refid="structoutctx__base__t_1af3c27da0e67083e509d5f214033ce747" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>stack_view</name></member>
      <member refid="structoutctx__base__t_1ace442da79670b4aa0154736701d2dae4" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>suspop</name></member>
      <member refid="structoutctx__base__t_1a3b29803edf4262bd1e0b1afd895a3416" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>term_outctx</name></member>
      <member refid="structoutctx__base__t_1a93f2660553765adc140553cc64121f8a" prot="public" virt="non-virtual"><scope>outctx_base_t</scope><name>user_data</name></member>
      <member refid="structoutctx__base__t_1aa933e525a872d6129b39ff0a68322118" prot="public" virt="virtual"><scope>outctx_base_t</scope><name>~outctx_base_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
