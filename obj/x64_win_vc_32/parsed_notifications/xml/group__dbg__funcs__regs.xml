<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="group__dbg__funcs__regs" kind="group">
    <compoundname>dbg_funcs_regs</compoundname>
    <title>Registers</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__dbg__funcs__regs_1gaade2c637a6e327c9e282edff7c1870b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_dbg_reg_info</definition>
        <argsstring>(const char *regname, register_info_t *ri)</argsstring>
        <name>get_dbg_reg_info</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type><ref refid="structregister__info__t" kindref="compound">register_info_t</ref> *</type>
          <declname>ri</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get register information {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="704" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="704" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1gaac94fe8219194588151ff8c4ee9a6600" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_reg_val</definition>
        <argsstring>(const char *regname, regval_t *regval)</argsstring>
        <name>get_reg_val</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type><ref refid="structregval__t" kindref="compound">regval_t</ref> *</type>
          <declname>regval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read a register value from the current thread. {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="710" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="710" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1gade701b8b51a6a0b3111756e68c84044a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_reg_val</definition>
        <argsstring>(const char *regname, uint64 *ival)</argsstring>
        <name>get_reg_val</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> *</type>
          <declname>ival</declname>
        </param>
        <briefdescription>
<para>Get register value as an unsigned 64-bit int. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="714" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="714" bodyend="714"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1ga350fcf63a4197ff3f5ce68197665336f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_sp_val</definition>
        <argsstring>(ea_t *out)</argsstring>
        <name>get_sp_val</name>
        <param>
          <type>ea_t *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get value of the SP register for the current thread. Requires a suspended debugger. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="719" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="719" bodyend="719"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1ga821b963de4c394eeee94127e64880aa1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi get_ip_val</definition>
        <argsstring>(ea_t *out)</argsstring>
        <name>get_ip_val</name>
        <param>
          <type>ea_t *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get value of the IP (program counter) register for the current thread. Requires a suspended debugger. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="723" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="723" bodyend="723"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1gaba72f05c6a4861033d467737fec81c10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi set_reg_val</definition>
        <argsstring>(const char *regname, const regval_t *regval)</argsstring>
        <name>set_reg_val</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type>const <ref refid="structregval__t" kindref="compound">regval_t</ref> *</type>
          <declname>regval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Write a register value to the current thread. {Type, Synchronous function - available as Request, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="729" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="729" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1ga5704463024f9efecb9a9266062b72f1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi set_reg_val</definition>
        <argsstring>(const char *regname, uint64 ival)</argsstring>
        <name>set_reg_val</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>ival</declname>
        </param>
        <briefdescription>
<para>Write a register value to the current thread. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="733" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="733" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1ga80bbe9e841d606d88a2f20e14f308eb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi request_set_reg_val</definition>
        <argsstring>(const char *regname, const regval_t *regval)</argsstring>
        <name>request_set_reg_val</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <param>
          <type>const <ref refid="structregval__t" kindref="compound">regval_t</ref> *</type>
          <declname>regval</declname>
        </param>
        <briefdescription>
<para>Post a <ref refid="group__dbg__funcs__regs_1gaba72f05c6a4861033d467737fec81c10" kindref="member">set_reg_val()</ref> request. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="737" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="737" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1gabd263cd93f4d01345d687c7e5a1176e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi is_reg_integer</definition>
        <argsstring>(const char *regname)</argsstring>
        <name>is_reg_integer</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does a register contain an integer value? {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="744" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="744" bodyend="744"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1ga8945a7732adce3accc70fb5a940b1450" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi is_reg_float</definition>
        <argsstring>(const char *regname)</argsstring>
        <name>is_reg_float</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does a register contain a floating point value? {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="751" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="751" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__regs_1ga708fad2035f59f04662f840f5de78000" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi is_reg_custom</definition>
        <argsstring>(const char *regname)</argsstring>
        <name>is_reg_custom</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does a register contain a value of a custom data type? {Type, Synchronous function, Notification, none (synchronous function)} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="758" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" bodystart="758" bodyend="758"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Inspect/Manipulate registers for debugged process. The debugger structure defines a set of hardware registers in {registers} IDA also recognizes register names for each defined bit in bit registers. You can use all these names to set or get a register value.</para><para>For example, with the x86 Userland Win32 debugger you can use register names like:<itemizedlist>
<listitem><para>&quot;EAX&quot;, ... &quot;EBP&quot;, &quot;ESP&quot;, &quot;EFL&quot;: for classical integer registers</para></listitem><listitem><para>&quot;CS&quot;, &quot;DS&quot;, ... : for segment registers</para></listitem><listitem><para>&quot;ST0&quot;, &quot;ST1&quot;, ... : for FPU registers</para></listitem><listitem><para>&quot;CF&quot;, &quot;PF&quot;, &quot;AF&quot;, &quot;ZF&quot;, ... : for special bit values </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
