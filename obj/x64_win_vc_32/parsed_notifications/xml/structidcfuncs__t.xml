<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="structidcfuncs__t" kind="struct" language="C++" prot="public">
    <compoundname>idcfuncs_t</compoundname>
    <includes refid="expr_8hpp" local="no">expr.hpp</includes>
      <sectiondef kind="user-defined">
      <header>IDC Engine</header>
      <description><para>IDC engine requires the following functions (all of them may be NULL) </para></description>
      <memberdef kind="variable" id="structidcfuncs__t_1ab95ccd972f0358cf2d52ad396a215d65" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref>(idaapi *</type>
        <definition>error_t(idaapi * idcfuncs_t::startup) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>startup</name>
        <briefdescription>
<para>Start IDC engine. Called before executing any IDC code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="475" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="475" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structidcfuncs__t_1a4a0ffe14f4b46d67abfc56645f143875" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref>(idaapi *</type>
        <definition>error_t(idaapi * idcfuncs_t::shutdown) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>shutdown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stop IDC engine. Called when all IDC engines finish. In other words, nested IDC engines do not call startup/shutdown. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="479" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structidcfuncs__t_1a86402c79650f4e3ff74e5ac9dfa1e555" prot="public" static="no" mutable="no">
        <type>void(idaapi *</type>
        <definition>void(idaapi * idcfuncs_t::init_idc) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>init_idc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize IDC engine. Called once at the very beginning of work. This callback may create additional IDC classes, methods, etc. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="483" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="483" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structidcfuncs__t_1a7b65ad6a49850c0f462c8543dbe892fd" prot="public" static="no" mutable="no">
        <type>void(idaapi *</type>
        <definition>void(idaapi * idcfuncs_t::term_idc) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>term_idc</name>
        <briefdescription>
<para>Terminate IDC engine. Called once at the very end of work. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="486" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structidcfuncs__t_1a1bcc06def8ff09001aee0c5687f3084b" prot="public" static="no" mutable="no">
        <type>bool(idaapi *</type>
        <definition>bool(idaapi * idcfuncs_t::is_database_open) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>is_database_open</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the database open? (used for <ref refid="group___e_x_t_f_u_n___1ga10db1b89a32d67a13cab2ed10ef7c4f4" kindref="member">EXTFUN_BASE</ref> functions). if this pointer is NULL, <ref refid="group___e_x_t_f_u_n___1ga10db1b89a32d67a13cab2ed10ef7c4f4" kindref="member">EXTFUN_BASE</ref> is not checked. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="490" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structidcfuncs__t_1a35b184c7411f9180f6bdae1bc3d86294" prot="public" static="no" mutable="no">
        <type>size_t(idaapi *</type>
        <definition>size_t(idaapi * idcfuncs_t::ea2str) (char *buf, size_t bufsize, ea_t ea)</definition>
        <argsstring>)(char *buf, size_t bufsize, ea_t ea)</argsstring>
        <name>ea2str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert an address to a string. if this pointer is NULL, &apos;a&apos; will be used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="494" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="494" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structidcfuncs__t_1a58c33943de9c58b9c59e36fa54551385" prot="public" static="no" mutable="no">
        <type>bool(idaapi *</type>
        <definition>bool(idaapi * idcfuncs_t::undeclared_variable_ok) (const char *name)</definition>
        <argsstring>)(const char *name)</argsstring>
        <name>undeclared_variable_ok</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Should a variable name be accepted without declaration?. When the parser encounters an unrecognized variable, this callback is called. If it returns false, the parser generates the &apos;undefined variable&apos; error else the parser generates code to call to a set or get function, depending on the current context. If this pointer is NULL, undeclared variables won&apos;t be supported. However, if &apos;resolver&apos; object is provided to the parser, it will be used to resolve such names to constants at the compilation time. This callback is used by IDA to handle processor register names. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="505" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="505" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Indexes</header>
      <description><para>Indexes into the &apos;f&apos; array. non-positive values mean that the function does not exist </para></description>
      <memberdef kind="variable" id="structidcfuncs__t_1ad3c77370d4e24f2aa1492d16be8bc9a2" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int idcfuncs_t::get_unkvar</definition>
        <argsstring></argsstring>
        <name>get_unkvar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve value of an undeclared variable. Expected prototype: get(<ref refid="group___v_t___1ga662cae113f2d445abd2f017c5c314cba" kindref="member">VT_STR</ref> varname) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="515" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structidcfuncs__t_1abc8d4d9810b2cac83456f29da56f1a88" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int idcfuncs_t::set_unkvar</definition>
        <argsstring></argsstring>
        <name>set_unkvar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Store a value to an undeclared variable. Expected prototype: set(<ref refid="group___v_t___1gadb82f81e6751e3bc2a5437b649d6f00c" kindref="member">VT_WILD</ref> new_value, <ref refid="group___v_t___1ga662cae113f2d445abd2f017c5c314cba" kindref="member">VT_STR</ref> varname) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="519" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structidcfuncs__t_1ac144b55099e615363a12eb517c0611fa" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int idcfuncs_t::exec_resolved_func</definition>
        <argsstring></argsstring>
        <name>exec_resolved_func</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execute resolved function. If &apos;resolver&apos; was used to resolve an unknown name to a constant in a function call context, such a call will be redirected here. Expected prototype: exec_resolved_func(<ref refid="group___v_t___1ga9366c439f83b49166170067f8ee071fc" kindref="member">VT_LONG</ref> func, <ref refid="group___v_t___1gadb82f81e6751e3bc2a5437b649d6f00c" kindref="member">VT_WILD</ref> typeinfo, ...) This callback is used in IDA for Appcall. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="526" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="526" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structidcfuncs__t_1a353eae2361f5afab5f048a346b87442b" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int idcfuncs_t::calc_sizeof</definition>
        <argsstring></argsstring>
        <name>calc_sizeof</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate sizeof(type). This function is used by the interpreter to calculate sizeof() expressions. Please note that the &apos;type&apos; argument is an IDC object of typeinfo class. Expected prototype: calc_sizeof(<ref refid="group___v_t___1gac29d7f7b5206c6d0c3d76e05ca32b97a" kindref="member">VT_OBJ</ref> typeinfo) This callback requires support of the type system (available only in IDA kernel) It should not be used by standalone IDC interpreters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="534" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structidcfuncs__t_1ad4269099de87fcbb621e686d107906d7" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int idcfuncs_t::get_field_ea</definition>
        <argsstring></argsstring>
        <name>get_field_ea</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get address of the specified field using the type information from the idb. This function is used to resolve expressions like &apos;mystr.field&apos; where mystr does not represent an IDC object but just a plain number. The number is interpreted as an address in the current idb. This function retrieves type information at this address and tried to find the specified &apos;field&apos;. It returns the address of the &apos;field&apos; in the idb. This callback should not be used by standalone IDC interpreters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="543" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="543" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structidcfuncs__t_1a1a168ecf7cb2fbe858ae64c26e4a9999" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t idcfuncs_t::qnty</definition>
        <argsstring></argsstring>
        <name>qnty</name>
        <briefdescription>
<para>Number of functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="467" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structidcfuncs__t_1a8c9e1152c1cc8bb5c6df0540fb8429c2" prot="public" static="no" mutable="no">
        <type><ref refid="structext__idcfunc__t" kindref="compound">ext_idcfunc_t</ref> *</type>
        <definition>ext_idcfunc_t* idcfuncs_t::funcs</definition>
        <argsstring></argsstring>
        <name>funcs</name>
        <briefdescription>
<para>Function table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="468" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="468" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Describes an array of IDC functions. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1778">
        <label>idcfuncs_t</label>
        <link refid="structidcfuncs__t"/>
        <childnode refid="1779" relation="usage">
          <edgelabel>funcs</edgelabel>
        </childnode>
      </node>
      <node id="1779">
        <label>ext_idcfunc_t</label>
        <link refid="structext__idcfunc__t"/>
        <childnode refid="1780" relation="usage">
          <edgelabel>defvals</edgelabel>
        </childnode>
      </node>
      <node id="1780">
        <label>idc_value_t</label>
        <link refid="classidc__value__t"/>
      </node>
    </collaborationgraph>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="466" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="465" bodyend="546"/>
    <listofallmembers>
      <member refid="structidcfuncs__t_1a353eae2361f5afab5f048a346b87442b" prot="public" virt="non-virtual"><scope>idcfuncs_t</scope><name>calc_sizeof</name></member>
      <member refid="structidcfuncs__t_1a35b184c7411f9180f6bdae1bc3d86294" prot="public" virt="non-virtual"><scope>idcfuncs_t</scope><name>ea2str</name></member>
      <member refid="structidcfuncs__t_1ac144b55099e615363a12eb517c0611fa" prot="public" virt="non-virtual"><scope>idcfuncs_t</scope><name>exec_resolved_func</name></member>
      <member refid="structidcfuncs__t_1a8c9e1152c1cc8bb5c6df0540fb8429c2" prot="public" virt="non-virtual"><scope>idcfuncs_t</scope><name>funcs</name></member>
      <member refid="structidcfuncs__t_1ad4269099de87fcbb621e686d107906d7" prot="public" virt="non-virtual"><scope>idcfuncs_t</scope><name>get_field_ea</name></member>
      <member refid="structidcfuncs__t_1ad3c77370d4e24f2aa1492d16be8bc9a2" prot="public" virt="non-virtual"><scope>idcfuncs_t</scope><name>get_unkvar</name></member>
      <member refid="structidcfuncs__t_1a86402c79650f4e3ff74e5ac9dfa1e555" prot="public" virt="non-virtual"><scope>idcfuncs_t</scope><name>init_idc</name></member>
      <member refid="structidcfuncs__t_1a1bcc06def8ff09001aee0c5687f3084b" prot="public" virt="non-virtual"><scope>idcfuncs_t</scope><name>is_database_open</name></member>
      <member refid="structidcfuncs__t_1a1a168ecf7cb2fbe858ae64c26e4a9999" prot="public" virt="non-virtual"><scope>idcfuncs_t</scope><name>qnty</name></member>
      <member refid="structidcfuncs__t_1abc8d4d9810b2cac83456f29da56f1a88" prot="public" virt="non-virtual"><scope>idcfuncs_t</scope><name>set_unkvar</name></member>
      <member refid="structidcfuncs__t_1a4a0ffe14f4b46d67abfc56645f143875" prot="public" virt="non-virtual"><scope>idcfuncs_t</scope><name>shutdown</name></member>
      <member refid="structidcfuncs__t_1ab95ccd972f0358cf2d52ad396a215d65" prot="public" virt="non-virtual"><scope>idcfuncs_t</scope><name>startup</name></member>
      <member refid="structidcfuncs__t_1a7b65ad6a49850c0f462c8543dbe892fd" prot="public" virt="non-virtual"><scope>idcfuncs_t</scope><name>term_idc</name></member>
      <member refid="structidcfuncs__t_1a58c33943de9c58b9c59e36fa54551385" prot="public" virt="non-virtual"><scope>idcfuncs_t</scope><name>undeclared_variable_ok</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
