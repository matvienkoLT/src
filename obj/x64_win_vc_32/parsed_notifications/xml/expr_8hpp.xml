<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="expr_8hpp" kind="file" language="C++">
    <compoundname>expr.hpp</compoundname>
    <includes refid="idp_8hpp" local="no">idp.hpp</includes>
    <includedby refid="ida__highlighter_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/ida_highlighter.hpp</includedby>
    <includedby refid="tstfeat_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/tstfeat.hpp</includedby>
    <incdepgraph>
      <node id="268">
        <label>sys/stat.h</label>
      </node>
      <node id="252">
        <label>stdarg.h</label>
      </node>
      <node id="255">
        <label>assert.h</label>
      </node>
      <node id="271">
        <label>ida.hpp</label>
        <link refid="ida_8hpp"/>
        <childnode refid="250" relation="include">
        </childnode>
        <childnode refid="272" relation="include">
        </childnode>
      </node>
      <node id="251">
        <label>stdlib.h</label>
      </node>
      <node id="278">
        <label>ua.hpp</label>
        <link refid="ua_8hpp"/>
        <childnode refid="279" relation="include">
        </childnode>
        <childnode refid="277" relation="include">
        </childnode>
        <childnode refid="280" relation="include">
        </childnode>
        <childnode refid="276" relation="include">
        </childnode>
      </node>
      <node id="281">
        <label>bitrange.hpp</label>
        <link refid="bitrange_8hpp"/>
      </node>
      <node id="263">
        <label>io.h</label>
      </node>
      <node id="266">
        <label>fcntl.h</label>
      </node>
      <node id="269">
        <label>llong.hpp</label>
        <link refid="llong_8hpp_source"/>
      </node>
      <node id="261">
        <label>malloc.h</label>
      </node>
      <node id="260">
        <label>string</label>
      </node>
      <node id="265">
        <label>map</label>
      </node>
      <node id="248">
        <label>idp.hpp</label>
        <link refid="idp_8hpp"/>
        <childnode refid="249" relation="include">
        </childnode>
        <childnode refid="270" relation="include">
        </childnode>
        <childnode refid="274" relation="include">
        </childnode>
        <childnode refid="275" relation="include">
        </childnode>
        <childnode refid="278" relation="include">
        </childnode>
        <childnode refid="281" relation="include">
        </childnode>
        <childnode refid="282" relation="include">
        </childnode>
      </node>
      <node id="264">
        <label>direct.h</label>
      </node>
      <node id="253">
        <label>stddef.h</label>
      </node>
      <node id="270">
        <label>nalt.hpp</label>
        <link refid="nalt_8hpp"/>
        <childnode refid="271" relation="include">
        </childnode>
        <childnode refid="273" relation="include">
        </childnode>
      </node>
      <node id="277">
        <label>lines.hpp</label>
        <link refid="lines_8hpp"/>
        <childnode refid="271" relation="include">
        </childnode>
      </node>
      <node id="256">
        <label>limits.h</label>
      </node>
      <node id="267">
        <label>sys/types.h</label>
      </node>
      <node id="262">
        <label>string.h</label>
      </node>
      <node id="259">
        <label>new</label>
      </node>
      <node id="280">
        <label>xref.hpp</label>
        <link refid="xref_8hpp"/>
      </node>
      <node id="275">
        <label>funcs.hpp</label>
        <link refid="funcs_8hpp"/>
        <childnode refid="272" relation="include">
        </childnode>
        <childnode refid="276" relation="include">
        </childnode>
      </node>
      <node id="247">
        <label>obj/x64_linux_gcc_32_opt/idasdk/expr.hpp</label>
        <link refid="expr_8hpp"/>
        <childnode refid="248" relation="include">
        </childnode>
      </node>
      <node id="250">
        <label>pro.h</label>
        <link refid="pro_8h"/>
        <childnode refid="251" relation="include">
        </childnode>
        <childnode refid="252" relation="include">
        </childnode>
        <childnode refid="253" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
        <childnode refid="255" relation="include">
        </childnode>
        <childnode refid="256" relation="include">
        </childnode>
        <childnode refid="257" relation="include">
        </childnode>
        <childnode refid="258" relation="include">
        </childnode>
        <childnode refid="259" relation="include">
        </childnode>
        <childnode refid="260" relation="include">
        </childnode>
        <childnode refid="261" relation="include">
        </childnode>
        <childnode refid="262" relation="include">
        </childnode>
        <childnode refid="263" relation="include">
        </childnode>
        <childnode refid="264" relation="include">
        </childnode>
        <childnode refid="265" relation="include">
        </childnode>
        <childnode refid="266" relation="include">
        </childnode>
        <childnode refid="267" relation="include">
        </childnode>
        <childnode refid="268" relation="include">
        </childnode>
        <childnode refid="269" relation="include">
        </childnode>
      </node>
      <node id="274">
        <label>segment.hpp</label>
        <link refid="segment_8hpp"/>
        <childnode refid="271" relation="include">
        </childnode>
        <childnode refid="272" relation="include">
        </childnode>
      </node>
      <node id="258">
        <label>time.h</label>
      </node>
      <node id="249">
        <label>fpro.h</label>
        <link refid="fpro_8h"/>
        <childnode refid="250" relation="include">
        </childnode>
        <childnode refid="254" relation="include">
        </childnode>
      </node>
      <node id="282">
        <label>config.hpp</label>
        <link refid="config_8hpp_source"/>
      </node>
      <node id="276">
        <label>bytes.hpp</label>
        <link refid="bytes_8hpp"/>
        <childnode refid="270" relation="include">
        </childnode>
        <childnode refid="277" relation="include">
        </childnode>
        <childnode refid="272" relation="include">
        </childnode>
      </node>
      <node id="257">
        <label>ctype.h</label>
      </node>
      <node id="272">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
      </node>
      <node id="273">
        <label>netnode.hpp</label>
        <link refid="netnode_8hpp"/>
        <childnode refid="272" relation="include">
        </childnode>
      </node>
      <node id="279">
        <label>kernwin.hpp</label>
        <link refid="kernwin_8hpp"/>
      </node>
      <node id="254">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="284">
        <label>obj/x64_linux_gcc_32_opt/idasdk/ida_highlighter.hpp</label>
        <link refid="ida__highlighter_8hpp_source"/>
      </node>
      <node id="285">
        <label>obj/x64_linux_gcc_32_opt/idasdk/tstfeat.hpp</label>
        <link refid="tstfeat_8hpp_source"/>
      </node>
      <node id="283">
        <label>obj/x64_linux_gcc_32_opt/idasdk/expr.hpp</label>
        <link refid="expr_8hpp"/>
        <childnode refid="284" relation="include">
        </childnode>
        <childnode refid="285" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classidc__value__t" prot="public">idc_value_t</innerclass>
    <innerclass refid="structidc__global__t" prot="public">idc_global_t</innerclass>
    <innerclass refid="structext__idcfunc__t" prot="public">ext_idcfunc_t</innerclass>
    <innerclass refid="structidcfuncs__t" prot="public">idcfuncs_t</innerclass>
    <innerclass refid="structhighlighter__cbs__t" prot="public">highlighter_cbs_t</innerclass>
    <innerclass refid="structsyntax__highlighter__t" prot="public">syntax_highlighter_t</innerclass>
    <innerclass refid="structextlang__t" prot="public">extlang_t</innerclass>
    <innerclass refid="structextlang__visitor__t" prot="public">extlang_visitor_t</innerclass>
    <innerclass refid="structidc__resolver__t" prot="public">idc_resolver_t</innerclass>
      <sectiondef kind="user-defined">
      <header>Enumerate object attributes</header>
      <memberdef kind="function" id="expr_8hpp_1aaac283686cc4799b2f63b09f063d2824" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> const char *ida_export</type>
        <definition>idaman THREAD_SAFE const char* ida_export first_idcv_attr</definition>
        <argsstring>(const idc_value_t *obj)</argsstring>
        <name>first_idcv_attr</name>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a6f82841150df896278338c762e836c4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> const char *ida_export</type>
        <definition>idaman THREAD_SAFE const char* ida_export last_idcv_attr</definition>
        <argsstring>(const idc_value_t *obj)</argsstring>
        <name>last_idcv_attr</name>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a9c60cd592321c175bc1c2f30e5d7db52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> const char *ida_export</type>
        <definition>idaman THREAD_SAFE const char* ida_export next_idcv_attr</definition>
        <argsstring>(const idc_value_t *obj, const char *attr)</argsstring>
        <name>next_idcv_attr</name>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a538b29b56768398acf7c91a217847abc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> const char *ida_export</type>
        <definition>idaman THREAD_SAFE const char* ida_export prev_idcv_attr</definition>
        <argsstring>(const idc_value_t *obj, const char *attr)</argsstring>
        <name>prev_idcv_attr</name>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="170" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Set user-defined functions to work with object attributes.</header>
      <description><para>If the function name is NULL, the definitions are removed. <simplesect kind="return"><para>name of the old attribute function. NULL means error, &quot;&quot; means no previous attr func </para></simplesect>
</para></description>
      <memberdef kind="function" id="expr_8hpp_1a99b2bfd11a66ca1087b2be5993128347" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> const char *ida_export</type>
        <definition>idaman THREAD_SAFE const char* ida_export set_idc_getattr</definition>
        <argsstring>(idc_class_t *icls, const char *fullfuncname)</argsstring>
        <name>set_idc_getattr</name>
        <param>
          <type>idc_class_t *</type>
          <declname>icls</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fullfuncname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a1a74b9711e045e1f8d252e6f62004a81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> const char *ida_export</type>
        <definition>idaman THREAD_SAFE const char* ida_export set_idc_setattr</definition>
        <argsstring>(idc_class_t *icls, const char *fullfuncname)</argsstring>
        <name>set_idc_setattr</name>
        <param>
          <type>idc_class_t *</type>
          <declname>icls</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fullfuncname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="258" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="expr_8hpp_1a237c5c3a16b77428037d9de194d47562" prot="public" static="no">
        <name>IDC_LANG_EXT</name>
        <initializer>&quot;idc&quot;</initializer>
        <briefdescription>
<para>IDC script extension. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="31" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___v_a_r_s_l_i_c_e___1ga014a316056d931baf3728110635950e2" prot="public" static="no">
        <name>VARSLICE_SINGLE</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>return single index (i2 is ignored) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="201" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___v_r_e_f___1ga76814172bcf72fc547553e677932946a" prot="public" static="no">
        <name>VREF_LOOP</name>
        <initializer>0x0000</initializer>
        <briefdescription>
<para>dereference until we get a non <ref refid="group___v_t___1ga37d8aaba00cee490d64289da4a1a7bc2" kindref="member">VT_REF</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="279" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___v_r_e_f___1ga5c6467e1d21776687a218d81863c1794" prot="public" static="no">
        <name>VREF_ONCE</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>dereference only once, do not loop </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="280" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___v_r_e_f___1ga190b9a602630d4aac07a18f0a6d59c07" prot="public" static="no">
        <name>VREF_COPY</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>copy the result to the input var (v) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="281" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___v_t___1ga9366c439f83b49166170067f8ee071fc" prot="public" static="no">
        <name>VT_LONG</name>
        <initializer>2</initializer>
        <briefdescription>
<para>Integer (see <ref refid="classidc__value__t_1aa09e4449f34001012e2f53248eb349fb" kindref="member">idc_value_t::num</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="320" column="10" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___v_t___1ga8ea40dbaf6ddc79132c4c71ebac5d977" prot="public" static="no">
        <name>VT_FLOAT</name>
        <initializer>3</initializer>
        <briefdescription>
<para>Floating point (see <ref refid="classidc__value__t_1a3cabc459ecf6959d53769ec189e34aa1" kindref="member">idc_value_t::e</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="321" column="10" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___v_t___1gadb82f81e6751e3bc2a5437b649d6f00c" prot="public" static="no">
        <name>VT_WILD</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function with arbitrary number of arguments. The actual number of arguments will be passed in <ref refid="classidc__value__t_1aa09e4449f34001012e2f53248eb349fb" kindref="member">idc_value_t::num</ref>. This value should not be used for <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="322" column="10" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___v_t___1gac29d7f7b5206c6d0c3d76e05ca32b97a" prot="public" static="no">
        <name>VT_OBJ</name>
        <initializer>5</initializer>
        <briefdescription>
<para>Object (see idc_value_t::obj) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="325" column="10" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___v_t___1gaee9c7d2d04f13ab6982a48178e673411" prot="public" static="no">
        <name>VT_FUNC</name>
        <initializer>6</initializer>
        <briefdescription>
<para>Function (see <ref refid="classidc__value__t_1a84ced37bdaf52d09a4830e93a036a894" kindref="member">idc_value_t::funcidx</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="326" column="10" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___v_t___1ga662cae113f2d445abd2f017c5c314cba" prot="public" static="no">
        <name>VT_STR</name>
        <initializer>7</initializer>
        <briefdescription>
<para>String (see qstr() and similar functions) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="327" column="10" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___v_t___1ga73ee8713be7855fc5fece9efd07517c0" prot="public" static="no">
        <name>VT_PVOID</name>
        <initializer>8</initializer>
        <briefdescription>
<para>void * </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="328" column="10" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___v_t___1ga843c8c23e40276b9682ab2ed7a621dd6" prot="public" static="no">
        <name>VT_INT64</name>
        <initializer>9</initializer>
        <briefdescription>
<para>i64 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="329" column="10" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="329" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___v_t___1ga37d8aaba00cee490d64289da4a1a7bc2" prot="public" static="no">
        <name>VT_REF</name>
        <initializer>10</initializer>
        <briefdescription>
<para>Reference. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="330" column="10" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="expr_8hpp_1a45b4ccf5dfd00fae2f30f0395f5dc802" prot="public" static="no">
        <name>eExecThrow</name>
        <initializer>90</initializer>
        <briefdescription>
<para>See return value of <ref refid="expr_8hpp_1a4f81b59a59f911daa997940dc00d7ec0" kindref="member">idc_func_t</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="437" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___e_x_t_f_u_n___1ga10db1b89a32d67a13cab2ed10ef7c4f4" prot="public" static="no">
        <name>EXTFUN_BASE</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>requires open database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="456" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="456" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___e_x_t_f_u_n___1gaabef798d37532f260cb10152049bfb14" prot="public" static="no">
        <name>EXTFUN_NORET</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>clean up its state before calling it. </para>        </briefdescription>
        <detaileddescription>
<para>does not return. the interpreter may </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="457" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="457" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___e_x_t_f_u_n___1ga705e9ca1426c11f7883f09387d4acc35" prot="public" static="no">
        <name>EXTFUN_SAFE</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>from any thread. </para>        </briefdescription>
        <detaileddescription>
<para>thread safe function. may be called </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="459" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="459" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="expr_8hpp_1a718a2d33a2375a820dc6334a85a9a7fb" prot="public" static="no">
        <name>HF_FIRST</name>
        <initializer>HF_KEYWORD1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="610" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="expr_8hpp_1a94593354f0f4626309cfd06f434dfda7" prot="public" static="no">
        <name>EXTLANG_IDC</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="643" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="643" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="expr_8hpp_1ac6258b5c01359d10495af58f840a21c3" prot="public" static="no">
        <name>EXTLANG_NS_AWARE</name>
        <initializer>0x02</initializer>
        <briefdescription>
<para>Namespace-aware (see above.) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="644" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_p_l___1gaa6bbac4baddfb8801c0cb988e47e3215" prot="public" static="no">
        <name>CPL_DEL_MACROS</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>delete macros at the end of compilation </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="1006" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="1006" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_p_l___1ga1512a7fb27627efbc0615d4571cdea93" prot="public" static="no">
        <name>CPL_USE_LABELS</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>allow program labels in the script </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="1007" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="1007" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___c_p_l___1ga527b0fff63a1f130f2f3140f6b72afcf" prot="public" static="no">
        <name>CPL_ONLY_SAFE</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>allow calls of only thread-safe functions </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="1008" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="1008" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="expr_8hpp_1ae5c4cd9d9bdb685dcedc109622c1f3a4" prot="public" static="no">
        <name>syntax_highlight_style</name>
        <enumvalue id="expr_8hpp_1ae5c4cd9d9bdb685dcedc109622c1f3a4a4d140af98eb0187b21537cab5b7f66d4" prot="public">
          <name>HF_DEFAULT</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="expr_8hpp_1ae5c4cd9d9bdb685dcedc109622c1f3a4a043ecc3ffbd5c24bdf96f1f5bf30dd55" prot="public">
          <name>HF_KEYWORD1</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="expr_8hpp_1ae5c4cd9d9bdb685dcedc109622c1f3a4aae9d96da0c5d6942ba7e43807d1183fc" prot="public">
          <name>HF_KEYWORD2</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="expr_8hpp_1ae5c4cd9d9bdb685dcedc109622c1f3a4a8c15e065dee7d6b9c656d108a72f89f3" prot="public">
          <name>HF_KEYWORD3</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="expr_8hpp_1ae5c4cd9d9bdb685dcedc109622c1f3a4a4d412e5f78b8fbfc96ce435a1878590e" prot="public">
          <name>HF_STRING</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="expr_8hpp_1ae5c4cd9d9bdb685dcedc109622c1f3a4a7c44d51ae6414648a5f3b7d9a5f814ab" prot="public">
          <name>HF_COMMENT</name>
          <initializer>= 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="expr_8hpp_1ae5c4cd9d9bdb685dcedc109622c1f3a4a370757b5a284c4a87320aae72dc26ede" prot="public">
          <name>HF_PREPROC</name>
          <initializer>= 6</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="expr_8hpp_1ae5c4cd9d9bdb685dcedc109622c1f3a4a32e398d80e1f192da69a393cb992a905" prot="public">
          <name>HF_NUMBER</name>
          <initializer>= 7</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="expr_8hpp_1ae5c4cd9d9bdb685dcedc109622c1f3a4ab8cb193aa2e5dcc66f1cdb18866f6484" prot="public">
          <name>HF_MAX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible syntax element highlighting style names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="598" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="597" bodyend="609"/>
      </memberdef>
      <memberdef kind="enum" id="expr_8hpp_1af608568d1657d96cfa50b0ea24a757af" prot="public" static="no">
        <name>find_extlang_kind_t</name>
        <enumvalue id="expr_8hpp_1af608568d1657d96cfa50b0ea24a757afaebaeea18f83ecdd5a2fdb210f85b6b87" prot="public">
          <name>FIND_EXTLANG_BY_EXT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="expr_8hpp_1af608568d1657d96cfa50b0ea24a757afa8fb489c6528f1aba40e804e837a324ef" prot="public">
          <name>FIND_EXTLANG_BY_NAME</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="expr_8hpp_1af608568d1657d96cfa50b0ea24a757afa1349378ec77331f40ca75b9739dca6c6" prot="public">
          <name>FIND_EXTLANG_BY_IDX</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="861" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="860" bodyend="865"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="expr_8hpp_1ae42889847c9c65a712a50063bbb64516" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structidc__global__t" kindref="compound">idc_global_t</ref> &gt;</type>
        <definition>typedef qvector&lt;idc_global_t&gt; idc_vars_t</definition>
        <argsstring></argsstring>
        <name>idc_vars_t</name>
        <briefdescription>
<para>vector of global idc variables </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="424" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="expr_8hpp_1a4f81b59a59f911daa997940dc00d7ec0" prot="public" static="no">
        <type><ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> idaapi</type>
        <definition>typedef error_t idaapi idc_func_t(idc_value_t *argv, idc_value_t *r)</definition>
        <argsstring>(idc_value_t *argv, idc_value_t *r)</argsstring>
        <name>idc_func_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Prototype of an external IDC function (implemented in C). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argv</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of input arguments. IDA will convert all arguments to types specified by <ref refid="structext__idcfunc__t_1a95368dda086f4483f6db79b9ad97a39f" kindref="member">ext_idcfunc_t::args</ref>, except for <ref refid="group___v_t___1gadb82f81e6751e3bc2a5437b649d6f00c" kindref="member">VT_WILD</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>return value of the function or exception </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, all other values indicate error. the error code must be set with <ref refid="pro_8h_1aa566d92429849c81f035fc2f5c643f67" kindref="member">set_qerrno()</ref>:<itemizedlist>
<listitem><para><ref refid="expr_8hpp_1a45b4ccf5dfd00fae2f30f0395f5dc802" kindref="member">eExecThrow</ref> - a new exception has been generated, see &apos;r&apos;</para></listitem><listitem><para>other values - runtime error has occurred </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="435" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="expr_8hpp_1a577d60cf6e9bef16dc62435cb32f2a45" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structextlang__t" kindref="compound">extlang_t</ref> * &gt;</type>
        <definition>typedef qvector&lt;extlang_t *&gt; extlangs_t</definition>
        <argsstring></argsstring>
        <name>extlangs_t</name>
        <briefdescription>
<para>vector of external language descriptions </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="808" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="808" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="expr_8hpp_1ae0c90e3a73c763345e81054130181bc4" prot="public" static="no">
        <type><ref refid="classqrefcnt__t" kindref="compound">qrefcnt_t</ref>&lt; <ref refid="structextlang__t" kindref="compound">extlang_t</ref> &gt;</type>
        <definition>typedef qrefcnt_t&lt;extlang_t&gt; extlang_object_t</definition>
        <argsstring></argsstring>
        <name>extlang_object_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="809" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="809" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="expr_8hpp_1a0719749dbe301226c063f2ed888a6006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE error_t ida_export idcv_long</definition>
        <argsstring>(idc_value_t *v)</argsstring>
        <name>idcv_long</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert IDC variable to a long (32/64bit) number. <simplesect kind="return"><para>v = 0 if impossible to convert to long </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a96c5e5798a769d283fd406091ec404ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE error_t ida_export idcv_int64</definition>
        <argsstring>(idc_value_t *v)</argsstring>
        <name>idcv_int64</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert IDC variable to a 64bit number. <simplesect kind="return"><para>v = 0 if impossible to convert to int64 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1af1f0e36dab8cb77a0dded71516970e28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE error_t ida_export idcv_num</definition>
        <argsstring>(idc_value_t *v)</argsstring>
        <name>idcv_num</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert IDC variable to a long number. <simplesect kind="return"><para><itemizedlist>
<listitem><para>v = 0 if IDC variable = &quot;false&quot; string</para></listitem><listitem><para>v = 1 if IDC variable = &quot;true&quot; string</para></listitem><listitem><para>v = number if IDC variable is number or string containing a number</para></listitem><listitem><para>eTypeConflict if IDC variable = empty string </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1afc1c3678b262804b805180fa99884343" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE error_t ida_export idcv_string</definition>
        <argsstring>(idc_value_t *v)</argsstring>
        <name>idcv_string</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Convert IDC variable to a text string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a1258c89269075132b3e696cd58c4c16d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE error_t ida_export idcv_float</definition>
        <argsstring>(idc_value_t *v)</argsstring>
        <name>idcv_float</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Convert IDC variable to a floating point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1ac51cbaedddb9aff9235b68dbe95013ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE error_t ida_export idcv_object</definition>
        <argsstring>(idc_value_t *v, const idc_class_t *icls=NULL)</argsstring>
        <name>idcv_object</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const idc_class_t *</type>
          <declname>icls</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an IDC object. The original value of &apos;v&apos; is discarded (freed). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>variable to hold the object. any previous value will be cleaned </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icls</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to the desired class. NULL means &quot;object&quot; class this ptr must be returned by <ref refid="expr_8hpp_1a0af2e3c42b33c9508904590ac0bdc5d0" kindref="member">add_idc_class()</ref> or <ref refid="expr_8hpp_1a6ec6fa9d02139d1bb211eadfe61bdbb9" kindref="member">find_idc_class()</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>always eOk </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1ac27dfef499d8dd3a038654204e3a0d5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE error_t ida_export move_idcv</definition>
        <argsstring>(idc_value_t *dst, idc_value_t *src)</argsstring>
        <name>move_idcv</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Move &apos;src&apos; to &apos;dst&apos;. This function is more effective than copy_idcv since it never copies big amounts of data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a9697b9403a7941153d1b7bf721d366ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE error_t ida_export copy_idcv</definition>
        <argsstring>(idc_value_t *dst, const idc_value_t &amp;src)</argsstring>
        <name>copy_idcv</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy &apos;src&apos; to &apos;dst&apos;. For idc objects only a reference is copied. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1abf3aaa9d875ac47991bc7c530e4efedd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE error_t ida_export deep_copy_idcv</definition>
        <argsstring>(idc_value_t *dst, const idc_value_t &amp;src)</argsstring>
        <name>deep_copy_idcv</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> &amp;</type>
          <declname>src</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deep copy an IDC object. This function performs deep copy of idc objects. If &apos;src&apos; is not an object, <ref refid="expr_8hpp_1a9697b9403a7941153d1b7bf721d366ad" kindref="member">copy_idcv()</ref> will be called </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1abc1dc0af688ae75a70223fd24423ddec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> void ida_export</type>
        <definition>idaman THREAD_SAFE void ida_export free_idcv</definition>
        <argsstring>(idc_value_t *v)</argsstring>
        <name>free_idcv</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free storage used by <ref refid="group___v_t___1ga662cae113f2d445abd2f017c5c314cba" kindref="member">VT_STR</ref>/<ref refid="group___v_t___1gac29d7f7b5206c6d0c3d76e05ca32b97a" kindref="member">VT_OBJ</ref> IDC variables. After this call the variable has a numeric value 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a09dd7ffa5c79d0e4c0bf9c1fef45747a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> void ida_export</type>
        <definition>idaman THREAD_SAFE void ida_export swap_idcvs</definition>
        <argsstring>(idc_value_t *v1, idc_value_t *v2)</argsstring>
        <name>swap_idcvs</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>v1</declname>
        </param>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>Swap 2 variables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a0299ec96d0aa99614658e5f454f79dcb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE error_t ida_export get_idcv_class_name</definition>
        <argsstring>(qstring *out, const idc_value_t *obj)</argsstring>
        <name>get_idcv_class_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieves the IDC object class name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>qstring ptr for the class name. Can be NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>class instance variable </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code, eOk on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a7b48a42424deb9468cc50110287fa26d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE error_t ida_export get_idcv_attr</definition>
        <argsstring>(idc_value_t *res, const idc_value_t *obj, const char *attr, bool may_use_getattr=false)</argsstring>
        <name>get_idcv_attr</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>may_use_getattr</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an object attribute. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the attribute value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>variable that holds an object reference. if obj is NULL it searches global variables, then user functions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>attribute name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>may_use_getattr</parametername>
</parameternamelist>
<parameterdescription>
<para>may call getattr functions to calculate the attribute if it does not exist </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code, eOk on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a87a30cd4d06292ca92e6f9ab807d38d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE error_t ida_export set_idcv_attr</definition>
        <argsstring>(idc_value_t *obj, const char *attr, const idc_value_t &amp;value, bool may_use_setattr=false)</argsstring>
        <name>set_idcv_attr</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>attr</declname>
        </param>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>may_use_setattr</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an object attribute. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>variable that holds an object reference. if obj is NULL then it tries to modify a global variable with the attribute name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>attribute name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>new attribute value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>may_use_setattr</parametername>
</parameternamelist>
<parameterdescription>
<para>may call setattr functions for the class </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code, eOk on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a68332368fb65396ff04d947609193ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE error_t ida_export del_idcv_attr</definition>
        <argsstring>(idc_value_t *obj, const char *attr)</argsstring>
        <name>del_idcv_attr</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>attr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete an object attribute. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>variable that holds an object reference </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>attr</parametername>
</parameternamelist>
<parameterdescription>
<para>attribute name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code, eOk on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a1ff920668a3988a8de93b7895cd7aedd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export print_idcv</definition>
        <argsstring>(qstring *out, const idc_value_t &amp;v, const char *name=NULL, int indent=0)</argsstring>
        <name>print_idcv</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>int</type>
          <declname>indent</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Get text representation of <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1ade9a5e709f46e338a0c348734b932a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE error_t ida_export get_idcv_slice</definition>
        <argsstring>(idc_value_t *res, const idc_value_t *v, uval_t i1, uval_t i2, int flags=0)</argsstring>
        <name>get_idcv_slice</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>i1</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>i2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get slice. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>output variable that will contain the slice </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>input variable (string or object) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>slice start index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para>slice end index (excluded) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___v_a_r_s_l_i_c_e__" kindref="compound">IDC variable slice flags</ref> or 0 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>eOk if success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a05aec2160a8e5679f47cd5da95792074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman THREAD_SAFE error_t ida_export set_idcv_slice</definition>
        <argsstring>(idc_value_t *v, uval_t i1, uval_t i2, const idc_value_t &amp;in, int flags=0)</argsstring>
        <name>set_idcv_slice</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>i1</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>i2</declname>
        </param>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set slice. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>variable to modify (string or object) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>slice start index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para>slice end index (excluded) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>new value for the slice </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___v_a_r_s_l_i_c_e__" kindref="compound">IDC variable slice flags</ref> or 0 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>eOk on success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a0af2e3c42b33c9508904590ac0bdc5d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> idc_class_t *ida_export</type>
        <definition>idaman THREAD_SAFE idc_class_t* ida_export add_idc_class</definition>
        <argsstring>(const char *name, const idc_class_t *super=NULL)</argsstring>
        <name>add_idc_class</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const idc_class_t *</type>
          <declname>super</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new IDC class. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the new class </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>super</parametername>
</parameternamelist>
<parameterdescription>
<para>the base class for the new class. if the new class is not based on any other class, pass NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the created class. If such a class already exists, a pointer to it will be returned. Pointers to other existing classes may be invalidated by this call. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a6ec6fa9d02139d1bb211eadfe61bdbb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> idc_class_t *ida_export</type>
        <definition>idaman THREAD_SAFE idc_class_t* ida_export find_idc_class</definition>
        <argsstring>(const char *name)</argsstring>
        <name>find_idc_class</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find an existing IDC class by its name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the class </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the class or NULL. The returned pointer is valid until a new call to <ref refid="expr_8hpp_1a0af2e3c42b33c9508904590ac0bdc5d0" kindref="member">add_idc_class()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1ab7933eb993762d3fd008fb397591e51b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool ida_export</type>
        <definition>idaman THREAD_SAFE bool ida_export set_idc_method</definition>
        <argsstring>(idc_class_t *icls, const char *fullfuncname)</argsstring>
        <name>set_idc_method</name>
        <param>
          <type>idc_class_t *</type>
          <declname>icls</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fullfuncname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an IDC class method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>icls</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the class </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fullfuncname</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the function to call. use full method name: classname.funcname </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>the function could not be found </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a9c5c712605ebd72d74598fce8b18f388" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> const char *ida_export</type>
        <definition>idaman THREAD_SAFE const char* ida_export set_idc_dtor</definition>
        <argsstring>(idc_class_t *icls, const char *fullfuncname)</argsstring>
        <name>set_idc_dtor</name>
        <param>
          <type>idc_class_t *</type>
          <declname>icls</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fullfuncname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a destructor for an idc class. The destructor is called before deleting any object of the specified class. Exceptions that escape the destructor are silently ignored, runtime errors too. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a5fc339aecf348322a78ab301de9d581a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *ida_export</type>
        <definition>idaman THREAD_SAFE idc_value_t* ida_export deref_idcv</definition>
        <argsstring>(idc_value_t *v, int vref_flags)</argsstring>
        <name>deref_idcv</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vref_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dereference a <ref refid="group___v_t___1ga37d8aaba00cee490d64289da4a1a7bc2" kindref="member">VT_REF</ref> variable. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>variable to dereference </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vref_flags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___v_r_e_f__" kindref="compound">Dereference IDC variable flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the dereference result or NULL. If returns NULL, qerrno is set to eExecBadRef &quot;Illegal variable reference&quot; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a5e4c1356f3cd44c14a17b351b69ef74c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool ida_export</type>
        <definition>idaman THREAD_SAFE bool ida_export create_idcv_ref</definition>
        <argsstring>(idc_value_t *ref, const idc_value_t *v)</argsstring>
        <name>create_idcv_ref</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>ref</declname>
        </param>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a variable reference. Currently only references to global variables can be created. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ref</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to the result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>variable to reference </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a4549a87a85faaabef74b553840afcc83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *ida_export</type>
        <definition>idaman THREAD_SAFE idc_value_t* ida_export add_idc_gvar</definition>
        <argsstring>(const char *name)</argsstring>
        <name>add_idc_gvar</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add global IDC variable. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the global variable </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the created variable or existing variable. NB: the returned pointer is valid until a new global var is added. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a9b262ab8dcef942729e381b02d6aa27a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *ida_export</type>
        <definition>idaman THREAD_SAFE idc_value_t* ida_export find_idc_gvar</definition>
        <argsstring>(const char *name)</argsstring>
        <name>find_idc_gvar</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find an existing global IDC variable by its name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the global variable </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the variable or NULL. NB: the returned pointer is valid until a new global var is added. FIXME: it is difficult to use this function in a thread safe manner </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a78f22d69dc8925cd8d718ffb81ffff92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool ida_export</type>
        <definition>idaman THREAD_SAFE bool ida_export add_idc_func</definition>
        <argsstring>(const ext_idcfunc_t &amp;func)</argsstring>
        <name>add_idc_func</name>
        <param>
          <type>const <ref refid="structext__idcfunc__t" kindref="compound">ext_idcfunc_t</ref> &amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an IDC function. This function does not modify the predefined kernel functions. Example: <programlisting><codeline><highlight class="normal">static<sp/>error_t<sp/>idaapi<sp/>myfunc5(idc_value_t<sp/>*argv,<sp/>idc_value_t<sp/>*res)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>msg(&quot;myfunc<sp/>is<sp/>called<sp/>with<sp/>arg0=%a<sp/>and<sp/>arg1=%s\n&quot;,<sp/>argv[0].num,<sp/>argv[1].str);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>res-&gt;num<sp/>=<sp/>5;<sp/><sp/><sp/><sp/><sp/>//<sp/>let&apos;s<sp/>return<sp/>5</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>return<sp/>eOk;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">static<sp/>const<sp/>char<sp/>myfunc5_args[]<sp/>=<sp/>{<sp/>VT_LONG,<sp/>VT_STR,<sp/>0<sp/>};</highlight></codeline>
<codeline><highlight class="normal">static<sp/>const<sp/>ext_idcfunc_t<sp/>myfunc_desc<sp/>=<sp/>{<sp/>&quot;MyFunc5&quot;,<sp/>myfunc5,<sp/>myfunc5_args,<sp/>NULL,<sp/>0,<sp/>EXTFUN_BASE<sp/>};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>after<sp/>this:</highlight></codeline>
<codeline><highlight class="normal">add_idc_func(myfunc_desc);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>there<sp/>is<sp/>a<sp/>new<sp/>IDC<sp/>function<sp/>which<sp/>can<sp/>be<sp/>called<sp/>like<sp/>this:</highlight></codeline>
<codeline><highlight class="normal">MyFunc5(0x123,<sp/>&quot;test&quot;);</highlight></codeline>
</programlisting> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>function description block. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>If the function already exists, it will be replaced by the new function </para></simplesect>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="577" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1ab173f3c69ec36021e73a8c5f65915e45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool ida_export</type>
        <definition>idaman THREAD_SAFE bool ida_export del_idc_func</definition>
        <argsstring>(const char *name)</argsstring>
        <name>del_idc_func</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete an IDC function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="582" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1af83942ed5c901e1b5c0aa10f16ec4861" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool ida_export</type>
        <definition>idaman THREAD_SAFE bool ida_export find_idc_func</definition>
        <argsstring>(qstring *out, const char *prefix, int n=0)</argsstring>
        <name>find_idc_func</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="590" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a6e5cd0ebb32720dd69c7ad0330b21b71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void *ida_export</type>
        <definition>idaman void* ida_export get_current_extlang</definition>
        <argsstring>(void)</argsstring>
        <name>get_current_extlang</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get current active external language. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="813" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1af49706fbe951ac860d5a7e14f7ef0c1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classqrefcnt__t" kindref="compound">extlang_object_t</ref></type>
        <definition>const extlang_object_t get_extlang</definition>
        <argsstring>(void)</argsstring>
        <name>get_extlang</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="815" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="815" bodyend="818"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1aad1b28cb59aec9322500da906ba5b096" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export install_extlang</definition>
        <argsstring>(extlang_t *el)</argsstring>
        <name>install_extlang</name>
        <param>
          <type><ref refid="structextlang__t" kindref="compound">extlang_t</ref> *</type>
          <declname>el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Install an external language interpreter. Any previously registered interpreter will be automatically unregistered. The installed extlang can be used in <ref refid="expr_8hpp_1a2cdf7578eb86ac0b1596bdcec38a4a7c" kindref="member">select_extlang()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>el</parametername>
</parameternamelist>
<parameterdescription>
<para>description of the new language. must point to static storage. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>extlang id; -1 means failure and will happen if the extlang has already been installed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="828" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1ad5b7e4d8b70c32623c55df7027bd7a60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export remove_extlang</definition>
        <argsstring>(extlang_t *el)</argsstring>
        <name>remove_extlang</name>
        <param>
          <type><ref refid="structextlang__t" kindref="compound">extlang_t</ref> *</type>
          <declname>el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Uninstall an external language interpreter. <simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="834" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a2cdf7578eb86ac0b1596bdcec38a4a7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export select_extlang</definition>
        <argsstring>(extlang_t *el)</argsstring>
        <name>select_extlang</name>
        <param>
          <type><ref refid="structextlang__t" kindref="compound">extlang_t</ref> *</type>
          <declname>el</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Selects the external language interpreter. The specified extlang must be registered before selecting it. It will be used to evaluate expressions entered in dialog boxes. It will also replace the <ref refid="expr_8hpp_1aa38d428ec1a9b27bf455b6eb7795eec3" kindref="member">eval_expr()</ref> and <ref refid="expr_8hpp_1ac61bd5c361351e8fdb913069d621ba28" kindref="member">eval_expr_long()</ref> functions. <simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="843" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a35c2fe60865c1db24e2ce75346f65e48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export for_all_extlangs</definition>
        <argsstring>(extlang_visitor_t &amp;ev, bool select=false)</argsstring>
        <name>for_all_extlangs</name>
        <param>
          <type><ref refid="structextlang__visitor__t" kindref="compound">extlang_visitor_t</ref> &amp;</type>
          <declname>ev</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>select</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="856" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1afa93672cd4dc4228d6d6d3a4ca8c3696" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void *ida_export</type>
        <definition>idaman void* ida_export find_extlang</definition>
        <argsstring>(const void *str, find_extlang_kind_t kind)</argsstring>
        <name>find_extlang</name>
        <param>
          <type>const void *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>find_extlang_kind_t</type>
          <declname>kind</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="868" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1aced0dd12b6b350090f5e009c1b0a9179" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classqrefcnt__t" kindref="compound">extlang_object_t</ref></type>
        <definition>extlang_object_t find_extlang_by_ext</definition>
        <argsstring>(const char *ext)</argsstring>
        <name>find_extlang_by_ext</name>
        <param>
          <type>const char *</type>
          <declname>ext</declname>
        </param>
        <briefdescription>
<para>Get the extlang that can handle the given file extension. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="873" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="873" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a70d030aaaeed385d54c70594bcfec89f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classqrefcnt__t" kindref="compound">extlang_object_t</ref></type>
        <definition>extlang_object_t find_extlang_by_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>find_extlang_by_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Find an extlang by name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="880" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="880" bodyend="883"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a3b87e734501e5fcd6364f9273817cc78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classqrefcnt__t" kindref="compound">extlang_object_t</ref></type>
        <definition>extlang_object_t find_extlang_by_index</definition>
        <argsstring>(size_t idx)</argsstring>
        <name>find_extlang_by_index</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Find an extlang by index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="887" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="887" bodyend="890"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a4a916688d0b1d30c5a5c75466abea218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool ida_export</type>
        <definition>idaman THREAD_SAFE bool ida_export set_header_path</definition>
        <argsstring>(const char *path, bool add)</argsstring>
        <name>set_header_path</name>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>add</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set or append a header path. IDA looks for the include files in the appended header paths, then in the ida executable directory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>list of directories to add (separated by &apos;;&apos;) may be NULL, in this case nothing is added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>add</parametername>
</parameternamelist>
<parameterdescription>
<para>true: append. false: remove old paths. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>success </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>no memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="905" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1aaef43e7cad9e3caedce85f1cc5ac212e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> char *ida_export</type>
        <definition>idaman THREAD_SAFE char* ida_export get_idc_filename</definition>
        <argsstring>(char *buf, size_t bufsize, const char *file)</argsstring>
        <name>get_idc_filename</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get full name of IDC file name. Search for file in list of include directories, IDCPATH directory and the current directory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the answer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>file name without full path </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL is file not found. otherwise returns pointer to buf </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="917" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a0a116fb5df3ad7a640c792210fbff845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool ida_export</type>
        <definition>idaman THREAD_SAFE bool ida_export exec_system_script</definition>
        <argsstring>(const char *file, bool complain_if_no_file=true)</argsstring>
        <name>exec_system_script</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>complain_if_no_file</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compile and execute &quot;main&quot; function from system file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>file name with IDC function(s). The file will be searched in the idc subdir of ida </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>complain_if_no_file</parametername>
</parameternamelist>
<parameterdescription>
<para><itemizedlist>
<listitem><para>1: display warning if the file is not found</para></listitem><listitem><para>0: don&apos;t complain if file doesn&apos;t exist </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok, file is compiled and executed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>failure, compilation or execution error, warning is displayed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="932" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1ac61bd5c361351e8fdb913069d621ba28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export eval_expr_long</definition>
        <argsstring>(sval_t *res, ea_t where, const char *line, qstring *errbuf=NULL)</argsstring>
        <name>eval_expr_long</name>
        <param>
          <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>where</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compile and calculate an expression. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to result. The result will be converted to 32/64bit number. Use <ref refid="expr_8hpp_1aa38d428ec1a9b27bf455b6eb7795eec3" kindref="member">eval_expr()</ref> if you need the result of another type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>the current linear address in the addressing space of the program being disassembled. it will be used to resolve names of local variables, etc. if not applicable, then should be <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>a text line with IDC expression </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">errbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the error message </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>error, see errbuf </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="950" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a1af529c8ef708219c014d32a7cbd3b0b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi eval_expr_long</definition>
        <argsstring>(uval_t *res, ea_t where, const char *line, qstring *errbuf=NULL)</argsstring>
        <name>eval_expr_long</name>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>where</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>See <ref refid="expr_8hpp_1ac61bd5c361351e8fdb913069d621ba28" kindref="member">eval_expr_long()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="958" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="958" bodyend="965"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1aa38d428ec1a9b27bf455b6eb7795eec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export eval_expr</definition>
        <argsstring>(idc_value_t *rv, ea_t where, const char *line, qstring *errbuf=NULL)</argsstring>
        <name>eval_expr</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>rv</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>where</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compile and calculate an expression. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rv</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the result </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>where</parametername>
</parameternamelist>
<parameterdescription>
<para>the current linear address in the addressing space of the program being disassembled. If will be used to resolve names of local variables etc. if not applicable, then should be <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>the expression to evaluate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">errbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the error message </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>error, see errbuf </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="979" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a3a558cf09dfe23f7ae0fd1276e315716" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export eval_idc_expr</definition>
        <argsstring>(idc_value_t *rv, ea_t where, const char *buf, qstring *errbuf=NULL)</argsstring>
        <name>eval_idc_expr</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>rv</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>where</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Same as <ref refid="expr_8hpp_1aa38d428ec1a9b27bf455b6eb7795eec3" kindref="member">eval_expr()</ref>, but will always use the IDC interpreter regardless of the currently installed extlang. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="989" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a9e04bc1bdf8491c05a9e53a61eb4abe2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool ida_export</type>
        <definition>idaman THREAD_SAFE bool ida_export compile_idc_file</definition>
        <argsstring>(const char *file, qstring *errbuf=NULL, int cpl_flags=CPL_DEL_MACROS|CPL_USE_LABELS)</argsstring>
        <name>compile_idc_file</name>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>int</type>
          <declname>cpl_flags</declname>
          <defval><ref refid="group___c_p_l___1gaa6bbac4baddfb8801c0cb988e47e3215" kindref="member">CPL_DEL_MACROS</ref>|<ref refid="group___c_p_l___1ga1512a7fb27627efbc0615d4571cdea93" kindref="member">CPL_USE_LABELS</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="1011" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a9813ae85365b6e680a5542a8104796d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool ida_export</type>
        <definition>idaman THREAD_SAFE bool ida_export compile_idc_text</definition>
        <argsstring>(const char *line, qstring *errbuf=NULL, idc_resolver_t *resolver=NULL, bool only_safe_funcs=false)</argsstring>
        <name>compile_idc_text</name>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="structidc__resolver__t" kindref="compound">idc_resolver_t</ref> *</type>
          <declname>resolver</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>only_safe_funcs</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="1033" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a7e34b9c60bef3fb2a039a8b5292723e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export compile_idc_snippet</definition>
        <argsstring>(const char *func, const char *text, qstring *errbuf=NULL, idc_resolver_t *resolver=NULL, bool only_safe_funcs=false)</argsstring>
        <name>compile_idc_snippet</name>
        <param>
          <type>const char *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>text</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="structidc__resolver__t" kindref="compound">idc_resolver_t</ref> *</type>
          <declname>resolver</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>only_safe_funcs</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compile text with IDC statements. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the function to create out of the snippet </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>text</parametername>
</parameternamelist>
<parameterdescription>
<para>text to compile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">errbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the error message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolver</parametername>
</parameternamelist>
<parameterdescription>
<para>callback object to get values of undefined variables This object will be called if IDC function contains references to undefined variables. May be NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>only_safe_funcs</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, any calls to functions without <ref refid="group___e_x_t_f_u_n___1ga705e9ca1426c11f7883f09387d4acc35" kindref="member">EXTFUN_SAFE</ref> flag will lead to a compilation error. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>error, see errbuf </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="1052" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a8c1af5bfd4db2cdf456544986bc1a8ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export call_idc_func</definition>
        <argsstring>(idc_value_t *result, const char *fname, const idc_value_t args[], size_t argsnum, qstring *errbuf=NULL, idc_resolver_t *resolver=NULL)</argsstring>
        <name>call_idc_func</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref></type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>argsnum</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="structidc__resolver__t" kindref="compound">idc_resolver_t</ref> *</type>
          <declname>resolver</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Execute an IDC function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> to hold the return value of the function. If execution fails, this variable will contain the exception information. Can be NULL if return value is not required. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>function name. User-defined functions, built-in functions, and plugin-defined functions are accepted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>array of parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argsnum</parametername>
</parameternamelist>
<parameterdescription>
<para>number of parameters to pass to &apos;fname&apos;. This number should be equal to number of parameters the function expects. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">errbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the error message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolver</parametername>
</parameternamelist>
<parameterdescription>
<para>callback object to get values of undefined variables This object will be called if IDC function contains references to undefined variables. May be NULL. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>error, see errbuf </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="1088" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1aae1b1bdd03e885f369689f65093889ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool exec_idc_script</definition>
        <argsstring>(idc_value_t *result, const char *path, const char *func, const idc_value_t args[], size_t argsnum, qstring *errbuf=NULL)</argsstring>
        <name>exec_idc_script</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref></type>
          <declname>args</declname>
          <array>[]</array>
        </param>
        <param>
          <type>size_t</type>
          <declname>argsnum</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compile and execute IDC function(s) from file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> to hold result of the function. If execution fails, this variable will contain the exception information. You may pass NULL if you are not interested in the returned value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>text file containing text of IDC functions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>function name to execute </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>array of parameters </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argsnum</parametername>
</parameternamelist>
<parameterdescription>
<para>number of parameters to pass to &apos;fname&apos; This number should be equal to number of parameters the function expects. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">errbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the error message </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>error, see errbuf </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="1113" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="1113" bodyend="1124"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a0d5b015e4dbb03a79b49835d1b820e61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export eval_idc_snippet</definition>
        <argsstring>(idc_value_t *result, const char *line, qstring *errbuf=NULL, idc_resolver_t *resolver=NULL)</argsstring>
        <name>eval_idc_snippet</name>
        <param>
          <type><ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type><ref refid="structidc__resolver__t" kindref="compound">idc_resolver_t</ref> *</type>
          <declname>resolver</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compile and execute IDC statements or expressions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> to hold result of the function. If execution fails, this variable will contain the exception information. You may pass NULL if you are not interested in the returned value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>body of IDC the function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">errbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the error message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resolver</parametername>
</parameternamelist>
<parameterdescription>
<para>callback object to get values of undefined variables This object will be called if IDC function contains references to undefined variables. May be NULL. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
<simplesect kind="note"><para>see also <ref refid="expr_8hpp_1a3a558cf09dfe23f7ae0fd1276e315716" kindref="member">eval_idc_expr()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="1142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1afc5b47715c158ed9299a1a759408ce03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export setup_lowcnd_regfuncs</definition>
        <argsstring>(idc_func_t *getreg, idc_func_t *setreg)</argsstring>
        <name>setup_lowcnd_regfuncs</name>
        <param>
          <type><ref refid="expr_8hpp_1a4f81b59a59f911daa997940dc00d7ec0" kindref="member">idc_func_t</ref> *</type>
          <declname>getreg</declname>
        </param>
        <param>
          <type><ref refid="expr_8hpp_1a4f81b59a59f911daa997940dc00d7ec0" kindref="member">idc_func_t</ref> *</type>
          <declname>setreg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Setup lowcnd callbacks to read/write registers. These callbacks will be used by the idc engine to read/write registers while calculating low level breakpoint conditions for local debuggers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="1154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="expr_8hpp_1a62dd77923935bcae354708a873d58637" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool get_idptype_and_data</definition>
        <argsstring>(int *vtype, const void **vdata, const idc_value_t &amp;v)</argsstring>
        <name>get_idptype_and_data</name>
        <param>
          <type>int *</type>
          <declname>vtype</declname>
        </param>
        <param>
          <type>const void **</type>
          <declname>vdata</declname>
        </param>
        <param>
          <type>const <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract type &amp; data from the <ref refid="classidc__value__t" kindref="compound">idc_value_t</ref> instance that was passed to parse_config_value().</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vtype</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to storage that will hold the type (<ref refid="group___i_d_p_o_p_t___t" kindref="compound">Option value types</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vdata</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to storage that contains the value (see <ref refid="group___i_d_p_o_p_t___t" kindref="compound">Option value types</ref> for what type of data is pointed to.) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the value holder </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true in case of success, false if &apos;v&apos; is of unexpected type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" line="1165" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp" bodystart="1165" bodyend="1177"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions that deal with C-like expressions and built-in IDC language. </para>    </briefdescription>
    <detaileddescription>
<para>Functions marked <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> may be called from any thread. No simultaneous calls should be made for the same variable. We protect only global structures, individual variables must be protected manually. </para>    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/expr.hpp"/>
  </compounddef>
</doxygen>
