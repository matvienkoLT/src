<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="group__type" kind="group">
    <compoundname>type</compoundname>
    <title>Type string related declarations</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__type_1ga5854abf74a525c70636b60ceea22eb58" prot="public" static="no">
        <name>type_source_t</name>
        <enumvalue id="group__type_1gga5854abf74a525c70636b60ceea22eb58aec905da0daf1b66d88bd8c828928c54b" prot="public">
          <name>GUESSED_NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__type_1gga5854abf74a525c70636b60ceea22eb58a865fef498edd23fcb22ac3a14a206d4f" prot="public">
          <name>GUESSED_WEAK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__type_1gga5854abf74a525c70636b60ceea22eb58ac35e10b58d4cda5d78449a99beaa47d6" prot="public">
          <name>GUESSED_FUNC</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__type_1gga5854abf74a525c70636b60ceea22eb58a942facd5b9599b51a725ab52f47438ac" prot="public">
          <name>GUESSED_DATA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__type_1gga5854abf74a525c70636b60ceea22eb58ac3d69ea137e3c873efc638d0604bfd42" prot="public">
          <name>TS_NOELL</name>
          <initializer>= 0x8000000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__type_1gga5854abf74a525c70636b60ceea22eb58aa597428fce1756681e3b42abb8dc6070" prot="public">
          <name>TS_SHRINK</name>
          <initializer>= 0x4000000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__type_1gga5854abf74a525c70636b60ceea22eb58a661418ad852d7d21f1b2a9325c3e3b04" prot="public">
          <name>TS_DONTREF</name>
          <initializer>= 0x2000000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__type_1gga5854abf74a525c70636b60ceea22eb58afa17a1eb7d14d69d513731b049c57e60" prot="public">
          <name>TS_MASK</name>
          <initializer>= 0xE000000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Type source (where the type information comes from) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1101" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1100" bodyend="1110"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__type_1gac5564e0114223c09869ee116dd0894f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *hexapi</type>
        <definition>const char * dstr</definition>
        <argsstring>(const tinfo_t *tif)</argsstring>
        <name>dstr</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>tif</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print the specified type info. This function can be used from a debugger by typing &quot;tif-&gt;dstr()&quot; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="980" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9195" bodyend="9198"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1ga2d89bff80e6c399042563ac8b5fcfcc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool is_type_correct</definition>
        <argsstring>(const type_t *ptr)</argsstring>
        <name>is_type_correct</name>
        <param>
          <type>const <ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref> *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify a type string. <simplesect kind="return"><para>true if type string is correct </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="986" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9201" bodyend="9204"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1gaf76d97fad27903398713b78408e71fd6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool is_small_struni</definition>
        <argsstring>(const tinfo_t &amp;tif)</argsstring>
        <name>is_small_struni</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is a small structure or union? <simplesect kind="return"><para>true if the type is a small UDT (user defined type). Small UDTs fit into a register (or pair or registers) as a rule. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="993" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9207" bodyend="9210"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1ga66b98cdf42e2750acfa2db87d1968111" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool is_nonbool_type</definition>
        <argsstring>(const tinfo_t &amp;type)</argsstring>
        <name>is_nonbool_type</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is definitely a non-boolean type? <simplesect kind="return"><para>true if the type is a non-boolean type (non bool and well defined) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="999" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9213" bodyend="9216"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1ga637b918ebe8fd0c38ca54670ed35fd5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool is_bool_type</definition>
        <argsstring>(const tinfo_t &amp;type)</argsstring>
        <name>is_bool_type</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is a boolean type? <simplesect kind="return"><para>true if the type is a boolean type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1005" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9219" bodyend="9222"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1ga8c597478f8c62566737a1647cb9d181f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_ptr_or_array</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_ptr_or_array</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Is a pointer or array type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1009" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1009" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1gad7ae1fbb6de5db1033765ae9e3296353" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_paf</definition>
        <argsstring>(type_t t)</argsstring>
        <name>is_paf</name>
        <param>
          <type><ref refid="typeinf_8hpp_1a7a9c029b924959e0fe4f14b3531fb733" kindref="member">type_t</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Is a pointer, array, or function type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1015" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1015" bodyend="1018"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1ga3d88971108492810bfe9e5b267386cd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_inplace_def</definition>
        <argsstring>(const tinfo_t &amp;type)</argsstring>
        <name>is_inplace_def</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Is struct/union/enum definition (not declaration)? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1021" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1021" bodyend="1024"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1ga2fa03a8bfb699b538da16694e57cd21b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int hexapi</type>
        <definition>int partial_type_num</definition>
        <argsstring>(const tinfo_t &amp;type)</argsstring>
        <name>partial_type_num</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate number of partial subtypes. <simplesect kind="return"><para>number of partial subtypes. The bigger is this number, the uglier is the type. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1029" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9225" bodyend="9228"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1gaf71b23a3bfdc03a093d3835c00827225" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> hexapi</type>
        <definition>tinfo_t get_float_type</definition>
        <argsstring>(int width)</argsstring>
        <name>get_float_type</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a type of a floating point value with the specified width <simplesect kind="return"><para>type info object </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>width of the desired type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1036" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9231" bodyend="9236"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1ga72e9406bd759dd7becab54d14a83f785" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> hexapi</type>
        <definition>tinfo_t get_int_type_by_width_and_sign</definition>
        <argsstring>(int srcwidth, type_sign_t sign)</argsstring>
        <name>get_int_type_by_width_and_sign</name>
        <param>
          <type>int</type>
          <declname>srcwidth</declname>
        </param>
        <param>
          <type><ref refid="group__tattr__ext_1ga91970b0d779fe968b3b22572526048a0" kindref="member">type_sign_t</ref></type>
          <declname>sign</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a type info by width and sign. Returns a simple type (examples: int, short) with the given width and sign. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>srcwidth</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the type in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sign</parametername>
</parameternamelist>
<parameterdescription>
<para>sign of the type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1044" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9239" bodyend="9244"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1gaccea6e74507723fdd70e73ec19ef7b6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> hexapi</type>
        <definition>tinfo_t get_unk_type</definition>
        <argsstring>(int size)</argsstring>
        <name>get_unk_type</name>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a partial type info by width. Returns a partially defined type (examples: _DWORD, _BYTE) with the given width. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the type in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1051" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9247" bodyend="9252"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1ga0091ee2c26fff27da4858aeb5a66b86a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> hexapi</type>
        <definition>tinfo_t dummy_ptrtype</definition>
        <argsstring>(int ptrsize, bool isfp)</argsstring>
        <name>dummy_ptrtype</name>
        <param>
          <type>int</type>
          <declname>ptrsize</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isfp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate a dummy pointer type <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptrsize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of pointed object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isfp</parametername>
</parameternamelist>
<parameterdescription>
<para>is floating point object? </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1058" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9255" bodyend="9260"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1ga115db1524f5ab1c0b31eccaab1c25240" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool get_member_type</definition>
        <argsstring>(const member_t *mptr, tinfo_t *type)</argsstring>
        <name>get_member_type</name>
        <param>
          <type>const <ref refid="classmember__t" kindref="compound">member_t</ref> *</type>
          <declname>mptr</declname>
        </param>
        <param>
          <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get type of a structure field. This function performs validity checks of the field type. Wrong types are rejected. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mptr</parametername>
</parameternamelist>
<parameterdescription>
<para>structure field </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the variable where the type is returned. This parameter can be NULL. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if failed </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1067" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9263" bodyend="9266"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1gad7b6f012ddfc5b8dfe04e56fd4688432" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> hexapi</type>
        <definition>tinfo_t make_pointer</definition>
        <argsstring>(const tinfo_t &amp;type)</argsstring>
        <name>make_pointer</name>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a pointer type. This function performs the following conversion: &quot;type&quot; -&gt; &quot;type*&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>object type. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&quot;type*&quot;. for example, if &apos;char&apos; is passed as the argument, </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1076" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9269" bodyend="9274"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1gaaccbf44a40e2b40f1c62690ecb9150e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> hexapi</type>
        <definition>tinfo_t create_typedef</definition>
        <argsstring>(const char *name)</argsstring>
        <name>create_typedef</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a reference to a named type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>type name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>type which refers to the specified name. For example, if name is &quot;DWORD&quot;, the type info which refers to &quot;DWORD&quot; is created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1084" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9277" bodyend="9282"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1gade174c29ba0ec30cae0eab83bab73325" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref></type>
        <definition>tinfo_t create_typedef</definition>
        <argsstring>(int n)</argsstring>
        <name>create_typedef</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a reference to an ordinal type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>ordinal number of the type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>type which refers to the specified ordianl. For example, if n is 1, the type info which refers to ordinal type 1 is created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1092" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="1092" bodyend="1097"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1ga0ede73f66d6547e809229a4d6d113486" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool get_type</definition>
        <argsstring>(uval_t id, tinfo_t *tif, type_source_t guess)</argsstring>
        <name>get_type</name>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>tif</declname>
        </param>
        <param>
          <type><ref refid="group__type_1ga5854abf74a525c70636b60ceea22eb58" kindref="member">type_source_t</ref></type>
          <declname>guess</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a global type. Global types are types of addressable objects and struct/union/enum types <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>address or id of the object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tif</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the answer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>guess</parametername>
</parameternamelist>
<parameterdescription>
<para>what kind of types to consider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1120" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9285" bodyend="9288"/>
      </memberdef>
      <memberdef kind="function" id="group__type_1ga1fbc7108c493bf711a000fadcba71203" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool set_type</definition>
        <argsstring>(uval_t id, const tinfo_t &amp;tif, type_source_t source, bool force=false)</argsstring>
        <name>set_type</name>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type><ref refid="group__type_1ga5854abf74a525c70636b60ceea22eb58" kindref="member">type_source_t</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>force</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a global type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>address or id of the object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tif</parametername>
</parameternamelist>
<parameterdescription>
<para>new type info </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>where the type comes from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>force</parametername>
</parameternamelist>
<parameterdescription>
<para>true means to set the type as is, false means to merge the new type with the possibly existing old type info. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="1131" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="9291" bodyend="9294"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Type related functions and class. </para>    </detaileddescription>
  </compounddef>
</doxygen>
