<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="xref_8hpp" kind="file" language="C++">
    <compoundname>xref.hpp</compoundname>
    <includedby refid="ua_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/ua.hpp</includedby>
    <invincdepgraph>
      <node id="1627">
        <label>obj/x64_linux_gcc_32_opt/idasdk/intel.hpp</label>
        <link refid="intel_8hpp_source"/>
      </node>
      <node id="1619">
        <label>obj/x64_linux_gcc_32_opt/idasdk/ua.hpp</label>
        <link refid="ua_8hpp"/>
        <childnode refid="1620" relation="include">
        </childnode>
        <childnode refid="1621" relation="include">
        </childnode>
        <childnode refid="1627" relation="include">
        </childnode>
        <childnode refid="1632" relation="include">
        </childnode>
      </node>
      <node id="1630">
        <label>obj/x64_linux_gcc_32_opt/idasdk/ida_highlighter.hpp</label>
        <link refid="ida__highlighter_8hpp_source"/>
      </node>
      <node id="1632">
        <label>obj/x64_linux_gcc_32_opt/idasdk/idd.hpp</label>
        <link refid="idd_8hpp"/>
        <childnode refid="1622" relation="include">
        </childnode>
      </node>
      <node id="1621">
        <label>obj/x64_linux_gcc_32_opt/idasdk/idp.hpp</label>
        <link refid="idp_8hpp"/>
        <childnode refid="1622" relation="include">
        </childnode>
        <childnode refid="1623" relation="include">
        </childnode>
        <childnode refid="1624" relation="include">
        </childnode>
        <childnode refid="1626" relation="include">
        </childnode>
        <childnode refid="1628" relation="include">
        </childnode>
        <childnode refid="1629" relation="include">
        </childnode>
      </node>
      <node id="1622">
        <label>obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp</label>
        <link refid="dbg_8hpp"/>
      </node>
      <node id="1620">
        <label>obj/x64_linux_gcc_32_opt/idasdk/jumptable.hpp</label>
        <link refid="jumptable_8hpp_source"/>
      </node>
      <node id="1628">
        <label>obj/x64_linux_gcc_32_opt/idasdk/graph.hpp</label>
        <link refid="graph_8hpp"/>
      </node>
      <node id="1631">
        <label>obj/x64_linux_gcc_32_opt/idasdk/tstfeat.hpp</label>
        <link refid="tstfeat_8hpp_source"/>
      </node>
      <node id="1618">
        <label>obj/x64_linux_gcc_32_opt/idasdk/xref.hpp</label>
        <link refid="xref_8hpp"/>
        <childnode refid="1619" relation="include">
        </childnode>
      </node>
      <node id="1629">
        <label>obj/x64_linux_gcc_32_opt/idasdk/expr.hpp</label>
        <link refid="expr_8hpp"/>
        <childnode refid="1630" relation="include">
        </childnode>
        <childnode refid="1631" relation="include">
        </childnode>
      </node>
      <node id="1623">
        <label>obj/x64_linux_gcc_32_opt/idasdk/frame.hpp</label>
        <link refid="frame_8hpp"/>
      </node>
      <node id="1624">
        <label>obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp</label>
        <link refid="typeinf_8hpp"/>
        <childnode refid="1625" relation="include">
        </childnode>
        <childnode refid="1626" relation="include">
        </childnode>
        <childnode refid="1627" relation="include">
        </childnode>
      </node>
      <node id="1626">
        <label>obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp</label>
        <link refid="hexrays_8hpp_source"/>
      </node>
      <node id="1625">
        <label>obj/x64_linux_gcc_32_opt/idasdk/lumina.hpp</label>
        <link refid="lumina_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structxrefblk__t" prot="public">xrefblk_t</innerclass>
      <sectiondef kind="user-defined">
      <header>Helper functions</header>
      <description><para>Should not be called directly! </para></description>
      <memberdef kind="function" id="xref_8hpp_1ae35d6f9c4b86ed837371b799dda91a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export xrefblk_t_first_from</definition>
        <argsstring>(xrefblk_t *, ea_t from, int flags)</argsstring>
        <name>xrefblk_t_first_from</name>
        <param>
          <type><ref refid="structxrefblk__t" kindref="compound">xrefblk_t</ref> *</type>
        </param>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a2aab85c6414e7834a0de014f3e40543f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export xrefblk_t_next_from</definition>
        <argsstring>(xrefblk_t *)</argsstring>
        <name>xrefblk_t_next_from</name>
        <param>
          <type><ref refid="structxrefblk__t" kindref="compound">xrefblk_t</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a855e5e9b045d5439056f8dff0096488c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export xrefblk_t_first_to</definition>
        <argsstring>(xrefblk_t *, ea_t to, int flags)</argsstring>
        <name>xrefblk_t_first_to</name>
        <param>
          <type><ref refid="structxrefblk__t" kindref="compound">xrefblk_t</ref> *</type>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a046801f0f67a47bb90d36c97afc0085c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export xrefblk_t_next_to</definition>
        <argsstring>(xrefblk_t *)</argsstring>
        <name>xrefblk_t_next_to</name>
        <param>
          <type><ref refid="structxrefblk__t" kindref="compound">xrefblk_t</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="159" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Far code references</header>
      <description><para>The following functions are similar to get_{first|next}_cref_{from|to} functions. The only difference is that they don&apos;t take into account ordinary flow of execution. Only jump and call xrefs are returned. (fcref means &quot;far code reference&quot;) </para></description>
      <memberdef kind="function" id="xref_8hpp_1ab750c5574496463b83af188ffbdd5194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_first_fcref_from</definition>
        <argsstring>(ea_t from)</argsstring>
        <name>get_first_fcref_from</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1ad1fe22ae52ca040d90ba0c5a768d4137" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_next_fcref_from</definition>
        <argsstring>(ea_t from, ea_t current)</argsstring>
        <name>get_next_fcref_from</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a66d30ab3c98e2004d56eff2cfd30962a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_first_fcref_to</definition>
        <argsstring>(ea_t to)</argsstring>
        <name>get_first_fcref_to</name>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="358" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a7759fa43f8065eea80ed997efbaab0a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_next_fcref_to</definition>
        <argsstring>(ea_t to, ea_t current)</argsstring>
        <name>get_next_fcref_to</name>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="359" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___x_r_e_f___t_1ga6e9336e5f35291b76d7ffb966fb11269" prot="public" static="no">
        <name>XREF_USER</name>
        <initializer>0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>User specified xref. This xref will not be deleted by IDA. This bit should be combined with the existing xref types (<ref refid="group__xref__type_1ga44e2b79869a9595bbe6265ff2026aa98" kindref="member">cref_t</ref> &amp; <ref refid="group__xref__type_1ga78aab6d0d6bd9cb4904bbdbb5ac4fa71" kindref="member">dref_t</ref>) Can not be used for fl_F xrefs </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="84" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___x_r_e_f___t_1ga5f6b85b621d20dee6cfcc6652d15d969" prot="public" static="no">
        <name>XREF_TAIL</name>
        <initializer>0x40</initializer>
        <briefdescription>
<para>Reference to tail byte in extrn symbols. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="89" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___x_r_e_f___t_1ga1b1b5743ee6d5808b075357fea6b94c2" prot="public" static="no">
        <name>XREF_BASE</name>
        <initializer>0x80</initializer>
        <briefdescription>
<para>Reference to the base part of an offset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="90" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___x_r_e_f___t_1gaf4f7eac7c9fd9c04dc74655114419170" prot="public" static="no">
        <name>XREF_MASK</name>
        <initializer>0x1F</initializer>
        <briefdescription>
<para>Mask to get xref type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="91" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___x_r_e_f___t_1gab518ccb7e04e211486eaf7a24751200c" prot="public" static="no">
        <name>XREF_PASTEND</name>
        <initializer>0x100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Reference is past item. This bit may be passed to <ref refid="xref_8hpp_1a190d5d49c093bcf5b11f79c558cddad5" kindref="member">add_dref()</ref> functions but it won&apos;t be saved in the database. It will prevent the destruction of eventual alignment directives. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="93" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___x_r_e_f___1ga7842c679887f4701589ec71977461bc3" prot="public" static="no">
        <name>XREF_ALL</name>
        <initializer>0x00</initializer>
        <briefdescription>
<para>return all references </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="198" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___x_r_e_f___1ga02ef7605bfa7449191eaed4442af7bde" prot="public" static="no">
        <name>XREF_FAR</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para>don&apos;t return ordinary flow xrefs </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="199" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___x_r_e_f___1ga0aebd80585c10650d16fd59ea35ba27d" prot="public" static="no">
        <name>XREF_DATA</name>
        <initializer>0x02</initializer>
        <briefdescription>
<para>return data references only </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="200" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" bodystart="200" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__xref__type_1ga44e2b79869a9595bbe6265ff2026aa98" prot="public" static="no">
        <name>cref_t</name>
        <enumvalue id="group__xref__type_1gga44e2b79869a9595bbe6265ff2026aa98a6627e6d9db50f3625e888d466ab84ca3" prot="public">
          <name>fl_U</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>unknown <ndash/> for compatibility with old versions. Should not be used anymore. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__xref__type_1gga44e2b79869a9595bbe6265ff2026aa98ac029a58e2aa63c79f31c29e61041bdd3" prot="public">
          <name>fl_CF</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Call Far This xref creates a function at the referenced location </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__xref__type_1gga44e2b79869a9595bbe6265ff2026aa98ab5e46d23c9228eef4b1155b4cc23768d" prot="public">
          <name>fl_CN</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Call Near This xref creates a function at the referenced location </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__xref__type_1gga44e2b79869a9595bbe6265ff2026aa98aa48a431ce68718619dedb6ba8749579c" prot="public">
          <name>fl_JF</name>
          <briefdescription>
<para>Jump Far. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__xref__type_1gga44e2b79869a9595bbe6265ff2026aa98a007fe7f90598217133498c08591f7bab" prot="public">
          <name>fl_JN</name>
          <briefdescription>
<para>Jump Near. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__xref__type_1gga44e2b79869a9595bbe6265ff2026aa98ac202ffb980cd5146ae5011209d4c113f" prot="public">
          <name>fl_USobsolete</name>
          <briefdescription>
<para>User specified (obsolete) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__xref__type_1gga44e2b79869a9595bbe6265ff2026aa98a75869336a10857ebd2ee498b944a5f2f" prot="public">
          <name>fl_F</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Ordinary flow: used to specify execution flow to the next instruction. </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>CODE xref types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="41" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" bodystart="40" bodyend="55"/>
      </memberdef>
      <memberdef kind="enum" id="group__xref__type_1ga78aab6d0d6bd9cb4904bbdbb5ac4fa71" prot="public" static="no">
        <name>dref_t</name>
        <enumvalue id="group__xref__type_1gga78aab6d0d6bd9cb4904bbdbb5ac4fa71a69736399da1e73ad9d0140a666a58527" prot="public">
          <name>dr_U</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Unknown <ndash/> for compatibility with old versions. Should not be used anymore. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__xref__type_1gga78aab6d0d6bd9cb4904bbdbb5ac4fa71a2f2dbd4d9d446cb18dbfcb091dda8681" prot="public">
          <name>dr_O</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Offset The reference uses &apos;offset&apos; of data rather than its value OR The reference appeared because the &quot;OFFSET&quot; flag of instruction is set. The meaning of this type is IDP dependent. </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__xref__type_1gga78aab6d0d6bd9cb4904bbdbb5ac4fa71a4249e6b7ca4e03c6179ca8c5ed1afb37" prot="public">
          <name>dr_W</name>
          <briefdescription>
<para>Write access. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__xref__type_1gga78aab6d0d6bd9cb4904bbdbb5ac4fa71ac0aa5db1ff61115c61128b0c78a92ff4" prot="public">
          <name>dr_R</name>
          <briefdescription>
<para>Read access. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__xref__type_1gga78aab6d0d6bd9cb4904bbdbb5ac4fa71add0f68bf2d83279e94d6b2d66156d6a4" prot="public">
          <name>dr_T</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Text (for forced operands only) Name of data is used in manual operand </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__xref__type_1gga78aab6d0d6bd9cb4904bbdbb5ac4fa71a57d1a0edaf907d264ec8e97b9b9ba36c" prot="public">
          <name>dr_I</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Informational (a derived java class references its base class informationally) </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>DATA xref types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="59" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" bodystart="58" bodyend="76"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="xref_8hpp_1aec749ed8562e42666298a8ad0a9d29be" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char lastXR</definition>
        <argsstring></argsstring>
        <name>lastXR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This variable contains the type of the last xref returned by the following functions. It is not exported, so if you need to know the cross reference type, please use the <ref refid="structxrefblk__t" kindref="compound">xrefblk_t</ref> structure to enumerate the cross references. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="260" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__xref__type_1ga36716f163bdee48c9e94ff947deb7d65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman char ida_export</type>
        <definition>idaman char ida_export xrefchar</definition>
        <argsstring>(char xrtype)</argsstring>
        <name>xrefchar</name>
        <param>
          <type>char</type>
          <declname>xrtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get character describing the xref type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xrtype</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___x_r_e_f___t" kindref="compound">Cross-Reference type flags</ref> and a <ref refid="group__xref__type_1ga44e2b79869a9595bbe6265ff2026aa98" kindref="member">cref_t</ref> of <ref refid="group__xref__type_1ga78aab6d0d6bd9cb4904bbdbb5ac4fa71" kindref="member">dref_t</ref> value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a4c1bafdc568fa4a0fb6b01b2f548c4bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export add_cref</definition>
        <argsstring>(ea_t from, ea_t to, cref_t type)</argsstring>
        <name>add_cref</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type><ref refid="group__xref__type_1ga44e2b79869a9595bbe6265ff2026aa98" kindref="member">cref_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a code cross-reference. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referencing instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referenced instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>cross-reference type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a0308572f416f2c7e230be96bdfe2d8d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export del_cref</definition>
        <argsstring>(ea_t from, ea_t to, bool expand)</argsstring>
        <name>del_cref</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>expand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a code cross-reference. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referencing instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referenced instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expand</parametername>
</parameternamelist>
<parameterdescription>
<para>policy to delete the referenced instruction<itemizedlist>
<listitem><para>1: plan to delete the referenced instruction if it has no more references.</para></listitem><listitem><para>0: don&apos;t delete the referenced instruction even if no more cross-references point to it </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>the referenced instruction will be deleted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>the referenced instruction will not be deleted </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a190d5d49c093bcf5b11f79c558cddad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export add_dref</definition>
        <argsstring>(ea_t from, ea_t to, dref_t type)</argsstring>
        <name>add_dref</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type><ref refid="group__xref__type_1ga78aab6d0d6bd9cb4904bbdbb5ac4fa71" kindref="member">dref_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a data cross-reference. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referencing instruction or data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referenced data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>cross-reference type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success (may fail if user-defined xref exists from-&gt;to) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a94800311ae8f9c13107722c7ff09ebdf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export del_dref</definition>
        <argsstring>(ea_t from, ea_t to)</argsstring>
        <name>del_dref</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete a data cross-reference. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referencing instruction or data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referenced data </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a6dfca5b8e523b3f662eac90601d7f8cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_first_dref_from</definition>
        <argsstring>(ea_t from)</argsstring>
        <name>get_first_dref_from</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get first data referenced from the specified address. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referencing instruction or data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>linear address of first (lowest) data referenced from the specified address. The <ref refid="xref_8hpp_1aec749ed8562e42666298a8ad0a9d29be" kindref="member">lastXR</ref> variable contains type of the reference. Return <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if the specified instruction/data doesn&apos;t reference to anything. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1aa89df1822a8e746060260d6dc9a31f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_next_dref_from</definition>
        <argsstring>(ea_t from, ea_t current)</argsstring>
        <name>get_next_dref_from</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get next data referenced from the specified address. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referencing instruction or data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of current referenced data. This value is returned by <ref refid="xref_8hpp_1a6dfca5b8e523b3f662eac90601d7f8cf" kindref="member">get_first_dref_from()</ref> or previous call to <ref refid="xref_8hpp_1aa89df1822a8e746060260d6dc9a31f08" kindref="member">get_next_dref_from()</ref> functions. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>linear address of next data or <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref>. The <ref refid="xref_8hpp_1aec749ed8562e42666298a8ad0a9d29be" kindref="member">lastXR</ref> variable contains type of the reference </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="281" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a8a9f590dbed2d6fa848ce7cfcf8a5c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_first_dref_to</definition>
        <argsstring>(ea_t to)</argsstring>
        <name>get_first_dref_to</name>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get address of instruction/data referencing to the specified data. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referencing instruction or data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if nobody refers to the specified data. The <ref refid="xref_8hpp_1aec749ed8562e42666298a8ad0a9d29be" kindref="member">lastXR</ref> variable contains type of the reference. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a5f4f2ecbe01c8a2ee156f8afd82051c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_next_dref_to</definition>
        <argsstring>(ea_t to, ea_t current)</argsstring>
        <name>get_next_dref_to</name>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get address of instruction/data referencing to the specified data <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referencing instruction or data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current</parametername>
</parameternamelist>
<parameterdescription>
<para>current linear address. This value is returned by <ref refid="xref_8hpp_1a8a9f590dbed2d6fa848ce7cfcf8a5c81" kindref="member">get_first_dref_to()</ref> or previous call to <ref refid="xref_8hpp_1a5f4f2ecbe01c8a2ee156f8afd82051c1" kindref="member">get_next_dref_to()</ref> functions. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if nobody refers to the specified data. The <ref refid="xref_8hpp_1aec749ed8562e42666298a8ad0a9d29be" kindref="member">lastXR</ref> variable contains type of the reference. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a3a8231f39cb2a259ec7e6625683537a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_first_cref_from</definition>
        <argsstring>(ea_t from)</argsstring>
        <name>get_first_cref_from</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get first instruction referenced from the specified instruction. If the specified instruction passes execution to the next instruction then the next instruction is returned. Otherwise the lowest referenced address is returned (remember that xrefs are kept sorted!). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referencing instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>first referenced address. The <ref refid="xref_8hpp_1aec749ed8562e42666298a8ad0a9d29be" kindref="member">lastXR</ref> variable contains type of the reference. If the specified instruction doesn&apos;t reference to other instructions then returns <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="313" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a2e9dd723562268c3db3927e5c711c8e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_next_cref_from</definition>
        <argsstring>(ea_t from, ea_t current)</argsstring>
        <name>get_next_cref_from</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get next instruction referenced from the specified instruction. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referencing instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of current referenced instruction This value is returned by <ref refid="xref_8hpp_1a3a8231f39cb2a259ec7e6625683537a2" kindref="member">get_first_cref_from()</ref> or previous call to <ref refid="xref_8hpp_1a2e9dd723562268c3db3927e5c711c8e7" kindref="member">get_next_cref_from()</ref> functions. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>next referenced address or <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref>. The <ref refid="xref_8hpp_1aec749ed8562e42666298a8ad0a9d29be" kindref="member">lastXR</ref> variable contains type of the reference. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a45e71cf022fc4891e2d204efd19b722a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_first_cref_to</definition>
        <argsstring>(ea_t to)</argsstring>
        <name>get_first_cref_to</name>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get first instruction referencing to the specified instruction. If the specified instruction may be executed immediately after its previous instruction then the previous instruction is returned. Otherwise the lowest referencing address is returned. (remember that xrefs are kept sorted!). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referenced instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>linear address of the first referencing instruction or <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref>. The <ref refid="xref_8hpp_1aec749ed8562e42666298a8ad0a9d29be" kindref="member">lastXR</ref> variable contains type of the reference. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="336" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1af4ee8115b42b96e131e2be4d84c33df3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_next_cref_to</definition>
        <argsstring>(ea_t to, ea_t current)</argsstring>
        <name>get_next_cref_to</name>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>current</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get next instruction referencing to the specified instruction. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of referenced instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of current referenced instruction This value is returned by <ref refid="xref_8hpp_1a45e71cf022fc4891e2d204efd19b722a" kindref="member">get_first_cref_to()</ref> or previous call to <ref refid="xref_8hpp_1af4ee8115b42b96e131e2be4d84c33df3" kindref="member">get_next_cref_to()</ref> functions. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>linear address of the next referencing instruction or <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref>. The <ref refid="xref_8hpp_1aec749ed8562e42666298a8ad0a9d29be" kindref="member">lastXR</ref> variable contains type of the reference. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="xref_8hpp_1a280da7acb2738d47c75a3187dbf1937a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export has_external_refs</definition>
        <argsstring>(func_t *pfn, ea_t ea)</argsstring>
        <name>has_external_refs</name>
        <param>
          <type><ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Has a location external to the function references? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp" line="365" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions that deal with cross-references. </para>    </briefdescription>
    <detaileddescription>
<para>There are 2 types of xrefs: CODE and DATA references. All xrefs are kept in the bTree except ordinary execution flow to the next instruction. Ordinary execution flow to the next instruction is kept in flags (see <ref refid="bytes_8hpp" kindref="compound">bytes.hpp</ref>)</para><para>The source address of a cross-reference must be an item head (is_head) or a structure member id.</para><para>Cross-references are automatically sorted. </para>    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/xref.hpp"/>
  </compounddef>
</doxygen>
