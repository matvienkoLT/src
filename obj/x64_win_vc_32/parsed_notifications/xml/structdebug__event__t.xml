<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="structdebug__event__t" kind="struct" language="C++" prot="public">
    <compoundname>debug_event_t</compoundname>
    <includes refid="idd_8hpp" local="no">idd.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdebug__event__t_1a64ec79f8a20466f3fb575d1834247a36" prot="public" static="no" mutable="no">
        <type><ref refid="idd_8hpp_1a288e13e815d43b06e75819f8939524df" kindref="member">pid_t</ref></type>
        <definition>pid_t debug_event_t::pid</definition>
        <argsstring></argsstring>
        <name>pid</name>
        <briefdescription>
<para>Process where the event occurred. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="250" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdebug__event__t_1a4689d70b63959c774d9ee291cc4e5366" prot="public" static="no" mutable="no">
        <type><ref refid="idd_8hpp_1a479b4266d280e0d77b7ca914dec19122" kindref="member">thid_t</ref></type>
        <definition>thid_t debug_event_t::tid</definition>
        <argsstring></argsstring>
        <name>tid</name>
        <briefdescription>
<para>Thread where the event occurred. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="251" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdebug__event__t_1a1b8cd24ae45d9d06514d87af49f4d9c6" prot="public" static="no" mutable="no">
        <type>ea_t</type>
        <definition>ea_t debug_event_t::ea</definition>
        <argsstring></argsstring>
        <name>ea</name>
        <briefdescription>
<para>Address where the event occurred. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="252" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdebug__event__t_1a5fb098f553418b7687d3b66331d6e18d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool debug_event_t::handled</definition>
        <argsstring></argsstring>
        <name>handled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is event handled by the debugger?. (from the system&apos;s point of view) Meaningful for <ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356ab8fa9515ef8cac50a79988c978b31fa0" kindref="member">EXCEPTION</ref> events </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="253" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="253" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structdebug__event__t_1a052ce5f13e65ca69f3c20334ece80f95" prot="private" static="no" mutable="no">
        <type><ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356" kindref="member">event_id_t</ref></type>
        <definition>event_id_t debug_event_t::_eid</definition>
        <argsstring></argsstring>
        <name>_eid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="257" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdebug__event__t_1a87afa8a4f22675a7a947ef54121f29fd" prot="private" static="no" mutable="no">
        <type>char</type>
        <definition>char debug_event_t::bytes[qmax(sizeof(modinfo_t), sizeof(excinfo_t))]</definition>
        <argsstring>[qmax(sizeof(modinfo_t), sizeof(excinfo_t))]</argsstring>
        <name>bytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="259" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="259" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structdebug__event__t_1a8751ba94e9859a7d747a2b4af9742e0e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void debug_event_t::check_usage</definition>
        <argsstring>(uint32 req)</argsstring>
        <name>check_usage</name>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>req</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="260" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="260" bodyend="260"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdebug__event__t_1a609424ed01791765dbb1f16b9cfae5a3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>debug_event_t::debug_event_t</definition>
        <argsstring>(void)</argsstring>
        <name>debug_event_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="264" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="264" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1ae64035a159423eea6aab85b7eb5ea6e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>debug_event_t::debug_event_t</definition>
        <argsstring>(const debug_event_t &amp;r)</argsstring>
        <name>debug_event_t</name>
        <param>
          <type>const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="273" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="273" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a1e426636c048289ca5081da8bc2cd9b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>debug_event_t::~debug_event_t</definition>
        <argsstring>(void)</argsstring>
        <name>~debug_event_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="274" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="274" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a84ef0bd5884ebeaecd3b6e7d79f08050" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> &amp;</type>
        <definition>debug_event_t&amp; debug_event_t::operator=</definition>
        <argsstring>(const debug_event_t &amp;r)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="275" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="275" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1aa7e31feee7a3c1637d1c5eb38afd68d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> &amp;</type>
        <definition>debug_event_t&amp; debug_event_t::copy</definition>
        <argsstring>(const debug_event_t &amp;r)</argsstring>
        <name>copy</name>
        <param>
          <type>const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="276" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="276" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a3547734a432816db6c8fbf47f3d6976e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void debug_event_t::clear</definition>
        <argsstring>(void)</argsstring>
        <name>clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>clear the dependent information (see below), set event code to NO_EVENT </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="279" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="279" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1aa2dea0922ad642dd5942e621aacf5035" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void debug_event_t::clear_all</definition>
        <argsstring>(void)</argsstring>
        <name>clear_all</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="281" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="281" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a8710fe462316cf4c13e332e52106b19f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356" kindref="member">event_id_t</ref></type>
        <definition>event_id_t debug_event_t::eid</definition>
        <argsstring>() const</argsstring>
        <name>eid</name>
        <briefdescription>
<para>Event code. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="291" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="291" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a69e24c1f5d69c209fc919df24739a2ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void debug_event_t::set_eid</definition>
        <argsstring>(event_id_t id)</argsstring>
        <name>set_eid</name>
        <param>
          <type><ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356" kindref="member">event_id_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set event code. If the new event code is compatible with the old one then the dependent information (see below) will be preserved. Otherwise the event will be cleared and the new event code will be set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="297" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="297" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a1fb7ee6547cc49e975c7bbaa5932eb3e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmodinfo__t" kindref="compound">modinfo_t</ref> &amp;</type>
        <definition>modinfo_t&amp; debug_event_t::modinfo</definition>
        <argsstring>()</argsstring>
        <name>modinfo</name>
        <briefdescription>
<para>Information that depends on the event code: </para>        </briefdescription>
        <detaileddescription>
<para>&lt; <ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356ae9f38fd7102f887f8140c43beda4d2c9" kindref="member">PROCESS_STARTED</ref>, <ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356a0aa061ebfe8277ed602bcdc5ec1c47d4" kindref="member">PROCESS_ATTACHED</ref>, <ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356a8ec79a298f8676dc062d122a1deead11" kindref="member">LIB_LOADED</ref> <ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356a38cb54b7fd7aaf4ad0271c399417105a" kindref="member">PROCESS_EXITED</ref>, <ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356ac9087b7375864c084808109e1e1af5bb" kindref="member">THREAD_EXITED</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="302" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a611798c765e777d9d04ccc6c3716d87e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int &amp;</type>
        <definition>int&amp; debug_event_t::exit_code</definition>
        <argsstring>()</argsstring>
        <name>exit_code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356aa3eb50f956b29db5c542afeb16e713d5" kindref="member">THREAD_STARTED</ref> (thread name) <ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356a52d98e129bbde382aa11d0977657f33e" kindref="member">LIB_UNLOADED</ref> (unloaded library name) <ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356ad2d78669dc69197336728cd0b2845b96" kindref="member">INFORMATION</ref> (will be displayed in the output window if not empty) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="308" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="308" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a3be8d7206566dcfabf46ed903cda1048" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> &amp;</type>
        <definition>qstring&amp; debug_event_t::info</definition>
        <argsstring>()</argsstring>
        <name>info</name>
        <briefdescription>
<para><ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356a6aa885639b9e8fafc14f77f6d418fc1b" kindref="member">BREAKPOINT</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="316" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="316" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a43fef997f47a681e799e1ed9c8ed6339" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structbptaddr__t" kindref="compound">bptaddr_t</ref> &amp;</type>
        <definition>bptaddr_t&amp; debug_event_t::bpt</definition>
        <argsstring>()</argsstring>
        <name>bpt</name>
        <briefdescription>
<para><ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356ab8fa9515ef8cac50a79988c978b31fa0" kindref="member">EXCEPTION</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="322" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="322" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a66353134b9de85cb042feeb425aa9dd1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structexcinfo__t" kindref="compound">excinfo_t</ref> &amp;</type>
        <definition>excinfo_t&amp; debug_event_t::exc</definition>
        <argsstring>()</argsstring>
        <name>exc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="328" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="328" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a19abdcf8188692b0b0e49b58bcc72bee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structmodinfo__t" kindref="compound">modinfo_t</ref> &amp;</type>
        <definition>const modinfo_t&amp; debug_event_t::modinfo</definition>
        <argsstring>() const</argsstring>
        <name>modinfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="334" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="334" bodyend="334"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a0d0720855b2764f587f38971eee59629" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const int &amp;</type>
        <definition>const int&amp; debug_event_t::exit_code</definition>
        <argsstring>() const</argsstring>
        <name>exit_code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="335" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="335" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a5cc9f08b5fd6d79c9606b9d486f961f2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> &amp;</type>
        <definition>const qstring&amp; debug_event_t::info</definition>
        <argsstring>() const</argsstring>
        <name>info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="336" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="336" bodyend="336"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a32ab466a9afb90e1080021470c20489a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structbptaddr__t" kindref="compound">bptaddr_t</ref> &amp;</type>
        <definition>const bptaddr_t&amp; debug_event_t::bpt</definition>
        <argsstring>() const</argsstring>
        <name>bpt</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="337" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="337" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1afcd3f8886ee033572544ad15bb521c29" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structexcinfo__t" kindref="compound">excinfo_t</ref> &amp;</type>
        <definition>const excinfo_t&amp; debug_event_t::exc</definition>
        <argsstring>() const</argsstring>
        <name>exc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="338" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="338" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1af347c3519ec021449f017251b7e4ea48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmodinfo__t" kindref="compound">modinfo_t</ref> &amp;</type>
        <definition>modinfo_t&amp; debug_event_t::set_modinfo</definition>
        <argsstring>(event_id_t id)</argsstring>
        <name>set_modinfo</name>
        <param>
          <type><ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356" kindref="member">event_id_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="340" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="340" bodyend="344"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1ab94575874e331d4dd276ba983a2562ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void debug_event_t::set_exit_code</definition>
        <argsstring>(event_id_t id, int code)</argsstring>
        <name>set_exit_code</name>
        <param>
          <type><ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356" kindref="member">event_id_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="346" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="346" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1ae79d92521dc3596f8c55e9ed1eab8a03" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> &amp;</type>
        <definition>qstring&amp; debug_event_t::set_info</definition>
        <argsstring>(event_id_t id)</argsstring>
        <name>set_info</name>
        <param>
          <type><ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356" kindref="member">event_id_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="352" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="352" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1ae83dd30688da5010caba5e242bc2d8bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structbptaddr__t" kindref="compound">bptaddr_t</ref> &amp;</type>
        <definition>bptaddr_t&amp; debug_event_t::set_bpt</definition>
        <argsstring>(void)</argsstring>
        <name>set_bpt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="358" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="358" bodyend="362"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a223252dd9d4e09786ad9716317cd15a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structexcinfo__t" kindref="compound">excinfo_t</ref> &amp;</type>
        <definition>excinfo_t&amp; debug_event_t::set_exception</definition>
        <argsstring>(void)</argsstring>
        <name>set_exception</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="364" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="364" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="structdebug__event__t_1a2c509648e5efe72dfdce0b6c547c088b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t</type>
        <definition>ea_t debug_event_t::bpt_ea</definition>
        <argsstring>(void) const</argsstring>
        <name>bpt_ea</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>On some systems with special memory mappings the triggered ea might be different from the actual ea. Calculate the address to use. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="372" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="372" bodyend="375"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structdebug__event__t_1a1cb6da5ab9a1fdfc9c0cae3ddad468fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> void ida_export</type>
        <definition>THREAD_SAFE void ida_export free_debug_event</definition>
        <argsstring>(debug_event_t *ev)</argsstring>
        <name>free_debug_event</name>
        <param>
          <type><ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="377" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="structdebug__event__t_1ad447eceaf8903aa06f65b5dd14b7e4ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> void ida_export</type>
        <definition>THREAD_SAFE void ida_export copy_debug_event</definition>
        <argsstring>(debug_event_t *ev, const debug_event_t &amp;r)</argsstring>
        <name>copy_debug_event</name>
        <param>
          <type><ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <param>
          <type>const <ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="378" column="1"/>
      </memberdef>
      <memberdef kind="friend" id="structdebug__event__t_1a2061b1839085235a86a05f36972f62f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend <ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> void ida_export</type>
        <definition>THREAD_SAFE void ida_export set_debug_event_code</definition>
        <argsstring>(debug_event_t *ev, event_id_t id)</argsstring>
        <name>set_debug_event_code</name>
        <param>
          <type><ref refid="structdebug__event__t" kindref="compound">debug_event_t</ref> *</type>
          <declname>ev</declname>
        </param>
        <param>
          <type><ref refid="idd_8hpp_1a0e4c82840d549d876223416d8ae11356" kindref="member">event_id_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="379" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This structure is used only when detailed information about a debug event is needed. </para>    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" line="249" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idd.hpp" bodystart="248" bodyend="380"/>
    <listofallmembers>
      <member refid="structdebug__event__t_1a052ce5f13e65ca69f3c20334ece80f95" prot="private" virt="non-virtual"><scope>debug_event_t</scope><name>_eid</name></member>
      <member refid="structdebug__event__t_1a43fef997f47a681e799e1ed9c8ed6339" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>bpt</name></member>
      <member refid="structdebug__event__t_1a32ab466a9afb90e1080021470c20489a" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>bpt</name></member>
      <member refid="structdebug__event__t_1a2c509648e5efe72dfdce0b6c547c088b" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>bpt_ea</name></member>
      <member refid="structdebug__event__t_1a87afa8a4f22675a7a947ef54121f29fd" prot="private" virt="non-virtual"><scope>debug_event_t</scope><name>bytes</name></member>
      <member refid="structdebug__event__t_1a8751ba94e9859a7d747a2b4af9742e0e" prot="private" virt="non-virtual"><scope>debug_event_t</scope><name>check_usage</name></member>
      <member refid="structdebug__event__t_1a3547734a432816db6c8fbf47f3d6976e" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>clear</name></member>
      <member refid="structdebug__event__t_1aa2dea0922ad642dd5942e621aacf5035" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>clear_all</name></member>
      <member refid="structdebug__event__t_1aa7e31feee7a3c1637d1c5eb38afd68d1" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>copy</name></member>
      <member refid="structdebug__event__t_1ad447eceaf8903aa06f65b5dd14b7e4ae" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>copy_debug_event</name></member>
      <member refid="structdebug__event__t_1a609424ed01791765dbb1f16b9cfae5a3" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>debug_event_t</name></member>
      <member refid="structdebug__event__t_1ae64035a159423eea6aab85b7eb5ea6e0" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>debug_event_t</name></member>
      <member refid="structdebug__event__t_1a1b8cd24ae45d9d06514d87af49f4d9c6" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>ea</name></member>
      <member refid="structdebug__event__t_1a8710fe462316cf4c13e332e52106b19f" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>eid</name></member>
      <member refid="structdebug__event__t_1a66353134b9de85cb042feeb425aa9dd1" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>exc</name></member>
      <member refid="structdebug__event__t_1afcd3f8886ee033572544ad15bb521c29" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>exc</name></member>
      <member refid="structdebug__event__t_1a611798c765e777d9d04ccc6c3716d87e" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>exit_code</name></member>
      <member refid="structdebug__event__t_1a0d0720855b2764f587f38971eee59629" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>exit_code</name></member>
      <member refid="structdebug__event__t_1a1cb6da5ab9a1fdfc9c0cae3ddad468fb" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>free_debug_event</name></member>
      <member refid="structdebug__event__t_1a5fb098f553418b7687d3b66331d6e18d" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>handled</name></member>
      <member refid="structdebug__event__t_1a3be8d7206566dcfabf46ed903cda1048" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>info</name></member>
      <member refid="structdebug__event__t_1a5cc9f08b5fd6d79c9606b9d486f961f2" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>info</name></member>
      <member refid="structdebug__event__t_1a1fb7ee6547cc49e975c7bbaa5932eb3e" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>modinfo</name></member>
      <member refid="structdebug__event__t_1a19abdcf8188692b0b0e49b58bcc72bee" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>modinfo</name></member>
      <member refid="structdebug__event__t_1a84ef0bd5884ebeaecd3b6e7d79f08050" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>operator=</name></member>
      <member refid="structdebug__event__t_1a64ec79f8a20466f3fb575d1834247a36" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>pid</name></member>
      <member refid="structdebug__event__t_1ae83dd30688da5010caba5e242bc2d8bd" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>set_bpt</name></member>
      <member refid="structdebug__event__t_1a2061b1839085235a86a05f36972f62f3" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>set_debug_event_code</name></member>
      <member refid="structdebug__event__t_1a69e24c1f5d69c209fc919df24739a2ae" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>set_eid</name></member>
      <member refid="structdebug__event__t_1a223252dd9d4e09786ad9716317cd15a1" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>set_exception</name></member>
      <member refid="structdebug__event__t_1ab94575874e331d4dd276ba983a2562ae" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>set_exit_code</name></member>
      <member refid="structdebug__event__t_1ae79d92521dc3596f8c55e9ed1eab8a03" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>set_info</name></member>
      <member refid="structdebug__event__t_1af347c3519ec021449f017251b7e4ea48" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>set_modinfo</name></member>
      <member refid="structdebug__event__t_1a4689d70b63959c774d9ee291cc4e5366" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>tid</name></member>
      <member refid="structdebug__event__t_1a1e426636c048289ca5081da8bc2cd9b0" prot="public" virt="non-virtual"><scope>debug_event_t</scope><name>~debug_event_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
