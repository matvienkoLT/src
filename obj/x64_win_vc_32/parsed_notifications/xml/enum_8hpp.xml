<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="enum_8hpp" kind="file" language="C++">
    <compoundname>enum.hpp</compoundname>
    <includes refid="nalt_8hpp" local="no">nalt.hpp</includes>
    <incdepgraph>
      <node id="234">
        <label>sys/stat.h</label>
      </node>
      <node id="218">
        <label>stdarg.h</label>
      </node>
      <node id="221">
        <label>assert.h</label>
      </node>
      <node id="215">
        <label>ida.hpp</label>
        <link refid="ida_8hpp"/>
        <childnode refid="216" relation="include">
        </childnode>
        <childnode refid="236" relation="include">
        </childnode>
      </node>
      <node id="217">
        <label>stdlib.h</label>
      </node>
      <node id="213">
        <label>obj/x64_linux_gcc_32_opt/idasdk/enum.hpp</label>
        <link refid="enum_8hpp"/>
        <childnode refid="214" relation="include">
        </childnode>
      </node>
      <node id="229">
        <label>io.h</label>
      </node>
      <node id="232">
        <label>fcntl.h</label>
      </node>
      <node id="235">
        <label>llong.hpp</label>
        <link refid="llong_8hpp_source"/>
      </node>
      <node id="227">
        <label>malloc.h</label>
      </node>
      <node id="226">
        <label>string</label>
      </node>
      <node id="231">
        <label>map</label>
      </node>
      <node id="230">
        <label>direct.h</label>
      </node>
      <node id="219">
        <label>stddef.h</label>
      </node>
      <node id="214">
        <label>nalt.hpp</label>
        <link refid="nalt_8hpp"/>
        <childnode refid="215" relation="include">
        </childnode>
        <childnode refid="237" relation="include">
        </childnode>
      </node>
      <node id="222">
        <label>limits.h</label>
      </node>
      <node id="233">
        <label>sys/types.h</label>
      </node>
      <node id="228">
        <label>string.h</label>
      </node>
      <node id="225">
        <label>new</label>
      </node>
      <node id="216">
        <label>pro.h</label>
        <link refid="pro_8h"/>
        <childnode refid="217" relation="include">
        </childnode>
        <childnode refid="218" relation="include">
        </childnode>
        <childnode refid="219" relation="include">
        </childnode>
        <childnode refid="220" relation="include">
        </childnode>
        <childnode refid="221" relation="include">
        </childnode>
        <childnode refid="222" relation="include">
        </childnode>
        <childnode refid="223" relation="include">
        </childnode>
        <childnode refid="224" relation="include">
        </childnode>
        <childnode refid="225" relation="include">
        </childnode>
        <childnode refid="226" relation="include">
        </childnode>
        <childnode refid="227" relation="include">
        </childnode>
        <childnode refid="228" relation="include">
        </childnode>
        <childnode refid="229" relation="include">
        </childnode>
        <childnode refid="230" relation="include">
        </childnode>
        <childnode refid="231" relation="include">
        </childnode>
        <childnode refid="232" relation="include">
        </childnode>
        <childnode refid="233" relation="include">
        </childnode>
        <childnode refid="234" relation="include">
        </childnode>
        <childnode refid="235" relation="include">
        </childnode>
      </node>
      <node id="224">
        <label>time.h</label>
      </node>
      <node id="223">
        <label>ctype.h</label>
      </node>
      <node id="236">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
      </node>
      <node id="237">
        <label>netnode.hpp</label>
        <link refid="netnode_8hpp"/>
        <childnode refid="236" relation="include">
        </childnode>
      </node>
      <node id="220">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structenum__member__visitor__t" prot="public">enum_member_visitor_t</innerclass>
      <sectiondef kind="user-defined">
      <header>Access to all used bitmasks in an enum</header>
      <memberdef kind="function" id="enum_8hpp_1ac47e764b537cbd8829745fd2d7b326f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref> ida_export</type>
        <definition>idaman bmask_t ida_export get_first_bmask</definition>
        <argsstring>(enum_t id)</argsstring>
        <name>get_first_bmask</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get first bitmask in the enum (bitfield)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enum_id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of enum (bitfield) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the smallest bitmask for enum, or DEFMASK </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a4e1739831bf6123ed68b92355e39d8e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref> ida_export</type>
        <definition>idaman bmask_t ida_export get_last_bmask</definition>
        <argsstring>(enum_t id)</argsstring>
        <name>get_last_bmask</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get last bitmask in the enum (bitfield)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enum_id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of enum </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the biggest bitmask for enum, or DEFMASK </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a9872440e9d1cf384ebb41ddb030083da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref> ida_export</type>
        <definition>idaman bmask_t ida_export get_next_bmask</definition>
        <argsstring>(enum_t id, bmask_t bmask)</argsstring>
        <name>get_next_bmask</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>bmask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get next bitmask in the enum (bitfield)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enum_id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of enum </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the current bitmask </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of a bitmask with value higher than the specified value, or DEFMASK </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a1f1685bd7cce0e11b0c947cbf218baa3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref> ida_export</type>
        <definition>idaman bmask_t ida_export get_prev_bmask</definition>
        <argsstring>(enum_t id, bmask_t bmask)</argsstring>
        <name>get_prev_bmask</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>bmask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get prev bitmask in the enum (bitfield)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>enum_id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of enum </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the current bitmask </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value of a bitmask with value lower than the specified value, or DEFMASK </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="186" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access to all enum members with specified bitmask</header>
      <description><para><simplesect kind="note"><para>these functions return values, not <ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref>! </para></simplesect>
</para></description>
      <memberdef kind="function" id="enum_8hpp_1a62788aeccf32aaee6f505b1b5f262d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> ida_export</type>
        <definition>idaman uval_t ida_export get_first_enum_member</definition>
        <argsstring>(enum_t id, bmask_t bmask=DEFMASK)</argsstring>
        <name>get_first_enum_member</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>bmask</declname>
          <defval><ref refid="enum_8hpp_1a18cebfc21d6fc4e1b6ea9fc49cdca3e2" kindref="member">DEFMASK</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1aff11274eec0a6b351e388723e0a4da7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> ida_export</type>
        <definition>idaman uval_t ida_export get_last_enum_member</definition>
        <argsstring>(enum_t id, bmask_t bmask=DEFMASK)</argsstring>
        <name>get_last_enum_member</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>bmask</declname>
          <defval><ref refid="enum_8hpp_1a18cebfc21d6fc4e1b6ea9fc49cdca3e2" kindref="member">DEFMASK</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1aff838eaeda3a69acea5ae0357f3f8e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> ida_export</type>
        <definition>idaman uval_t ida_export get_next_enum_member</definition>
        <argsstring>(enum_t id, uval_t value, bmask_t bmask=DEFMASK)</argsstring>
        <name>get_next_enum_member</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>bmask</declname>
          <defval><ref refid="enum_8hpp_1a18cebfc21d6fc4e1b6ea9fc49cdca3e2" kindref="member">DEFMASK</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a2d34664a9e8118a56c71cc69aea901f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> ida_export</type>
        <definition>idaman uval_t ida_export get_prev_enum_member</definition>
        <argsstring>(enum_t id, uval_t value, bmask_t bmask=DEFMASK)</argsstring>
        <name>get_prev_enum_member</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>bmask</declname>
          <defval><ref refid="enum_8hpp_1a18cebfc21d6fc4e1b6ea9fc49cdca3e2" kindref="member">DEFMASK</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="196" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Access to all enum members with specified value and mask</header>
      <description><para>A sample loop looks like this: <programlisting><codeline><highlight class="normal">const_t<sp/>main_cid;</highlight></codeline>
<codeline><highlight class="normal">uchar<sp/>serial;</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(<sp/>const_t<sp/>cid=main_cid=get_first_serial_enum_member(&amp;serial,<sp/>id,<sp/>v,<sp/>mask);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cid<sp/>!=<sp/>BADNODE;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cid<sp/>=<sp/>get_next_serial_enum_member(&amp;serial,<sp/>main_cid)<sp/>)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> The &apos;out_serial&apos; argument of get_first_serial_enum_member/get_last_serial_enum_member can be NULL. The &apos;in_out_serial&apos; is required for the other functions. </para></description>
      <memberdef kind="function" id="enum_8hpp_1a72a4c129c62a40bccb610b582dbf1487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref> ida_export</type>
        <definition>idaman const_t ida_export get_first_serial_enum_member</definition>
        <argsstring>(uchar *out_serial, enum_t id, uval_t value, bmask_t bmask)</argsstring>
        <name>get_first_serial_enum_member</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
          <declname>out_serial</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>bmask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1afdbe438682858fb8337b37f3ce2532ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref> ida_export</type>
        <definition>idaman const_t ida_export get_last_serial_enum_member</definition>
        <argsstring>(uchar *out_serial, enum_t id, uval_t value, bmask_t bmask)</argsstring>
        <name>get_last_serial_enum_member</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
          <declname>out_serial</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>bmask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a980f564f68692b1f3bd441bc689fb60b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref> ida_export</type>
        <definition>idaman const_t ida_export get_next_serial_enum_member</definition>
        <argsstring>(uchar *in_out_serial, const_t first_cid)</argsstring>
        <name>get_next_serial_enum_member</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
          <declname>in_out_serial</declname>
        </param>
        <param>
          <type><ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref></type>
          <declname>first_cid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1aa740fb20c70b4d9ea9920aca07fdb969" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref> ida_export</type>
        <definition>idaman const_t ida_export get_prev_serial_enum_member</definition>
        <argsstring>(uchar *in_out_serial, const_t first_cid)</argsstring>
        <name>get_prev_serial_enum_member</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
          <declname>in_out_serial</declname>
        </param>
        <param>
          <type><ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref></type>
          <declname>first_cid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="228" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Work with the bitmask name &amp; comment</header>
      <memberdef kind="function" id="enum_8hpp_1ae922d76f23b8ccdf1901300e77a3284f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_bmask_name</definition>
        <argsstring>(enum_t id, bmask_t bmask, const char *name)</argsstring>
        <name>set_bmask_name</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>bmask</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1aeaa17e8d9cdb13746f739f89ab420464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_bmask_name</definition>
        <argsstring>(qstring *out, enum_t id, bmask_t bmask)</argsstring>
        <name>get_bmask_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>bmask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a4767121965f0feffb88fa12475424105" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_bmask_cmt</definition>
        <argsstring>(enum_t id, bmask_t bmask, const char *cmt, bool repeatable)</argsstring>
        <name>set_bmask_cmt</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>bmask</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cmt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>repeatable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a51250ebde31f66584c59a37196b74f12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_bmask_cmt</definition>
        <argsstring>(qstring *buf, enum_t id, bmask_t bmask, bool repeatable)</argsstring>
        <name>get_bmask_cmt</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>bmask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>repeatable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="356" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="enum_8hpp_1a18cebfc21d6fc4e1b6ea9fc49cdca3e2" prot="public" static="no">
        <name>DEFMASK</name>
        <initializer>(<ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref>(-1))</initializer>
        <briefdescription>
<para>default bitmask </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="28" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___e_n_u_m___m_e_m_b_e_r___1ga23dca5872dfad5245750b7d486a6e5c6" prot="public" static="no">
        <name>ENUM_MEMBER_ERROR_NAME</name>
        <initializer>1</initializer>
        <briefdescription>
<para>already have member with this name (bad name) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="316" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___e_n_u_m___m_e_m_b_e_r___1ga0f3b78ec1360ec1d75be31aa3929f1c4" prot="public" static="no">
        <name>ENUM_MEMBER_ERROR_VALUE</name>
        <initializer>2</initializer>
        <briefdescription>
<para>already have 256 members with this value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="317" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___e_n_u_m___m_e_m_b_e_r___1ga597694bafdd54c6b504b815d39d7c852" prot="public" static="no">
        <name>ENUM_MEMBER_ERROR_ENUM</name>
        <initializer>3</initializer>
        <briefdescription>
<para>bad enum id </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="318" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___e_n_u_m___m_e_m_b_e_r___1ga5c9ec15d978d5ae3230fda0e40e58d64" prot="public" static="no">
        <name>ENUM_MEMBER_ERROR_MASK</name>
        <initializer>4</initializer>
        <briefdescription>
<para>bad bmask </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="319" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___e_n_u_m___m_e_m_b_e_r___1ga45646b26371e00f275ed5291e668cd09" prot="public" static="no">
        <name>ENUM_MEMBER_ERROR_ILLV</name>
        <initializer>5</initializer>
        <briefdescription>
<para>bad bmask and value combination (~bmask &amp; value != 0) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="320" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" bodystart="320" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="enum_8hpp_1a320dc6698b7075a653144bbdf202b30e" prot="public" static="no">
        <type><ref refid="pro_8h_1ad8791d30d19843bc09b78bdf01a852ec" kindref="member">tid_t</ref></type>
        <definition>typedef tid_t enum_t</definition>
        <argsstring></argsstring>
        <name>enum_t</name>
        <briefdescription>
<para>Enums and bitfields. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="23" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="enum_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" prot="public" static="no">
        <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
        <definition>typedef uval_t bmask_t</definition>
        <argsstring></argsstring>
        <name>bmask_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>unsigned value that describes a bitmask a bit mask is 32/64 bits. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="25" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" prot="public" static="no">
        <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
        <definition>typedef uval_t const_t</definition>
        <argsstring></argsstring>
        <name>const_t</name>
        <briefdescription>
<para>members of enums </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="30" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="enum_8hpp_1a4c98e977d8fa7b362911f0b54844c0a0" prot="public" static="no" mutable="no">
        <type>const <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
        <definition>const uchar MAX_ENUM_SERIAL</definition>
        <argsstring></argsstring>
        <name>MAX_ENUM_SERIAL</name>
        <initializer>= 255</initializer>
        <briefdescription>
<para>Max number of identical constants allowed for one enum type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="33" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="enum_8hpp_1aa840a86fef6086e96bf64bf26fdd3b4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman size_t ida_export</type>
        <definition>idaman size_t ida_export get_enum_qty</definition>
        <argsstring>(void)</argsstring>
        <name>get_enum_qty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number of declared <ref refid="enum_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref> types. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1adaf53fd8d955c3c61cc02e5acfef516c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref> ida_export</type>
        <definition>idaman enum_t ida_export getn_enum</definition>
        <argsstring>(size_t n)</argsstring>
        <name>getn_enum</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Get enum by its ordinal number (0..n). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1aee9444a718554a7e82a1381dc6c9e73e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> ida_export</type>
        <definition>idaman uval_t ida_export get_enum_idx</definition>
        <argsstring>(enum_t id)</argsstring>
        <name>get_enum_idx</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get serial number of enum. The serial number determines the place of the enum in the enum window. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a49bf17561dd3f8dbc433524593672041" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref> ida_export</type>
        <definition>idaman enum_t ida_export get_enum</definition>
        <argsstring>(const char *name)</argsstring>
        <name>get_enum</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get enum by name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a18a9b71c6552bb5a3a8b800632d805cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_bf</definition>
        <argsstring>(enum_t id)</argsstring>
        <name>is_bf</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is enum a bitfield? (otherwise - plain enum, no bitmasks except for <ref refid="enum_8hpp_1a18cebfc21d6fc4e1b6ea9fc49cdca3e2" kindref="member">DEFMASK</ref> are allowed) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a52250627515e9a9f6db454cf4c855ad4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_enum_hidden</definition>
        <argsstring>(enum_t id)</argsstring>
        <name>is_enum_hidden</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Is enum collapsed? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a0b0bc43c616ceffeca3a90360d8498c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_enum_hidden</definition>
        <argsstring>(enum_t id, bool hidden)</argsstring>
        <name>set_enum_hidden</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hidden</declname>
        </param>
        <briefdescription>
<para>Collapse enum. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a1623b9cca593bb8baa384c96f06ec596" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_enum_fromtil</definition>
        <argsstring>(enum_t id)</argsstring>
        <name>is_enum_fromtil</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Does enum come from type library? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1ab094e71a3cfcd7d40182dcf8e2dd86f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_enum_fromtil</definition>
        <argsstring>(enum_t id, bool fromtil)</argsstring>
        <name>set_enum_fromtil</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fromtil</declname>
        </param>
        <briefdescription>
<para>Specify that enum comes from a type library. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a633572261abb839537303a3c0d1e6c1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_ghost_enum</definition>
        <argsstring>(enum_t id)</argsstring>
        <name>is_ghost_enum</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Is a ghost copy of a local type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a337c5e2a06f74a7e9a984a1fc20e3a4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_enum_ghost</definition>
        <argsstring>(enum_t id, bool ghost)</argsstring>
        <name>set_enum_ghost</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ghost</declname>
        </param>
        <briefdescription>
<para>Specify that enum is a ghost copy of a local type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1aa7d99de96f31398e5df1b402ac5785c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_enum_name</definition>
        <argsstring>(qstring *out, enum_t id)</argsstring>
        <name>get_enum_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get name of enum. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1ad5bd2563ab5ce7e21721693bb3fd1b25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref></type>
        <definition>qstring get_enum_name</definition>
        <argsstring>(tid_t id)</argsstring>
        <name>get_enum_name</name>
        <param>
          <type><ref refid="pro_8h_1ad8791d30d19843bc09b78bdf01a852ec" kindref="member">tid_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="97" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" bodystart="97" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1ae698eb548b56ee77ec180b3b9e2023e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman size_t ida_export</type>
        <definition>idaman size_t ida_export get_enum_width</definition>
        <argsstring>(enum_t id)</argsstring>
        <name>get_enum_width</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the width of a enum element allowed values: 0 (unspecified),1,2,4,8,16,32,64 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a75c9fa9bb67f19f6f2f8fd372be7b6b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_enum_width</definition>
        <argsstring>(enum_t id, int width)</argsstring>
        <name>set_enum_width</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
<para>See comment for <ref refid="enum_8hpp_1ae698eb548b56ee77ec180b3b9e2023e5" kindref="member">get_enum_width()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1ad56c663db3f58b6de55265efa235f8eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_enum_cmt</definition>
        <argsstring>(qstring *buf, enum_t id, bool repeatable)</argsstring>
        <name>get_enum_cmt</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>repeatable</declname>
        </param>
        <briefdescription>
<para>Get enum comment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a4d0082bfe418f0be1fe03eb71c3bb7fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman size_t ida_export</type>
        <definition>idaman size_t ida_export get_enum_size</definition>
        <argsstring>(enum_t id)</argsstring>
        <name>get_enum_size</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get the number of the members of the enum. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1aefb289d1b2bf8836d6bcdf09f74b32e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> ida_export</type>
        <definition>idaman flags_t ida_export get_enum_flag</definition>
        <argsstring>(enum_t id)</argsstring>
        <name>get_enum_flag</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get flags determining the representation of the enum. (currently they define the numeric base: octal, decimal, hex, bin) and signness. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a45f2a9d376a5a43cf46fcf61acbb9fc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref> ida_export</type>
        <definition>idaman const_t ida_export get_enum_member_by_name</definition>
        <argsstring>(const char *name)</argsstring>
        <name>get_enum_member_by_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Get a reference to an enum member by its name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a804440dc3468a5f6bde2158dc3228863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> ida_export</type>
        <definition>idaman uval_t ida_export get_enum_member_value</definition>
        <argsstring>(const_t id)</argsstring>
        <name>get_enum_member_value</name>
        <param>
          <type><ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get value of an enum member. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a193e370f17c573b501d0d78306306e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref> ida_export</type>
        <definition>idaman enum_t ida_export get_enum_member_enum</definition>
        <argsstring>(const_t id)</argsstring>
        <name>get_enum_member_enum</name>
        <param>
          <type><ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get the parent enum of an enum member. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a7b51c9fa01c19f4c5e3255776cf0509d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref> ida_export</type>
        <definition>idaman bmask_t ida_export get_enum_member_bmask</definition>
        <argsstring>(const_t id)</argsstring>
        <name>get_enum_member_bmask</name>
        <param>
          <type><ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get bitmask of an enum member. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1ab3281a5f0d35bcc66094a54bd75dc039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref> ida_export</type>
        <definition>idaman const_t ida_export get_enum_member</definition>
        <argsstring>(enum_t id, uval_t value, int serial, bmask_t mask)</argsstring>
        <name>get_enum_member</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>serial</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find an enum member by enum, value and bitmask <simplesect kind="note"><para>if serial -1, return a member with any serial </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a02128944494f906383230175ed89dce2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_enum_member_name</definition>
        <argsstring>(qstring *out, const_t id)</argsstring>
        <name>get_enum_member_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get name of an enum member by const_t. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a03165131b12b94b65bea763a1241b80e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_enum_member_cmt</definition>
        <argsstring>(qstring *buf, const_t id, bool repeatable)</argsstring>
        <name>get_enum_member_cmt</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>repeatable</declname>
        </param>
        <briefdescription>
<para>Get enum member&apos;s comment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a2f47e825245724df2c41b669bceb1669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export for_all_enum_members</definition>
        <argsstring>(enum_t id, enum_member_visitor_t &amp;cv)</argsstring>
        <name>for_all_enum_members</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="structenum__member__visitor__t" kindref="compound">enum_member_visitor_t</ref> &amp;</type>
          <declname>cv</declname>
        </param>
        <briefdescription>
<para>Visit all members of a given enum. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a9f26ecb5e8613468e66d2e47978eb4f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> ida_export</type>
        <definition>idaman uchar ida_export get_enum_member_serial</definition>
        <argsstring>(const_t cid)</argsstring>
        <name>get_enum_member_serial</name>
        <param>
          <type><ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref></type>
          <declname>cid</declname>
        </param>
        <briefdescription>
<para>Get serial number of an enum member. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a8d64aa47ba96ed9e740bb9ca33495667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref> ida_export</type>
        <definition>idaman int32 ida_export get_enum_type_ordinal</definition>
        <argsstring>(enum_t id)</argsstring>
        <name>get_enum_type_ordinal</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get corresponding type ordinal number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1adccb96014a9dd9f9942224aadc60a4ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export set_enum_type_ordinal</definition>
        <argsstring>(enum_t id, int32 ord)</argsstring>
        <name>set_enum_type_ordinal</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
          <declname>ord</declname>
        </param>
        <briefdescription>
<para>Set corresponding type ordinal number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1ada66ee57340f2459419db404dc81cefd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref> ida_export</type>
        <definition>idaman enum_t ida_export add_enum</definition>
        <argsstring>(size_t idx, const char *name, flags_t flag)</argsstring>
        <name>add_enum</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add new enum type.<itemizedlist>
<listitem><para>if idx==<ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> then add as the last idx</para></listitem><listitem><para>if name==NULL then generate a unique name &quot;enum_%d&quot; </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a8ae62e93b67012f1685170bb4007962b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export del_enum</definition>
        <argsstring>(enum_t id)</argsstring>
        <name>del_enum</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Delete an enum type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="274" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a846edc7b47cada688c40b428af1a3deb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_enum_idx</definition>
        <argsstring>(enum_t id, size_t idx)</argsstring>
        <name>set_enum_idx</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set serial number of enum. Also see <ref refid="enum_8hpp_1aee9444a718554a7e82a1381dc6c9e73e" kindref="member">get_enum_idx()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a9118c53a15d1fcbbf5c8f4ba8f062538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_enum_bf</definition>
        <argsstring>(enum_t id, bool bf)</argsstring>
        <name>set_enum_bf</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bf</declname>
        </param>
        <briefdescription>
<para>Set &apos;bitfield&apos; bit of enum (i.e. convert it to a bitfield) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1aedbb3244f829192f00f4372b44d41e2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_enum_name</definition>
        <argsstring>(enum_t id, const char *name)</argsstring>
        <name>set_enum_name</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set name of enum type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1ab23384f76012a3148d602239d797c73f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_enum_cmt</definition>
        <argsstring>(enum_t id, const char *cmt, bool repeatable)</argsstring>
        <name>set_enum_cmt</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cmt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>repeatable</declname>
        </param>
        <briefdescription>
<para>Set comment for enum type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1aa24b8d6e5f233808e652f12c976c0ae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_enum_flag</definition>
        <argsstring>(enum_t id, flags_t flag)</argsstring>
        <name>set_enum_flag</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>Set data representation flags. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1aa655959dd35d5fe541c69b02ee76cf63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export add_enum_member</definition>
        <argsstring>(enum_t id, const char *name, uval_t value, bmask_t bmask=DEFMASK)</argsstring>
        <name>add_enum_member</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>bmask</declname>
          <defval><ref refid="enum_8hpp_1a18cebfc21d6fc4e1b6ea9fc49cdca3e2" kindref="member">DEFMASK</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add member to enum type. <simplesect kind="return"><para>0 if ok, otherwise one of <ref refid="group___e_n_u_m___m_e_m_b_e_r__" kindref="compound">Add enum member result codes</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a6fb4a8d766bfbb312542708b8b870112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export del_enum_member</definition>
        <argsstring>(enum_t id, uval_t value, uchar serial, bmask_t bmask)</argsstring>
        <name>del_enum_member</name>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>serial</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>bmask</declname>
        </param>
        <briefdescription>
<para>Delete member of enum type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1a904c5a73dedfcb5f47ef359e2c6752c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_enum_member_name</definition>
        <argsstring>(const_t id, const char *name)</argsstring>
        <name>set_enum_member_name</name>
        <param>
          <type><ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Set name of enum member. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1aab71506d77cbe37afa78c82eba433980" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool set_enum_member_cmt</definition>
        <argsstring>(const_t id, const char *cmt, bool repeatable)</argsstring>
        <name>set_enum_member_cmt</name>
        <param>
          <type><ref refid="enum_8hpp_1ae92726449792c6db974b4b5d3f04a501" kindref="member">const_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cmt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>repeatable</declname>
        </param>
        <briefdescription>
<para>Set comment for enum member. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="336" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" bodystart="336" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="enum_8hpp_1aa012cffe0a674042658a81f9b3b15147" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool</type>
        <definition>THREAD_SAFE bool is_one_bit_mask</definition>
        <argsstring>(bmask_t mask)</argsstring>
        <name>is_one_bit_mask</name>
        <param>
          <type><ref refid="kernwin_8hpp_1ad89cffcdd1a8ff71e302854832f95f7a" kindref="member">bmask_t</ref></type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Is bitmask one bit? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" line="344" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp" bodystart="344" bodyend="347"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Assembly level enum management. </para>    </briefdescription>
    <detaileddescription>
<para>Enums and bitfields are represented as <ref refid="enum_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref>. </para>    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/enum.hpp"/>
  </compounddef>
</doxygen>
