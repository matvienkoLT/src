<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="structoptinsn__t" kind="struct" language="C++" prot="public" abstract="yes">
    <compoundname>optinsn_t</compoundname>
    <includes refid="hexrays_8hpp" local="no">hexrays.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structoptinsn__t_1a0f814ea05f0d2ea458ab42bb5f429a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>int idaapi</type>
        <definition>virtual int idaapi optinsn_t::func</definition>
        <argsstring>(mblock_t *blk, minsn_t *ins)=0</argsstring>
        <name>func</name>
        <param>
          <type><ref refid="classmblock__t" kindref="compound">mblock_t</ref> *</type>
          <declname>blk</declname>
        </param>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optimize an instruction. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>blk</parametername>
</parameternamelist>
<parameterdescription>
<para>current basic block. maybe NULL, which means that the instruction must be optimized without context </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ins</parametername>
</parameternamelist>
<parameterdescription>
<para>instruction to optimize; it is always a top-level instruction. the callback may not delete the instruction but may convert it into nop (see <ref refid="classmblock__t_1adeefb92c2299bc8ea460b06e800edad3" kindref="member">mblock_t::make_nop</ref>). to optimize sub-instructions, visit them using <ref refid="structminsn__visitor__t" kindref="compound">minsn_visitor_t</ref>. sub-instructions may not be converted int nop but can be converted to &quot;mov x,x&quot;. for example: add x,0,x =&gt; mov x,x </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of changes made to the instruction. if after this call the instruction&apos;s use/def lists have changed, you must mark the block level lists as dirty (see mark_lists_dirty) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="561" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>User defined callback to optimize individual microcode instructions. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="547" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="546" bodyend="562"/>
    <listofallmembers>
      <member refid="structoptinsn__t_1a0f814ea05f0d2ea458ab42bb5f429a3b" prot="public" virt="pure-virtual"><scope>optinsn_t</scope><name>func</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
