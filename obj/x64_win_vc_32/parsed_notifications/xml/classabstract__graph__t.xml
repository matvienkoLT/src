<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="classabstract__graph__t" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>abstract_graph_t</compoundname>
    <basecompoundref refid="classgdl__graph__t" prot="public" virt="non-virtual">gdl_graph_t</basecompoundref>
    <derivedcompoundref refid="classmutable__graph__t" prot="public" virt="non-virtual">mutable_graph_t</derivedcompoundref>
    <includes refid="graph_8hpp" local="no">graph.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classabstract__graph__t_1a97db2f403faeb9b33ae919dd379b08d7" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref></type>
        <definition>qstring abstract_graph_t::title</definition>
        <argsstring></argsstring>
        <name>title</name>
        <briefdescription>
<para>graph title </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="773" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="773" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classabstract__graph__t_1a18f4333cbb5733868b944a378c441128" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool abstract_graph_t::rect_edges_made</definition>
        <argsstring></argsstring>
        <name>rect_edges_made</name>
        <briefdescription>
<para>have create rectangular edges? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="774" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="774" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classabstract__graph__t_1abed2d7043d91a2a36a59954a96477bfc" prot="public" static="no" mutable="no">
        <type><ref refid="graph_8hpp_1a5b8e7dd25431c0cf4ca4709239f2e65f" kindref="member">layout_type_t</ref></type>
        <definition>layout_type_t abstract_graph_t::current_layout</definition>
        <argsstring></argsstring>
        <name>current_layout</name>
        <briefdescription>
<para>see <ref refid="group__layout__" kindref="compound">Proximity view layouts</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="775" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="775" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classabstract__graph__t_1afc4f317f4641327fcad7c814bc938a2a" prot="public" static="no" mutable="no">
        <type><ref refid="structpoint__t" kindref="compound">point_t</ref></type>
        <definition>point_t abstract_graph_t::circle_center</definition>
        <argsstring></argsstring>
        <name>circle_center</name>
        <briefdescription>
<para>for layout_circle </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="776" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="776" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classabstract__graph__t_1ab0c7e25aca53e75ebd99e8b4dcdeadde" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int abstract_graph_t::circle_radius</definition>
        <argsstring></argsstring>
        <name>circle_radius</name>
        <briefdescription>
<para>for layout_circle </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="777" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="777" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classabstract__graph__t_1ab9426dc8f191d3064121eaf06482f050" prot="public" static="no" mutable="no">
        <type><ref refid="ida_8hpp_1acf012fe005690e1af26e799617fc98b7" kindref="member">hook_cb_t</ref> *</type>
        <definition>hook_cb_t* abstract_graph_t::callback</definition>
        <argsstring></argsstring>
        <name>callback</name>
        <briefdescription>
<para>user-defined callback </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="778" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="778" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classabstract__graph__t_1ae0b63c027a023df00339d30c66f2854b" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* abstract_graph_t::callback_ud</definition>
        <argsstring></argsstring>
        <name>callback_ud</name>
        <briefdescription>
<para>user data for <ref refid="classabstract__graph__t_1ab9426dc8f191d3064121eaf06482f050" kindref="member">callback</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="779" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="779" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classabstract__graph__t_1ac384a5f94db0c3ba7e6132fd1d6f7b1b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::find_entries</definition>
        <argsstring>(node_set_t &amp;entries) const</argsstring>
        <name>find_entries</name>
        <param>
          <type><ref refid="classnode__set__t" kindref="compound">node_set_t</ref> &amp;</type>
          <declname>entries</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="669" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a0644747b28399609c3d4a4327dae0cf1" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::depth_first</definition>
        <argsstring>(int root, struct depth_first_info_t &amp;di) const</argsstring>
        <name>depth_first</name>
        <param>
          <type>int</type>
          <declname>root</declname>
        </param>
        <param>
          <type>struct depth_first_info_t &amp;</type>
          <declname>di</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="670" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a0a3118b502f17649a3b2f839668105c1" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t idaapi</type>
        <definition>size_t idaapi abstract_graph_t::remove_reachable</definition>
        <argsstring>(int n, node_set_t *s) const</argsstring>
        <name>remove_reachable</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="classnode__set__t" kindref="compound">node_set_t</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="671" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a7307a60062a02f5f6ee4db2c4adcf13d" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi abstract_graph_t::longest_path</definition>
        <argsstring>(int n, intvec_t &amp;tops, int row_height) const</argsstring>
        <name>longest_path</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref> &amp;</type>
          <declname>tops</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row_height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="672" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a80f123fbdc84465afcaaee31d46eac1e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t idaapi</type>
        <definition>size_t idaapi abstract_graph_t::sort_layer_nodes</definition>
        <argsstring>(const row_info_t &amp;r1, const intmap_t &amp;lpi1, row_info_t &amp;r2, intmap_t &amp;lpi2, bool ispred) const</argsstring>
        <name>sort_layer_nodes</name>
        <param>
          <type>const <ref refid="structrow__info__t" kindref="compound">row_info_t</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="classintmap__t" kindref="compound">intmap_t</ref> &amp;</type>
          <declname>lpi1</declname>
        </param>
        <param>
          <type><ref refid="structrow__info__t" kindref="compound">row_info_t</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type><ref refid="classintmap__t" kindref="compound">intmap_t</ref> &amp;</type>
          <declname>lpi2</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ispred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="673" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a8528f3cc831e900ee32c4ef1b3a6db85" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t idaapi</type>
        <definition>size_t idaapi abstract_graph_t::calc_cross_num</definition>
        <argsstring>(const intvec_t &amp;r1, const intvec_t &amp;r2, const intmap_t &amp;lpi1, bool ispred) const</argsstring>
        <name>calc_cross_num</name>
        <param>
          <type>const <ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref> &amp;</type>
          <declname>r1</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref> &amp;</type>
          <declname>r2</declname>
        </param>
        <param>
          <type>const <ref refid="classintmap__t" kindref="compound">intmap_t</ref> &amp;</type>
          <declname>lpi1</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ispred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="678" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1ab5ec9d882a71f343b55c3fdbe242405b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t idaapi</type>
        <definition>size_t idaapi abstract_graph_t::num_crossings</definition>
        <argsstring>(const graph_row_info_t &amp;gri, const array_of_intmap_t &amp;nodepi) const</argsstring>
        <name>num_crossings</name>
        <param>
          <type>const <ref refid="graph_8hpp_1aad0d514605345a6a88e930c152ce48ff" kindref="member">graph_row_info_t</ref> &amp;</type>
          <declname>gri</declname>
        </param>
        <param>
          <type>const <ref refid="classqvector" kindref="compound">array_of_intmap_t</ref> &amp;</type>
          <declname>nodepi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="682" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a2139e5b682cd801dff4ccde303299c32" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi abstract_graph_t::calc_x_coord</definition>
        <argsstring>(const row_info_t &amp;ri, int idx, bool ispred, int first_added_node) const</argsstring>
        <name>calc_x_coord</name>
        <param>
          <type>const <ref refid="structrow__info__t" kindref="compound">row_info_t</ref> &amp;</type>
          <declname>ri</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ispred</declname>
        </param>
        <param>
          <type>int</type>
          <declname>first_added_node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="683" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a46e04b8785a0355bc5d0c1ef35e816e2" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::try_move_down</definition>
        <argsstring>(intvec_t &amp;tops, int n, int row_height) const</argsstring>
        <name>try_move_down</name>
        <param>
          <type><ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref> &amp;</type>
          <declname>tops</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row_height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="684" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classabstract__graph__t_1a7596d1f5d7b08437e5970d6ef5643f45" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::get_connected_components</definition>
        <argsstring>(intvec_t &amp;entries) const</argsstring>
        <name>get_connected_components</name>
        <param>
          <type><ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref> &amp;</type>
          <declname>entries</declname>
        </param>
        <briefdescription>
<para>Returns one entry point for each connected component. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="688" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1afbba9750fa8af070ac4db3518605f656" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi abstract_graph_t::calc_longest_pathes</definition>
        <argsstring>(const node_set_t &amp;entries, intvec_t &amp;tops, int row_height) const</argsstring>
        <name>calc_longest_pathes</name>
        <param>
          <type>const <ref refid="classnode__set__t" kindref="compound">node_set_t</ref> &amp;</type>
          <declname>entries</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref> &amp;</type>
          <declname>tops</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row_height</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find longest paths from the entries. take into account node heights. if row_height &gt; 0, then use it instead of real node heights. return max distance found </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="693" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a388178f4d78beb9752a1c71da9503a14" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::move_nodes_down</definition>
        <argsstring>(intvec_t &amp;tops, const node_ordering_t &amp;post, int first_reverser_node, int row_height) const</argsstring>
        <name>move_nodes_down</name>
        <param>
          <type><ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref> &amp;</type>
          <declname>tops</declname>
        </param>
        <param>
          <type>const <ref refid="classnode__ordering__t" kindref="compound">node_ordering_t</ref> &amp;</type>
          <declname>post</declname>
        </param>
        <param>
          <type>int</type>
          <declname>first_reverser_node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>row_height</declname>
        </param>
        <briefdescription>
<para>Move entry nodes down as much as possible. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="699" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1ac47c33ae477458d53789c1bf07b36ae2" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::create_graph_row_info</definition>
        <argsstring>(const intvec_t &amp;tops, graph_row_info_t &amp;gri, int graph_height) const</argsstring>
        <name>create_graph_row_info</name>
        <param>
          <type>const <ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref> &amp;</type>
          <declname>tops</declname>
        </param>
        <param>
          <type><ref refid="graph_8hpp_1aad0d514605345a6a88e930c152ce48ff" kindref="member">graph_row_info_t</ref> &amp;</type>
          <declname>gri</declname>
        </param>
        <param>
          <type>int</type>
          <declname>graph_height</declname>
        </param>
        <briefdescription>
<para>Create graph row info from &apos;tops&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1ad50090a0dfeab27bf30b8453ce19ae67" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::calc_row_heights</definition>
        <argsstring>(graph_row_info_t &amp;gri) const</argsstring>
        <name>calc_row_heights</name>
        <param>
          <type><ref refid="graph_8hpp_1aad0d514605345a6a88e930c152ce48ff" kindref="member">graph_row_info_t</ref> &amp;</type>
          <declname>gri</declname>
        </param>
        <briefdescription>
<para>Calculate height of each row. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="712" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a3847848b851902dd4bb2892f8143ddb3" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::minimize_crossings</definition>
        <argsstring>(graph_row_info_t &amp;gri) const</argsstring>
        <name>minimize_crossings</name>
        <param>
          <type><ref refid="graph_8hpp_1aad0d514605345a6a88e930c152ce48ff" kindref="member">graph_row_info_t</ref> &amp;</type>
          <declname>gri</declname>
        </param>
        <briefdescription>
<para>Minimize crossings. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="715" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a42908d6ce30968bd5bd88424736c124f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::set_x_coords</definition>
        <argsstring>(const graph_row_info_t &amp;gri, const node_set_t &amp;selfrefs, int first_added_node)</argsstring>
        <name>set_x_coords</name>
        <param>
          <type>const <ref refid="graph_8hpp_1aad0d514605345a6a88e930c152ce48ff" kindref="member">graph_row_info_t</ref> &amp;</type>
          <declname>gri</declname>
        </param>
        <param>
          <type>const <ref refid="classnode__set__t" kindref="compound">node_set_t</ref> &amp;</type>
          <declname>selfrefs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>first_added_node</declname>
        </param>
        <briefdescription>
<para>Calculate x coords of all nodes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="718" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1ad9339641ed5522ad2a4ee6bca0ff94e8" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::gather_edge_segments</definition>
        <argsstring>(const graph_row_info_t &amp;gri, edge_segs_vec_t &amp;ges) const</argsstring>
        <name>gather_edge_segments</name>
        <param>
          <type>const <ref refid="graph_8hpp_1aad0d514605345a6a88e930c152ce48ff" kindref="member">graph_row_info_t</ref> &amp;</type>
          <declname>gri</declname>
        </param>
        <param>
          <type>edge_segs_vec_t &amp;</type>
          <declname>ges</declname>
        </param>
        <briefdescription>
<para>Gather information about all edge segments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="724" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1acc65ca2c3f754f626fce3a96c028cf5c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::make_rect_edges</definition>
        <argsstring>(graph_row_info_t &amp;gri, const edge_segs_vec_t &amp;ges, int first_reverser_node)</argsstring>
        <name>make_rect_edges</name>
        <param>
          <type><ref refid="graph_8hpp_1aad0d514605345a6a88e930c152ce48ff" kindref="member">graph_row_info_t</ref> &amp;</type>
          <declname>gri</declname>
        </param>
        <param>
          <type>const edge_segs_vec_t &amp;</type>
          <declname>ges</declname>
        </param>
        <param>
          <type>int</type>
          <declname>first_reverser_node</declname>
        </param>
        <briefdescription>
<para>Make all edges rectangular. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="729" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a829d9f62d89a3f92e9e6df10cb3cb6bb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::assign_edge_ports</definition>
        <argsstring>(const graph_row_info_t &amp;gri, const node_set_t &amp;selfrefs)</argsstring>
        <name>assign_edge_ports</name>
        <param>
          <type>const <ref refid="graph_8hpp_1aad0d514605345a6a88e930c152ce48ff" kindref="member">graph_row_info_t</ref> &amp;</type>
          <declname>gri</declname>
        </param>
        <param>
          <type>const <ref refid="classnode__set__t" kindref="compound">node_set_t</ref> &amp;</type>
          <declname>selfrefs</declname>
        </param>
        <briefdescription>
<para>Assign ports to edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="735" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a011688754fd6c5afb59d0b9e868755d0" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::recalc_edge_widths</definition>
        <argsstring>(const edgeset_t &amp;back_edges, const edge_infos_t &amp;self_edges)</argsstring>
        <name>recalc_edge_widths</name>
        <param>
          <type>const edgeset_t &amp;</type>
          <declname>back_edges</declname>
        </param>
        <param>
          <type>const edge_infos_t &amp;</type>
          <declname>self_edges</declname>
        </param>
        <briefdescription>
<para>Recalculate width of all edges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="740" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a15f85acf76be7b529731f9c8c56577cc" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::clear_layout_info</definition>
        <argsstring>(void)</argsstring>
        <name>clear_layout_info</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Clear layout information in the graph. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="745" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1ae24bb7c20fbaaa0dc09545eb00f395cb" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::depth_first</definition>
        <argsstring>(node_ordering_t *pre, node_ordering_t *post, edge_typer_t *et) const</argsstring>
        <name>depth_first</name>
        <param>
          <type><ref refid="classnode__ordering__t" kindref="compound">node_ordering_t</ref> *</type>
          <declname>pre</declname>
        </param>
        <param>
          <type><ref refid="classnode__ordering__t" kindref="compound">node_ordering_t</ref> *</type>
          <declname>post</declname>
        </param>
        <param>
          <type>edge_typer_t *</type>
          <declname>et</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="747" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1af47d1ce594f73e13aefee87cec67ff8f" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::create_spanning_tree</definition>
        <argsstring>(edge_typer_t *et, node_set_t *entries, edgeset_t *back_edges, node_ordering_t *pre, node_ordering_t *post) const</argsstring>
        <name>create_spanning_tree</name>
        <param>
          <type>edge_typer_t *</type>
          <declname>et</declname>
        </param>
        <param>
          <type><ref refid="classnode__set__t" kindref="compound">node_set_t</ref> *</type>
          <declname>entries</declname>
        </param>
        <param>
          <type>edgeset_t *</type>
          <declname>back_edges</declname>
        </param>
        <param>
          <type><ref refid="classnode__ordering__t" kindref="compound">node_ordering_t</ref> *</type>
          <declname>pre</declname>
        </param>
        <param>
          <type><ref refid="classnode__ordering__t" kindref="compound">node_ordering_t</ref> *</type>
          <declname>post</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="752" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1aefef04f756b215e600c2c967ffff4aa7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::tree_layout</definition>
        <argsstring>(edge_typer_t &amp;et, const node_set_t &amp;entries)</argsstring>
        <name>tree_layout</name>
        <param>
          <type>edge_typer_t &amp;</type>
          <declname>et</declname>
        </param>
        <param>
          <type>const <ref refid="classnode__set__t" kindref="compound">node_set_t</ref> &amp;</type>
          <declname>entries</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="759" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a3207dc7538a4ac12fb71cb4eb893c976" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi abstract_graph_t::path_back</definition>
        <argsstring>(const array_of_node_set_t &amp;domin, int m, int n) const</argsstring>
        <name>path_back</name>
        <param>
          <type>const <ref refid="classqvector" kindref="compound">array_of_node_set_t</ref> &amp;</type>
          <declname>domin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Is there a path from M to N which terminates with a back edge to N? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="762" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1ab946a5d8537fd1b9039be0cd04acba38" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi abstract_graph_t::path_back</definition>
        <argsstring>(edge_typer_t &amp;et, int m, int n) const</argsstring>
        <name>path_back</name>
        <param>
          <type>edge_typer_t &amp;</type>
          <declname>et</declname>
        </param>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="763" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a57fbf665e421e950a2acc1324500398a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi abstract_graph_t::visit_nodes</definition>
        <argsstring>(int node, graph_node_visitor_t &amp;gv) const</argsstring>
        <name>visit_nodes</name>
        <param>
          <type>int</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="classgraph__node__visitor__t" kindref="compound">graph_node_visitor_t</ref> &amp;</type>
          <declname>gv</declname>
        </param>
        <briefdescription>
<para>Visit nodes starting from &apos;node&apos;, depth first. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="766" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1ad12e3c561147dfbf0ad289b8a548dfd6" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi abstract_graph_t::visit_paths</definition>
        <argsstring>(int node, graph_path_visitor_t &amp;gv) const</argsstring>
        <name>visit_paths</name>
        <param>
          <type>int</type>
          <declname>node</declname>
        </param>
        <param>
          <type><ref refid="structgraph__path__visitor__t" kindref="compound">graph_path_visitor_t</ref> &amp;</type>
          <declname>gv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit all possible paths starting from &apos;node&apos;. A path can not contain the same node twice. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="770" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classabstract__graph__t_1a6ef038b88867cadadfa591067a8fdd07" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>idaapi</type>
        <definition>idaapi abstract_graph_t::abstract_graph_t</definition>
        <argsstring>(void)</argsstring>
        <name>abstract_graph_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="781" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="781" bodyend="787"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a8b920fb0cd38a4a236c396969f31e468" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::clear</definition>
        <argsstring>(void)</argsstring>
        <name>clear</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="789" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a93d04fe2a2e9f239ec0e9337201b79f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::dump_graph</definition>
        <argsstring>(const char *header) const</argsstring>
        <name>dump_graph</name>
        <param>
          <type>const char *</type>
          <declname>header</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="790" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a87df7b42fd7d8af786d0270b17d62ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi abstract_graph_t::calc_bounds</definition>
        <argsstring>(rect_t *r)</argsstring>
        <name>calc_bounds</name>
        <param>
          <type><ref refid="structrect__t" kindref="compound">rect_t</ref> *</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="791" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1adfb320020fb111c84f3e81f63ecbf1a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi abstract_graph_t::calc_fitting_params</definition>
        <argsstring>(const rect_t &amp;area, graph_location_info_t *gli, double max_zoom)</argsstring>
        <name>calc_fitting_params</name>
        <param>
          <type>const <ref refid="structrect__t" kindref="compound">rect_t</ref> &amp;</type>
          <declname>area</declname>
        </param>
        <param>
          <type><ref refid="structgraph__location__info__t" kindref="compound">graph_location_info_t</ref> *</type>
          <declname>gli</declname>
        </param>
        <param>
          <type>double</type>
          <declname>max_zoom</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="792" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a773bebe7c94430a60b6c2f4b98d5b5c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int idaapi</type>
        <definition>int idaapi abstract_graph_t::for_all_nodes_edges</definition>
        <argsstring>(graph_visitor_t &amp;nev, bool visit_nodes=true)</argsstring>
        <name>for_all_nodes_edges</name>
        <param>
          <type><ref refid="classgraph__visitor__t" kindref="compound">graph_visitor_t</ref> &amp;</type>
          <declname>nev</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>visit_nodes</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="796" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1abd1c577e57aed22c636de895e9ff7d69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structedge__info__t" kindref="compound">edge_info_t</ref> *idaapi</type>
        <definition>const edge_info_t* idaapi abstract_graph_t::get_edge_ports</definition>
        <argsstring>(edge_t e, point_t &amp;s, point_t &amp;d) const</argsstring>
        <name>get_edge_ports</name>
        <param>
          <type><ref refid="structedge__t" kindref="compound">edge_t</ref></type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structpoint__t" kindref="compound">point_t</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="structpoint__t" kindref="compound">point_t</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="798" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a3ab8a1cbf9059e7beaf0316fafb75b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void idaapi</type>
        <definition>void idaapi abstract_graph_t::add_node_edges</definition>
        <argsstring>(edgevec_t &amp;dlist, int node)</argsstring>
        <name>add_node_edges</name>
        <param>
          <type><ref refid="graph_8hpp_1a26a3afa7e647348ae4180e4ec3420ce6" kindref="member">edgevec_t</ref> &amp;</type>
          <declname>dlist</declname>
        </param>
        <param>
          <type>int</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="803" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a9e6b25917c1c87a7097b8d7f73553320" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structrect__t" kindref="compound">rect_t</ref> &amp;idaapi</type>
        <definition>const rect_t&amp; idaapi abstract_graph_t::nrect</definition>
        <argsstring>(int n) const</argsstring>
        <name>nrect</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="804" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="804" bodyend="805"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1af5ebee41d3730d40a4be1bda917db435" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structedge__info__t" kindref="compound">edge_info_t</ref> *idaapi</type>
        <definition>const edge_info_t* idaapi abstract_graph_t::get_edge</definition>
        <argsstring>(edge_t e) const</argsstring>
        <name>get_edge</name>
        <param>
          <type><ref refid="structedge__t" kindref="compound">edge_t</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="806" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="806" bodyend="807"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1aea3c3336fc9034cb272c848850dbc106" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="structrect__t" kindref="compound">rect_t</ref> &amp;idaapi</type>
        <definition>virtual rect_t&amp; idaapi abstract_graph_t::nrect</definition>
        <argsstring>(int n)=0</argsstring>
        <name>nrect</name>
        <reimplementedby refid="classmutable__graph__t_1a25b11e363b5f5ec678e7a85972c78dfb">nrect</reimplementedby>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="808" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a038b7c5abca69ed48db3023513d01ff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="structedge__info__t" kindref="compound">edge_info_t</ref> *idaapi</type>
        <definition>virtual edge_info_t* idaapi abstract_graph_t::get_edge</definition>
        <argsstring>(edge_t e)=0</argsstring>
        <name>get_edge</name>
        <reimplementedby refid="classmutable__graph__t_1a75c0b7286db23fed8f0d04dc330c7e36">get_edge</reimplementedby>
        <param>
          <type><ref refid="structedge__t" kindref="compound">edge_t</ref></type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="809" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1ac3a0184bca994cd53f10628450a3263e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classabstract__graph__t" kindref="compound">abstract_graph_t</ref> *idaapi</type>
        <definition>virtual abstract_graph_t* idaapi abstract_graph_t::clone</definition>
        <argsstring>(void) const =0</argsstring>
        <name>clone</name>
        <reimplementedby refid="classmutable__graph__t_1aee22370690bae46510ede98f262e0243">clone</reimplementedby>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="810" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a0bfe2ec916f9983c9b27c5ba743ef8ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi abstract_graph_t::create_tree_layout</definition>
        <argsstring>(void)</argsstring>
        <name>create_tree_layout</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="812" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="1464" bodyend="1464"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1af215b353b9afcd56f68e2c5c5e8355df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi abstract_graph_t::create_circle_layout</definition>
        <argsstring>(point_t p, int radius)</argsstring>
        <name>create_circle_layout</name>
        <param>
          <type><ref refid="structpoint__t" kindref="compound">point_t</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="813" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="1465" bodyend="1465"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1af5e5c56baa38376df124ec09efc90908" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi abstract_graph_t::create_polar_tree_layout</definition>
        <argsstring>(point_t p, int radius)</argsstring>
        <name>create_polar_tree_layout</name>
        <param>
          <type><ref refid="structpoint__t" kindref="compound">point_t</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="814" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1acd30bf5e87669bdfd32676de0ad0fde3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi abstract_graph_t::create_radial_tree_layout</definition>
        <argsstring>(point_t p, int radius)</argsstring>
        <name>create_radial_tree_layout</name>
        <param>
          <type><ref refid="structpoint__t" kindref="compound">point_t</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radius</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="815" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1add1a2a70d5eb20e4f7e78864a21e9a89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi abstract_graph_t::create_orthogonal_layout</definition>
        <argsstring>(void)</argsstring>
        <name>create_orthogonal_layout</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="816" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1ae2c3b360def7c741ba3bb6f615ef4a5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void abstract_graph_t::set_callback</definition>
        <argsstring>(hook_cb_t *_callback, void *_ud)</argsstring>
        <name>set_callback</name>
        <param>
          <type><ref refid="ida_8hpp_1acf012fe005690e1af26e799617fc98b7" kindref="member">hook_cb_t</ref> *</type>
          <declname>_callback</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>_ud</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="818" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="818" bodyend="822"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a77ecc84d6797982155ebfb1ff3fde22e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t abstract_graph_t::vgrcall</definition>
        <argsstring>(int code, va_list va)</argsstring>
        <name>vgrcall</name>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>va</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="823" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="823" bodyend="828"/>
      </memberdef>
      <memberdef kind="function" id="classabstract__graph__t_1a4c2b7d917970556258f026bc5ff67c96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t abstract_graph_t::grcall</definition>
        <argsstring>(int code,...)</argsstring>
        <name>grcall</name>
        <param>
          <type>int</type>
          <declname>code</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="829" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="829" bodyend="836"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract graph interface. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="8">
        <label>abstract_graph_t</label>
        <link refid="classabstract__graph__t"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>gdl_graph_t</label>
        <link refid="classgdl__graph__t"/>
      </node>
      <node id="10">
        <label>mutable_graph_t</label>
        <link refid="classmutable__graph__t"/>
        <childnode refid="8" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="14">
        <label>point_t</label>
        <link refid="structpoint__t"/>
      </node>
      <node id="11">
        <label>abstract_graph_t</label>
        <link refid="classabstract__graph__t"/>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>title</edgelabel>
        </childnode>
        <childnode refid="14" relation="usage">
          <edgelabel>circle_center</edgelabel>
        </childnode>
      </node>
      <node id="13">
        <label>_qstring&lt; char &gt;</label>
        <link refid="class__qstring"/>
      </node>
      <node id="12">
        <label>gdl_graph_t</label>
        <link refid="classgdl__graph__t"/>
      </node>
    </collaborationgraph>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" line="668" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/graph.hpp" bodystart="667" bodyend="837"/>
    <listofallmembers>
      <member refid="classabstract__graph__t_1a6ef038b88867cadadfa591067a8fdd07" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>abstract_graph_t</name></member>
      <member refid="classabstract__graph__t_1a3ab8a1cbf9059e7beaf0316fafb75b32" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>add_node_edges</name></member>
      <member refid="classabstract__graph__t_1a829d9f62d89a3f92e9e6df10cb3cb6bb" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>assign_edge_ports</name></member>
      <member refid="classgdl__graph__t_1aed9c469ba507f9e65c97db4647311e62" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>begin</name></member>
      <member refid="classabstract__graph__t_1a87df7b42fd7d8af786d0270b17d62ec9" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>calc_bounds</name></member>
      <member refid="classabstract__graph__t_1a8528f3cc831e900ee32c4ef1b3a6db85" prot="private" virt="non-virtual"><scope>abstract_graph_t</scope><name>calc_cross_num</name></member>
      <member refid="classabstract__graph__t_1adfb320020fb111c84f3e81f63ecbf1a0" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>calc_fitting_params</name></member>
      <member refid="classabstract__graph__t_1afbba9750fa8af070ac4db3518605f656" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>calc_longest_pathes</name></member>
      <member refid="classabstract__graph__t_1ad50090a0dfeab27bf30b8453ce19ae67" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>calc_row_heights</name></member>
      <member refid="classabstract__graph__t_1a2139e5b682cd801dff4ccde303299c32" prot="private" virt="non-virtual"><scope>abstract_graph_t</scope><name>calc_x_coord</name></member>
      <member refid="classabstract__graph__t_1ab9426dc8f191d3064121eaf06482f050" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>callback</name></member>
      <member refid="classabstract__graph__t_1ae0b63c027a023df00339d30c66f2854b" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>callback_ud</name></member>
      <member refid="classabstract__graph__t_1afc4f317f4641327fcad7c814bc938a2a" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>circle_center</name></member>
      <member refid="classabstract__graph__t_1ab0c7e25aca53e75ebd99e8b4dcdeadde" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>circle_radius</name></member>
      <member refid="classabstract__graph__t_1a8b920fb0cd38a4a236c396969f31e468" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>clear</name></member>
      <member refid="classabstract__graph__t_1a15f85acf76be7b529731f9c8c56577cc" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>clear_layout_info</name></member>
      <member refid="classabstract__graph__t_1ac3a0184bca994cd53f10628450a3263e" prot="public" virt="pure-virtual"><scope>abstract_graph_t</scope><name>clone</name></member>
      <member refid="classabstract__graph__t_1af215b353b9afcd56f68e2c5c5e8355df" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>create_circle_layout</name></member>
      <member refid="classabstract__graph__t_1ac47c33ae477458d53789c1bf07b36ae2" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>create_graph_row_info</name></member>
      <member refid="classabstract__graph__t_1add1a2a70d5eb20e4f7e78864a21e9a89" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>create_orthogonal_layout</name></member>
      <member refid="classabstract__graph__t_1af5e5c56baa38376df124ec09efc90908" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>create_polar_tree_layout</name></member>
      <member refid="classabstract__graph__t_1acd30bf5e87669bdfd32676de0ad0fde3" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>create_radial_tree_layout</name></member>
      <member refid="classabstract__graph__t_1af47d1ce594f73e13aefee87cec67ff8f" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>create_spanning_tree</name></member>
      <member refid="classabstract__graph__t_1a0bfe2ec916f9983c9b27c5ba743ef8ac" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>create_tree_layout</name></member>
      <member refid="classabstract__graph__t_1abed2d7043d91a2a36a59954a96477bfc" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>current_layout</name></member>
      <member refid="classabstract__graph__t_1a0644747b28399609c3d4a4327dae0cf1" prot="private" virt="non-virtual"><scope>abstract_graph_t</scope><name>depth_first</name></member>
      <member refid="classabstract__graph__t_1ae24bb7c20fbaaa0dc09545eb00f395cb" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>depth_first</name></member>
      <member refid="classabstract__graph__t_1a93d04fe2a2e9f239ec0e9337201b79f9" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>dump_graph</name></member>
      <member refid="classgdl__graph__t_1a0a40e432f6cef47a21cab2a600e407d8" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>edge</name></member>
      <member refid="classgdl__graph__t_1afd89c2f37ca474eeb80266263c52a1fd" prot="public" virt="virtual"><scope>abstract_graph_t</scope><name>empty</name></member>
      <member refid="classgdl__graph__t_1a5b0ee999fad4d5a780fd3bf276715c7f" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>end</name></member>
      <member refid="classgdl__graph__t_1ac2c6eb82d3f53c7a0ec71803f691bc59" prot="public" virt="virtual"><scope>abstract_graph_t</scope><name>entry</name></member>
      <member refid="classgdl__graph__t_1a8e26312ef1b714a18198bef6d799c258" prot="public" virt="virtual"><scope>abstract_graph_t</scope><name>exists</name></member>
      <member refid="classgdl__graph__t_1a4860b7baf2db01da12f2b0c4f209bf9c" prot="public" virt="virtual"><scope>abstract_graph_t</scope><name>exit</name></member>
      <member refid="classabstract__graph__t_1ac384a5f94db0c3ba7e6132fd1d6f7b1b" prot="private" virt="non-virtual"><scope>abstract_graph_t</scope><name>find_entries</name></member>
      <member refid="classabstract__graph__t_1a773bebe7c94430a60b6c2f4b98d5b5c2" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>for_all_nodes_edges</name></member>
      <member refid="classgdl__graph__t_1aedc53d9164372f5aab637bf2b2e497a0" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>front</name></member>
      <member refid="classabstract__graph__t_1ad9339641ed5522ad2a4ee6bca0ff94e8" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>gather_edge_segments</name></member>
      <member refid="classgdl__graph__t_1ab13037817c391fd6f7f3b53f169a8009" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>gen_dot</name></member>
      <member refid="classgdl__graph__t_1a637ae3e6bed2ee4a4c5c1c3a36407bc0" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>gen_dot</name></member>
      <member refid="classgdl__graph__t_1afed62cde1549127e49b34a5c03a8e344" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>gen_gdl</name></member>
      <member refid="classgdl__graph__t_1a06e3dde67682f31cb54e30f612e1905b" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>gen_gdl</name></member>
      <member refid="classabstract__graph__t_1a7596d1f5d7b08437e5970d6ef5643f45" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>get_connected_components</name></member>
      <member refid="classabstract__graph__t_1af5ebee41d3730d40a4be1bda917db435" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>get_edge</name></member>
      <member refid="classabstract__graph__t_1a038b7c5abca69ed48db3023513d01ff2" prot="public" virt="pure-virtual"><scope>abstract_graph_t</scope><name>get_edge</name></member>
      <member refid="classgdl__graph__t_1aadc912ba89cceed064de956bcf646d13" prot="public" virt="virtual"><scope>abstract_graph_t</scope><name>get_edge_color</name></member>
      <member refid="classabstract__graph__t_1abd1c577e57aed22c636de895e9ff7d69" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>get_edge_ports</name></member>
      <member refid="classgdl__graph__t_1a87253fc6388e7c3bb2c4ad72ee651a52" prot="public" virt="virtual"><scope>abstract_graph_t</scope><name>get_node_color</name></member>
      <member refid="classgdl__graph__t_1a0ca7e78eb938af72407c106fde2b9778" prot="public" virt="virtual"><scope>abstract_graph_t</scope><name>get_node_label</name></member>
      <member refid="classabstract__graph__t_1a4c2b7d917970556258f026bc5ff67c96" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>grcall</name></member>
      <member refid="classabstract__graph__t_1a7307a60062a02f5f6ee4db2c4adcf13d" prot="private" virt="non-virtual"><scope>abstract_graph_t</scope><name>longest_path</name></member>
      <member refid="classabstract__graph__t_1acc65ca2c3f754f626fce3a96c028cf5c" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>make_rect_edges</name></member>
      <member refid="classabstract__graph__t_1a3847848b851902dd4bb2892f8143ddb3" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>minimize_crossings</name></member>
      <member refid="classabstract__graph__t_1a388178f4d78beb9752a1c71da9503a14" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>move_nodes_down</name></member>
      <member refid="classgdl__graph__t_1a0e8cf052ce990f41454cfa618f318645" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>nedge</name></member>
      <member refid="classgdl__graph__t_1a62eb8090207b9cc4fa5220d4ee989596" prot="public" virt="virtual"><scope>abstract_graph_t</scope><name>node_qty</name></member>
      <member refid="classgdl__graph__t_1a0047a77ba26534621019e9b1e4a4380a" prot="public" virt="pure-virtual"><scope>abstract_graph_t</scope><name>npred</name></member>
      <member refid="classabstract__graph__t_1a9e6b25917c1c87a7097b8d7f73553320" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>nrect</name></member>
      <member refid="classabstract__graph__t_1aea3c3336fc9034cb272c848850dbc106" prot="public" virt="pure-virtual"><scope>abstract_graph_t</scope><name>nrect</name></member>
      <member refid="classgdl__graph__t_1a689fddb9fec8ae4cd95ce962934809d7" prot="public" virt="pure-virtual"><scope>abstract_graph_t</scope><name>nsucc</name></member>
      <member refid="classabstract__graph__t_1ab5ec9d882a71f343b55c3fdbe242405b" prot="private" virt="non-virtual"><scope>abstract_graph_t</scope><name>num_crossings</name></member>
      <member refid="classabstract__graph__t_1a3207dc7538a4ac12fb71cb4eb893c976" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>path_back</name></member>
      <member refid="classabstract__graph__t_1ab946a5d8537fd1b9039be0cd04acba38" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>path_back</name></member>
      <member refid="classgdl__graph__t_1ad6ad9937897af84731a3e9bbdeea75f4" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>path_exists</name></member>
      <member refid="classgdl__graph__t_1a1ff65cc040a928a19c2906757413b0da" prot="public" virt="pure-virtual"><scope>abstract_graph_t</scope><name>pred</name></member>
      <member refid="classgdl__graph__t_1a5f00823ba18caa2ef90f779adc27dbcb" prot="public" virt="virtual"><scope>abstract_graph_t</scope><name>print_edge</name></member>
      <member refid="classgdl__graph__t_1a4cde31a1b2c406d7813c09a839edd4ea" prot="public" virt="virtual"><scope>abstract_graph_t</scope><name>print_graph_attributes</name></member>
      <member refid="classgdl__graph__t_1ad1d859c9dacc717bb175e259a7ea3e70" prot="public" virt="virtual"><scope>abstract_graph_t</scope><name>print_node</name></member>
      <member refid="classgdl__graph__t_1a2097da98314a6608f372e03ed8978227" prot="public" virt="virtual"><scope>abstract_graph_t</scope><name>print_node_attributes</name></member>
      <member refid="classabstract__graph__t_1a011688754fd6c5afb59d0b9e868755d0" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>recalc_edge_widths</name></member>
      <member refid="classabstract__graph__t_1a18f4333cbb5733868b944a378c441128" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>rect_edges_made</name></member>
      <member refid="classabstract__graph__t_1a0a3118b502f17649a3b2f839668105c1" prot="private" virt="non-virtual"><scope>abstract_graph_t</scope><name>remove_reachable</name></member>
      <member refid="classabstract__graph__t_1ae2c3b360def7c741ba3bb6f615ef4a5a" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>set_callback</name></member>
      <member refid="classabstract__graph__t_1a42908d6ce30968bd5bd88424736c124f" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>set_x_coords</name></member>
      <member refid="classgdl__graph__t_1ab9bd673accc6dec4ec3d7c198eef8a78" prot="public" virt="pure-virtual"><scope>abstract_graph_t</scope><name>size</name></member>
      <member refid="classabstract__graph__t_1a80f123fbdc84465afcaaee31d46eac1e" prot="private" virt="non-virtual"><scope>abstract_graph_t</scope><name>sort_layer_nodes</name></member>
      <member refid="classgdl__graph__t_1a9df8cfd864e97acfc9237ff5b0a5de69" prot="public" virt="pure-virtual"><scope>abstract_graph_t</scope><name>succ</name></member>
      <member refid="classabstract__graph__t_1a97db2f403faeb9b33ae919dd379b08d7" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>title</name></member>
      <member refid="classabstract__graph__t_1aefef04f756b215e600c2c967ffff4aa7" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>tree_layout</name></member>
      <member refid="classabstract__graph__t_1a46e04b8785a0355bc5d0c1ef35e816e2" prot="private" virt="non-virtual"><scope>abstract_graph_t</scope><name>try_move_down</name></member>
      <member refid="classabstract__graph__t_1a77ecc84d6797982155ebfb1ff3fde22e" prot="public" virt="non-virtual"><scope>abstract_graph_t</scope><name>vgrcall</name></member>
      <member refid="classabstract__graph__t_1a57fbf665e421e950a2acc1324500398a" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>visit_nodes</name></member>
      <member refid="classabstract__graph__t_1ad12e3c561147dfbf0ad289b8a548dfd6" prot="protected" virt="non-virtual"><scope>abstract_graph_t</scope><name>visit_paths</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
