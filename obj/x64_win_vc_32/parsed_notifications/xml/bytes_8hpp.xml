<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="bytes_8hpp" kind="file" language="C++">
    <compoundname>bytes.hpp</compoundname>
    <includes refid="nalt_8hpp" local="no">nalt.hpp</includes>
    <includes refid="lines_8hpp" local="no">lines.hpp</includes>
    <includes refid="range_8hpp" local="no">range.hpp</includes>
    <includedby refid="struct_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/struct.hpp</includedby>
    <includedby refid="ua_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/ua.hpp</includedby>
    <includedby refid="funcs_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/funcs.hpp</includedby>
    <incdepgraph>
      <node id="91">
        <label>sys/stat.h</label>
      </node>
      <node id="75">
        <label>stdarg.h</label>
      </node>
      <node id="78">
        <label>assert.h</label>
      </node>
      <node id="72">
        <label>ida.hpp</label>
        <link refid="ida_8hpp"/>
        <childnode refid="73" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="74">
        <label>stdlib.h</label>
      </node>
      <node id="86">
        <label>io.h</label>
      </node>
      <node id="89">
        <label>fcntl.h</label>
      </node>
      <node id="92">
        <label>llong.hpp</label>
        <link refid="llong_8hpp_source"/>
      </node>
      <node id="84">
        <label>malloc.h</label>
      </node>
      <node id="83">
        <label>string</label>
      </node>
      <node id="88">
        <label>map</label>
      </node>
      <node id="87">
        <label>direct.h</label>
      </node>
      <node id="76">
        <label>stddef.h</label>
      </node>
      <node id="71">
        <label>nalt.hpp</label>
        <link refid="nalt_8hpp"/>
        <childnode refid="72" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
      <node id="95">
        <label>lines.hpp</label>
        <link refid="lines_8hpp"/>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="79">
        <label>limits.h</label>
      </node>
      <node id="90">
        <label>sys/types.h</label>
      </node>
      <node id="85">
        <label>string.h</label>
      </node>
      <node id="82">
        <label>new</label>
      </node>
      <node id="73">
        <label>pro.h</label>
        <link refid="pro_8h"/>
        <childnode refid="74" relation="include">
        </childnode>
        <childnode refid="75" relation="include">
        </childnode>
        <childnode refid="76" relation="include">
        </childnode>
        <childnode refid="77" relation="include">
        </childnode>
        <childnode refid="78" relation="include">
        </childnode>
        <childnode refid="79" relation="include">
        </childnode>
        <childnode refid="80" relation="include">
        </childnode>
        <childnode refid="81" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
      </node>
      <node id="81">
        <label>time.h</label>
      </node>
      <node id="70">
        <label>obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp</label>
        <link refid="bytes_8hpp"/>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="80">
        <label>ctype.h</label>
      </node>
      <node id="93">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
      </node>
      <node id="94">
        <label>netnode.hpp</label>
        <link refid="netnode_8hpp"/>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="77">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="106">
        <label>obj/x64_linux_gcc_32_opt/idasdk/intel.hpp</label>
        <link refid="intel_8hpp_source"/>
      </node>
      <node id="98">
        <label>obj/x64_linux_gcc_32_opt/idasdk/ua.hpp</label>
        <link refid="ua_8hpp"/>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="111" relation="include">
        </childnode>
      </node>
      <node id="109">
        <label>obj/x64_linux_gcc_32_opt/idasdk/ida_highlighter.hpp</label>
        <link refid="ida__highlighter_8hpp_source"/>
      </node>
      <node id="111">
        <label>obj/x64_linux_gcc_32_opt/idasdk/idd.hpp</label>
        <link refid="idd_8hpp"/>
        <childnode refid="101" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>obj/x64_linux_gcc_32_opt/idasdk/idp.hpp</label>
        <link refid="idp_8hpp"/>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
      </node>
      <node id="101">
        <label>obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp</label>
        <link refid="dbg_8hpp"/>
      </node>
      <node id="99">
        <label>obj/x64_linux_gcc_32_opt/idasdk/jumptable.hpp</label>
        <link refid="jumptable_8hpp_source"/>
      </node>
      <node id="97">
        <label>obj/x64_linux_gcc_32_opt/idasdk/struct.hpp</label>
        <link refid="struct_8hpp"/>
      </node>
      <node id="107">
        <label>obj/x64_linux_gcc_32_opt/idasdk/graph.hpp</label>
        <link refid="graph_8hpp"/>
      </node>
      <node id="113">
        <label>obj/x64_linux_gcc_32_opt/idasdk/gdl.hpp</label>
        <link refid="gdl_8hpp"/>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
      </node>
      <node id="110">
        <label>obj/x64_linux_gcc_32_opt/idasdk/tstfeat.hpp</label>
        <link refid="tstfeat_8hpp_source"/>
      </node>
      <node id="112">
        <label>obj/x64_linux_gcc_32_opt/idasdk/funcs.hpp</label>
        <link refid="funcs_8hpp"/>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
      </node>
      <node id="108">
        <label>obj/x64_linux_gcc_32_opt/idasdk/expr.hpp</label>
        <link refid="expr_8hpp"/>
        <childnode refid="109" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
      </node>
      <node id="102">
        <label>obj/x64_linux_gcc_32_opt/idasdk/frame.hpp</label>
        <link refid="frame_8hpp"/>
      </node>
      <node id="96">
        <label>obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp</label>
        <link refid="bytes_8hpp"/>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
      </node>
      <node id="103">
        <label>obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp</label>
        <link refid="typeinf_8hpp"/>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
      </node>
      <node id="105">
        <label>obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp</label>
        <link refid="hexrays_8hpp_source"/>
      </node>
      <node id="104">
        <label>obj/x64_linux_gcc_32_opt/idasdk/lumina.hpp</label>
        <link refid="lumina_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structdata__type__t" prot="public">data_type_t</innerclass>
    <innerclass refid="structdata__format__t" prot="public">data_format_t</innerclass>
    <innerclass refid="structcompiled__binpat__t" prot="public">compiled_binpat_t</innerclass>
    <innerclass refid="structhidden__range__t" prot="public">hidden_range_t</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___i_t_e_m___e_n_d___1ga9e19f02291abf44b1085a054451b2fa4" prot="public" static="no">
        <name>ITEM_END_FIXUP</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>stop at the first fixup </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="252" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i_t_e_m___e_n_d___1gacd4b59c6b40268ce8458dd8ac3943744" prot="public" static="no">
        <name>ITEM_END_INITED</name>
        <initializer>0x0002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>stop when initialization changes i.e.<itemizedlist>
<listitem><para>if is_loaded(ea): stop if uninitialized byte is encountered</para></listitem><listitem><para>if !is_loaded(ea): stop if initialized byte is encountered </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="253" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i_t_e_m___e_n_d___1gaea13487068716c9257da0bae472f8871" prot="public" static="no">
        <name>ITEM_END_NAME</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>stop at the first named location </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="257" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="257" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i_t_e_m___e_n_d___1ga8fb7e759f8c4385e37eb5dc5dd715df7" prot="public" static="no">
        <name>ITEM_END_XREF</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>stop at the first referenced location </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="258" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="258" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bytes_8hpp_1a3d17030d2a562f8b77e1d346d1d70c5f" prot="public" static="no">
        <name>GFE_VALUE</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get flags with <ref refid="group___f_f___1gaee726806a07a06c9a7dcba795485e11c" kindref="member">FF_IVL</ref> &amp; <ref refid="group___f_f___1gad190bb3962a654369210c8e14e23aa09" kindref="member">MS_VAL</ref>. It is much slower under remote debugging because the kernel needs to read the process memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="282" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f___1gad190bb3962a654369210c8e14e23aa09" prot="public" static="no">
        <name>MS_VAL</name>
        <initializer>0x000000FFLU</initializer>
        <briefdescription>
<para>Mask for byte value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="316" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f___1gaee726806a07a06c9a7dcba795485e11c" prot="public" static="no">
        <name>FF_IVL</name>
        <initializer>0x00000100LU</initializer>
        <briefdescription>
<para>Byte has value ? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="317" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_m_b___1gad0d8f0e465c80c8fe55a935559d80fcf" prot="public" static="no">
        <name>GMB_READALL</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para>if this bit is not set, fail at first uninited byte </para>        </briefdescription>
        <detaileddescription>
<para>try to read all bytes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="679" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="679" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_m_b___1ga99481a092dc371f6636721f11bb0e450" prot="public" static="no">
        <name>GMB_WAITBOX</name>
        <initializer>0x02</initializer>
        <briefdescription>
<para>show wait box (may return -1 in this case) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="681" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="681" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statebits_1ga630a903251f31c6f099cfce708498d99" prot="public" static="no">
        <name>MS_CLS</name>
        <initializer>0x00000600LU</initializer>
        <briefdescription>
<para>Mask for typing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="723" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="723" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statebits_1gacb1e52d0b6bcfce13bfb81dcb793f447" prot="public" static="no">
        <name>FF_CODE</name>
        <initializer>0x00000600LU</initializer>
        <briefdescription>
<para>Code ? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="724" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="724" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statebits_1gac5493ad1870bae8ce9f5877aa4d571ba" prot="public" static="no">
        <name>FF_DATA</name>
        <initializer>0x00000400LU</initializer>
        <briefdescription>
<para>Data ? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="725" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statebits_1gaeead14ecfc3f786262724e1c972d9578" prot="public" static="no">
        <name>FF_TAIL</name>
        <initializer>0x00000200LU</initializer>
        <briefdescription>
<para>Tail ? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="726" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="726" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statebits_1ga29948064e290fa7beaf29dd59554bb24" prot="public" static="no">
        <name>FF_UNK</name>
        <initializer>0x00000000LU</initializer>
        <briefdescription>
<para>Unknown ? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="727" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="727" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_e_l_i_t___1ga9c15a46c8b13af0ca2eba81c518f6e85" prot="public" static="no">
        <name>DELIT_SIMPLE</name>
        <initializer>0x0000</initializer>
        <briefdescription>
<para>simply undefine the specified item(s) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="789" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="789" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_e_l_i_t___1ga22b692b10e0343910ae487c7b16be500" prot="public" static="no">
        <name>DELIT_EXPAND</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>propagate undefined items; for example if removing an instruction removes all references to the next instruction, then plan to convert to unexplored the next instruction too. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="790" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_e_l_i_t___1gaa25f19f8244498e366ee6d4e67c1f87f" prot="public" static="no">
        <name>DELIT_DELNAMES</name>
        <initializer>0x0002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>delete any names at the specified address range (except for the starting address). this bit is valid if nbytes &gt; 1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="795" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="795" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_e_l_i_t___1ga1474329a9302a019197e0c4b9bcc87cb" prot="public" static="no">
        <name>DELIT_NOTRUNC</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>even if <ref refid="group___a_f___1ga3c25b68da3beb76b2710bbaf22481d1f" kindref="member">AF_TRFUNC</ref> is set </para>        </briefdescription>
        <detaileddescription>
<para>don&apos;t truncate the current function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="798" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="798" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_e_l_i_t___1ga961a68bf588417b7af6b18f1e06a3188" prot="public" static="no">
        <name>DELIT_NOUNAME</name>
        <initializer>0x0008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reject to delete if a user name is in address range (except for the starting address). this bit is valid if nbytes &gt; 1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="800" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="800" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___d_e_l_i_t___1ga9449948e27d8358dfc5675a91af223c2" prot="public" static="no">
        <name>DELIT_NOCMT</name>
        <initializer>0x0010</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>reject to delete if a comment is in address range (except for the starting address). this bit is valid if nbytes &gt; 1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="803" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="803" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statespecb_1ga12d8165f474f9ce7b446a01cd62c2487" prot="public" static="no">
        <name>MS_COMM</name>
        <initializer>0x000FF800</initializer>
        <briefdescription>
<para>Mask of common bits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="843" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="843" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statespecb_1ga9d6bc18df575117f77e88358999ae774" prot="public" static="no">
        <name>FF_COMM</name>
        <initializer>0x00000800</initializer>
        <briefdescription>
<para>Has comment ? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="844" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statespecb_1ga994226340d4ab0a913663fc0aaffce8e" prot="public" static="no">
        <name>FF_REF</name>
        <initializer>0x00001000</initializer>
        <briefdescription>
<para>has references </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="845" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="845" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statespecb_1ga05134ba46e9573b1444b30a5b9ef7e14" prot="public" static="no">
        <name>FF_LINE</name>
        <initializer>0x00002000</initializer>
        <briefdescription>
<para>Has next or prev lines ? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="846" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="846" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statespecb_1ga4bee89a4355fe06b0cf8f8881475960c" prot="public" static="no">
        <name>FF_NAME</name>
        <initializer>0x00004000</initializer>
        <briefdescription>
<para>Has name ? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="847" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statespecb_1ga46eea0cd558a2594c66d6cc3241833c6" prot="public" static="no">
        <name>FF_LABL</name>
        <initializer>0x00008000</initializer>
        <briefdescription>
<para>Has dummy name? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="848" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="848" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statespecb_1ga8042b10b442ee112b6d00e14bc135623" prot="public" static="no">
        <name>FF_FLOW</name>
        <initializer>0x00010000</initializer>
        <briefdescription>
<para>Exec flow from prev instruction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="849" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="849" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statespecb_1gadeb69389901255a7f2cfaeb81336a620" prot="public" static="no">
        <name>FF_SIGN</name>
        <initializer>0x00020000</initializer>
        <briefdescription>
<para>Inverted sign of operands. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="850" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statespecb_1ga58cac9e7dc42b33513c0224d0e245c49" prot="public" static="no">
        <name>FF_BNOT</name>
        <initializer>0x00040000</initializer>
        <briefdescription>
<para>Bitwise negation of operands. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="851" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statespecb_1ga21bb5ad0320c00cd43c208362c523b6c" prot="public" static="no">
        <name>FF_UNUSED</name>
        <initializer>0x00080000</initializer>
        <briefdescription>
<para>unused bit (was used for variable bytes) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="852" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="852" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__statespecf_1ga6aa5094f3e997ff568895358880357d9" prot="public" static="no">
        <name>FF_ANYNAME</name>
        <initializer>(<ref refid="group___f_f__statespecb_1ga46eea0cd558a2594c66d6cc3241833c6" kindref="member">FF_LABL</ref>|<ref refid="group___f_f__statespecb_1ga4bee89a4355fe06b0cf8f8881475960c" kindref="member">FF_NAME</ref>)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="887" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="887" bodyend="883"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga82c35fed1b6c4b01b773184c8ce1a4f3" prot="public" static="no">
        <name>MS_0TYPE</name>
        <initializer>0x00F00000LU</initializer>
        <briefdescription>
<para>Mask for 1st arg typing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="979" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="979" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1gaaf9f4f98e5c595bf91b47da328e5d06d" prot="public" static="no">
        <name>FF_0VOID</name>
        <initializer>0x00000000LU</initializer>
        <briefdescription>
<para>Void (unknown)? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="980" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="980" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1gaa4e2ad07155437e8c392b9c064cd66fa" prot="public" static="no">
        <name>FF_0NUMH</name>
        <initializer>0x00100000LU</initializer>
        <briefdescription>
<para>Hexadecimal number? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="981" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="981" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga3af1ddbddfdb8e1f77b462162d2ba2e6" prot="public" static="no">
        <name>FF_0NUMD</name>
        <initializer>0x00200000LU</initializer>
        <briefdescription>
<para>Decimal number? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="982" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="982" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga80c582884ce7200b0df1e59368334e09" prot="public" static="no">
        <name>FF_0CHAR</name>
        <initializer>0x00300000LU</initializer>
        <briefdescription>
<para>Char (&apos;x&apos;)? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="983" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="983" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga19aaa67b0baa1715a6bf5331ed51f784" prot="public" static="no">
        <name>FF_0SEG</name>
        <initializer>0x00400000LU</initializer>
        <briefdescription>
<para>Segment? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="984" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="984" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1gaa6d0966683ae2a0b5031c6c7cda0938a" prot="public" static="no">
        <name>FF_0OFF</name>
        <initializer>0x00500000LU</initializer>
        <briefdescription>
<para>Offset? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="985" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="985" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga9d8e09d6489e97ea9b03d6ec57c41cec" prot="public" static="no">
        <name>FF_0NUMB</name>
        <initializer>0x00600000LU</initializer>
        <briefdescription>
<para>Binary number? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="986" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="986" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga3bfc6e0ccc68d08dde2f8a5ef5960dd2" prot="public" static="no">
        <name>FF_0NUMO</name>
        <initializer>0x00700000LU</initializer>
        <briefdescription>
<para>Octal number? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="987" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="987" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1gaa04d117bed5a572775dc74c90e236045" prot="public" static="no">
        <name>FF_0ENUM</name>
        <initializer>0x00800000LU</initializer>
        <briefdescription>
<para>Enumeration? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="988" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="988" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga890355e2b7e1ef79d7cf86e070ec5940" prot="public" static="no">
        <name>FF_0FOP</name>
        <initializer>0x00900000LU</initializer>
        <briefdescription>
<para>Forced operand? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="989" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="989" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1gaaec2c3caf40f91db306abaa7a56459ec" prot="public" static="no">
        <name>FF_0STRO</name>
        <initializer>0x00A00000LU</initializer>
        <briefdescription>
<para>Struct offset? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="990" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="990" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga9441d021945744b52cdf192648752583" prot="public" static="no">
        <name>FF_0STK</name>
        <initializer>0x00B00000LU</initializer>
        <briefdescription>
<para>Stack variable? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="991" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="991" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga9620221d8d97cf94833794a36718069f" prot="public" static="no">
        <name>FF_0FLT</name>
        <initializer>0x00C00000LU</initializer>
        <briefdescription>
<para>Floating point number? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="992" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="992" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1gae0dcead49d9516ec9b270867e2f3bee9" prot="public" static="no">
        <name>FF_0CUST</name>
        <initializer>0x00D00000LU</initializer>
        <briefdescription>
<para>Custom representation? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="993" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="993" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga87aa42acf2ce698192cb01fe82df9900" prot="public" static="no">
        <name>MS_1TYPE</name>
        <initializer>0x0F000000LU</initializer>
        <briefdescription>
<para>Mask for the type of other operands. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="995" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="995" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga07793dee8abc7c1d4c78cff8efecba00" prot="public" static="no">
        <name>FF_1VOID</name>
        <initializer>0x00000000LU</initializer>
        <briefdescription>
<para>Void (unknown)? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="996" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="996" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1gaf3a74b4501579a2e698b6dce9a720fdd" prot="public" static="no">
        <name>FF_1NUMH</name>
        <initializer>0x01000000LU</initializer>
        <briefdescription>
<para>Hexadecimal number? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="997" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="997" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga93fd38cc7868072430238690c2c5abdc" prot="public" static="no">
        <name>FF_1NUMD</name>
        <initializer>0x02000000LU</initializer>
        <briefdescription>
<para>Decimal number? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="998" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="998" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga8c5700ba2a64da2f60745e909cc9fc8b" prot="public" static="no">
        <name>FF_1CHAR</name>
        <initializer>0x03000000LU</initializer>
        <briefdescription>
<para>Char (&apos;x&apos;)? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="999" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="999" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga811586f74776fafe4e704e4cff956732" prot="public" static="no">
        <name>FF_1SEG</name>
        <initializer>0x04000000LU</initializer>
        <briefdescription>
<para>Segment? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1000" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1000" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1gaab2d267e73af067b5d309e04676b0fda" prot="public" static="no">
        <name>FF_1OFF</name>
        <initializer>0x05000000LU</initializer>
        <briefdescription>
<para>Offset? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1001" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1001" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1gadb7ad8775d87fefb150788d8911dcc44" prot="public" static="no">
        <name>FF_1NUMB</name>
        <initializer>0x06000000LU</initializer>
        <briefdescription>
<para>Binary number? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1002" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1002" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga800d73c5451a7b0a8e0d4e9ccdb4da9d" prot="public" static="no">
        <name>FF_1NUMO</name>
        <initializer>0x07000000LU</initializer>
        <briefdescription>
<para>Octal number? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1003" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1003" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1gac40430c9f4915d8c8847c97bf06ee6c6" prot="public" static="no">
        <name>FF_1ENUM</name>
        <initializer>0x08000000LU</initializer>
        <briefdescription>
<para>Enumeration? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1004" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1004" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga2e9d423fd0f477a6bd624372328bcb51" prot="public" static="no">
        <name>FF_1FOP</name>
        <initializer>0x09000000LU</initializer>
        <briefdescription>
<para>Forced operand? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1005" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1005" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1gaa07a5be0d5ff9c83b1eb8fdb0b858e04" prot="public" static="no">
        <name>FF_1STRO</name>
        <initializer>0x0A000000LU</initializer>
        <briefdescription>
<para>Struct offset? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1006" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1006" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga4067ae22171d2d0a8e799a4f4a2b07e1" prot="public" static="no">
        <name>FF_1STK</name>
        <initializer>0x0B000000LU</initializer>
        <briefdescription>
<para>Stack variable? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1007" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1007" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga995fb81dcdc0c36c67b8ef58e3b9ec68" prot="public" static="no">
        <name>FF_1FLT</name>
        <initializer>0x0C000000LU</initializer>
        <briefdescription>
<para>Floating point number? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1008" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1008" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__opbits_1ga1d37399363e4d590263845013eb74159" prot="public" static="no">
        <name>FF_1CUST</name>
        <initializer>0x0D000000LU</initializer>
        <briefdescription>
<para>Custom representation? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1009" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1009" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__op_1gae3ff56ce8ed4030acdca9d9314038dfb" prot="public" static="no">
        <name>OPND_OUTER</name>
        <initializer>0x80</initializer>
        <briefdescription>
<para>used only in set, get, del_offset() functions </para>        </briefdescription>
        <detaileddescription>
<para>outer offset base (combined with operand number). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1131" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__op_1ga3177b4c883cc4b74938f6fb7559587c0" prot="public" static="no">
        <name>OPND_MASK</name>
        <initializer>0x0F</initializer>
        <briefdescription>
<para>mask for operand number </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1133" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__op_1ga88c9062b3ef1f5460266a4a6426ff0fe" prot="public" static="no">
        <name>OPND_ALL</name>
        <initializer><ref refid="group___f_f__op_1ga3177b4c883cc4b74938f6fb7559587c0" kindref="member">OPND_MASK</ref></initializer>
        <briefdescription>
<para>all operands </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1134" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1gaa15fa9a90fbd9080a18471dcc51c5f63" prot="public" static="no">
        <name>DT_TYPE</name>
        <initializer>0xF0000000</initializer>
        <briefdescription>
<para>Mask for DATA typing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1347" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1ga31e184e1e9e9986dccb2bf75a5cc281a" prot="public" static="no">
        <name>FF_BYTE</name>
        <initializer>0x00000000</initializer>
        <briefdescription>
<para>byte </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1349" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1ga700e6fe75ce2d59afe9f0337419e5fb3" prot="public" static="no">
        <name>FF_WORD</name>
        <initializer>0x10000000</initializer>
        <briefdescription>
<para>word </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1350" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1ga113c39256aa0eb30138fc3dcbbb1b224" prot="public" static="no">
        <name>FF_DWORD</name>
        <initializer>0x20000000</initializer>
        <briefdescription>
<para>double word </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1351" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1351" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1ga74d61c8ba1d3bedefbd3e619f1f4116a" prot="public" static="no">
        <name>FF_QWORD</name>
        <initializer>0x30000000</initializer>
        <briefdescription>
<para>quadro word </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1352" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1352" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1ga8b0cb6734338e1ed1a3188d6b4c70b8f" prot="public" static="no">
        <name>FF_TBYTE</name>
        <initializer>0x40000000</initializer>
        <briefdescription>
<para>tbyte </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1353" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1gaa320c33a480cc1403e0c7912ee1bd522" prot="public" static="no">
        <name>FF_STRLIT</name>
        <initializer>0x50000000</initializer>
        <briefdescription>
<para>string literal </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1354" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1354" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1ga303e1d05f0fd18c165ff0c2c7e4aa4de" prot="public" static="no">
        <name>FF_STRUCT</name>
        <initializer>0x60000000</initializer>
        <briefdescription>
<para>struct variable </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1355" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1ga6102a6e3eebb8350527c7613792080ae" prot="public" static="no">
        <name>FF_OWORD</name>
        <initializer>0x70000000</initializer>
        <briefdescription>
<para>octaword/xmm word (16 bytes/128 bits) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1356" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1gadc1e062047911a7fda90a84959fa49bc" prot="public" static="no">
        <name>FF_FLOAT</name>
        <initializer>0x80000000</initializer>
        <briefdescription>
<para>float </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1357" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1357" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1ga709bb154304e65d8991bc081a182ce2e" prot="public" static="no">
        <name>FF_DOUBLE</name>
        <initializer>0x90000000</initializer>
        <briefdescription>
<para>double </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1358" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1358" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1gaa0adb817e6662035bd7d06346c01c864" prot="public" static="no">
        <name>FF_PACKREAL</name>
        <initializer>0xA0000000</initializer>
        <briefdescription>
<para>packed decimal real </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1359" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1ga61f222cbe3cbe2570892096fc7dc1e8c" prot="public" static="no">
        <name>FF_ALIGN</name>
        <initializer>0xB0000000</initializer>
        <briefdescription>
<para>alignment directive </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1360" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1360" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1ga19f933094d6c5c52e6f9861d533d1382" prot="public" static="no">
        <name>FF_CUSTOM</name>
        <initializer>0xD0000000</initializer>
        <briefdescription>
<para>custom data type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1362" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1362" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1ga4c5878e95aef45b3816e5cfcf16cacb9" prot="public" static="no">
        <name>FF_YWORD</name>
        <initializer>0xE0000000</initializer>
        <briefdescription>
<para>ymm word (32 bytes/256 bits) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1363" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1363" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__databits_1ga3c513c72624ec1d284f2c3e9f295a6e8" prot="public" static="no">
        <name>FF_ZWORD</name>
        <initializer>0xF0000000</initializer>
        <briefdescription>
<para>zmm word (64 bytes/512 bits) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1364" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_l_o_p_t___1gab515dd7718288c757c1cba570a710896" prot="public" static="no">
        <name>ALOPT_IGNHEADS</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>don&apos;t stop if another data item is encountered. only the byte values will be used to determine the string length. if not set, a defined data item or instruction will truncate the string </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1486" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1486" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_l_o_p_t___1gadf395d86b486517c3cc5eb4a58520ca3" prot="public" static="no">
        <name>ALOPT_IGNPRINT</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if set, don&apos;t stop at non-printable codepoints, but only at the terminating character (or not unicode-mapped character (e.g., 0x8f in CP1252)) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1491" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1491" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_l_o_p_t___1gaae8f8e66acfe569719d195aec70ab78f" prot="public" static="no">
        <name>ALOPT_IGNCLT</name>
        <initializer>0x04</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if set, don&apos;t stop at codepoints that are not part of the current &apos;culture&apos;; accept all those that are graphical (this is typically used used by user-initiated actions creating string literals.) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1494" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1494" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___a_l_o_p_t___1gaf86e241f7cae7281412eb1d40d503beb" prot="public" static="no">
        <name>ALOPT_MAX4K</name>
        <initializer>0x08</initializer>
        <briefdescription>
<para>accumulated length </para>        </briefdescription>
        <detaileddescription>
<para>if string length is more than 4K, return the </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1499" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1499" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_c_o_n_v___1ga888b2ff38fbe15c6647f35bbbd353c97" prot="public" static="no">
        <name>STRCONV_ESCAPE</name>
        <initializer>0x00000001</initializer>
        <briefdescription>
<para>convert non-printable characters to C escapes (<linebreak/>
, , ) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1519" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1519" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_c_o_n_v___1gac9d42fda7a9cebc1ae84bf61ce82286b" prot="public" static="no">
        <name>STRCONV_REPLCHAR</name>
        <initializer>0x00000002</initializer>
        <briefdescription>
<para>convert non-printable characters to the Unicode replacement character (U+FFFD) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1520" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_t_r_c_o_n_v___1gafede03762eff206fbc9eb2f14aa011d5" prot="public" static="no">
        <name>STRCONV_INCLLEN</name>
        <initializer>0x00000004</initializer>
        <briefdescription>
<para>for Pascal-style strings, include the prefixing length byte(s) as C-escaped sequence </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1521" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1521" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_s_t_f___1ga55520a48755b26a37c63b59250b5ad4c" prot="public" static="no">
        <name>PSTF_TNORM</name>
        <initializer>0</initializer>
        <briefdescription>
<para>use normal name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1581" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1581" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_s_t_f___1ga4129f54c57630bff48b9fa71cbef31b1" prot="public" static="no">
        <name>PSTF_TBRIEF</name>
        <initializer>1</initializer>
        <briefdescription>
<para>use brief name (e.g., in the &apos;Strings window&apos;) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1582" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1582" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_s_t_f___1ga44c76ea69adb0d8c484a6fe77673e873" prot="public" static="no">
        <name>PSTF_TINLIN</name>
        <initializer>2</initializer>
        <briefdescription>
<para>use &apos;inline&apos; name (e.g., in the structures comments) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1583" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1583" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_s_t_f___1gae81c3982cae280236b0cf597d0ed81df" prot="public" static="no">
        <name>PSTF_TMASK</name>
        <initializer>3</initializer>
        <briefdescription>
<para>type mask </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1584" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1584" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_s_t_f___1gac50c7640745f0bab67b3d9fc642e6729" prot="public" static="no">
        <name>PSTF_HOTKEY</name>
        <initializer>0x4</initializer>
        <briefdescription>
<para>have hotkey markers part of the name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1585" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1585" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___p_s_t_f___1gae76b4134e191a511a0461697144e01dd" prot="public" static="no">
        <name>PSTF_ENC</name>
        <initializer>0x8</initializer>
        <briefdescription>
<para>if encoding is specified, append it </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1586" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1586" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__codebits_1ga0b0793209a0a00bc39014ff3a4c5fae1" prot="public" static="no">
        <name>MS_CODE</name>
        <initializer>0xF0000000LU</initializer>
        <briefdescription>
<para>Mask for code bits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1722" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1722" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__codebits_1ga030498a74ca4ffd002e415aaa65d4a09" prot="public" static="no">
        <name>FF_FUNC</name>
        <initializer>0x10000000LU</initializer>
        <briefdescription>
<para>function start? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1723" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1723" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__codebits_1gacea2ec7d412b8d21330145f9bd8d7543" prot="public" static="no">
        <name>FF_IMMD</name>
        <initializer>0x40000000LU</initializer>
        <briefdescription>
<para>Has Immediate value ? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1725" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_f__codebits_1ga3868bbb0c79f098fa47864144ad21e29" prot="public" static="no">
        <name>FF_JUMP</name>
        <initializer>0x80000000LU</initializer>
        <briefdescription>
<para>Has jump table or switch_info? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1726" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1726" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bytes_8hpp_1a64b8c2af1a6c1132095c17ae1165b073" prot="public" static="no">
        <name>DTP_NODUP</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>do not use dup construct </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1762" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1762" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bytes_8hpp_1abae08a5108faeede508d484c750d0cfd" prot="public" static="no">
        <name>PBSENC_DEF1BPU</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2110" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bytes_8hpp_1a2b77a00b8c7fdbc832089905f0c65858" prot="public" static="no">
        <name>PBSENC_ALL</name>
        <initializer>-1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2111" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_i_n___s_e_a_r_c_h___1ga99047fb3efd3a20d6408fe254986857c" prot="public" static="no">
        <name>BIN_SEARCH_CASE</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para>case sensitive </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2185" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_i_n___s_e_a_r_c_h___1gaa29b9e150427231bd65e722d6da5d99a" prot="public" static="no">
        <name>BIN_SEARCH_NOCASE</name>
        <initializer>0x00</initializer>
        <briefdescription>
<para>case insensitive </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2186" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_i_n___s_e_a_r_c_h___1gac5f5626f845da7e4d154298df7e578c5" prot="public" static="no">
        <name>BIN_SEARCH_NOBREAK</name>
        <initializer>0x02</initializer>
        <briefdescription>
<para>don&apos;t check for Ctrl-Break </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2187" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_i_n___s_e_a_r_c_h___1ga5e83ee3339007b1a705d90dbd3ebbd79" prot="public" static="no">
        <name>BIN_SEARCH_INITED</name>
        <initializer>0x04</initializer>
        <briefdescription>
<para>find_byte, find_byter: any initilized value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2188" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_i_n___s_e_a_r_c_h___1ga1aab574623b349dd89ca861199966da4" prot="public" static="no">
        <name>BIN_SEARCH_NOSHOW</name>
        <initializer>0x08</initializer>
        <briefdescription>
<para>don&apos;t show search progress or update screen </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2189" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2189" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_i_n___s_e_a_r_c_h___1gaae693e84230e8c73a77b586476d2228d" prot="public" static="no">
        <name>BIN_SEARCH_FORWARD</name>
        <initializer>0x00</initializer>
        <briefdescription>
<para>search forward for bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2190" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___b_i_n___s_e_a_r_c_h___1gaa61febafd80579e98ab86c9f82b6c7fb" prot="public" static="no">
        <name>BIN_SEARCH_BACKWARD</name>
        <initializer>0x10</initializer>
        <briefdescription>
<para>search backward for bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2191" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2191" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bytes_8hpp_1aa80006fc5cd3a216c0f514baad625c4d" prot="public" static="no">
        <name>SKIP_FF_MASK</name>
        <initializer>((const <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *)0xFF)</initializer>
        <briefdescription>
<para>Used by <ref refid="bytes_8hpp_1a59a144c2a218b18a54f89a083d8952d9" kindref="member">equal_bytes()</ref> to skip 0xFF when searching the program. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2235" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2235" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="bytes_8hpp_1a320dc6698b7075a653144bbdf202b30e" prot="public" static="no">
        <type><ref refid="pro_8h_1ad8791d30d19843bc09b78bdf01a852ec" kindref="member">tid_t</ref></type>
        <definition>typedef tid_t enum_t</definition>
        <argsstring></argsstring>
        <name>enum_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="15" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bytes_8hpp_1ac7890d524959057570f4a60a4f8b42c6" prot="public" static="no">
        <type>bool idaapi</type>
        <definition>typedef bool idaapi testf_t(flags_t flags, void *ud)</definition>
        <argsstring>(flags_t flags, void *ud)</argsstring>
        <name>testf_t</name>
        <briefdescription>
<para>Flag tester - see <ref refid="bytes_8hpp_1afe7267c02cc6729dda30c21179e30fb4" kindref="member">next_that()</ref>, <ref refid="bytes_8hpp_1a9b9239235749c9f940dcf96292c5f846" kindref="member">prev_that()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="112" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="bytes_8hpp_1ad2808f4f5c5def4fb4738e218ae4af52" prot="public" static="no">
        <type>bool idaapi</type>
        <definition>typedef bool idaapi may_destroy_cb_t(ea_t)</definition>
        <argsstring>(ea_t)</argsstring>
        <name>may_destroy_cb_t</name>
        <briefdescription>
<para>del_items&apos; callback function </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="767" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="767" bodyend="761"/>
      </memberdef>
      <memberdef kind="typedef" id="bytes_8hpp_1a06a4caba6273ed59a121fdac08d46cc0" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structcompiled__binpat__t" kindref="compound">compiled_binpat_t</ref> &gt;</type>
        <definition>typedef qvector&lt;compiled_binpat_t&gt; compiled_binpat_vec_t</definition>
        <argsstring></argsstring>
        <name>compiled_binpat_vec_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2108" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="bytes_8hpp_1a950c3321b5b60b6659f9d5d38f346d43" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool del_code_comments</definition>
        <argsstring></argsstring>
        <name>del_code_comments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete an indented comment attached to an instruction when the instruction is deleted </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2053" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="bytes_8hpp_1a65aceba8ff4d52c9ebc9e6ee39a57515" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman error_t ida_export enable_flags</definition>
        <argsstring>(ea_t start_ea, ea_t end_ea, storage_type_t stt)</argsstring>
        <name>enable_flags</name>
        <param>
          <type>ea_t</type>
          <declname>start_ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>end_ea</declname>
        </param>
        <param>
          <type><ref refid="ida_8hpp_1ac437eddfbf695e39512a625d8bcf94c9" kindref="member">storage_type_t</ref></type>
          <declname>stt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate flags for address range. This function does not change the storage type of existing ranges. Exit with an error message if not enough disk space. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>should be lower than end_ea. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>does not belong to the range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stt</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="ida_8hpp_1ac437eddfbf695e39512a625d8bcf94c9" kindref="member">storage_type_t</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, otherwise an error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a8bc5e1d82712ed05774378545c468757" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman error_t ida_export disable_flags</definition>
        <argsstring>(ea_t start_ea, ea_t end_ea)</argsstring>
        <name>disable_flags</name>
        <param>
          <type>ea_t</type>
          <declname>start_ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>end_ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Deallocate flags for address range. Exit with an error message if not enough disk space (this may occur too). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>should be lower than end_ea. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>does not belong to the range. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if ok, otherwise return error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1af68e23a2cf2a6befa42bb48693b89aa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a84c6c720bb5e612c64013a7d4e8acd55" kindref="member">error_t</ref> ida_export</type>
        <definition>idaman error_t ida_export change_storage_type</definition>
        <argsstring>(ea_t start_ea, ea_t end_ea, storage_type_t stt)</argsstring>
        <name>change_storage_type</name>
        <param>
          <type>ea_t</type>
          <declname>start_ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>end_ea</declname>
        </param>
        <param>
          <type><ref refid="ida_8hpp_1ac437eddfbf695e39512a625d8bcf94c9" kindref="member">storage_type_t</ref></type>
          <declname>stt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change flag storage type for address range. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>should be lower than end_ea. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>does not belong to the range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stt</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="ida_8hpp_1ac437eddfbf695e39512a625d8bcf94c9" kindref="member">storage_type_t</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>error code </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a17500720aed6570f7ae22f683bfa2be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export next_addr</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>next_addr</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get next address in the program (i.e. next address which has flags). <simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if no such address exist. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a5d97557521f544efbaef7054a92b341f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export prev_addr</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>prev_addr</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get previous address in the program. <simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if no such address exist. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ac9d3eeadd3381eec7751e5692153c0b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export next_chunk</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>next_chunk</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the first address of next contiguous chunk in the program. <simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if next chunk doesn&apos;t exist. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1afa31a0226a82fce1a1a916ee297862d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export prev_chunk</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>prev_chunk</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the last address of previous contiguous chunk in the program. <simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if previous chunk doesn&apos;t exist. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1abbd0f2cd0f755bc4926b9c8eb7bfcbc3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export chunk_start</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>chunk_start</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get start of the contiguous address block containing &apos;ea&apos;. <simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if &apos;ea&apos; doesn&apos;t belong to the program. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a70d130a713d9931620af352d45d85a1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman asize_t ida_export</type>
        <definition>idaman asize_t ida_export chunk_size</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>chunk_size</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get size of the contiguous address block containing &apos;ea&apos;. <simplesect kind="return"><para>0 if &apos;ea&apos; doesn&apos;t belong to the program. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1addf58dd8f65544276450c5af65f82553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export free_chunk</definition>
        <argsstring>(ea_t bottom, asize_t size, int32 step)</argsstring>
        <name>free_chunk</name>
        <param>
          <type>ea_t</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
          <declname>step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search for a hole in the addressing space of the program. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bottom</parametername>
</parameternamelist>
<parameterdescription>
<para>address to start searching </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of desired block </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para>bit mask for the start of hole (0xF would align hole to a paragraph). if &apos;step&apos; is negative, the bottom address with be aligned. otherwise the kernel will try to use it as is and align it only when the hole is too small. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>start of the hole or <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1afe7267c02cc6729dda30c21179e30fb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export next_that</definition>
        <argsstring>(ea_t ea, ea_t maxea, testf_t *testf, void *ud=NULL)</argsstring>
        <name>next_that</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>maxea</declname>
        </param>
        <param>
          <type><ref refid="bytes_8hpp_1ac7890d524959057570f4a60a4f8b42c6" kindref="member">testf_t</ref> *</type>
          <declname>testf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ud</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find next address with a flag satisfying the function &apos;testf&apos;. <simplesect kind="note"><para>do not pass <ref refid="group___f_f__statefuncs_1ga96fa57e4c4dcf36c8bd287d7b751f80a" kindref="member">is_unknown()</ref> to this function to find unexplored bytes. It will fail under the debugger. To find unexplored bytes, use <ref refid="bytes_8hpp_1a579bb032b20e7777b40975763c4dfd8e" kindref="member">next_unknown()</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>start searching at this address + 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxea</parametername>
</parameternamelist>
<parameterdescription>
<para>not included in the search range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>testf</parametername>
</parameternamelist>
<parameterdescription>
<para>test function to find next address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ud</parametername>
</parameternamelist>
<parameterdescription>
<para>user data - may point to anything. it will be passed to testf. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the found address or <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a579bb032b20e7777b40975763c4dfd8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t idaapi</type>
        <definition>ea_t idaapi next_unknown</definition>
        <argsstring>(ea_t ea, ea_t maxea)</argsstring>
        <name>next_unknown</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>maxea</declname>
        </param>
        <briefdescription>
<para>Similar to <ref refid="bytes_8hpp_1afe7267c02cc6729dda30c21179e30fb4" kindref="member">next_that()</ref>, but will find the next address that is unexplored. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="133" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a9b9239235749c9f940dcf96292c5f846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export prev_that</definition>
        <argsstring>(ea_t ea, ea_t minea, testf_t *testf, void *ud=NULL)</argsstring>
        <name>prev_that</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>minea</declname>
        </param>
        <param>
          <type><ref refid="bytes_8hpp_1ac7890d524959057570f4a60a4f8b42c6" kindref="member">testf_t</ref> *</type>
          <declname>testf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ud</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find previous address with a flag satisfying the function &apos;testf&apos;. <simplesect kind="note"><para>do not pass <ref refid="group___f_f__statefuncs_1ga96fa57e4c4dcf36c8bd287d7b751f80a" kindref="member">is_unknown()</ref> to this function to find unexplored bytes It will fail under the debugger. To find unexplored bytes, use <ref refid="bytes_8hpp_1a22bf55c03c21d1950b755e500576f3aa" kindref="member">prev_unknown()</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>start searching from this address - 1. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minea</parametername>
</parameternamelist>
<parameterdescription>
<para>included in the search range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>testf</parametername>
</parameternamelist>
<parameterdescription>
<para>test function to find previous address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ud</parametername>
</parameternamelist>
<parameterdescription>
<para>user data - may point to anything. it will be passed to testf. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the found address or <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a22bf55c03c21d1950b755e500576f3aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t idaapi</type>
        <definition>ea_t idaapi prev_unknown</definition>
        <argsstring>(ea_t ea, ea_t minea)</argsstring>
        <name>prev_unknown</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>minea</declname>
        </param>
        <briefdescription>
<para>Similar to <ref refid="bytes_8hpp_1a9b9239235749c9f940dcf96292c5f846" kindref="member">prev_that()</ref>, but will find the previous address that is unexplored. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="157" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a043acfcdbffac18739612799b53d0171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export prev_head</definition>
        <argsstring>(ea_t ea, ea_t minea)</argsstring>
        <name>prev_head</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>minea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get start of previous defined item. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>begin search at this address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minea</parametername>
</parameternamelist>
<parameterdescription>
<para>included in the search range </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if none exists. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ad518592ca7940ed8b019ed4d35661287" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export next_head</definition>
        <argsstring>(ea_t ea, ea_t maxea)</argsstring>
        <name>next_head</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>maxea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get start of next defined item. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>begin search at this address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxea</parametername>
</parameternamelist>
<parameterdescription>
<para>not included in the search range </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if none exists. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a5e7388e6b8b1ed7dc4bc377bb74dcf72" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export prev_not_tail</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>prev_not_tail</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get address of previous non-tail byte. <simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if none exists. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ae3da655e70ee8cf9f4d4bdfd5fda1af7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export next_not_tail</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>next_not_tail</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get address of next non-tail byte. <simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if none exists. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a346f18163e4b8852a60b42dc399c6c11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ea_t</type>
        <definition>ea_t adjust_visea</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>adjust_visea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adjust the address and get the nearest visible address. (i.e. an address which will appear in the disassembly) <simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> only if no addresses are valid </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a58d617220c6ce6bd182ec26a11d952a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export prev_visea</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>prev_visea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get previous visible address. <simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if none exists. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1aa9cbe4f435300c277e90fb04208debe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export next_visea</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>next_visea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get next visible address. <simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if none exists. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ac684f6c17e65bbe208810d1156cf0c81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_first_visea</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>is_first_visea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Is an address the first visible address? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1af841bc06f50bd53a5d568b7d87cfcc89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_last_visea</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>is_last_visea</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Is an address the last visible address? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a2083612b09134e707696a9a09a1eccc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_visible_finally</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>is_visible_finally</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Is the address visible on the screen (not hidden)? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a044e286f44e046227a1f3d9706dfd271" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t idaapi</type>
        <definition>ea_t idaapi get_item_head</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_item_head</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the start address of the item at &apos;ea&apos;. If there is no current item, then &apos;ea&apos; will be returned (see definition at the end of <ref refid="bytes_8hpp" kindref="compound">bytes.hpp</ref> source) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="231" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2339" bodyend="2344"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ac187ddfe69e383fd2398ad9a0545cd40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_item_end</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_item_end</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the end address of the item at &apos;ea&apos;. The returned address doesn&apos;t belong to the current item. Unexplored bytes are counted as 1 byte entities. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ab8309ae0c7eaca34bdd287da8efdabef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export calc_max_item_end</definition>
        <argsstring>(ea_t ea, int how=15)</argsstring>
        <name>calc_max_item_end</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>how</declname>
          <defval>15</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate maximal reasonable end address of a new item. This function will limit the item with the current segment bounds. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>how</parametername>
</parameternamelist>
<parameterdescription>
<para>when to stop the search. A combination of <ref refid="group___i_t_e_m___e_n_d__" kindref="compound">Item end search flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>end of new item. If it is not possible to create an item, it will return &apos;ea&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a34792242834806a65b5f3be1036bf516" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>asize_t</type>
        <definition>asize_t get_item_size</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_item_size</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get size of item (instruction/data) in bytes. Unexplored bytes have length of 1 byte. This function never returns 0. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="265" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="265" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ad7436e00af5f243c596cb8d8a4eeec69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void flush_flags</definition>
        <argsstring>(void)</argsstring>
        <name>flush_flags</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Flush virtual array to disk. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a0835c2b8ba7a457f13833194b122104b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_mapped</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>is_mapped</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Is the specified address &apos;ea&apos; present in the program? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1af239a41f9fb67cc46bb7fefa09b20f9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> ida_export</type>
        <definition>idaman flags_t ida_export get_flags_ex</definition>
        <argsstring>(ea_t ea, int how)</argsstring>
        <name>get_flags_ex</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>how</declname>
        </param>
        <briefdescription>
<para>Get flags for the specified address, extended form. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a9057cef0cecf2cbaae4d5e81ad8489cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>flags_t idaapi get_flags</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_flags</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>get flags with <ref refid="group___f_f___1gaee726806a07a06c9a7dcba795485e11c" kindref="member">FF_IVL</ref> &amp; <ref refid="group___f_f___1gad190bb3962a654369210c8e14e23aa09" kindref="member">MS_VAL</ref>. It is much slower under remote debugging because the kernel needs to read the process memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="288" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="288" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a8d847b265e2d67fbc8d4ed25fab3fb96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>flags_t idaapi get_full_flags</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_full_flags</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get flags value for address &apos;ea&apos;. <simplesect kind="return"><para>0 if address is not present in the program </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="294" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="294" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ae9216a90f7ee37c04cbe672f6c227be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> ida_export</type>
        <definition>idaman flags_t ida_export get_item_flag</definition>
        <argsstring>(ea_t from, int n, ea_t ea, bool appzero)</argsstring>
        <name>get_item_flag</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>appzero</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get flag of the item at &apos;ea&apos; even if it is a tail byte of some array or structure. This function is used to get flags of structure members or array elements. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of the instruction which refers to &apos;ea&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand which refers to &apos;ea&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>the referenced address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>appzero</parametername>
</parameternamelist>
<parameterdescription>
<para>append a struct field name if the field offset is zero? meaningful only if the name refers to a structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>flags or 0 (if failed) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a10a6647349cff65fa29315d9505f5ccf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi has_value</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>has_value</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Do flags contain byte value? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="322" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="322" bodyend="322"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ad8d9631e3d05e66cdcf761c56127bbb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export del_value</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>del_value</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete byte value from flags. The corresponding byte becomes uninitialized. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ad9d71a49a507bdc3edd296abff0dc53b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_loaded</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>is_loaded</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Does the specified address have a byte value (is initialized?) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1acc205e32314437fc526186f33867bdf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export nbits</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>nbits</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of bits in a byte at the given address. <simplesect kind="return"><para>{dnbits()} if the address doesn&apos;t belong to a segment, otherwise the result depends on the segment type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a0858fbd5811a483a01c76c8c777c7967" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int bytesize</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>bytesize</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Get number of bytes required to store a byte at the given address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="346" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="346" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a06299d4eec6753242edc18605abc33e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> ida_export</type>
        <definition>idaman uchar ida_export get_byte</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_byte</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get one byte (8-bit) of the program at &apos;ea&apos;. This function works only for 8bit byte processors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a3087f886cfc0dfb455ee306a56134fd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> ida_export</type>
        <definition>idaman uchar ida_export get_db_byte</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_db_byte</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get one byte (8-bit) of the program at &apos;ea&apos; from the database. Works even if the debugger is active. See also <ref refid="group__dbg__funcs__srcinfo_1ga19c9275cbc976a1428975b221d7e0c1b" kindref="member">get_dbg_byte()</ref> to read the process memory directly. This function works only for 8bit byte processors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a1fd70a4257a8fea2c4efc4d9d54e1684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab95f123a6c9bcfee6a343170ef8c5f69" kindref="member">ushort</ref> ida_export</type>
        <definition>idaman ushort ida_export get_word</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_word</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get one word (16-bit) of the program at &apos;ea&apos;. This function takes into account order of bytes specified in {is_be()} This function works only for 8bit byte processors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="368" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1acf321ff9471e7096e0664f5eb2691ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> ida_export</type>
        <definition>idaman uint32 ida_export get_dword</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_dword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get one dword (32-bit) of the program at &apos;ea&apos;. This function takes into account order of bytes specified in {is_be()} This function works only for 8bit byte processors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a96f04d044e6ad886568d17ef2d0cac11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> ida_export</type>
        <definition>idaman uint64 ida_export get_qword</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_qword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get one qword (64-bit) of the program at &apos;ea&apos;. This function takes into account order of bytes specified in {is_be()} This function works only for 8bit byte processors. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ad40de3d071cd123794b60f9cb9bb6c1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> ida_export</type>
        <definition>idaman uint64 ida_export get_wide_byte</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_wide_byte</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get one wide byte of the program at &apos;ea&apos;. Some processors may access more than 8bit quantity at an address. These processors have 32-bit byte organization from the IDA&apos;s point of view. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="389" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1afdf36b6506cc50142a0f3501223e5e1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> ida_export</type>
        <definition>idaman uint64 ida_export get_wide_word</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_wide_word</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get one wide word (2 &apos;byte&apos;) of the program at &apos;ea&apos;. Some processors may access more than 8bit quantity at an address. These processors have 32-bit byte organization from the IDA&apos;s point of view. This function takes into account order of bytes specified in {is_be()} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a8ef2fe75eeacd4443379e4569bc7ec09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> ida_export</type>
        <definition>idaman uint64 ida_export get_wide_dword</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_wide_dword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get two wide words (4 &apos;bytes&apos;) of the program at &apos;ea&apos;. Some processors may access more than 8bit quantity at an address. These processors have 32-bit byte organization from the IDA&apos;s point of view. This function takes into account order of bytes specified in {is_be()} <simplesect kind="note"><para>this function works incorrectly if {nbits} &gt; 16 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ab3b5458b53d35b819362c0874c328d6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> ida_export</type>
        <definition>idaman uchar ida_export get_octet</definition>
        <argsstring>(ea_t *ea, uint64 *v, int *nbit)</argsstring>
        <name>get_octet</name>
        <param>
          <type>ea_t *</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>nbit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get 8 bits of the program at &apos;ea&apos;. The main usage of this function is to iterate range of bytes. Here is an example: <programlisting><codeline><highlight class="normal">uint64<sp/>v;</highlight></codeline>
<codeline><highlight class="normal">int<sp/>nbit<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(<sp/>...<sp/>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>uchar<sp/>byte<sp/>=<sp/>get_octet(&amp;ea,<sp/>&amp;v,<sp/>&amp;nbit);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> &apos;ea&apos; is incremented each time when a new byte is read. In the above example, it will be incremented in the first loop iteration. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a04a52c1d3f9a1e4c08f8deabe40e4a1b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> ida_export</type>
        <definition>idaman uint32 ida_export get_16bit</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_16bit</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get 16bits of the program at &apos;ea&apos;. <simplesect kind="return"><para>1 byte (getFullByte()) if the current processor has 16-bit byte, otherwise return <ref refid="bytes_8hpp_1a1fd70a4257a8fea2c4efc4d9d54e1684" kindref="member">get_word()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a07f8cb0a2a422519ffd6f0e3f74c9fcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> ida_export</type>
        <definition>idaman uint32 ida_export get_32bit</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_32bit</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get not more than 32bits of the program at &apos;ea&apos;. <simplesect kind="return"><para>32 bit value, depending on {nbits}:<itemizedlist>
<listitem><para>if ( nbits &lt;= 8 ) return get_dword(ea);</para></listitem><listitem><para>if ( nbits &lt;= 16) return get_wide_word(ea);</para></listitem><listitem><para>return get_wide_byte(ea); </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a1213a5c7408571d91eb6f21d51dc8363" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> ida_export</type>
        <definition>idaman uint64 ida_export get_64bit</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_64bit</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get not more than 64bits of the program at &apos;ea&apos;. <simplesect kind="return"><para>64 bit value, depending on {nbits}:<itemizedlist>
<listitem><para>if ( nbits &lt;= 8 ) return get_qword(ea);</para></listitem><listitem><para>if ( nbits &lt;= 16) return get_wide_dword(ea);</para></listitem><listitem><para>return get_wide_byte(ea); </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="450" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a9386fa3dd9ca94b46897a3617e244ce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export get_data_value</definition>
        <argsstring>(uval_t *v, ea_t ea, asize_t size)</argsstring>
        <name>get_data_value</name>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value at of the item at &apos;ea&apos;. This function works with entities up to sizeof(ea_t) (bytes, word, etc) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the result. may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of data to read. If 0, then the item type at &apos;ea&apos; will be used </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="462" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1af79b9b9d55f8210bea6c7e0710a0695d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export visit_patched_bytes</definition>
        <argsstring>(ea_t ea1, ea_t ea2, int(idaapi *cb)(ea_t ea, qoff64_t fpos, uint64 o, uint64 v, void *ud), void *ud=NULL)</argsstring>
        <name>visit_patched_bytes</name>
        <param>
          <type>ea_t</type>
          <declname>ea1</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea2</declname>
        </param>
        <param>
          <type>int(idaapi *)(ea_t ea, <ref refid="pro_8h_1a42ae75d34f73b9e691bd16aaddb897e5" kindref="member">qoff64_t</ref> fpos, <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> o, <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> v, void *ud)</type>
          <declname>cb</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>ud</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit all the patched bytes one byte at a time. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea1</parametername>
</parameternamelist>
<parameterdescription>
<para>start linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea2</parametername>
</parameternamelist>
<parameterdescription>
<para>end linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cb</parametername>
</parameternamelist>
<parameterdescription>
<para>callback called for each found byte. if the callback returns non-zero then that value will be returned to the caller and the enumeration will be interrupted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ud</parametername>
</parameternamelist>
<parameterdescription>
<para>user data passed to the callback </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the return value returned by the callback (if any) or zero if the enumeration was completed. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a8775c2f57cb46b8b4db51ea1c711f5c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> ida_export</type>
        <definition>idaman uint64 ida_export get_original_byte</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_original_byte</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get original byte value (that was before patching). This function works for wide byte processors too. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="485" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1aff867ae9455f3513557f9478e25ebe0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> ida_export</type>
        <definition>idaman uint64 ida_export get_original_word</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_original_word</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get original word value (that was before patching). This function works for wide byte processors too. This function takes into account order of bytes specified in {is_be()} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1adf127c9ef3a53ae35227fa4f6ef9614e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> ida_export</type>
        <definition>idaman uint64 ida_export get_original_dword</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_original_dword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get original dword (that was before patching) This function works for wide byte processors too. This function takes into account order of bytes specified in {is_be()} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="499" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a6c744b5bb83b9c33b081c8526194a33f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref> ida_export</type>
        <definition>idaman uint64 ida_export get_original_qword</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_original_qword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get original qword value (that was before patching) This function DOESN&apos;T work for wide byte processors too. This function takes into account order of bytes specified in {is_be()} </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="506" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1aa58bf511be9b66ff3cb6210bd46b728e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export put_byte</definition>
        <argsstring>(ea_t ea, uint64 x)</argsstring>
        <name>put_byte</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set value of one byte of the program. This function modifies the database. If the debugger is active then the debugged process memory is patched too. <simplesect kind="note"><para>The original value of the byte is completely lost and can&apos;t be recovered by the <ref refid="bytes_8hpp_1a8775c2f57cb46b8b4db51ea1c711f5c1" kindref="member">get_original_byte()</ref> function. See also <ref refid="group__dbg__funcs__srcinfo_1ga5b67e95a556cf3d746676a676e04f15a" kindref="member">put_dbg_byte()</ref> to write to the process memory directly when the debugger is active. This function can handle wide byte processors. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>byte value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the database has been modified </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="521" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a305f6bc74464314cd5c71ecc6e313d7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export put_word</definition>
        <argsstring>(ea_t ea, uint64 x)</argsstring>
        <name>put_word</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set value of one word of the program. This function takes into account order of bytes specified in {is_be()} This function works for wide byte processors too. <simplesect kind="note"><para>The original value of the word is completely lost and can&apos;t be recovered by the <ref refid="bytes_8hpp_1aff867ae9455f3513557f9478e25ebe0d" kindref="member">get_original_word()</ref> function. ea - linear address x - word value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="532" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1aa3e943eefd745ed67ed1bd496b069b3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export put_dword</definition>
        <argsstring>(ea_t ea, uint64 x)</argsstring>
        <name>put_dword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set value of one dword of the program. This function takes into account order of bytes specified in {is_be()} This function works for wide byte processors too. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>dword value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>the original value of the dword is completely lost and can&apos;t be recovered by the <ref refid="bytes_8hpp_1adf127c9ef3a53ae35227fa4f6ef9614e" kindref="member">get_original_dword()</ref> function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="543" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a189e23a271fbef7e207f2925c4d36d4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export put_qword</definition>
        <argsstring>(ea_t ea, uint64 x)</argsstring>
        <name>put_qword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set value of one qword (8 bytes) of the program. This function takes into account order of bytes specified in {is_be()} This function DOESN&apos;T works for wide byte processors. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>qword value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="552" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a50b7cfe135b9d484a7461e90b8fd2f90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export patch_byte</definition>
        <argsstring>(ea_t ea, uint64 x)</argsstring>
        <name>patch_byte</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Patch a byte of the program. The original value of the byte is saved and can be obtained by <ref refid="bytes_8hpp_1a8775c2f57cb46b8b4db51ea1c711f5c1" kindref="member">get_original_byte()</ref>. This function works for wide byte processors too. <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>the database has been modified, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>the debugger is running and the process&apos; memory has value &apos;x&apos; at address &apos;ea&apos;, or the debugger is not running, and the IDB has value &apos;x&apos; at address &apos;ea already. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="564" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a6c639943ff3928ba71152b842db7c28f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export patch_word</definition>
        <argsstring>(ea_t ea, uint64 x)</argsstring>
        <name>patch_word</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Patch a word of the program. The original value of the word is saved and can be obtained by <ref refid="bytes_8hpp_1aff867ae9455f3513557f9478e25ebe0d" kindref="member">get_original_word()</ref>. This function works for wide byte processors too. This function takes into account order of bytes specified in {is_be()} <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>the database has been modified, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>the debugger is running and the process&apos; memory has value &apos;x&apos; at address &apos;ea&apos;, or the debugger is not running, and the IDB has value &apos;x&apos; at address &apos;ea already. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="577" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a4957f5a2ba97db1cb73d8d234c67f624" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export patch_dword</definition>
        <argsstring>(ea_t ea, uint64 x)</argsstring>
        <name>patch_dword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Patch a dword of the program. The original value of the dword is saved and can be obtained by <ref refid="bytes_8hpp_1adf127c9ef3a53ae35227fa4f6ef9614e" kindref="member">get_original_dword()</ref>. This function DOESN&apos;T work for wide byte processors. This function takes into account order of bytes specified in {is_be()} <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>the database has been modified, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>the debugger is running and the process&apos; memory has value &apos;x&apos; at address &apos;ea&apos;, or the debugger is not running, and the IDB has value &apos;x&apos; at address &apos;ea already. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="590" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a152740498421568caab14010f25623ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export patch_qword</definition>
        <argsstring>(ea_t ea, uint64 x)</argsstring>
        <name>patch_qword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Patch a qword of the program. The original value of the qword is saved and can be obtained by <ref refid="bytes_8hpp_1a6c744b5bb83b9c33b081c8526194a33f" kindref="member">get_original_qword()</ref>. This function DOESN&apos;T work for wide byte processors. This function takes into account order of bytes specified in {is_be()} <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>the database has been modified, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>the debugger is running and the process&apos; memory has value &apos;x&apos; at address &apos;ea&apos;, or the debugger is not running, and the IDB has value &apos;x&apos; at address &apos;ea already. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="603" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1aeb4ba1861324425115b5b589f0daac96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export revert_byte</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>revert_byte</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Revert patched byte <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>byte was patched before and reverted now </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="609" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ac758a752fcfa6c60bb29a979fa883ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export add_byte</definition>
        <argsstring>(ea_t ea, uint32 value)</argsstring>
        <name>add_byte</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a value to one byte of the program. This function works for wide byte processors too. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>byte value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="617" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a9fd8330410af1e2d7ef9d583ce90360b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export add_word</definition>
        <argsstring>(ea_t ea, uint64 value)</argsstring>
        <name>add_word</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a value to one word of the program. This function works for wide byte processors too. This function takes into account order of bytes specified in {is_be()} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>byte value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="626" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a1458b218c7aa19ba9c8bf19e7c03b4bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export add_dword</definition>
        <argsstring>(ea_t ea, uint64 value)</argsstring>
        <name>add_dword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a value to one dword of the program. This function works for wide byte processors too. This function takes into account order of bytes specified in {is_be()} <simplesect kind="note"><para>this function works incorrectly if {nbits} &gt; 16 </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>byte value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="636" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a9b93a89622f2303c2fdd2f3e80213c34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export add_qword</definition>
        <argsstring>(ea_t ea, uint64 value)</argsstring>
        <name>add_qword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a value to one qword of the program. This function does not work for wide byte processors. This function takes into account order of bytes specified in {is_be()} <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>byte value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="645" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ac283b1622ebfcbdda1f02da7451d1fac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export get_zero_ranges</definition>
        <argsstring>(rangeset_t *zranges, const range_t *range)</argsstring>
        <name>get_zero_ranges</name>
        <param>
          <type><ref refid="classrangeset__t" kindref="compound">rangeset_t</ref> *</type>
          <declname>zranges</declname>
        </param>
        <param>
          <type>const <ref refid="structrange__t" kindref="compound">range_t</ref> *</type>
          <declname>range</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return set of ranges with zero initialized bytes. The returned set includes only big zero initialized ranges (at least &gt;1KB). Some zero initialized byte ranges may be not included. Only zero bytes that use the sparse storage method (STT_MM) are reported. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>zranges</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the return value. can not be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>range</parametername>
</parameternamelist>
<parameterdescription>
<para>the range of addresses to verify. can be NULL - means all ranges </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the result is a non-empty set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a88f54f6cd0cd49c3c21cd77626f01a83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_bytes</definition>
        <argsstring>(void *buf, ssize_t size, ea_t ea, int gmb_flags=0, void *mask=NULL)</argsstring>
        <name>get_bytes</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
          <declname>size</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gmb_flags</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>void *</type>
          <declname>mask</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the specified number of bytes of the program into the buffer. If mask was specified it will contain a bitmap of initialized / uninitialized database bytes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to hold bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of buffer in normal 8-bit bytes (sizeof(buf)) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gmb_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___g_m_b__" kindref="compound">flags for get_bytes()</ref> bits </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>bitmap of initialize/uninitialized bytes (may be NULL; must be at least (size+7)/8) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if the user cancelled, return -1; otherwise number of read bytes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="670" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1aa1ca5e83ff1f167ef3c0aa6737a03c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export put_bytes</definition>
        <argsstring>(ea_t ea, const void *buf, size_t size)</argsstring>
        <name>put_bytes</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Modify the specified number of bytes of the program. This function does not save the original values of bytes. See also <ref refid="bytes_8hpp_1a351950abd6c5309a1464bbbfc793f8e0" kindref="member">patch_bytes()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer with new values of bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of buffer in normal 8-bit bytes (sizeof(buf)) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="692" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a351950abd6c5309a1464bbbfc793f8e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export patch_bytes</definition>
        <argsstring>(ea_t ea, const void *buf, size_t size)</argsstring>
        <name>patch_bytes</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Patch the specified number of bytes of the program. Original values of bytes are saved and are available with get_original...() functions. See also <ref refid="bytes_8hpp_1aa1ca5e83ff1f167ef3c0aa6737a03c18" kindref="member">put_bytes()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer with new values of bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of buffer in normal 8-bit bytes (sizeof(buf)) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="703" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statefuncs_1ga22729939c925840ae9e04962a968f0a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_code</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_code</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does flag denote start of an instruction? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="735" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="735" bodyend="735"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statefuncs_1ga13c3d89ed673ad2705a031f05879ef70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_code</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_code</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Does flag denote start of an instruction? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="736" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statefuncs_1gac78322f5394f684adbcd42412b9c90a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_data</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_data</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does flag denote start of data? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="741" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="741" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statefuncs_1ga0165da3cce58078f2323a738034e3b09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_data</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_data</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Does flag denote start of data? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="742" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="742" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statefuncs_1ga475caeeadfc4dd1787a25f7321e37dc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_tail</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_tail</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does flag denote tail byte? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="747" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="747" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statefuncs_1gab9551896b2f122e43a06ce1171e34c75" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_tail</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_tail</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Does flag denote tail byte? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="748" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="748" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statefuncs_1gaf8fee3fff84fbfae51a9adca9d736673" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_not_tail</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_not_tail</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does flag denote tail byte? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="749" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="749" bodyend="748"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statefuncs_1ga8be04719d78c8e3eeff0a4bd902ceaae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_not_tail</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_not_tail</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Does flag denote tail byte? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="750" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="750" bodyend="749"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statefuncs_1ga96fa57e4c4dcf36c8bd287d7b751f80a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_unknown</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_unknown</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does flag denote unexplored byte? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="755" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="755" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statefuncs_1gac322f722406d9d78d10827a4e3978549" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_head</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_head</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does flag denote start of instruction OR data? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="760" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="760" bodyend="760"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statefuncs_1gaecff89f91ab44ba181346ce622ef52df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_head</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_head</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Does flag denote start of instruction OR data? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="761" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="761" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a8bc61ca4c590e8cb63db504217bb40bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export del_items</definition>
        <argsstring>(ea_t ea, int flags=0, asize_t nbytes=1, may_destroy_cb_t *may_destroy=NULL)</argsstring>
        <name>del_items</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>asize_t</type>
          <declname>nbytes</declname>
          <defval>1</defval>
        </param>
        <param>
          <type><ref refid="bytes_8hpp_1ad2808f4f5c5def4fb4738e218ae4af52" kindref="member">may_destroy_cb_t</ref> *</type>
          <declname>may_destroy</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert item (instruction/data) to unexplored bytes. The whole item (including the head and tail bytes) will be destroyed. It is allowed to pass any address in the item to this function <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>any address within the first item to delete </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___d_e_l_i_t__" kindref="compound">Unexplored byte conversion flags</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes in the range to be undefined </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>may_destroy</parametername>
</parameternamelist>
<parameterdescription>
<para>optional routine invoked before deleting a head item. If callback returns false then item has not to be deleted and operation fails </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true on sucessful operation, otherwise false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="780" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a94adb77aabb78f9944ff29a1eb38e544" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_manual_insn</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>is_manual_insn</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the instruction overridden? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of the instruction or data item </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="816" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a2cbcd2b16bf5b747fe15eacc08049070" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_manual_insn</definition>
        <argsstring>(qstring *buf, ea_t ea)</argsstring>
        <name>get_manual_insn</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve the user-specified string for the manual instruction. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of the instruction or data item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of manual instruction or -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="824" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ad7477b2cc88c2cb6628681e2df057993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export set_manual_insn</definition>
        <argsstring>(ea_t ea, const char *manual_insn)</argsstring>
        <name>set_manual_insn</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>manual_insn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set manual instruction string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of the instruction or data item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>manual_insn</parametername>
</parameternamelist>
<parameterdescription>
<para>&quot;&quot; - delete manual string. NULL - do nothing </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="832" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga91135484f1fd828f991423857a47dd08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_flow</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_flow</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does the previous instruction exist and pass execution flow to the current byte? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="861" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="861" bodyend="861"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1gaaedc5e5b50a30af9e121475a5cad863d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi has_extra_cmts</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>has_extra_cmts</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does the current byte have additional anterior or posterior lines? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="866" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="866" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga9e90cbac8ae1170432dbface4a5aac17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_has_extra_cmts</definition>
        <argsstring>(flags_t f, void *)</argsstring>
        <name>f_has_extra_cmts</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="867" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="867" bodyend="867"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga35372965880ebb4235fee99081b5e9f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi has_cmt</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>has_cmt</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does the current byte have an indented comment? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="871" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="871" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga64274734da3ee122483a26187289647a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_has_cmt</definition>
        <argsstring>(flags_t f, void *)</argsstring>
        <name>f_has_cmt</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="872" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="872" bodyend="872"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga2810c5a18db9e9fb4926cc8c24edfc90" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi has_xref</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>has_xref</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does the current byte have cross-references to it? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="876" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="876" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga7e5582d0698e71079958d214767e534d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_has_xref</definition>
        <argsstring>(flags_t f, void *)</argsstring>
        <name>f_has_xref</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Does the current byte have cross-references to it? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="877" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="877" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga14316a34b2ad914de012d51dfcc85b97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi has_name</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>has_name</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does the current byte have non-trivial (non-dummy) name? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="882" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="882" bodyend="882"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga3c9f82d682a2ec62756ee98fd07b179d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_has_name</definition>
        <argsstring>(flags_t f, void *)</argsstring>
        <name>f_has_name</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Does the current byte have non-trivial (non-dummy) name? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="883" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="883" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga623deea4cebffb89e669173b1fb84262" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi has_dummy_name</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>has_dummy_name</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does the current byte have dummy (auto-generated, with special prefix) name? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="891" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="891" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga5a910fc7e594e7198f660c8f1f85baf3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_has_dummy_name</definition>
        <argsstring>(flags_t f, void *)</argsstring>
        <name>f_has_dummy_name</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>f</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Does the current byte have dummy (auto-generated, with special prefix) name? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="892" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="892" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1gaf532d282f0e3e784897d4ed4ceaf9581" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi has_auto_name</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>has_auto_name</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does the current byte have auto-generated (no special prefix) name? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="897" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="897" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga56146ca3df41b8adfdb863b1eeabbaf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi has_any_name</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>has_any_name</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does the current byte have any name? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="902" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="902" bodyend="902"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga85d4e8aefc0c09fe2d2da36956314dd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi has_user_name</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>has_user_name</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does the current byte have user-specified name? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="907" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="907" bodyend="907"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1gae7e4b464dbc84b3b0071fa53e0ae8884" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_has_user_name</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_has_user_name</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>Does the current byte have user-specified name? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="908" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="908" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga85e8fdbcf073b1d4293333c9b390bfdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_invsign</definition>
        <argsstring>(ea_t ea, flags_t F, int n)</argsstring>
        <name>is_invsign</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Should sign of n-th operand inverted during output?. allowed values of n: 0-first operand, 1-other operands </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="922" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1gad5a502d23bb9f0b468fd029eb3198f4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export toggle_sign</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>toggle_sign</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Toggle sign of n-th operand. allowed values of n: 0-first operand, 1-other operands </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="928" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1gaaf8bf3e77321ed6fc80240054d47555e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_bnot</definition>
        <argsstring>(ea_t ea, flags_t F, int n)</argsstring>
        <name>is_bnot</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Should we negate the operand?. {a_bnot} should be defined in the idp module in order to work with this function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="936" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga318a24ff8222478f7f3a7a74867b1719" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export toggle_bnot</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>toggle_bnot</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Toggle binary negation of operand. also see <ref refid="group___f_f__statespecf_1gaaf8bf3e77321ed6fc80240054d47555e" kindref="member">is_bnot()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="937" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga139412c7891bce63f6a60a9005c28384" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_lzero</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>is_lzero</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Display leading zeroes in operands. The global switch for the leading zeroes is in {s_genflags} The leading zeroes doesn&apos;t work if the octal numbers start with 0 Display leading zeroes? (takes into account {s_genflags}) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="945" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga96993e94d7866bef258bdb6c0ae91e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_lzero</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>set_lzero</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Set toggle lzero bit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="947" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1gae09986a5cdd1cb36da5b9fca5a1f838d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export clr_lzero</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>clr_lzero</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Clear lzero bit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="948" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__statespecf_1ga3c9ea0c1d37ac65ee89b5a982b6fa780" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi toggle_lzero</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>toggle_lzero</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <briefdescription><para>Toggle lzero bit </para></briefdescription>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="949" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="949" bodyend="952"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1aba225b3a29ef2708e422e55940b726a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export leading_zero_important</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>leading_zero_important</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Check if leading zeroes are important. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="959" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1ga24708f86e2118505c0869f3090a210ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_defarg0</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_defarg0</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the first operand defined? Initially operand has no defined representation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1017" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1017" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1ga45a85d6f222855ae1013151a030c869f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_defarg1</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_defarg1</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the second operand defined? Initially operand has no defined representation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1022" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1022" bodyend="1022"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1ga4e85052161133751597a0b9a6ee6c360" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_off0</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_off0</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the first operand offset? (example: push offset xxx) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1027" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1027" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1ga457ddd8a99861b66740a8c4a2fa5570d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_off1</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_off1</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the second operand offset? (example: mov ax, offset xxx) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1032" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1032" bodyend="1032"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1ga720d01e1130a026839907f6a3541d935" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_char0</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_char0</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the first operand character constant? (example: push &apos;a&apos;) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1037" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1037" bodyend="1037"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1ga25c1a5427768b04c62ddc0de0b98cff7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_char1</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_char1</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the second operand character constant? (example: mov al, &apos;a&apos;) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1042" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1042" bodyend="1042"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1ga6d24d868e90d1664e2a7b139ba204a2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_seg0</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_seg0</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the first operand segment selector? (example: push seg seg001) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1047" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1047" bodyend="1047"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1gae1d140c628f5144248a5c32a99b68b77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_seg1</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_seg1</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the second operand segment selector? (example: mov dx, seg dseg) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1052" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1052" bodyend="1052"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1ga672a76703a1eaa0239035bf84e41cc53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_enum0</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_enum0</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the first operand a symbolic constant (enum member)? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1057" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1057" bodyend="1057"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1ga01d448dd33de4dd1052e69ae4d5e7267" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_enum1</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_enum1</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the second operand a symbolic constant (enum member)? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1062" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1062" bodyend="1062"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1gad450ed1f4de6cd977444e47a7c615c6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_stroff0</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_stroff0</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the first operand an offset within a struct? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1068" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1068" bodyend="1068"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1ga298b00b143a13a385901a73ae56b5aa6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_stroff1</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_stroff1</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the second operand an offset within a struct? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1073" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1073" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1gaab4ed7d4dacebe645493c40f10aaaf5e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_stkvar0</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_stkvar0</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the first operand a stack variable? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1078" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1078" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1gaf837fd01597f033bea0a38d36b021b55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_stkvar1</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_stkvar1</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the second operand a stack variable? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1083" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1083" bodyend="1083"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1ga9b3181de6fdd5a622c5a80b17ecced1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_float0</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_float0</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the first operand a floating point number? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1088" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1088" bodyend="1088"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1gacccef780be6fa7273f1bce875ed59893" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_float1</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_float1</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the second operand a floating point number? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1093" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1093" bodyend="1093"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1gaf19768d49f88e6b9301c95d7da80d189" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_custfmt0</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_custfmt0</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does the first operand use a custom data representation? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1098" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1098" bodyend="1098"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1gafa0fae49fc4c99ad5bbbd6b90418571c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_custfmt1</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_custfmt1</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Does the second operand use a custom data representation? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1103" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1103" bodyend="1103"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1gae0562a9883ef0c7afdbe73fffe1bbd3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_numop0</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_numop0</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the first operand a number (i.e. binary, octal, decimal or hex?) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1ga6e8bc4c3407aace546645a4630aab5fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_numop1</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_numop1</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is the second operand a number (i.e. binary, octal, decimal or hex?) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1ga6c19cf7794a1a1b1a9ae2cebb5e2bf33" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
        <definition>THREAD_SAFE flags_t get_optype_flags0</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>get_optype_flags0</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Get flags for first operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1118" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1118" bodyend="1118"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs1_1ga1ea4aa2dfdef5dbca787f6c2e98f0712" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
        <definition>THREAD_SAFE flags_t get_optype_flags1</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>get_optype_flags1</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Get flags for second operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1123" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1123" bodyend="1123"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1ga257ba06e4224a78916bd2808056a5cca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_defarg</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_defarg</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is defined? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1gae2674933600c8a1e3aed29cd52466766" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_off</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_off</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is offset? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1ga1de22e36b7628763e9a5ad1d0e1d9231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_char</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_char</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is character constant? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1ga459e9f61c0824b0a7c46da18d56199da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_seg</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_seg</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is segment? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1gaa1bcf380ff1a7b8856fc79c53561cf21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_enum</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_enum</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is enum? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1gaa699cba125438efacdb5cb0509f72ee9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_manual</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_manual</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is forced operand? (use <ref refid="group___f_f__op_1ga34b34b8cb7a47c749063f436b4848a2d" kindref="member">is_forced_operand()</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1gaf25866c2282ae16e2546e226a9f0db45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_stroff</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_stroff</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is struct offset? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1ga23836258c12cb80ee1f731e48555cc0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_stkvar</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_stkvar</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is stack variable? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1ga0a2a8778d2ae85df4cf577a5d88a9e05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_fltnum</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_fltnum</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is floating point number? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1gafe5c1bd6c189ef80c0c2e3d1ad530478" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_custfmt</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_custfmt</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is custom data format? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1ga9a62c917e9b1272da10dddff74cd0268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_numop</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>is_numop</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is number (bin, oct, dec, hex)? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs2_1gaf7dd76ff5647260d826edba96f0c184f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_suspop</definition>
        <argsstring>(ea_t ea, flags_t F, int n)</argsstring>
        <name>is_suspop</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>is suspicious operand? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__op_1ga7723b53fa36706b3e0e81e7907288e78" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export op_adds_xrefs</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>op_adds_xrefs</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Should processor module create xrefs from the operand?. Currently &apos;offset&apos; and &apos;structure offset&apos; operands create xrefs </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__op_1ga8b28b22efcf9dfcbed00bfedb371dc93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_op_type</definition>
        <argsstring>(ea_t ea, flags_t type, int n)</argsstring>
        <name>set_op_type</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>(internal function) change representation of operand(s). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>new flag value (should be obtained from <ref refid="group___f_f__opfuncs3_1ga2afc147b3d4d195096d1d48318be4fc9" kindref="member">char_flag()</ref>, <ref refid="group___f_f__opfuncs3_1gaa2b780d9ba5eddf86fcbea6cad730bd0" kindref="member">num_flag()</ref> and similar functions) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand (0, 1, -1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>failed (applied to a tail byte) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__op_1gab8b0a61cca8477694fe22002746db49b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export op_seg</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>op_seg</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set operand representation to be &apos;segment&apos;. If applied to unexplored bytes, converts them to 16/32bit word data <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand (0, 1, -1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__op_1ga86d475b8d1d98eb38c5652370d46f25b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export op_enum</definition>
        <argsstring>(ea_t ea, int n, enum_t id, uchar serial)</argsstring>
        <name>op_enum</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref></type>
          <declname>id</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>serial</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set operand representation to be &apos;enum_t&apos;. If applied to unexplored bytes, converts them to 16/32bit word data <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand (0, 1, -1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>id of enum </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>the serial number of the constant in the enumeration, usually 0. the serial numbers are used if the enumeration contains several constants with the same value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__op_1ga0306c235939b0bfc270772909020e853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="kernwin_8hpp_1a320dc6698b7075a653144bbdf202b30e" kindref="member">enum_t</ref> ida_export</type>
        <definition>idaman enum_t ida_export get_enum_id</definition>
        <argsstring>(uchar *serial, ea_t ea, int n)</argsstring>
        <name>get_enum_id</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
          <declname>serial</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get enum id of &apos;enum&apos; operand. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand (0, 1, -1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>serial</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to variable to hold the serial number of the constant in the enumeration </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>id of enum or <ref refid="netnode_8hpp_1ab745219216aec4e8abf2c1dcc5d5eac0" kindref="member">BADNODE</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__op_1ga045f11dbaa25bef9d56e63c0a3bbdb08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export op_stroff</definition>
        <argsstring>(const insn_t &amp;insn, int n, const tid_t *path, int path_len, adiff_t delta)</argsstring>
        <name>op_stroff</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1ad8791d30d19843bc09b78bdf01a852ec" kindref="member">tid_t</ref> *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>path_len</declname>
        </param>
        <param>
          <type>adiff_t</type>
          <declname>delta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set operand representation to be &apos;struct offset&apos;. If applied to unexplored bytes, converts them to 16/32bit word data <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>the instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand (0, 1, -1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>structure path (strpath). see <ref refid="nalt_8hpp" kindref="compound">nalt.hpp</ref> for more info. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path_len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the structure path </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>struct offset delta. usually 0. denotes the difference between the structure base and the pointer into the structure. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__op_1ga05b9a68c2c5d67ce0155d56fe9070d92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export get_stroff_path</definition>
        <argsstring>(tid_t *path, adiff_t *delta, ea_t ea, int n)</argsstring>
        <name>get_stroff_path</name>
        <param>
          <type><ref refid="pro_8h_1ad8791d30d19843bc09b78bdf01a852ec" kindref="member">tid_t</ref> *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>adiff_t *</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get struct path of operand. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for structure path (strpath). see <ref refid="nalt_8hpp" kindref="compound">nalt.hpp</ref> for more info. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>struct offset delta </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand (0, 1, -1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of strpath </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__op_1gaa01aa1c70776d2b8b2c62d5e676cd80b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export op_stkvar</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>op_stkvar</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set operand representation to be &apos;stack variable&apos;. Should be applied to an instruction within a function. Should be applied after creating a stack var using <ref refid="classinsn__t_1abaeb6683f9b328932887c458550edd50" kindref="member">insn_t::create_stkvar()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand (0, 1, -1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__op_1ga30692393915a1ac0c0129f778e4f81fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_forced_operand</definition>
        <argsstring>(ea_t ea, int n, const char *op)</argsstring>
        <name>set_forced_operand</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set forced operand. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand (0, 1, 2) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>text of operand<itemizedlist>
<listitem><para>NULL: do nothing (return 0)</para></listitem><listitem><para>&quot;&quot; : delete forced operand </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__op_1ga0c5020260196a9d4b57633a762c0c3f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_forced_operand</definition>
        <argsstring>(qstring *buf, ea_t ea, int n)</argsstring>
        <name>get_forced_operand</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get forced operand. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer, may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand (0, 1, 2) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of forced operand or -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__op_1ga34b34b8cb7a47c749063f436b4848a2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_forced_operand</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>is_forced_operand</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is operand manually defined?. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand (0, 1, 2) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga2afc147b3d4d195096d1d48318be4fc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi char_flag</definition>
        <argsstring>(void)</argsstring>
        <name>char_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1278" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga487d7ad60c8e43e528af188e6def836b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi off_flag</definition>
        <argsstring>(void)</argsstring>
        <name>off_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1279" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1279" bodyend="1278"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga391ab6f43b35bb8d106aa639fe0c85a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi enum_flag</definition>
        <argsstring>(void)</argsstring>
        <name>enum_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1280" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1280" bodyend="1279"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga1d7b351000c5a71e47ef0e1f78d7a5e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi stroff_flag</definition>
        <argsstring>(void)</argsstring>
        <name>stroff_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1281" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1281" bodyend="1280"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga2024a71f2a269bef33a71b399781d0b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi stkvar_flag</definition>
        <argsstring>(void)</argsstring>
        <name>stkvar_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1282" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1282" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga6d400ac9b71376def3b63e72684a596e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi flt_flag</definition>
        <argsstring>(void)</argsstring>
        <name>flt_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1283" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1283" bodyend="1282"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1gab9a9bb341101cd92bbdf468e8b7d4713" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi custfmt_flag</definition>
        <argsstring>(void)</argsstring>
        <name>custfmt_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1284" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1284" bodyend="1283"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga0c5c5dda870eb2d11ee81309f9ea05bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi seg_flag</definition>
        <argsstring>(void)</argsstring>
        <name>seg_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>see <ref refid="group___f_f__opbits" kindref="compound">Bits: instruction operand types</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1285" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1285" bodyend="1284"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1gaa2b780d9ba5eddf86fcbea6cad730bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> ida_export</type>
        <definition>idaman flags_t ida_export num_flag</definition>
        <argsstring>(void)</argsstring>
        <name>num_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of default base (bin, oct, dec, hex) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1gaae77e3835c3ea4ffa2e8464576a956ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi hex_flag</definition>
        <argsstring>(void)</argsstring>
        <name>hex_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number flag of the base, regardless of current processor - better to use <ref refid="group___f_f__opfuncs3_1gaa2b780d9ba5eddf86fcbea6cad730bd0" kindref="member">num_flag()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1289" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1289" bodyend="1289"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1gab5bef3630157cf7375f852a1de07ceca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi dec_flag</definition>
        <argsstring>(void)</argsstring>
        <name>dec_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number flag of the base, regardless of current processor - better to use <ref refid="group___f_f__opfuncs3_1gaa2b780d9ba5eddf86fcbea6cad730bd0" kindref="member">num_flag()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1290" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1ga777a1ae1ee5d1c9ed05cabc954fc4509" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi oct_flag</definition>
        <argsstring>(void)</argsstring>
        <name>oct_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number flag of the base, regardless of current processor - better to use <ref refid="group___f_f__opfuncs3_1gaa2b780d9ba5eddf86fcbea6cad730bd0" kindref="member">num_flag()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1291" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1291" bodyend="1290"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs3_1gae6a46678a4e686b236128952a0a3fd68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi bin_flag</definition>
        <argsstring>(void)</argsstring>
        <name>bin_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number flag of the base, regardless of current processor - better to use <ref refid="group___f_f__opfuncs3_1gaa2b780d9ba5eddf86fcbea6cad730bd0" kindref="member">num_flag()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1292" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1292" bodyend="1291"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs4_1gadf0295e1cf57d6f60f16aa702c096af9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi op_chr</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>op_chr</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>set op type to <ref refid="group___f_f__opfuncs3_1ga2afc147b3d4d195096d1d48318be4fc9" kindref="member">char_flag()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1306" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1306" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs4_1ga7cb5e2ddd05e952cf01441deb704fa20" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi op_num</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>op_num</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>set op type to <ref refid="group___f_f__opfuncs3_1gaa2b780d9ba5eddf86fcbea6cad730bd0" kindref="member">num_flag()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1307" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1307" bodyend="1306"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs4_1ga3a75b188796c73be1cd02ad829e9c003" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi op_hex</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>op_hex</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>set op type to <ref refid="group___f_f__opfuncs3_1gaae77e3835c3ea4ffa2e8464576a956ec" kindref="member">hex_flag()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1308" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1308" bodyend="1307"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs4_1ga84fc23f7331f5187eace66897b8e2bfc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi op_dec</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>op_dec</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>set op type to <ref refid="group___f_f__opfuncs3_1gab5bef3630157cf7375f852a1de07ceca" kindref="member">dec_flag()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1309" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1309" bodyend="1308"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs4_1ga061587ee57e5454a47d449d1e35dd2b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi op_oct</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>op_oct</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>set op type to <ref refid="group___f_f__opfuncs3_1ga777a1ae1ee5d1c9ed05cabc954fc4509" kindref="member">oct_flag()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1310" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1310" bodyend="1309"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs4_1gafa0dc35c076ef810542901b566545d25" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi op_bin</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>op_bin</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>set op type to <ref refid="group___f_f__opfuncs3_1gae6a46678a4e686b236128952a0a3fd68" kindref="member">bin_flag()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1311" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1311" bodyend="1310"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__opfuncs4_1gaba581bada7325e01513f001459cf9c35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi op_flt</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>op_flt</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>set op type to <ref refid="group___f_f__opfuncs3_1ga6d400ac9b71376def3b63e72684a596e" kindref="member">flt_flag()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1312" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1312" bodyend="1311"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__op_1gabca3f9ede442712637f767efafeb1d47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export op_custfmt</definition>
        <argsstring>(ea_t ea, int n, int fid)</argsstring>
        <name>op_custfmt</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fid</declname>
        </param>
        <briefdescription>
<para>Set custom data format for operand (fid-custom data format id) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1317" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__op_1gaa2af9a3b5eaf1be072e8052ac0322b90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export clr_op_type</definition>
        <argsstring>(ea_t ea, int n)</argsstring>
        <name>clr_op_type</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove operand representation information. (set operand representation to be &apos;undefined&apos;) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand (0, 1, -1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__op_1gaa6154881265dd78649e6f4c526e70528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export get_default_radix</definition>
        <argsstring>(void)</argsstring>
        <name>get_default_radix</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get default base of number for the current processor. <simplesect kind="return"><para>2, 8, 10, 16 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__op_1ga84e4b675b5f2ba425c1882e8491b5a2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export get_radix</definition>
        <argsstring>(flags_t F, int n)</argsstring>
        <name>get_radix</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get radix of the operand, in: flags. If the operand is not a number, returns <ref refid="group___f_f__op_1gaa6154881265dd78649e6f4c526e70528" kindref="member">get_default_radix()</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>flags </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand (0, 1, -1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>2, 8, 10, 16 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gad4453baa846eedb6219dea2fcf305ab5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi code_flag</definition>
        <argsstring>(void)</argsstring>
        <name>code_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__statebits_1gacb1e52d0b6bcfce13bfb81dcb793f447" kindref="member">FF_CODE</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1369" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gaa14a627f4353a5bdd533c6bbd020e90e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi byte_flag</definition>
        <argsstring>(void)</argsstring>
        <name>byte_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a flags_t representing a byte. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1370" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1370" bodyend="1369"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gabf79b38da271c551fed0bada7c5d8337" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi word_flag</definition>
        <argsstring>(void)</argsstring>
        <name>word_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a flags_t representing a word. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1371" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1371" bodyend="1370"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gab18fd84003b7256585d97b583f0639cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi dword_flag</definition>
        <argsstring>(void)</argsstring>
        <name>dword_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a flags_t representing a double word. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1372" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1372" bodyend="1371"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga9b4ca69d10deef0f994090427879d311" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi qword_flag</definition>
        <argsstring>(void)</argsstring>
        <name>qword_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a flags_t representing a quad word. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1373" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1373" bodyend="1372"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gaff484526a5b160e846d579195c2cdcd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi oword_flag</definition>
        <argsstring>(void)</argsstring>
        <name>oword_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a flags_t representing a octaword. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1374" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1374" bodyend="1373"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gafa693b6b7b1675021961085736232809" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi yword_flag</definition>
        <argsstring>(void)</argsstring>
        <name>yword_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a flags_t representing a ymm word. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1375" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1375" bodyend="1374"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga0be33c88ac0a2674af2c830f33373a74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi zword_flag</definition>
        <argsstring>(void)</argsstring>
        <name>zword_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a flags_t representing a zmm word. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1376" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1376" bodyend="1375"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga4471aad7626f942cd172f7626966e154" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi tbyte_flag</definition>
        <argsstring>(void)</argsstring>
        <name>tbyte_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a flags_t representing a tbyte. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1377" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1377" bodyend="1376"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gaa6ca54199e2ef6583f49c4f9bce796e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi strlit_flag</definition>
        <argsstring>(void)</argsstring>
        <name>strlit_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a flags_t representing a string literal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1378" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1378" bodyend="1377"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga38f08ea02f7331c492d89d618eda5164" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi stru_flag</definition>
        <argsstring>(void)</argsstring>
        <name>stru_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a flags_t representing a struct. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1379" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1379" bodyend="1378"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga3ea824ebc0fc1929a753cf48728853c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi cust_flag</definition>
        <argsstring>(void)</argsstring>
        <name>cust_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a flags_t representing custom type data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1380" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1380" bodyend="1379"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gacff3001250e2c87d96e6c622778c4ffa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi align_flag</definition>
        <argsstring>(void)</argsstring>
        <name>align_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a flags_t representing an alignment directive. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1381" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1381" bodyend="1380"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga25bd07366283665e9c493044ecc8bfd3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi float_flag</definition>
        <argsstring>(void)</argsstring>
        <name>float_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a flags_t representing a float. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1382" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1382" bodyend="1381"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga79666f78735d9727cae4ccbd7c6ca3dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi double_flag</definition>
        <argsstring>(void)</argsstring>
        <name>double_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a flags_t representing a double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1383" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1383" bodyend="1382"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga74f7c59993c499b8625f2e740d6bd3b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> idaapi</type>
        <definition>THREAD_SAFE flags_t idaapi packreal_flag</definition>
        <argsstring>(void)</argsstring>
        <name>packreal_flag</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get a flags_t representing a packed decimal real. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1384" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1384" bodyend="1383"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga54d4eddf62de312c70550341adbefde4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_byte</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_byte</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__databits_1ga31e184e1e9e9986dccb2bf75a5cc281a" kindref="member">FF_BYTE</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1386" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1386" bodyend="1384"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gae2c61a3e081f3cda318ec9aedc48c6ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_word</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_word</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__databits_1ga700e6fe75ce2d59afe9f0337419e5fb3" kindref="member">FF_WORD</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1387" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1387" bodyend="1386"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga63afb22ce812edf1c4b034fda04be191" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_dword</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_dword</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__databits_1ga113c39256aa0eb30138fc3dcbbb1b224" kindref="member">FF_DWORD</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1388" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1388" bodyend="1387"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga737e24e01444334b5d1b002d3a0c6c5d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_qword</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_qword</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__databits_1ga74d61c8ba1d3bedefbd3e619f1f4116a" kindref="member">FF_QWORD</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1389" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1389" bodyend="1388"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga6f8b09d8c1f48f0694a88beeeee1e86c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_oword</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_oword</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__databits_1ga6102a6e3eebb8350527c7613792080ae" kindref="member">FF_OWORD</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1390" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1390" bodyend="1389"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga125aae5b9affb9bdf05dac6301e01099" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_yword</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_yword</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__databits_1ga4c5878e95aef45b3816e5cfcf16cacb9" kindref="member">FF_YWORD</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1391" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1391" bodyend="1390"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga2b4270be217a60ccdd95586e432911a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_zword</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_zword</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__databits_1ga3c513c72624ec1d284f2c3e9f295a6e8" kindref="member">FF_ZWORD</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1392" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1392" bodyend="1391"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gabb8e62481338548854eb49ead755b817" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_tbyte</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_tbyte</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__databits_1ga8b0cb6734338e1ed1a3188d6b4c70b8f" kindref="member">FF_TBYTE</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1393" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1393" bodyend="1392"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga6af0c3992394a39b9cd6922a8ecbbaaf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_float</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_float</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__databits_1gadc1e062047911a7fda90a84959fa49bc" kindref="member">FF_FLOAT</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1394" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1394" bodyend="1393"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga5c9cf9b97f9e8ccbf50bd5ab01f2689c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_double</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_double</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__databits_1ga709bb154304e65d8991bc081a182ce2e" kindref="member">FF_DOUBLE</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1395" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1395" bodyend="1394"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gad356ee8d20c4339cfcded75a1ab5334a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_pack_real</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_pack_real</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__databits_1gaa0adb817e6662035bd7d06346c01c864" kindref="member">FF_PACKREAL</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1396" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1396" bodyend="1395"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga5685eabe52d67b5293ef6d39062e3b43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_strlit</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_strlit</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__databits_1gaa320c33a480cc1403e0c7912ee1bd522" kindref="member">FF_STRLIT</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1397" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1397" bodyend="1396"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga76ba97b115e2a491d4e25ebe9911e506" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_struct</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_struct</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__databits_1ga303e1d05f0fd18c165ff0c2c7e4aa4de" kindref="member">FF_STRUCT</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1398" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1398" bodyend="1397"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gab1fc7d724f7446176f8e0626e58d2a28" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_align</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_align</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__databits_1ga61f222cbe3cbe2570892096fc7dc1e8c" kindref="member">FF_ALIGN</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1399" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1399" bodyend="1398"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga93a96a1b4739bbb04cbb1c00e2eed89b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_custom</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_custom</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para><ref refid="group___f_f__databits_1ga19f933094d6c5c52e6f9861d533d1382" kindref="member">FF_CUSTOM</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1400" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1400" bodyend="1399"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga21fafd7373b1d9ac5e1c04dc2141acff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_byte</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_byte</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>See <ref refid="group___f_f__datafuncs1_1ga54d4eddf62de312c70550341adbefde4" kindref="member">is_byte()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1402" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1402" bodyend="1400"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gaccff8f950d62fae56ada7b962697ed79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_word</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_word</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>See <ref refid="group___f_f__datafuncs1_1gae2c61a3e081f3cda318ec9aedc48c6ba" kindref="member">is_word()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1403" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1403" bodyend="1402"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga0496291fa3aa49a666f0d0424b8ea29c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_dword</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_dword</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>See <ref refid="group___f_f__datafuncs1_1ga63afb22ce812edf1c4b034fda04be191" kindref="member">is_dword()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1404" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1404" bodyend="1403"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga67677092795e5de5fb95a98fc40f9234" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_qword</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_qword</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>See <ref refid="group___f_f__datafuncs1_1ga737e24e01444334b5d1b002d3a0c6c5d" kindref="member">is_qword()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1405" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1405" bodyend="1404"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga06425fcefdacc6c77012a142cefc8bdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_oword</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_oword</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>See <ref refid="group___f_f__datafuncs1_1ga6f8b09d8c1f48f0694a88beeeee1e86c" kindref="member">is_oword()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1406" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1406" bodyend="1405"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gacb4a7106f23e398c8832ca224f3bbdcf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_yword</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_yword</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>See <ref refid="group___f_f__datafuncs1_1ga125aae5b9affb9bdf05dac6301e01099" kindref="member">is_yword()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1407" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1407" bodyend="1406"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gaa7fff53cd3063f5edbb4bb770e191bb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_tbyte</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_tbyte</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>See <ref refid="group___f_f__datafuncs1_1gabb8e62481338548854eb49ead755b817" kindref="member">is_tbyte()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1408" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1408" bodyend="1407"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga2c69701a34fae14045bc2d049b1770e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_float</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_float</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>See <ref refid="group___f_f__datafuncs1_1ga6af0c3992394a39b9cd6922a8ecbbaaf" kindref="member">is_float()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1409" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1409" bodyend="1408"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga4ae3da58de731050dd56a0df3af095b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_double</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_double</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>See <ref refid="group___f_f__datafuncs1_1ga5c9cf9b97f9e8ccbf50bd5ab01f2689c" kindref="member">is_double()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1410" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1410" bodyend="1409"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gaf1469581afbbb7688fc9b1c6c2a38ab4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_pack_real</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_pack_real</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>See <ref refid="group___f_f__datafuncs1_1gad356ee8d20c4339cfcded75a1ab5334a" kindref="member">is_pack_real()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1411" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1411" bodyend="1410"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga9e4bd2d3b55480b0e5c64a93af129d86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_strlit</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_strlit</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>See <ref refid="group___f_f__datafuncs1_1ga5685eabe52d67b5293ef6d39062e3b43" kindref="member">is_strlit()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1412" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1412" bodyend="1411"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga9bc96b4ecba693b292ff7a1bcf6c6e06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_struct</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_struct</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>See <ref refid="group___f_f__datafuncs1_1ga76ba97b115e2a491d4e25ebe9911e506" kindref="member">is_struct()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1413" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1413" bodyend="1412"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gab91c2b76ed1c41861a9ea7f084783a50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_align</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_align</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>See <ref refid="group___f_f__datafuncs1_1gab1fc7d724f7446176f8e0626e58d2a28" kindref="member">is_align()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1414" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1414" bodyend="1413"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga1eaa068a06d8a52ab5dd6858321bbfe5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi f_is_custom</definition>
        <argsstring>(flags_t F, void *)</argsstring>
        <name>f_is_custom</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
<para>See <ref refid="group___f_f__datafuncs1_1ga93a96a1b4739bbb04cbb1c00e2eed89b" kindref="member">is_custom()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1415" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1415" bodyend="1414"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1gab0c18038248938d7fcb80a1b2cc8cdec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_same_data_type</definition>
        <argsstring>(flags_t F1, flags_t F2)</argsstring>
        <name>is_same_data_type</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F1</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F2</declname>
        </param>
        <briefdescription>
<para>Do the given flags specify the same data type? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1420" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1420" bodyend="1420"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs1_1ga5b36bdf78537d6aa9fd68f2c4eb51cc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> ida_export</type>
        <definition>idaman flags_t ida_export get_flags_by_size</definition>
        <argsstring>(size_t size)</argsstring>
        <name>get_flags_by_size</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get flags from size (in bytes). Supported sizes: 1, 2, 4, 8, 16, 32. For other sizes returns 0 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1427" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1gaf3bedcff83c11d490b914f2893c43ed3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export create_data</definition>
        <argsstring>(ea_t ea, flags_t dataflag, asize_t size, tid_t tid)</argsstring>
        <name>create_data</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>dataflag</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1ad8791d30d19843bc09b78bdf01a852ec" kindref="member">tid_t</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert to data (byte, word, dword, etc). This function may be used to create arrays. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataflag</parametername>
</parameternamelist>
<parameterdescription>
<para>type of data. Value of function <ref refid="group___f_f__datafuncs1_1gaa14a627f4353a5bdd533c6bbd020e90e" kindref="member">byte_flag()</ref>, <ref refid="group___f_f__datafuncs1_1gabf79b38da271c551fed0bada7c5d8337" kindref="member">word_flag()</ref>, etc. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of array in bytes. should be divisible by the size of one item of the specified type. for variable sized items it can be specified as 0, and the kernel will try to calculate the size. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>type id. If the specified type is a structure, then tid is structure id. Otherwise should be <ref refid="netnode_8hpp_1ab745219216aec4e8abf2c1dcc5d5eac0" kindref="member">BADNODE</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1ga293876f6be066f531d06a1bacc150b78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi create_byte</definition>
        <argsstring>(ea_t ea, asize_t length)</argsstring>
        <name>create_byte</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Convert to byte. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1455" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1455" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1ga47d8280e846861ca6981011f5ace8f17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi create_word</definition>
        <argsstring>(ea_t ea, asize_t length)</argsstring>
        <name>create_word</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Convert to word. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1456" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1456" bodyend="1455"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1ga16678964eb864e33ad263b16a76c9e08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi create_dword</definition>
        <argsstring>(ea_t ea, asize_t length)</argsstring>
        <name>create_dword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Convert to dword. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1457" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1457" bodyend="1456"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1gaa9c6494b8490c1ddb24ffacd81e6d939" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi create_qword</definition>
        <argsstring>(ea_t ea, asize_t length)</argsstring>
        <name>create_qword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Convert to quadword. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1458" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1458" bodyend="1457"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1ga2e8dfff063754d4c0c39048f7361fcb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi create_oword</definition>
        <argsstring>(ea_t ea, asize_t length)</argsstring>
        <name>create_oword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Convert to octaword/xmm word. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1459" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1459" bodyend="1458"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1ga0317e5fcb975fcedb66039f534d51503" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi create_yword</definition>
        <argsstring>(ea_t ea, asize_t length)</argsstring>
        <name>create_yword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Convert to ymm word. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1460" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1460" bodyend="1459"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1ga9cac45e01c4c8254b07b73615f25cb1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi create_zword</definition>
        <argsstring>(ea_t ea, asize_t length)</argsstring>
        <name>create_zword</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Convert to zmm word. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1461" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1461" bodyend="1460"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1ga858e487dedf1eac66149128aed6760d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi create_tbyte</definition>
        <argsstring>(ea_t ea, asize_t length)</argsstring>
        <name>create_tbyte</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Convert to tbyte. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1462" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1462" bodyend="1461"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1ga8f5a0499d61f8f7cfca0a79f10a80f86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi create_float</definition>
        <argsstring>(ea_t ea, asize_t length)</argsstring>
        <name>create_float</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Convert to float. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1463" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1463" bodyend="1462"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1ga4abbe119badbae6312776aa91c530428" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi create_double</definition>
        <argsstring>(ea_t ea, asize_t length)</argsstring>
        <name>create_double</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Convert to double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1464" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1464" bodyend="1463"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1ga7c6f50a158a436c6d941b982e1c6bc29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi create_packed_real</definition>
        <argsstring>(ea_t ea, asize_t length)</argsstring>
        <name>create_packed_real</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Convert to packed decimal real. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1465" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1465" bodyend="1464"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1ga541172cb78c41659dbddf6ea04e21279" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi create_struct</definition>
        <argsstring>(ea_t ea, asize_t length, tid_t tid)</argsstring>
        <name>create_struct</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1ad8791d30d19843bc09b78bdf01a852ec" kindref="member">tid_t</ref></type>
          <declname>tid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert to struct </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1466" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1466" bodyend="1465"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1ga37a60af5845655d87f48e4e5d5d38554" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi create_custdata</definition>
        <argsstring>(ea_t ea, asize_t length, int dtid, int fid)</argsstring>
        <name>create_custdata</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dtid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fid</declname>
        </param>
        <briefdescription>
<para>Convert to custom data type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1468" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1468" bodyend="1471"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1ga558590c540b5f825b138f31d357f0f6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export create_align</definition>
        <argsstring>(ea_t ea, asize_t length, int alignment)</argsstring>
        <name>create_align</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>int</type>
          <declname>alignment</declname>
        </param>
        <briefdescription>
<para>Alignment: 0 or 2..32. If it is 0, is will be calculated. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1473" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1ga4bbe5e1ed0c0f7c5141880523c14a46a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export calc_min_align</definition>
        <argsstring>(asize_t length)</argsstring>
        <name>calc_min_align</name>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Returns: 1..32. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1474" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1gabf03a6d16a635ed68c28d57d0c66f2d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export calc_max_align</definition>
        <argsstring>(ea_t endea)</argsstring>
        <name>calc_max_align</name>
        <param>
          <type>ea_t</type>
          <declname>endea</declname>
        </param>
        <briefdescription>
<para>Returns: 0..32. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1475" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1ga3d40bbff5669625ef0b2d033f1257e0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export calc_def_align</definition>
        <argsstring>(ea_t ea, int mina, int maxa)</argsstring>
        <name>calc_def_align</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mina</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxa</declname>
        </param>
        <briefdescription>
<para>Calculate default alignment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1gaf2fded8a83079e589ff8406e1f20148a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export create_16bit_data</definition>
        <argsstring>(ea_t ea, asize_t length)</argsstring>
        <name>create_16bit_data</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Convert to 16-bit quantity (take byte size into account) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__datafuncs2_1gaf2b0e11ca8002f2e699a2e1244cafe6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export create_32bit_data</definition>
        <argsstring>(ea_t ea, asize_t length)</argsstring>
        <name>create_32bit_data</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Convert to 32-bit quantity (take byte size into account) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1478" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a0f6031bb8d2bad52aa580d438e5f83ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman size_t ida_export</type>
        <definition>idaman size_t ida_export get_max_strlit_length</definition>
        <argsstring>(ea_t ea, int32 strtype, int options=0)</argsstring>
        <name>get_max_strlit_length</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
          <declname>strtype</declname>
        </param>
        <param>
          <type>int</type>
          <declname>options</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determine maximum length of string literal. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>starting address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strtype</parametername>
</parameternamelist>
<parameterdescription>
<para>string type. one of <ref refid="group___s_t_r_t_y_p_e__" kindref="compound">String type codes</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___a_l_o_p_t__" kindref="compound">string literal length options</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of the string in octets (octet==8bit) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1511" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a57f1e913261ce74ace2abf13ac488069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_strlit_contents</definition>
        <argsstring>(qstring *utf8, ea_t ea, size_t len, int32 type, size_t *maxcps=NULL, int flags=0)</argsstring>
        <name>get_strlit_contents</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>utf8</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>maxcps</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get contents of string literal, as UTF-8-encoded codepoints. This function returns the displayed part of the string It works even if the string has not been created in the database yet.</para><para>If &apos;len&apos; is size_t(-1), it will be computed like so:<itemizedlist>
<listitem><para>if a string literal is present at &apos;ea&apos;, <ref refid="bytes_8hpp_1a34792242834806a65b5f3be1036bf516" kindref="member">get_item_size()</ref> * bytesize(ea) will be used</para></listitem><listitem><para>otherwise, get_max_strlit_length(..., ALOPT_IGNHEADS) will be used</para></listitem></itemizedlist>
</para><para>About &apos;maxcps&apos;: this specifies a limit to the number of codepoints, not bytes in the UTF-8 output buffer. So for example although U+4e12 will use 3 bytes in the output buffer, it still counts as only 1 character <ndash/> unless STRCONV_ESCAPE is used. If &apos;STRCONV_ESCAPE&apos; is used, U+4e12 will be converted to the string &quot;\u4E12&quot;, and will use 6 bytes in the output buffer and also count as 6 codepoints.</para><para>If &apos;STRCONV_REPLCHAR&apos;, any undecodable byte will re represented as U+FFFD, occupy 3 bytes in the output buffer, and count for 1 codepoint.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">utf8</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of the string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the string, in octets (octet=8bit) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>type of the string. one of <ref refid="group___s_t_r_t_y_p_e__" kindref="compound">String type codes</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">maxcps</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum length of codepoints, after possible escaping, in output buffer (not counting terminating zero) on exit, will be set to 0 if string got truncated can be NULL if not needed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___s_t_r_c_o_n_v__" kindref="compound">string conversion flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of generated text (in bytes) or -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1554" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1abe7ed03165ef9d8bdc5be53c19bcc634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export create_strlit</definition>
        <argsstring>(ea_t start, size_t len, int32 strtype)</argsstring>
        <name>create_strlit</name>
        <param>
          <type>ea_t</type>
          <declname>start</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
          <declname>strtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert to string literal and give a meaningful name. &apos;start&apos; may be higher than &apos;end&apos;, the kernel will swap them in this case <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>starting address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the string in bytes. if 0, then <ref refid="bytes_8hpp_1a0f6031bb8d2bad52aa580d438e5f83ed" kindref="member">get_max_strlit_length()</ref> will be used to determine the length </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strtype</parametername>
</parameternamelist>
<parameterdescription>
<para>string type. one of <ref refid="group___s_t_r_t_y_p_e__" kindref="compound">String type codes</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1573" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a15324999a0001dda0609c9db66c505e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export print_strlit_type</definition>
        <argsstring>(qstring *out, int32 strtype, qstring *out_tooltip=NULL, int flags=0)</argsstring>
        <name>print_strlit_type</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
          <declname>strtype</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out_tooltip</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get string type information: the string type name (possibly decorated with hotkey markers), and the tooltip.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strtype</parametername>
</parameternamelist>
<parameterdescription>
<para>the string type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out_tooltip</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional output buffer for the tooltip </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>or&apos;ed PSTF_* constants </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of generated text </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1599" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ac224c2a7cbae88d541f81c7f46ef3a7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="unionopinfo__t" kindref="compound">opinfo_t</ref> *ida_export</type>
        <definition>idaman opinfo_t* ida_export get_opinfo</definition>
        <argsstring>(opinfo_t *buf, ea_t ea, int n, flags_t flags)</argsstring>
        <name>get_opinfo</name>
        <param>
          <type><ref refid="unionopinfo__t" kindref="compound">opinfo_t</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get additional information about an operand representation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to receive the result. may not be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand, 0 or 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>flags of the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>NULL if no additional representation information </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1613" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a0cdce8a38ea5461837c9c26e93034493" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_opinfo</definition>
        <argsstring>(ea_t ea, int n, flags_t flag, const opinfo_t *ti, bool suppress_events=false)</argsstring>
        <name>set_opinfo</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>flag</declname>
        </param>
        <param>
          <type>const <ref refid="unionopinfo__t" kindref="compound">opinfo_t</ref> *</type>
          <declname>ti</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>suppress_events</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set additional information about an operand representation. This function is a low level one. Only the kernel should use it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of the item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand, 0 or 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>flags of the item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ti</parametername>
</parameternamelist>
<parameterdescription>
<para>additional representation information </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>suppress_events</parametername>
</parameternamelist>
<parameterdescription>
<para>do not generate changing_op_type and op_type_changed events </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1629" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a0047a5fe29de7d0189efaada1e6cce48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void del_one_opinfo</definition>
        <argsstring>(ea_t ea, int n, flags_t flag)</argsstring>
        <name>del_one_opinfo</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete additional information about an operand representation. This function is a low level one. Only the kernel should use it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of the item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand, 0 or 1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flag</parametername>
</parameternamelist>
<parameterdescription>
<para>flags of the item </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1643" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a8affc32206f4b3826c7ae106591a88fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void del_opinfo</definition>
        <argsstring>(ea_t ea, flags_t flag)</argsstring>
        <name>del_opinfo</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>flag</declname>
        </param>
        <briefdescription>
<para>See <ref refid="bytes_8hpp_1a0047a5fe29de7d0189efaada1e6cce48" kindref="member">del_one_opinfo()</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1645" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a0fbb5c7737afbfc663bc1d99fcd5f407" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman asize_t ida_export</type>
        <definition>idaman asize_t ida_export get_data_elsize</definition>
        <argsstring>(ea_t ea, flags_t F, const opinfo_t *ti=NULL)</argsstring>
        <name>get_data_elsize</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>const <ref refid="unionopinfo__t" kindref="compound">opinfo_t</ref> *</type>
          <declname>ti</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get size of data type specified in flags &apos;F&apos;. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of the item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>flags </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ti</parametername>
</parameternamelist>
<parameterdescription>
<para>additional information about the data type. For example, if the current item is a structure instance, then ti-&gt;tid is structure id. Otherwise is ignored (may be NULL). If specified as NULL, will be automatically retrieved from the database </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><itemizedlist>
<listitem><para>byte : 1</para></listitem><listitem><para>word : 2</para></listitem><listitem><para>etc...</para></listitem></itemizedlist>
</para></simplesect>
If flags doesn&apos;t specify a data, then return 1 </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1662" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a617cc493ef928abc91ebe5c91dc6d71d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>asize_t</type>
        <definition>asize_t get_full_data_elsize</definition>
        <argsstring>(ea_t ea, flags_t F, const opinfo_t *ti=NULL)</argsstring>
        <name>get_full_data_elsize</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>const <ref refid="unionopinfo__t" kindref="compound">opinfo_t</ref> *</type>
          <declname>ti</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get full size of data type specified in flags &apos;F&apos;. takes into account processors with wide bytes e.g. returns 2 for a byte element with 16-bit bytes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1668" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1668" bodyend="1672"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ae65303ecfce37abac49ae4231d7b7377" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export is_varsize_item</definition>
        <argsstring>(ea_t ea, flags_t F, const opinfo_t *ti=NULL, asize_t *itemsize=NULL)</argsstring>
        <name>is_varsize_item</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type>const <ref refid="unionopinfo__t" kindref="compound">opinfo_t</ref> *</type>
          <declname>ti</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>asize_t *</type>
          <declname>itemsize</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the item at &apos;ea&apos; variable size?. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of the item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>flags </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ti</parametername>
</parameternamelist>
<parameterdescription>
<para>additional information about the data type. For example, if the current item is a structure instance, then ti-&gt;tid is structure id. Otherwise is ignored (may be NULL). If specified as NULL, will be automatically retrieved from the database </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>itemsize</parametername>
</parameternamelist>
<parameterdescription>
<para>if not NULL and the item is varsize, itemsize will contain the calculated item size (for struct types, the minimal size is returned) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>varsize item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>fixed item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>error (bad data definition) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1688" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a65ba2f2e64ac096f13a8bc96ca73b64e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export can_define_item</definition>
        <argsstring>(ea_t ea, asize_t length, flags_t flags)</argsstring>
        <name>can_define_item</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Can define item (instruction/data) of the specified &apos;length&apos;, starting at &apos;ea&apos;? <simplesect kind="note"><para>if there is an item starting at &apos;ea&apos;, this function ignores it </para></simplesect>
<simplesect kind="note"><para>this function converts to unexplored all encountered data items with fixup information. Should be fixed in the future. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>if not 0, then the kernel will ignore the data types specified by the flags and destroy them. For example: <preformatted>
                 1000 dw 5
                 1002 db 5 ; undef
                 1003 db 5 ; undef
                 1004 dw 5
                 1006 dd 5
                 </preformatted> can_define_item(1000, 6, 0) - false because of dw at 1004 <linebreak/>
 can_define_item(1000, 6, word_flag()) - true, word at 1004 is destroyed </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1-yes, 0-no</para></simplesect>
This function may return 0 if:<itemizedlist>
<listitem><para>a new item would cross segment boundaries</para></listitem><listitem><para>a new item would overlap with existing items (except items specified by &apos;flags&apos;) </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1712" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__codefuncs_1gaf4b846767d354823c81e4146a245ee9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi has_immd</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>has_immd</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Has immediate value? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1734" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1734" bodyend="1734"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__codefuncs_1ga1fa3dc80149519257ad59f2eb5a4b0a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> bool idaapi</type>
        <definition>THREAD_SAFE bool idaapi is_func</definition>
        <argsstring>(flags_t F)</argsstring>
        <name>is_func</name>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <briefdescription>
<para>Is function start? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1739" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1739" bodyend="1739"/>
      </memberdef>
      <memberdef kind="function" id="group___f_f__codefuncs_1ga560484246ad27da7047675a330cd6ead" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_immd</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>set_immd</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set &apos;has immediate operand&apos; flag. Returns true if the <ref refid="group___f_f__codebits_1gacea2ec7d412b8d21330145f9bd8d7543" kindref="member">FF_IMMD</ref> bit was not set and now is set </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1745" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ab46024f0f75ce338912ff399e45568a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export register_custom_data_type</definition>
        <argsstring>(const data_type_t *dtinfo)</argsstring>
        <name>register_custom_data_type</name>
        <param>
          <type>const <ref refid="structdata__type__t" kindref="compound">data_type_t</ref> *</type>
          <declname>dtinfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a new data type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtinfo</parametername>
</parameternamelist>
<parameterdescription>
<para>description of the new data type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt; 0 : id of the new custom data type, &lt; 0 : error when the custom data type with the same name has already been registered </para></simplesect>
<simplesect kind="note"><para>dtid 0 is reserved for built-in data types. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1875" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a39bb8cf4f407f6723a621b2560111f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export unregister_custom_data_type</definition>
        <argsstring>(int dtid)</argsstring>
        <name>unregister_custom_data_type</name>
        <param>
          <type>int</type>
          <declname>dtid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unregister a data type. When the idb is closed, all custom data types are automatically unregistered, but since it happens too late (plugin modules could already be unloaded) one has to unregister custom data types explicitly. The ids of unregistered custom data types remain allocated and when the same name is reused to register a custom data type, it will get assigned the same id. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtid</parametername>
</parameternamelist>
<parameterdescription>
<para>data type to unregister </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>no such dtid </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1889" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a910a2755f876fef4d415e7ec88c3a413" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export register_custom_data_format</definition>
        <argsstring>(const data_format_t *dtform)</argsstring>
        <name>register_custom_data_format</name>
        <param>
          <type>const <ref refid="structdata__format__t" kindref="compound">data_format_t</ref> *</type>
          <declname>dtform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register a new data format. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtform</parametername>
</parameternamelist>
<parameterdescription>
<para>description of the new data format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&gt; 0 : id of the new custom data format, &lt; 0 : error when the custom data format with the same name has already been registered to the data type </para></simplesect>
<simplesect kind="note"><para>dfid 0 is unused. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1899" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ad010f7bd1f08140e2e0adc77400fc351" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export unregister_custom_data_format</definition>
        <argsstring>(int dfid)</argsstring>
        <name>unregister_custom_data_format</name>
        <param>
          <type>int</type>
          <declname>dfid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unregister a data format. <simplesect kind="see"><para><ref refid="bytes_8hpp_1a39bb8cf4f407f6723a621b2560111f0d" kindref="member">unregister_custom_data_type()</ref> </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dfid</parametername>
</parameternamelist>
<parameterdescription>
<para>data format to unregister </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>no such dfid </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1908" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a3b49f09cf7d65ff3a7e11991de4dc72f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman const <ref refid="structdata__type__t" kindref="compound">data_type_t</ref> *ida_export</type>
        <definition>idaman const data_type_t* ida_export get_custom_data_type</definition>
        <argsstring>(int dtid)</argsstring>
        <name>get_custom_data_type</name>
        <param>
          <type>int</type>
          <declname>dtid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get definition of a registered custom data type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtid</parametername>
</parameternamelist>
<parameterdescription>
<para>data type id </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>data type definition or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1915" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ad5f5419174666e724ae7996041ad7870" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman const <ref refid="structdata__format__t" kindref="compound">data_format_t</ref> *ida_export</type>
        <definition>idaman const data_format_t* ida_export get_custom_data_format</definition>
        <argsstring>(int dfid)</argsstring>
        <name>get_custom_data_format</name>
        <param>
          <type>int</type>
          <declname>dfid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get definition of a registered custom data format. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dfid</parametername>
</parameternamelist>
<parameterdescription>
<para>data format id </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>data format definition or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1922" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a2e5f4c242bc11c2f1441401592fa648e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export attach_custom_data_format</definition>
        <argsstring>(int dtid, int dfid)</argsstring>
        <name>attach_custom_data_format</name>
        <param>
          <type>int</type>
          <declname>dtid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dfid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Attach the data format to the data type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtid</parametername>
</parameternamelist>
<parameterdescription>
<para>data type id that can use the data format. 0 means all standard data types. Such data formats can be applied to any data item or instruction operands. For instruction operands, the <ref refid="structdata__format__t_1a484363fae7730c346c2f9488ac0d16f6" kindref="member">data_format_t::value_size</ref> check is not performed by the kernel. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dfid</parametername>
</parameternamelist>
<parameterdescription>
<para>data format id </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>no such `dtid&apos;, or no such `dfid&apos;, or the data format has already been attached to the data type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1936" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a2b262984a0e6314cb289f8f3b9957b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export detach_custom_data_format</definition>
        <argsstring>(int dtid, int dfid)</argsstring>
        <name>detach_custom_data_format</name>
        <param>
          <type>int</type>
          <declname>dtid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dfid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detach the data format from the data type. Unregistering a custom data type detaches all attached data formats, no need to detach them explicitly. You still need unregister them. Unregistering a custom data format detaches it from all attached data types. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dtid</parametername>
</parameternamelist>
<parameterdescription>
<para>data type id to detach data format from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dfid</parametername>
</parameternamelist>
<parameterdescription>
<para>data format id to detach </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>no such `dtid&apos;, or no such `dfid&apos;, or the data format was not attached to the data type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1950" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a0315f596c2f7dcd5c1730989c42dd5d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_attached_custom_data_format</definition>
        <argsstring>(int dtid, int dfid)</argsstring>
        <name>is_attached_custom_data_format</name>
        <param>
          <type>int</type>
          <declname>dtid</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dfid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1955" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ac8666f9333df700da97c98af645fc714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export get_custom_data_types</definition>
        <argsstring>(intvec_t *out, asize_t min_size=0, asize_t max_size=BADADDR)</argsstring>
        <name>get_custom_data_types</name>
        <param>
          <type><ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>min_size</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>asize_t</type>
          <declname>max_size</declname>
          <defval><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get list of registered custom data type ids. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the output. may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_size</parametername>
</parameternamelist>
<parameterdescription>
<para>minimum value size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_size</parametername>
</parameternamelist>
<parameterdescription>
<para>maximum value size </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of custom data types with the specified size limits </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1963" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a5791f45da0c6235ad3c8d70dcebcab7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export get_custom_data_formats</definition>
        <argsstring>(intvec_t *out, int dtid)</argsstring>
        <name>get_custom_data_formats</name>
        <param>
          <type><ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dtid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get list of attached custom data formats for the specified data type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the output. may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtid</parametername>
</parameternamelist>
<parameterdescription>
<para>data type id </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of returned custom data formats. if error, returns -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1974" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a2cbe93e51482c28e7425d903f1b951c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export find_custom_data_type</definition>
        <argsstring>(const char *name)</argsstring>
        <name>find_custom_data_type</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get id of a custom data type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the custom data type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>id or -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1981" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1adfdcd0ae26d0f832db18f539df334426" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export find_custom_data_format</definition>
        <argsstring>(const char *name)</argsstring>
        <name>find_custom_data_format</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get id of a custom data format. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the custom data format </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>id or -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1988" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1abaa59b8ec4df56ac22d47d6bb7624e3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_cmt</definition>
        <argsstring>(ea_t ea, const char *comm, bool rptble)</argsstring>
        <name>set_cmt</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>comm</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rptble</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set an indented comment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comm</parametername>
</parameternamelist>
<parameterdescription>
<para>comment string<itemizedlist>
<listitem><para>NULL: do nothing (return 0)</para></listitem><listitem><para>&quot;&quot; : delete comment </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rptble</parametername>
</parameternamelist>
<parameterdescription>
<para>is repeatable? </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2003" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1aa15e5cc5c923b7932b79bb67b3fe54ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_cmt</definition>
        <argsstring>(qstring *buf, ea_t ea, bool rptble)</argsstring>
        <name>get_cmt</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rptble</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get an indented comment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer, may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address. may point to tail byte, the function will find start of the item </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rptble</parametername>
</parameternamelist>
<parameterdescription>
<para>get repeatable comment? </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of comment or -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2013" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a71071d6da99ce19f5f37d865d7439ac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t get_repeatable_cmt</definition>
        <argsstring>(qstring *buf, ea_t ea)</argsstring>
        <name>get_repeatable_cmt</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a repeatable comment of any type (indented or function comment). This function is used to display an indented comment if no regular (non-repeatable) comment is present. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the comment </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address. may point to tail byte, the function will find start of the item </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of comment or -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2024" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a61eeb49c7dd0395fc00c8d97149560e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t get_any_indented_cmt</definition>
        <argsstring>(qstring *buf, ea_t ea, color_t *cmttype)</argsstring>
        <name>get_any_indented_cmt</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1a051016ac92685c95d47a7c1850c19632" kindref="member">color_t</ref> *</type>
          <declname>cmttype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get any indented comment (regular or repeatable indented or function). This function is used to display an indented comment for an item. It looks for a regular comment and calls <ref refid="bytes_8hpp_1a71071d6da99ce19f5f37d865d7439ac3" kindref="member">get_repeatable_cmt()</ref> if it is not found. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the comment </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmttype</parametername>
</parameternamelist>
<parameterdescription>
<para>will contain color of the comment. The color depends on the type of the comment. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of comment or -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2036" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1abf8f737249505e8479ccbd92ceb56c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export append_cmt</definition>
        <argsstring>(ea_t ea, const char *str, bool rptble)</argsstring>
        <name>append_cmt</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>rptble</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append to an indented comment. Creates a new comment if none exists. Appends a newline character and the specified string otherwise. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>comment string to append </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rptble</parametername>
</parameternamelist>
<parameterdescription>
<para>append to repeatable comment? </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2047" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1aea1663690ac8f4a860526e13d6c3549d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_predef_insn_cmt</definition>
        <argsstring>(qstring *buf, const insn_t &amp;ins)</argsstring>
        <name>get_predef_insn_cmt</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get predefined comment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for the comment </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ins</parametername>
</parameternamelist>
<parameterdescription>
<para>current instruction information </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of comment or -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2065" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a5c3cbe7931862f0d0c04baa5ecbeef8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export find_byte</definition>
        <argsstring>(ea_t sEA, asize_t size, uchar value, int bin_search_flags)</argsstring>
        <name>find_byte</name>
        <param>
          <type>ea_t</type>
          <declname>sEA</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bin_search_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find forward a byte with the specified value (only 8-bit value from the database). example: ea=4 size=3 will inspect addresses 4, 5, and 6 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sEA</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to inspect </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to find </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bin_search_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___b_i_n___s_e_a_r_c_h__" kindref="compound">Search flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>address of byte or <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2081" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ae1a70437813c4ca4500a6ba33a74eaeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export find_byter</definition>
        <argsstring>(ea_t sEA, asize_t size, uchar value, int bin_search_flags)</argsstring>
        <name>find_byter</name>
        <param>
          <type>ea_t</type>
          <declname>sEA</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bin_search_flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find reverse a byte with the specified value (only 8-bit value from the database). example: ea=4 size=3 will inspect addresses 6, 5, and 4 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sEA</parametername>
</parameternamelist>
<parameterdescription>
<para>the lower address of the search range </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to inspect </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to find </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bin_search_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___b_i_n___s_e_a_r_c_h__" kindref="compound">Search flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>address of byte or <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2092" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a28902ef0f9f10ee3193410ac0f4d6a19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export parse_binpat_str</definition>
        <argsstring>(compiled_binpat_vec_t *out, ea_t ea, const char *in, int radix, int strlits_encoding=PBSENC_DEF1BPU, qstring *errbuf=NULL)</argsstring>
        <name>parse_binpat_str</name>
        <param>
          <type><ref refid="classqvector" kindref="compound">compiled_binpat_vec_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int</type>
          <declname>radix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>strlits_encoding</declname>
          <defval>PBSENC_DEF1BPU</defval>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>errbuf</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert user-specified binary string to internal representation. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of compiled binary patterns, for use with <ref refid="bytes_8hpp_1af2f6ea57cdc1672b7e303aee3485d3e5" kindref="member">bin_search2()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address to convert for (the conversion depends on the address, because the number of bits in a byte depend on the segment type) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>input text string. contains space-separated:<itemizedlist>
<listitem><para>numbers (numeric base is determined by &apos;radix&apos;)<itemizedlist>
<listitem><para>if value of number fits a byte, it is considered as a byte</para></listitem><listitem><para>if value of number fits a word, it is considered as 2 bytes</para></listitem><listitem><para>if value of number fits a dword,it is considered as 4 bytes</para></listitem></itemizedlist>
</para></listitem><listitem><para>&quot;...&quot; string constants</para></listitem><listitem><para>&apos;x&apos; single-character constants</para></listitem><listitem><para>? variable bytes </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Examples of search strings (assuming base 16): CD 21 - bytes 0xCD, 0x21 21CD - bytes 0xCD, 0x21 (little endian ) or 0x21, 0xCD (big-endian) &quot;Hello&quot;, 0 - the null terminated string &quot;Hello&quot; L&quot;Hello&quot; - &apos;H&apos;, 0, &apos;e&apos;, 0, &apos;l&apos;, 0, &apos;l&apos;, 0, &apos;o&apos;, 0 B8 ? ? ? ? 90 - byte 0xB8, 4 bytes with any value, byte 0x90</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>radix</parametername>
</parameternamelist>
<parameterdescription>
<para>numeric base of numbers (8,10,16) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strlits_encoding</parametername>
</parameternamelist>
<parameterdescription>
<para>the target encoding into which the string literals present in &apos;in&apos;, should be encoded. Can be any from [1, <ref refid="nalt_8hpp_1a540e1c42a493e1c5a15e5932adfaf669" kindref="member">get_encoding_qty()</ref>), or the special values PBSENC_* </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>error buffer (can be NULL) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false either in case of parsing error, or if at least one requested target encoding couldn&apos;t encode the string literals present in &quot;in&quot;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1af2f6ea57cdc1672b7e303aee3485d3e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export bin_search2</definition>
        <argsstring>(ea_t start_ea, ea_t end_ea, const compiled_binpat_vec_t &amp;data, int flags)</argsstring>
        <name>bin_search2</name>
        <param>
          <type>ea_t</type>
          <declname>start_ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>end_ea</declname>
        </param>
        <param>
          <type>const <ref refid="classqvector" kindref="compound">compiled_binpat_vec_t</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Search for a string in the program. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address, start of range to search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address, end of range to search (exclusive) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the prepared data to search for (see <ref refid="bytes_8hpp_1a28902ef0f9f10ee3193410ac0f4d6a19" kindref="member">parse_binpat_str()</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___b_i_n___s_e_a_r_c_h__" kindref="compound">Search flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> (if pressed Ctrl-Break or not found) or string address. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a77031ceba6e59534135734258abaa0b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t</type>
        <definition>ea_t bin_search2</definition>
        <argsstring>(ea_t start_ea, ea_t end_ea, const uchar *image, const uchar *mask, size_t len, int flags)</argsstring>
        <name>bin_search2</name>
        <param>
          <type>ea_t</type>
          <declname>start_ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>end_ea</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2165" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2165" bodyend="2179"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1ac8e186d2aabd72c2c20f7be3d56d4299" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t idaapi</type>
        <definition>ea_t idaapi next_inited</definition>
        <argsstring>(ea_t ea, ea_t maxea)</argsstring>
        <name>next_inited</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>maxea</declname>
        </param>
        <briefdescription>
<para>Find the next initialized address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2197" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2197" bodyend="2203"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a6a7843b7c337d1fe2bb5221f84fbc2a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t idaapi</type>
        <definition>ea_t idaapi prev_inited</definition>
        <argsstring>(ea_t ea, ea_t minea)</argsstring>
        <name>prev_inited</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>minea</declname>
        </param>
        <briefdescription>
<para>Find the previous initialized address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2207" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2207" bodyend="2213"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a59a144c2a218b18a54f89a083d8952d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export equal_bytes</definition>
        <argsstring>(ea_t ea, const uchar *image, const uchar *mask, size_t len, bool sense_case)</argsstring>
        <name>equal_bytes</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
          <declname>image</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>sense_case</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compare &apos;len&apos; bytes of the program starting from &apos;ea&apos; with &apos;image&apos;. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>image</parametername>
</parameternamelist>
<parameterdescription>
<para>bytes to compare with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>array of 1/0 bytes, it&apos;s length is &apos;len&apos;. 1 means to perform the comparison of the corresponding byte. 0 means not to perform. if mask == NULL, then all bytes of &apos;image&apos; will be compared. if mask == <ref refid="bytes_8hpp_1aa80006fc5cd3a216c0f514baad625c4d" kindref="member">SKIP_FF_MASK</ref> then 0xFF bytes will be skipped </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of block to compare in bytes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sense_case</parametername>
</parameternamelist>
<parameterdescription>
<para>case-sensitive comparison? </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>equal </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>not equal </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1aab2b026ae2fc396277270cf6886ea8e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export update_hidden_range</definition>
        <argsstring>(const hidden_range_t *ha)</argsstring>
        <name>update_hidden_range</name>
        <param>
          <type>const <ref refid="structhidden__range__t" kindref="compound">hidden_range_t</ref> *</type>
          <declname>ha</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Update hidden range information in the database. You can not use this function to change the range boundaries <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ha</parametername>
</parameternamelist>
<parameterdescription>
<para>range to update </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a5262bd0891209f481b13ee783e38c722" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export add_hidden_range</definition>
        <argsstring>(ea_t ea1, ea_t ea2, const char *description, const char *header, const char *footer, bgcolor_t color)</argsstring>
        <name>add_hidden_range</name>
        <param>
          <type>ea_t</type>
          <declname>ea1</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea2</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>header</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>footer</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a3df5040891132e50157aee66affdf1de" kindref="member">bgcolor_t</ref></type>
          <declname>color</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark a range of addresses as hidden. The range will be created in the invisible state with the default color <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea1</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of start of the address range </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea2</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of end of the address range </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>description</parametername>
<parametername>header</parametername>
<parametername>footer</parametername>
</parameternamelist>
<parameterdescription>
<para>range parameters </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1aab9b9fce476edfe2b2cf8a50333c657b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="structhidden__range__t" kindref="compound">hidden_range_t</ref> *ida_export</type>
        <definition>idaman hidden_range_t* ida_export get_hidden_range</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_hidden_range</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pointer to hidden range structure, in: linear address. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>any address in the hidden range </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a5a102f38ad2d70d58476884617779c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="structhidden__range__t" kindref="compound">hidden_range_t</ref> *ida_export</type>
        <definition>idaman hidden_range_t* ida_export getn_hidden_range</definition>
        <argsstring>(int n)</argsstring>
        <name>getn_hidden_range</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pointer to hidden range structure, in: number of hidden range. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of hidden range, is in range 0..<ref refid="bytes_8hpp_1a76c3b9d45c445392f73390e90ab7a626" kindref="member">get_hidden_range_qty()</ref>-1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a76c3b9d45c445392f73390e90ab7a626" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export get_hidden_range_qty</definition>
        <argsstring>(void)</argsstring>
        <name>get_hidden_range_qty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number of hidden ranges. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a850f8f6a36d4011137a485d37057043f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export get_hidden_range_num</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_hidden_range_num</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get number of a hidden range. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>any address in the hidden range </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of hidden range (0..<ref refid="bytes_8hpp_1a76c3b9d45c445392f73390e90ab7a626" kindref="member">get_hidden_range_qty()</ref>-1) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a3e5733db8decf478dd00c1bd2540a86f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="structhidden__range__t" kindref="compound">hidden_range_t</ref> *ida_export</type>
        <definition>idaman hidden_range_t* ida_export get_prev_hidden_range</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_prev_hidden_range</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pointer to previous hidden range. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>any address in the program </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ptr to hidden range or NULL if previous hidden range doesn&apos;t exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a2c6dc0142ecb0cbfc7fb4e33471a53f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="structhidden__range__t" kindref="compound">hidden_range_t</ref> *ida_export</type>
        <definition>idaman hidden_range_t* ida_export get_next_hidden_range</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_next_hidden_range</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pointer to next hidden range. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>any address in the program </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ptr to hidden range or NULL if next hidden range doesn&apos;t exist </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1addc67c0da3489a8f0c934066462f9dfa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="structhidden__range__t" kindref="compound">hidden_range_t</ref> *ida_export</type>
        <definition>idaman hidden_range_t* ida_export get_first_hidden_range</definition>
        <argsstring>(void)</argsstring>
        <name>get_first_hidden_range</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pointer to the first hidden range. <simplesect kind="return"><para>ptr to hidden range or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1aa89abfe32128bb290c759d502e55e4e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="structhidden__range__t" kindref="compound">hidden_range_t</ref> *ida_export</type>
        <definition>idaman hidden_range_t* ida_export get_last_hidden_range</definition>
        <argsstring>(void)</argsstring>
        <name>get_last_hidden_range</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pointer to the last hidden range. <simplesect kind="return"><para>ptr to hidden range or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a0dba106583971df2820c92c3a15d0ba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export del_hidden_range</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>del_hidden_range</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete hidden range. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>any address in the hidden range </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a7487b1a4c03cdb4c120b9da41d63f501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export add_mapping</definition>
        <argsstring>(ea_t from, ea_t to, asize_t size)</argsstring>
        <name>add_mapping</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>IDA supports memory mapping. References to the addresses from the mapped range use data and meta-data from the mapping range. <simplesect kind="note"><para>You should set flag PR2_MAPPING in ph.flag2 to use memory mapping Add memory mapping range. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>start of the mapped range (nonexistent address) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>start of the mapping range (existent address) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the range </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1af7a61ab7c936a56bce543eecb5ae4dcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export del_mapping</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>del_mapping</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete memory mapping range. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>any address in the mapped range </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2367" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a2122b5b37703401df0a05c0538ef2c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export use_mapping</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>use_mapping</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Translate address according to current mappings. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>address to translate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>translated address </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2374" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a33007784af2c955b57ebda8caa8d51b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman size_t ida_export</type>
        <definition>idaman size_t ida_export get_mappings_qty</definition>
        <argsstring>(void)</argsstring>
        <name>get_mappings_qty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number of mappings. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a33af98c88580e234b2f8bf7b6b878578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export get_mapping</definition>
        <argsstring>(ea_t *from, ea_t *to, asize_t *size, size_t n)</argsstring>
        <name>get_mapping</name>
        <param>
          <type>ea_t *</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t *</type>
          <declname>to</declname>
        </param>
        <param>
          <type>asize_t *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get memory mapping range by its number. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>start of the mapped range </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>start of the mapping range </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the range </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of mapping range (0..<ref refid="bytes_8hpp_1a33007784af2c955b57ebda8caa8d51b5" kindref="member">get_mappings_qty()</ref>-1) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if the specified range doesn&apos;t exist, otherwise returns `from&apos;, `to&apos;, `size&apos; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2387" column="1"/>
      </memberdef>
      <memberdef kind="function" id="bytes_8hpp_1a63f951ff1e64ef2ce0eaf8bb659611a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>THREAD_SAFE ssize_t get_hex_string</definition>
        <argsstring>(char *buf, size_t bufsize, const uchar *bytes, size_t len)</argsstring>
        <name>get_hex_string</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
          <declname>bytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="2470" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="2470" bodyend="2477"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains functions that deal with individual byte characteristics. </para>    </briefdescription>
    <detaileddescription>
<para>Each byte of the disassembled program is represented by a 32-bit value. We will call this value &apos;flags&apos;. The structure of the flags is here.</para><para>You are not allowed to inspect individual bits of flags and modify them directly. Use special functions to inspect and/or modify flags.</para><para>Flags are kept in a virtual array file (*.id1). Addresses (ea) are all 32-bit (or 64-bit) quantities. </para>    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp"/>
  </compounddef>
</doxygen>
