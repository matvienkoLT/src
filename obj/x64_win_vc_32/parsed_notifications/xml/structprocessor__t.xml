<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="structprocessor__t" kind="struct" language="C++" prot="public">
    <compoundname>processor_t</compoundname>
    <includes refid="idp_8hpp" local="no">idp.hpp</includes>
      <sectiondef kind="user-defined">
      <header>Byte size</header>
      <description><para>Number of 8bit bytes required to hold one byte of the target processor. </para></description>
      <memberdef kind="function" id="structprocessor__t_1a33f991813d3e0cc28375d5330dd246f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int processor_t::cbsize</definition>
        <argsstring>(void)</argsstring>
        <name>cbsize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>for code segments </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="520" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="520" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a3d79d528bb32036ab8d76d102ee0037f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int processor_t::dbsize</definition>
        <argsstring>(void)</argsstring>
        <name>dbsize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>for non-code segments </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="521" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="521" bodyend="520"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Names</header>
      <description><para>IDP module may support several compatible processors. The following arrays define processor names: </para></description>
      <memberdef kind="variable" id="structprocessor__t_1a7f36c9be272d994bc341b3fcb78726f6" prot="public" static="no" mutable="no">
        <type>const char *const  *</type>
        <definition>const char* const* processor_t::psnames</definition>
        <argsstring></argsstring>
        <name>psnames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>short processor names (NULL terminated). Each name should be shorter than 9 characters </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="528" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="528" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1adb54cc1d2faab6891ad190e2e5b7bf08" prot="public" static="no" mutable="no">
        <type>const char *const  *</type>
        <definition>const char* const* processor_t::plnames</definition>
        <argsstring></argsstring>
        <name>plnames</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>long processor names (NULL terminated). No restriction on name lengths. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="530" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="530" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Segment registers</header>
      <description><para>Segment register information (use virtual CS and DS registers if your processor doesn&apos;t have segment registers): </para></description>
      <memberdef kind="variable" id="structprocessor__t_1a4206e35bf99d211c18d53bd1035eb2e3" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 processor_t::reg_first_sreg</definition>
        <argsstring></argsstring>
        <name>reg_first_sreg</name>
        <briefdescription>
<para>number of first segment register </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1641" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1641" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1aa2f70771df2d04aefdfe0d9b7e546d4e" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 processor_t::reg_last_sreg</definition>
        <argsstring></argsstring>
        <name>reg_last_sreg</name>
        <briefdescription>
<para>number of last segment register </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1642" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1642" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1a811665eba68bd3606023c09af8f85705" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 processor_t::segreg_size</definition>
        <argsstring></argsstring>
        <name>segreg_size</name>
        <briefdescription>
<para>size of a segment register in bytes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1643" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1643" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Virtual segment registers</header>
      <description><para>If your processor doesn&apos;t have segment registers, you should define 2 virtual segment registers for CS and DS. Let&apos;s call them rVcs and rVds. </para></description>
      <memberdef kind="variable" id="structprocessor__t_1a8c1090cef7d02b379600a8049cd4d25f" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 processor_t::reg_code_sreg</definition>
        <argsstring></argsstring>
        <name>reg_code_sreg</name>
        <briefdescription>
<para>number of CS register </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1651" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1651" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1af0bc236f72fe8f6b2b06a8342de8c7ab" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 processor_t::reg_data_sreg</definition>
        <argsstring></argsstring>
        <name>reg_data_sreg</name>
        <briefdescription>
<para>number of DS register </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1652" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1652" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Empirics</header>
      <memberdef kind="variable" id="structprocessor__t_1a9414a4e585ab47514144871a585cc120" prot="public" static="no" mutable="no">
        <type>const <ref refid="structbytes__t" kindref="compound">bytes_t</ref> *</type>
        <definition>const bytes_t* processor_t::codestart</definition>
        <argsstring></argsstring>
        <name>codestart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array of typical code start sequences. This array is used when a new file is loaded to find the beginnings of code sequences. This array is terminated with a zero length item. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1658" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1658" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1ab3849caf742c36dc743f0aa88267221a" prot="public" static="no" mutable="no">
        <type>const <ref refid="structbytes__t" kindref="compound">bytes_t</ref> *</type>
        <definition>const bytes_t* processor_t::retcodes</definition>
        <argsstring></argsstring>
        <name>retcodes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Array of &apos;return&apos; instruction opcodes. This array is used to determine form of autogenerated locret_... labels. The last item of it should be { 0, NULL } This array may be NULL Better way of handling return instructions is to define the {is_ret_insn} callback in the notify() function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1664" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1664" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Instruction set</header>
      <memberdef kind="variable" id="structprocessor__t_1a35f080945b61116baab1bfc67f195f62" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 processor_t::instruc_start</definition>
        <argsstring></argsstring>
        <name>instruc_start</name>
        <briefdescription>
<para>icode of the first instruction </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1677" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1677" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1a5bc594ff4b32014972b205b5c9b07deb" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 processor_t::instruc_end</definition>
        <argsstring></argsstring>
        <name>instruc_end</name>
        <briefdescription>
<para>icode of the last instruction + 1 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1678" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1678" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1a6fb7cfbf39771b646cfc5e5d43259175" prot="public" static="no" mutable="no">
        <type>const <ref refid="structinstruc__t" kindref="compound">instruc_t</ref> *</type>
        <definition>const instruc_t* processor_t::instruc</definition>
        <argsstring></argsstring>
        <name>instruc</name>
        <briefdescription>
<para>Array of instructions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1684" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1684" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a461e26b10900db7a5e6b843fe8ce7434" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool processor_t::is_canon_insn</definition>
        <argsstring>(uint16 itype) const</argsstring>
        <name>is_canon_insn</name>
        <param>
          <type><ref refid="pro_8h_1a05f6b0ae8f6a6e135b0e290c25fe0e4e" kindref="member">uint16</ref></type>
          <declname>itype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does the given value specify a valid instruction for this instruction set?. See <ref refid="structprocessor__t_1a35f080945b61116baab1bfc67f195f62" kindref="member">instruc_start</ref> and <ref refid="structprocessor__t_1a5bc594ff4b32014972b205b5c9b07deb" kindref="member">instruc_end</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1682" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1682" bodyend="1682"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0" prot="public" static="no">
        <name>event_t</name>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a8902d365f396d75e96a81c73b02ca13c" prot="public">
          <name>ev_init</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The IDP module is just loaded. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>idp_modname</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char *) processor module name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;0 on failure </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a93a414d2d7ac3eeee04c19853b53bd27" prot="public">
          <name>ev_term</name>
          <briefdescription>
<para>The IDP module is being unloaded. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a190f0300a7e6ad8e090389f7b986e9f8" prot="public">
          <name>ev_newprc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Before changing processor type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pnum</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) processor number in the array of processor names </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keep_cfg</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool) true: do not modify kernel configuration </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>prohibit </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0af0b69a407fcdc6e5627901c6b3e5f4a6" prot="public">
          <name>ev_newasm</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Before setting a new assembler. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>asmnum</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0af544684794ac0f908ba551b0085482a9" prot="public">
          <name>ev_newfile</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A new file has been loaded. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>(char *) input file name </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae9430716ca6d6e53548863cce8fd839f" prot="public">
          <name>ev_oldfile</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An old file has been loaded. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fname</parametername>
</parameternamelist>
<parameterdescription>
<para>(char *) input file name </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a20b00ee7b8f4f3ce47579430ce3fa1c0" prot="public">
          <name>ev_newbinary</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IDA is about to load a binary file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>(char *) binary file name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fileoff</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="pro_8h_1a42ae75d34f73b9e691bd16aaddb897e5" kindref="member">qoff64_t</ref>) offset in the file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>basepara</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) base loading paragraph </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>binoff</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) loader offset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref>) number of bytes to load </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a0886df8414100bfdcaacf87a8ae165e7" prot="public">
          <name>ev_endbinary</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IDA has loaded a binary file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ok</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool) file loaded successfully? </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a77fb9c9858c9519da17acd2a2bc60391" prot="public">
          <name>ev_set_idp_options</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Set IDP-specific configuration option Also see set_options_t above <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keyword</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value_type</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>(const void *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char **) - a error message will be returned here (can be NULL) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 ok </para></simplesect>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
<simplesect kind="return"><para>-1 error (and message in errbuf) </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a47bcbd0313ef457a9ff2b6330ab80af3" prot="public">
          <name>ev_set_proc_options</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Called if the user specified an option string in the command line: -p&lt;processor name&gt;=&quot;&quot;&gt;:&lt;options&gt;. Can be used for setting a processor subtype. Also called if option string is passed to <ref refid="idp_8hpp_1a2e01ca60cc6559ab1dbbfbb9562d6870" kindref="member">set_processor_type()</ref> and IDC&apos;s SetProcessorType(). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>options</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>confidence</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) 0: loader&apos;s suggestion 1: user&apos;s decision </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 if bad option string </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a108d52b9133787bd01c5ca8a7550f2e9" prot="public">
          <name>ev_ana_insn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Analyze one instruction and fill &apos;out&apos; structure. This function shouldn&apos;t change the database, flags or anything else. All these actions should be performed only by emu_insn() function. {ea} contains address of instruction to analyze. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classinsn__t" kindref="compound">insn_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>length of the instruction in bytes, 0 if instruction can&apos;t be decoded. </para></simplesect>
<simplesect kind="return"><para>0 if instruction can&apos;t be decoded. </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a82b81ce84c2257cb5a9176648e2fd6fc" prot="public">
          <name>ev_emu_insn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Emulate instruction, create cross-references, plan to analyze subsequent instructions, modify flags etc. Upon entrance to this function, all information about the instruction is in &apos;insn&apos; structure. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 ok </para></simplesect>
<simplesect kind="return"><para>-1 the kernel will delete the instruction </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ac286cd442f5f923d434a9a420d2639e8" prot="public">
          <name>ev_out_header</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Function to produce start of disassembled text <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outctx</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structoutctx__t" kindref="compound">outctx_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae78a32919dde7288ed2e816658081c2a" prot="public">
          <name>ev_out_footer</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Function to produce end of disassembled text <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outctx</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structoutctx__t" kindref="compound">outctx_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae9a7ac704447bbbd50dface52b617807" prot="public">
          <name>ev_out_segstart</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Function to produce start of segment <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outctx</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structoutctx__t" kindref="compound">outctx_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seg</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classsegment__t" kindref="compound">segment_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 ok </para></simplesect>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a9153e7bd063780720b8761a8e7371a25" prot="public">
          <name>ev_out_segend</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Function to produce end of segment <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outctx</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structoutctx__t" kindref="compound">outctx_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seg</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classsegment__t" kindref="compound">segment_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 ok </para></simplesect>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0abf9364c0e642488fac29f61f2b6d0e00" prot="public">
          <name>ev_out_assumes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Function to produce assume directives when segment register value changes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outctx</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structoutctx__t" kindref="compound">outctx_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 ok </para></simplesect>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a8edf4ec2bd23d42d3db641761b3156de" prot="public">
          <name>ev_out_insn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generate text representation of an instruction in &apos;ctx.insn&apos; <ref refid="structoutctx__t" kindref="compound">outctx_t</ref> provides functions to output the generated text. This function shouldn&apos;t change the database, flags or anything else. All these actions should be performed only by emu_insn() function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outctx</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structoutctx__t" kindref="compound">outctx_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a25783c63147edce4591595cba57d1fb3" prot="public">
          <name>ev_out_mnem</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generate instruction mnemonics. This callback should append the colored mnemonics to ctx.outbuf Optional notification, if absent, out_mnem will be called. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outctx</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structoutctx__t" kindref="compound">outctx_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if appended the mnemonics </para></simplesect>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a8312057bdefad72948a26885372af286" prot="public">
          <name>ev_out_operand</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generate text representation of an instruction operand <ref refid="structoutctx__t" kindref="compound">outctx_t</ref> provides functions to output the generated text. All these actions should be performed only by emu_insn() function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outctx</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structoutctx__t" kindref="compound">outctx_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classop__t" kindref="compound">op_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 ok </para></simplesect>
<simplesect kind="return"><para>-1 operand is hidden </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a960b08cf65ab07718b9c1eeab0f3288b" prot="public">
          <name>ev_out_data</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generate text representation of data items This function may change the database and create cross-references if analyze_only is set <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outctx</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structoutctx__t" kindref="compound">outctx_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>analyze_only</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 ok </para></simplesect>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a4fc4ad04d596de2dbea5694286bd461e" prot="public">
          <name>ev_out_label</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The kernel is going to generate an instruction label line or a function header. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outctx</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structoutctx__t" kindref="compound">outctx_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colored_name</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;0 if the kernel should not generate the label </para></simplesect>
<simplesect kind="return"><para>0 not implemented or continue </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a15733589357bcc46d558536220edcb81" prot="public">
          <name>ev_out_special_item</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generate text representation of an item in a special segment i.e. absolute symbols, externs, communal definitions etc <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outctx</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structoutctx__t" kindref="compound">outctx_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>segtype</parametername>
</parameternamelist>
<parameterdescription>
<para>(uchar) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 ok </para></simplesect>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
<simplesect kind="return"><para>-1 overflow </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a1790c885236860f938b0c7e983fac38f" prot="public">
          <name>ev_gen_stkvar_def</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generate stack variable definition line Default line is varname = type ptr value, where &apos;type&apos; is one of byte,word,dword,qword,tbyte <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outctx</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structoutctx__t" kindref="compound">outctx_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mptr</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classmember__t" kindref="compound">member_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>(sval_t) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 - ok </para></simplesect>
<simplesect kind="return"><para>0 - not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a44268c939ffcc2e8c4c54a1c75796bc0" prot="public">
          <name>ev_gen_regvar_def</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generate register variable definition line. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outctx</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structoutctx__t" kindref="compound">outctx_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structregvar__t" kindref="compound">regvar_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>ok, generated the definition text </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 - not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a0b636852302fb6ded9309c69cb984f75" prot="public">
          <name>ev_gen_src_file_lnnum</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Callback: generate analog of: <verbatim>                     #line &quot;file.c&quot; 123

                     directive.
                     \param outctx  (::outctx_t *) output context
                     \param file    (const char *) source file (may be NULL)
                     \param lnnum   (size_t) line number
                     \retval 1 directive has been generated
                     \return 0 - not implemented  </verbatim> </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a50e477c14c432b24b7415aa3d96f4a9d" prot="public">
          <name>ev_creating_segm</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A new segment is about to be created. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seg</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classsegment__t" kindref="compound">segment_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>segment should not be created </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aa3c9018493b02e6d0e2b5a4ac7b7549b" prot="public">
          <name>ev_moving_segm</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>May the kernel move the segment? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>seg</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classsegment__t" kindref="compound">segment_t</ref> *) segment to move </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) new segment start address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) combination of <ref refid="group___m_s_f__" kindref="compound">Move segment flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>yes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>the kernel should stop </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a08fe9e01fa7424bd80e734a963c1b16a" prot="public">
          <name>ev_coagulate</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Try to define some unexplored bytes. This notification will be called if the kernel tried all possibilities and could not find anything more useful than to convert to array of bytes. The module can help the kernel and convert the bytes into something more useful. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of converted bytes </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a326c50bb55c58af34774e6fbab74214c" prot="public">
          <name>ev_undefine</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An item in the database (insn or data) is being deleted. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(ea_t) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 do not delete srranges at the item end </para></simplesect>
<simplesect kind="return"><para>0 srranges can be deleted </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae96a0913cd051a9a7861ff2d3514a370" prot="public">
          <name>ev_treat_hindering_item</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>An item hinders creation of another item. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hindering_item_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_item_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref>) (0 for code) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_item_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_item_length</parametername>
</parameternamelist>
<parameterdescription>
<para>(::asize_t) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>no reaction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>!=0</parametername>
</parameternamelist>
<parameterdescription>
<para>the kernel may delete the hindering item </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a2a2bb0b58f0b5ab62748063b0e601a0e" prot="public">
          <name>ev_rename</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The kernel is going to rename a byte. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>new_name</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) <ref refid="group___s_n__" kindref="compound">Set name flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;0 if the kernel should not rename it. </para></simplesect>
<simplesect kind="return"><para>2 to inhibit the notification. I.e., the kernel should not rename, but &apos;<ref refid="name_8hpp_1aa75fb1ba89bb22f323472e329eb4a486" kindref="member">set_name()</ref>&apos; should return &apos;true&apos;. also see {renamed} the return value is ignored when kernel is going to delete name </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aa0a7a527f9e9cba6c406358fad2d4ab1" prot="public">
          <name>ev_is_far_jump</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>is indirect far jump or call instruction? meaningful only if the processor has &apos;near&apos; and &apos;far&apos; reference types <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>icode</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
<simplesect kind="return"><para>1 yes </para></simplesect>
<simplesect kind="return"><para>-1 no </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aca1ba6609e0e3814c499511d513eb099" prot="public">
          <name>ev_is_sane_insn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Is the instruction sane for the current file type?. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref>*) the instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>no_crefs</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) 1: the instruction has no code refs to it. ida just tries to convert unexplored bytes to an instruction (but there is no other reason to convert them into an instruction) 0: the instruction is created because of some coderef, user request or another weighty reason. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&gt;=0</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>no, the instruction isn&apos;t likely to appear in the program </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0addaf1f6a31bbefb8033c27edc0950cb8" prot="public">
          <name>ev_is_cond_insn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Is conditional instruction? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref> *) instruction address </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>yes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>no </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>not implemented or not instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aa62d5d4207c7aee3967ab8abddb8c3c1" prot="public">
          <name>ev_is_call_insn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Is the instruction a &quot;call&quot;? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref> *) instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>unknown </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>no </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>yes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0abec6210c7336a864b70a7e5e94a9ac9d" prot="public">
          <name>ev_is_ret_insn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Is the instruction a &quot;return&quot;? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref> *) instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>strict</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool) 1: report only ret instructions 0: include instructions like &quot;leave&quot; which begins the function epilog </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>unknown </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>no </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>yes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a2e378dfbfccdef3feaa2da1bab69326e" prot="public">
          <name>ev_may_be_func</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Can a function start here? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref>*) the instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>state</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) autoanalysis phase 0: creating functions 1: creating chunks </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>probability 0..100 </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a978a9e36b842dfe0e7380c3521fa2e1d" prot="public">
          <name>ev_is_basic_block_end</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Is the current instruction end of a basic block?. This function should be defined for processors with delayed jump slots. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref>*) the instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>call_insn_stops_block</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>unknown </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>no </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>yes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a11d97a517b214dfde194a1de69e5e5ab" prot="public">
          <name>ev_is_indirect_jump</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Determine if instruction is an indirect jump. If <ref refid="group___c_f___1gafd76ed40dfacb78082bc6f5683375379" kindref="member">CF_JUMP</ref> bit can not describe all jump types jumps, please define this callback. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref>*) the instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>use <ref refid="group___c_f___1gafd76ed40dfacb78082bc6f5683375379" kindref="member">CF_JUMP</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>no </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>2</parametername>
</parameternamelist>
<parameterdescription>
<para>yes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0adeb44139bfc91c40cb8e3bd93659ca8e" prot="public">
          <name>ev_is_insn_table_jump</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Determine if instruction is a table jump or call. If <ref refid="group___c_f___1gafd76ed40dfacb78082bc6f5683375379" kindref="member">CF_JUMP</ref> bit can not describe all kinds of table jumps, please define this callback. It will be called for insns with <ref refid="group___c_f___1gafd76ed40dfacb78082bc6f5683375379" kindref="member">CF_JUMP</ref> bit set. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref>*) the instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>yes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>no </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a9d42d8c2836dceec7666e4b8eb6f71a1" prot="public">
          <name>ev_is_switch</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Find &apos;switch&apos; idiom. It will be called for instructions marked with <ref refid="group___c_f___1gafd76ed40dfacb78082bc6f5683375379" kindref="member">CF_JUMP</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>si</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structswitch__info__t" kindref="compound">switch_info_t</ref> *), out </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref> *) instruction possibly belonging to a switch </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>switch is found, &apos;si&apos; is filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>no switch found or not implemented </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a98ff2357b62ae2783e781073a9549578" prot="public">
          <name>ev_calc_switch_cases</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calculate case values and targets for a custom jump table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>casevec</parametername>
</parameternamelist>
<parameterdescription>
<para>(::casevec_t *) vector of case values (may be NULL) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>targets</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="pro_8h_1a9f46d9d52bbfcc78bc1836f4f2683da4" kindref="member">eavec_t</ref> *) corresponding target addresses (my be NULL) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insn_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) address of the &apos;indirect jump&apos; instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>si</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structswitch__info__t" kindref="compound">switch_info_t</ref> *) switch information </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;=0</parametername>
</parameternamelist>
<parameterdescription>
<para>failed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ab1fe188a32b7e4eeedbbbcbe5066af56" prot="public">
          <name>ev_create_switch_xrefs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Create xrefs for a custom jump table. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>jumpea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) address of the jump insn </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>si</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structswitch__info__t" kindref="compound">switch_info_t</ref> *) switch information </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>must return 1 Must be implemented if module uses custom jump tables, <ref refid="group___s_w_i___1ga9c8b1cc7dc7face3d01f48b8e2b78135" kindref="member">SWI_CUSTOM</ref> </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a4d200c0f82f9d32c4bda426aadc3e9dc" prot="public">
          <name>ev_is_align_insn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Is the instruction created only for alignment purposes?. Do not directly call this function, use <ref refid="idp_8hpp_1a0fd0a2914e9e1fe193175e78a5a6cdeb" kindref="member">is_align_insn()</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(ea_t) - instruction address </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>number</parametername>
</parameternamelist>
<parameterdescription>
<para>of bytes in the instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ad25720c4c15166242743be03127e0a84" prot="public">
          <name>ev_is_alloca_probe</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Does the function at &apos;ea&apos; behave as __alloca_probe? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>yes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>no </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0af754550ff044ee8ba2bf4b90037eb4b1" prot="public">
          <name>ev_delay_slot_insn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Get delay slot instruction <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t *) instruction address in question, if answer is positive then set &apos;ea&apos; to the delay slot insn address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bexec</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool *) execute slot if jumping, initially set to &apos;true&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fexec</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool *) execute slot if not jumping, initally set to &apos;true&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>positive answer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;=0</parametername>
</parameternamelist>
<parameterdescription>
<para>ordinary insn </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Input &apos;ea&apos; may point to the instruction with a delay slot or to the delay slot instruction itself. </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aef2ae5d93a83201e69e626f1308ca21f" prot="public">
          <name>ev_is_sp_based</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Check whether the operand is relative to stack pointer or frame pointer This event is used to determine how to output a stack variable If not implemented, then all operands are sp based by default. Implement this event only if some stack references use frame pointer instead of stack pointer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>(int *) out, combination of <ref refid="group___o_p___f_p___s_p" kindref="compound">SP/FP operand flags</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classop__t" kindref="compound">op_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
<simplesect kind="return"><para>1 ok </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a9b1b28b1c71c8d77861f528c78eade90" prot="public">
          <name>ev_can_have_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Can the operand have a type as offset, segment, decimal, etc? (for example, a register AX can&apos;t have a type, meaning that the user can&apos;t change its representation. see <ref refid="bytes_8hpp" kindref="compound">bytes.hpp</ref> for information about types and flags) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classop__t" kindref="compound">op_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>unknown </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>no </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>yes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a2996b08408addef7f16b01180e2efdc3" prot="public">
          <name>ev_cmp_operands</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Compare instruction operands <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op1</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classop__t" kindref="compound">op_t</ref>*) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op2</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classop__t" kindref="compound">op_t</ref>*) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>equal </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>not equal </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>not implemented </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0abf55189dd21fab945f35eab8fa9088cf" prot="public">
          <name>ev_adjust_refinfo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Called from apply_fixup before converting operand to reference. Can be used for changing the reference info. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ri</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structrefinfo__t" kindref="compound">refinfo_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) instruction address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) operand number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structfixup__data__t" kindref="compound">fixup_data_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 - do not create an offset </para></simplesect>
<simplesect kind="return"><para>0 - not implemented or refinfo adjusted </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae7391e79329dedc4bd100a629e61f569" prot="public">
          <name>ev_get_operand_string</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Request text string for operand (cli, java, ...). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>(qstring *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref>*) the instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opnum</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) operand number, -1 means any string operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 no string (or empty string) &gt;0 original string length without terminating zero </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a8dcc2b7307fb19045e6acf6d6016d89d" prot="public">
          <name>ev_get_reg_name</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generate text representation of a register. Most processor modules do not need to implement this callback. It is useful only if {reg_names}[reg] does not provide the correct register name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>(qstring *) output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) internal register number as defined in the processor module </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>(size_t) register width in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reghi</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) if not -1 then this function will return the register pair </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if error, strlen(buf) otherwise </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aaddd272c33f61d746f850746a5451a9f" prot="public">
          <name>ev_str2reg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Convert a register name to a register number. The register number is the register index in the {reg_names} array Most processor modules do not need to implement this callback It is useful only if {reg_names}[reg] does not provide the correct register names <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>regname</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>register number + 1 </para></simplesect>
<simplesect kind="return"><para>0 not implemented or could not be decoded </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a0fa6560db645bbc4751b5cee7760cf30" prot="public">
          <name>ev_get_autocmt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Callback: get dynamic auto comment. Will be called if the autocomments are enabled and the comment retrieved from ida.int starts with &apos;$!&apos;. &apos;insn&apos; contains valid info. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>(qstring *) output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref>*) the instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>new comment has been generated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>callback has not been handled. the buffer must not be changed in this case </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a0de30b0749ce3401ec930a1904bcb274" prot="public">
          <name>ev_get_bg_color</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Get item background color. Plugins can hook this callback to color disassembly lines dynamically <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>color</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="pro_8h_1a3df5040891132e50157aee66affdf1de" kindref="member">bgcolor_t</ref> *), out </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>not implemented </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>color set </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a1f6f7128d8213f4433c5c94e16635aa7" prot="public">
          <name>ev_is_jump_func</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Is the function a trivial &quot;jump&quot; function?. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pfn</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classfunc__t" kindref="compound">func_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jump_target</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>func_pointer</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>no </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>don&apos;t know </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>yes, see &apos;jump_target&apos; and &apos;func_pointer&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a54a6dfcb795c6d8167ebdb5116bcf579" prot="public">
          <name>ev_func_bounds</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para><ref refid="funcs_8hpp_1af27a7eb0cc4e210f6ffa21e6aa06e589" kindref="member">find_func_bounds()</ref> finished its work. The module may fine tune the function bounds <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>possible_return_code</parametername>
</parameternamelist>
<parameterdescription>
<para>(int *), in/out </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pfn</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classfunc__t" kindref="compound">func_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_func_end_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) (from the kernel&apos;s point of view) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a726a4a238e3c41a53777e5e04b911029" prot="public">
          <name>ev_verify_sp</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>All function instructions have been analyzed. Now the processor module can analyze the stack pointer for the whole function <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pfn</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classfunc__t" kindref="compound">func_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>bad stack pointer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae161c5b9fbb789a4ed5a9e88539802f7" prot="public">
          <name>ev_verify_noreturn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The kernel wants to set &apos;noreturn&apos; flags for a function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pfn</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classfunc__t" kindref="compound">func_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0: ok. any other value: do not set &apos;noreturn&apos; flag </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a4e97147365c7e9487f57ffc2bd82894a" prot="public">
          <name>ev_create_func_frame</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Create a function frame for a newly created function Set up frame size, its attributes etc <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pfn</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classfunc__t" kindref="compound">func_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 ok </para></simplesect>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a73d90e8e78294379f7efdb58e0fa4ca9" prot="public">
          <name>ev_get_frame_retsize</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Get size of function return address in bytes If this eveny is not implemented, the kernel will assume<itemizedlist>
<listitem><para>8 bytes for 64-bit function</para></listitem><listitem><para>4 bytes for 32-bit function</para></listitem><listitem><para>2 bytes otherwise If this eveny is not implemented, the kernel will assume <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>frsize</parametername>
</parameternamelist>
<parameterdescription>
<para>(int *) frame size (out) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pfn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classfunc__t" kindref="compound">func_t</ref> *), can&apos;t be NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 ok </para></simplesect>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
</para></listitem></itemizedlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae3c289592a68b9362e83fab157097cbf" prot="public">
          <name>ev_get_stkvar_scale_factor</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Should stack variable references be multiplied by a coefficient before being used in the stack frame?. Currently used by TMS320C55 because the references into the stack should be multiplied by 2 <simplesect kind="note"><para><ref refid="group___p_r___1gaf96c8c11c1d33bf6b8b45cd0c596b9a9" kindref="member">PR_SCALE_STKVARS</ref> should be set to use this callback </para></simplesect>
<simplesect kind="return"><para>scaling factor, 0-not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ad1283662b4901e2ea7d85af70bc7f817" prot="public">
          <name>ev_demangle_name</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Demangle a C++ (or another language) name into a user-readable string. This event is called by <ref refid="name_8hpp_1aa9c7d3ed8cf3b79dca8ee2262c9f3b56" kindref="member">demangle_name()</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>(int32 *) value to return from <ref refid="name_8hpp_1aa9c7d3ed8cf3b79dca8ee2262c9f3b56" kindref="member">demangle_name()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *) output buffer. may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char *) mangled name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>disable_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>(uint32) flags to inhibit parts of output or compiler info/other (see MNG_) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>demreq</parametername>
</parameternamelist>
<parameterdescription>
<para>(demreq_type_t) operation to perform </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>: 1 if success, 0-not implemented </para></simplesect>
<simplesect kind="note"><para>if you call <ref refid="name_8hpp_1aa9c7d3ed8cf3b79dca8ee2262c9f3b56" kindref="member">demangle_name()</ref> from the handler, protect against recursion! </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a6362bc58103da0a115d1c15c3ce41fe1" prot="public">
          <name>ev_add_cref</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A code reference is being created. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="group__xref__type_1ga44e2b79869a9595bbe6265ff2026aa98" kindref="member">cref_t</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 - cancel cref creation </para></simplesect>
<simplesect kind="return"><para>0 - not implemented or continue </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a64a7c332726e8a44498b879162e4d24f" prot="public">
          <name>ev_add_dref</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A data reference is being created. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="group__xref__type_1ga78aab6d0d6bd9cb4904bbdbb5ac4fa71" kindref="member">dref_t</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 - cancel dref creation </para></simplesect>
<simplesect kind="return"><para>0 - not implemented or continue </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a58ace401d909f95b24a1e8fcae9810d4" prot="public">
          <name>ev_del_cref</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A code reference is being deleted. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>expand</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 - cancel cref deletion </para></simplesect>
<simplesect kind="return"><para>0 - not implemented or continue </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0affd5e295fef35e6175c3db5150ca5396" prot="public">
          <name>ev_del_dref</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>A data reference is being deleted. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 - cancel dref deletion </para></simplesect>
<simplesect kind="return"><para>0 - not implemented or continue </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a00c056a442c9524d2c7f7e90669c8275" prot="public">
          <name>ev_coagulate_dref</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Data reference is being analyzed. plugin may correct &apos;code_ea&apos; (e.g. for thumb mode refs, we clear the last bit) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>may_define</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>code_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 - cancel dref analysis </para></simplesect>
<simplesect kind="return"><para>0 - not implemented or continue </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a1edb3d05f21feee48cf7d271032dcbc2" prot="public">
          <name>ev_may_show_sreg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>The kernel wants to display the segment registers in the messages window. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>current_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;0 if the kernel should not show the segment registers. (assuming that the module has done it) </para></simplesect>
<simplesect kind="return"><para>0 - not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a268f12ba7873a0778460826a59e268aa" prot="public">
          <name>ev_loader_elf_machine</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>ELF loader machine type checkpoint. A plugin check of the &apos;machine_type&apos;. If it is the desired one, the the plugin fills &apos;p_procname&apos; with the processor name (one of the names present in {psnames}). &apos;p_pd&apos; is used to handle relocations, otherwise can be left untouched. This event occurs for each newly loaded ELF file <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>li</parametername>
</parameternamelist>
<parameterdescription>
<para>(linput_t *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>machine_type</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_procname</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char **) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_pd</parametername>
</parameternamelist>
<parameterdescription>
<para>(proc_def_t **) (see ldr\elf.h) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>e_machine value (if it is different from the original e_machine value, procname and &apos;p_pd&apos; will be ignored and the new value will be used) </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a0ca73f0b4d8eb1c319f668cb8c520b86" prot="public">
          <name>ev_auto_queue_empty</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>One analysis queue is empty. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="auto_8hpp_1ae3fe1a7af243ca1880188111193297cf" kindref="member">atype_t</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void see also <ref refid="namespaceidb__event_1a0feb6e648b4e6e3f0ed954abea672784a8d4508d4ede7ad33b0df402700a95740" kindref="member">idb_event::auto_empty_finally</ref> </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aac26bb0ae2ef530084cbeb8c3078bd43" prot="public">
          <name>ev_validate_flirt_func</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Flirt has recognized a library function. This callback can be used by a plugin or proc module to intercept it and validate such a function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funcname</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>do not create a function, </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>function is validated </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a1cf0dcb7a9e11a5220863ddb8722bd09" prot="public">
          <name>ev_adjust_libfunc_ea</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Called when a signature module has been matched against bytes in the database. This is used to compute the offset at which a particular module&apos;s libfunc should be applied. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sig</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classidasgn__t" kindref="compound">idasgn_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>libfun</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structlibfunc__t" kindref="compound">libfunc_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>&apos;ea&apos; initially contains the ea_t of the start of the pattern match </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>the ea_t pointed to by the third argument was modified. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;=0</parametername>
</parameternamelist>
<parameterdescription>
<para>not modified. use default algorithm. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a5f2ba1e8f4586958cc9cef0f514667e2" prot="public">
          <name>ev_assemble</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Assemble an instruction. (display a warning if an error is found). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bin</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *) pointer to output opcode buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) linear address of instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cs</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) cs of instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ip</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) ip of instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use32</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool) is 32bit segment? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char *) line to assemble </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>size of the instruction in bytes </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0abe5d814d671bf8564be4212cefb61238" prot="public">
          <name>ev_extract_address</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Extract address from a string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(ea_t *), out </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>screen_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>(size_t) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>kernel should use the standard algorithm </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>error </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a5cccab69e499642d3873649769de31cf" prot="public">
          <name>ev_realcvt</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Floating point -&gt; IEEE conversion <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>(void *) pointer to data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>(uint16 *) internal IEEE format data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>swt</parametername>
</parameternamelist>
<parameterdescription>
<para>(uint16) operation (see <ref refid="ieee_8h_1a236e96bab295bd7292d14604355699c6" kindref="member">realcvt()</ref> in <ref refid="ieee_8h" kindref="compound">ieee.h</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
<simplesect kind="return"><para>1 ok </para></simplesect>
<simplesect kind="return"><para><ref refid="group___r_e_a_l___e_r_r_o_r__" kindref="compound">Floating point/IEEE Conversion codes</ref> on error </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a87a749b6180d2fc6c4b4436df4eddc2f" prot="public">
          <name>ev_gen_asm_or_lst</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Callback: generating asm or lst file. The kernel calls this callback twice, at the beginning and at the end of listing generation. The processor module can intercept this event and adjust its output <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>starting</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool) beginning listing generation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>(FILE *) output file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_asm</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool) true:assembler, false:listing </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) flags passed to <ref refid="loader_8hpp_1a777046093020c790ec43bd207166bf09" kindref="member">gen_file()</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>outline</parametername>
</parameternamelist>
<parameterdescription>
<para>(gen_outline_t **) ptr to ptr to outline callback. if this callback is defined for this code, it will be used by the kernel to output the generated lines </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ac4729fbc053f45a29a9370369eda3c21" prot="public">
          <name>ev_gen_map_file</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Generate map file. If not implemented the kernel itself will create the map file. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nlines</parametername>
</parameternamelist>
<parameterdescription>
<para>(int *) number of lines in map file (-1 means write error) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fp</parametername>
</parameternamelist>
<parameterdescription>
<para>(FILE *) output file </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
<simplesect kind="return"><para>1 ok </para></simplesect>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>write error </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a5fa3981e47a82bf57567c9e17fc69344" prot="public">
          <name>ev_create_flat_group</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Create special segment representing the flat group. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>image_base</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitness</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dataseg_sel</parametername>
</parameternamelist>
<parameterdescription>
<para>(::sel_t) return value is ignored </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a5b7199e3af11fa25303602ba6093f307" prot="public">
          <name>ev_getreg</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>IBM PC only internal request, should never be used for other purpose Get register value by internal index <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>regval</parametername>
</parameternamelist>
<parameterdescription>
<para>(uval_t *), out </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regnum</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 ok </para></simplesect>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
<simplesect kind="return"><para>-1 failed (undefined value or bad regnum) </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ada84ccdbecd828227cf5891289d4a442" prot="public">
          <name>ev_analyze_prolog</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Analyzes function prolog, epilog, and updates purge, and function attributes <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) start of function </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 ok </para></simplesect>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ad634ef51985fc184b924840188825199" prot="public">
          <name>ev_calc_spdelta</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calculate amount of change to sp for the given insn. This event is required to decompile code snippets. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>spdelta</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 ok </para></simplesect>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a44113b21d13cb880233a52c38a84bea9" prot="public">
          <name>ev_calcrel</name>
          <briefdescription>
<para>Reserved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a05a8170fb8a243187c118dbcaa1fd954" prot="public">
          <name>ev_find_reg_value</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Find register value via a register tracker. The returned value in &apos;out&apos; is valid before executing the instruction. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>(uval_t *) pointer to the found value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pinsn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref> *) instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reg</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) register index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if implemented, and value was found </para></simplesect>
<simplesect kind="return"><para>0 not implemented, -1 decoding failed, or no value found </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ac0cdca25f97d06dfa6630abfd371cfea" prot="public">
          <name>ev_find_op_value</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Find operand value via a register tracker. The returned value in &apos;out&apos; is valid before executing the instruction. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>(uval_t *) pointer to the found value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pinsn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref> *) instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opn</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) operand index </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if implemented, and value was found </para></simplesect>
<simplesect kind="return"><para>0 not implemented, -1 decoding failed, or no value found </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a5776ce7324886d47497e6b55fa985c2f" prot="public">
          <name>ev_last_cb_before_debugger</name>
          <briefdescription>
<para>START OF DEBUGGER CALLBACKS. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a035854be86d6e113db368eba96ec6a44" prot="public">
          <name>ev_next_exec_insn</name>
          <initializer>= 1000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Get next address to be executed This function must return the next address to be executed. If the instruction following the current one is executed, then it must return <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> Usually the instructions to consider are: jumps, branches, calls, returns. This function is essential if the &apos;single step&apos; is not supported in hardware. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t *), out: pointer to the answer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) instruction address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tid</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) current therad id </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>getreg</parametername>
</parameternamelist>
<parameterdescription>
<para>(::processor_t::regval_getter_t *) function to get register values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regvalues</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structregval__t" kindref="compound">regval_t</ref> *) register values array </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>unimplemented </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>implemented </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aa552c713d33cbf8b7088aa1279316279" prot="public">
          <name>ev_calc_step_over</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calculate the address of the instruction which will be executed after &quot;step over&quot;. The kernel will put a breakpoint there. If the step over is equal to step into or we can not calculate the address, return <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>target</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t *) pointer to the answer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ip</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) instruction address </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>unimplemented </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>implemented </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a15f393eb309882f724a87ba8680ed8b2" prot="public">
          <name>ev_calc_next_eas</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calculate list of addresses the instruction in &apos;insn&apos; may pass control to. This callback is required for source level debugging. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="pro_8h_1a9f46d9d52bbfcc78bc1836f4f2683da4" kindref="member">eavec_t</ref> *), out: array for the results. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref>*) the instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>over</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool) calculate for step over (ignore call targets) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>&lt;0</parametername>
</parameternamelist>
<parameterdescription>
<para>incalculable (indirect jumps, for example) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&gt;=0</parametername>
</parameternamelist>
<parameterdescription>
<para>number of addresses of called functions in the array. They must be put at the beginning of the array (0 if over=true) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a2f4da6daaf29d96db466f024a41b6cd6" prot="public">
          <name>ev_get_macro_insn_head</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calculate the start of a macro instruction. This notification is called if IP points to the middle of an instruction <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>head</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t *), out: answer, <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> means normal instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ip</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) instruction address </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>unimplemented </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>implemented </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae19b6e2ec1f0f8dff6822e23d26ecf6f" prot="public">
          <name>ev_get_dbr_opnum</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Get the number of the operand to be displayed in the debugger reference view (text mode). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>opnum</parametername>
</parameternamelist>
<parameterdescription>
<para>(int *) operand number (out, -1 means no such operand) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref>*) the instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>unimplemented </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>implemented </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a744ce375c380a22ef248cb5c8b2fe91e" prot="public">
          <name>ev_insn_reads_tbit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Check if insn will read the TF bit. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classinsn__t" kindref="compound">insn_t</ref>*) the instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>getreg</parametername>
</parameternamelist>
<parameterdescription>
<para>(::processor_t::regval_getter_t *) function to get register values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regvalues</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structregval__t" kindref="compound">regval_t</ref> *) register values array </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>2</parametername>
</parameternamelist>
<parameterdescription>
<para>yes, will generate &apos;step&apos; exception </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>yes, will store the TF bit in memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>no </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a731a21b42e23b3a93212acc929590a44" prot="public">
          <name>ev_clean_tbit</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Clear the TF bit after an insn like pushf stored it in memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) instruction address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>getreg</parametername>
</parameternamelist>
<parameterdescription>
<para>(::processor_t::regval_getter_t *) function to get register values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regvalues</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structregval__t" kindref="compound">regval_t</ref> *) register values array </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>failed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a4c99f3d0cae242c834db12429824c412" prot="public">
          <name>ev_get_idd_opinfo</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Get operand information. This callback is used to calculate the operand value for double clicking on it, hints, etc. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>opinf</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structidd__opinfo__t" kindref="compound">idd_opinfo_t</ref> *) the output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) instruction address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) operand number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>thread_id</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) current thread id </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>getreg</parametername>
</parameternamelist>
<parameterdescription>
<para>(::processor_t::regval_getter_t *) function to get register values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regvalues</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structregval__t" kindref="compound">regval_t</ref> *) register values array </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1-ok, 0-failed </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ac3cc0f61a972f10943ffcb9b512bbfcd" prot="public">
          <name>ev_get_reg_info</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Get register information by its name. example: &quot;ah&quot; returns:<itemizedlist>
<listitem><para>main_regname=&quot;eax&quot;</para></listitem><listitem><para><ref refid="classbitrange__t" kindref="compound">bitrange_t</ref> = { offset==8, nbits==8 }</para></listitem></itemizedlist>
</para><para>This callback may be unimplemented if the register names are all present in {reg_names} and they all have the same size <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>main_regname</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char **), out </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bitrange</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classbitrange__t" kindref="compound">bitrange_t</ref> *), out: position and size of the value within &apos;main_regname&apos; (empty bitrange == whole register) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regname</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>failed (not found) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>unimplemented </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a9d927bdb68089f7d1b1bcf95b1680ce3" prot="public">
          <name>ev_last_cb_before_type_callbacks</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ab943223f3ca8d738c6a33aa2d1d5d5b2" prot="public">
          <name>ev_setup_til</name>
          <initializer>= 2000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Setup default type libraries. (called after loading a new file into the database). The processor module may load tils, setup memory model and perform other actions required to set up the type system. This is an optional callback. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>none</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aa97519e3d4a7c838b5bea894471d1605" prot="public">
          <name>ev_get_abi_info</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Get all possible ABI names and optional extensions for given compiler abiname/option is a string entirely consisting of letters, digits and underscore <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>abi_names</parametername>
</parameternamelist>
<parameterdescription>
<para>(qstrvec_t *) - all possible ABis each in form abiname-opt1-opt2-... </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>abi_opts</parametername>
</parameternamelist>
<parameterdescription>
<para>(qstrvec_t *) - array of all possible options in form &quot;opt:description&quot; or opt:hint-line#description </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>comp</parametername>
</parameternamelist>
<parameterdescription>
<para>(comp_t) - compiler ID </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>not implemented </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aa72e8b0fefe1ccb4f97c3ab7d963403e" prot="public">
          <name>ev_max_ptr_size</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Get maximal size of a pointer in bytes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>none</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>max possible size of a pointer </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a445f041d8992406148c70d2265aeeaeb" prot="public">
          <name>ev_get_default_enum_size</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Get default enum size. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cm</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>sizeof(enum) </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a4d4579748c4e9235161552951f41243e" prot="public">
          <name>ev_get_cc_regs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Get register allocation convention for given calling convention <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>regs</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classcallregs__t" kindref="compound">callregs_t</ref> *), out </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 </para></simplesect>
<simplesect kind="return"><para>0 - not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a47951bf3b092b3fbc1750c48988a00a0" prot="public">
          <name>ev_get_stkarg_offset</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Get offset from SP to the first stack argument. For example: pc: 0, hppa: -0x34, ppc: 0x38 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>none</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the offset (usually 0) </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a81a915a392ccbe061321cf7fd8bb3091" prot="public">
          <name>ev_shadow_args_size</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Get size of shadow args in bytes. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">shadow_args_size</parametername>
</parameternamelist>
<parameterdescription>
<para>(int *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pfn</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classfunc__t" kindref="compound">func_t</ref> *) (may be NULL) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if filled *shadow_args_size </para></simplesect>
<simplesect kind="return"><para>0 - not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0afa23f72943023fbb22dbc682beca757c" prot="public">
          <name>ev_get_simd_types</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Get SIMD-related types according to given attributes ant/or argument location <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>(::simd_info_vec_t *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>simd_attrs</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structsimd__info__t" kindref="compound">simd_info_t</ref> *), may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>argloc</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classargloc__t" kindref="compound">argloc_t</ref> *), may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>create_tifs</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool) return valid <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> objects, create if neccessary </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of found types, -1-error If name==NULL, initialize all SIMD types </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae4a7bab1ce8d51fef3323630c8ab5986" prot="public">
          <name>ev_calc_cdecl_purged_bytes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calculate number of purged bytes after call. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) address of the call instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of purged bytes (usually add sp, N) </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a04dc0f7ffee5e8ce6d9bd2659f5fb48d" prot="public">
          <name>ev_calc_purged_bytes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calculate number of purged bytes by the given function type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">p_purged_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>(int *) ptr to output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fti</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> *) func type details </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 </para></simplesect>
<simplesect kind="return"><para>0 - not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a0d69f230a16256b7c97ec87e16a6f814" prot="public">
          <name>ev_calc_retloc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calculate return value location. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">retloc</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classargloc__t" kindref="compound">argloc_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rettype</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref>) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
<simplesect kind="return"><para>1 ok, </para></simplesect>
<simplesect kind="return"><para>-1 error </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a8db94c9ea9bd7e6039821e897b952f82" prot="public">
          <name>ev_calc_arglocs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calculate function argument locations. This callback should fill retloc, all arglocs, and stkargs. This callback is never called for <ref refid="group___c_m___c_c___1ga377054c414ac35be6e5e9bf6c550b390" kindref="member">CM_CC_SPECIAL</ref> functions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fti</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> *) points to the func type info </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>not implemented </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>error </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a4537faf41cc6bd81946ec4cfd4b2db5a" prot="public">
          <name>ev_calc_varglocs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Calculate locations of the arguments that correspond to &apos;...&apos;. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ftd</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> *), inout: info about all arguments (including varargs) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>regs</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structregobjs__t" kindref="compound">regobjs_t</ref> *) buffer for register values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stkargs</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structrelobj__t" kindref="compound">relobj_t</ref> *) stack arguments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nfixed</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) number of fixed arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>not implemented </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>error </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae6d879a79e41acf6c15241f8a8616413" prot="public">
          <name>ev_adjust_argloc</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Adjust argloc according to its type/size and platform endianess <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argloc</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classargloc__t" kindref="compound">argloc_t</ref> *), inout </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *), may be NULL NULL means primitive type of given size </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) &apos;size&apos; makes no sense if type != NULL (type-&gt;get_size() should be used instead) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>not implemented </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>error </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0af54f85e43c332ae869c5e9015e1f3203" prot="public">
          <name>ev_lower_func_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Get function arguments which should be converted to pointers when lowering function prototype. The processor module can also modify &apos;fti&apos; in order to make non-standard conversion of some arguments. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>argnums</parametername>
</parameternamelist>
<parameterdescription>
<para>(intvec_t *), out - numbers of arguments to be converted to pointers in acsending order </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fti</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> *), inout func type details (special values -1/-2 for return value - position of hidden &apos;retstr&apos; argument: -1 - at the beginning, -2 - at the end) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>not implemented </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>argnums was filled </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>2</parametername>
</parameternamelist>
<parameterdescription>
<para>argnums was filled and made substantial changes to fti </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aacf3158cd80a47e0f87786c60f6f1b6a" prot="public">
          <name>ev_equal_reglocs</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Are 2 register arglocs the same?. We need this callback for the pc module. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a1</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classargloc__t" kindref="compound">argloc_t</ref> *) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a2</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classargloc__t" kindref="compound">argloc_t</ref> *) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>yes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>-1</parametername>
</parameternamelist>
<parameterdescription>
<para>no </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>not implemented </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a5551d04ee2e1a9f77a06ea2da02e5ffc" prot="public">
          <name>ev_use_stkarg_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use information about a stack argument. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) address of the push instruction which pushes the function argument into the stack </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arg</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="structfuncarg__t" kindref="compound">funcarg_t</ref> *) argument info </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>&lt;=0</parametername>
</parameternamelist>
<parameterdescription>
<para>failed, the kernel will create a comment with the argument name or type for the instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a239afca977e96df72bf4680c8843662a" prot="public">
          <name>ev_use_regarg_type</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use information about register argument. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">idx</parametername>
</parameternamelist>
<parameterdescription>
<para>(int *) pointer to the returned value, may contain:<itemizedlist>
<listitem><para>idx of the used argument, if the argument is defined in the current instruction, a comment will be applied by the kernel</para></listitem><listitem><para>idx | <ref refid="idp_8hpp_1a062e4611e8876c7b1608cbecab0d94ed" kindref="member">REG_SPOIL</ref> - argument is spoiled by the instruction</para></listitem><listitem><para>-1 if the instruction doesn&apos;t change any registers</para></listitem><listitem><para>-2 if the instruction spoils all registers </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) address of the instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rargs</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="typeinf_8hpp_1a6b5faeba43c9a59ec3aae166657ff78a" kindref="member">funcargvec_t</ref> *) vector of register arguments (including regs extracted from scattered arguments) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 </para></simplesect>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a97d8ef8f70c0d9e0e53726ab6cea7671" prot="public">
          <name>ev_use_arg_types</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Use information about callee arguments. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) address of the call instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fti</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> *) info about function type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rargs</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="typeinf_8hpp_1a6b5faeba43c9a59ec3aae166657ff78a" kindref="member">funcargvec_t</ref> *) array of register arguments </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 (and removes handled arguments from fti and rargs) </para></simplesect>
<simplesect kind="return"><para>0 not implemented </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a63c06a7cbeccfbc66ba9981ccde80e77" prot="public">
          <name>ev_arg_addrs_ready</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Argument address info is ready. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>caller</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>(int) number of formal arguments </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tif</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *) call prototype </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addrs</parametername>
</parameternamelist>
<parameterdescription>
<para>(::ea_t *) argument intilization addresses </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt;0: do not save into idb; other values mean &quot;ok to save&quot; </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a8341bbf9f53b19f61d4d7adcdc51783b" prot="public">
          <name>ev_decorate_name</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Decorate/undecorate a C symbol name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outbuf</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *) output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>(const char *) name of symbol </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mangle</parametername>
</parameternamelist>
<parameterdescription>
<para>(bool) true-mangle, false-unmangle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cc</parametername>
</parameternamelist>
<parameterdescription>
<para>(<ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref>) calling convention </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>(const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *) name type (NULL-unknown) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if success </para></simplesect>
<simplesect kind="return"><para>0 not implemented or failed </para></simplesect>
</para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a562fb16cff7e5e0c0f5750788c24d99c" prot="public">
          <name>ev_loader</name>
          <initializer>=3000</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>This code and higher ones are reserved for the loaders. The arguments and the return values are defined by the loaders </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Callback notification codes.</para><para>These are passed to notify() when certain events occur in the kernel, allowing the processor module to take appropriate action.</para><para>If you are not developing a processor module, many of these codes already have a corresponding function to use instead ({is_call_insn} vs is_call_insn(ea_t), for example).</para><para>If you are developing a processor module, your notify() function must implement the desired behavior when called with a given code. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="566" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="565" bodyend="1478"/>
      </memberdef>
      <memberdef kind="typedef" id="structprocessor__t_1a6d4346317d32879e39e894f3d9d616b2" prot="public" static="no">
        <type>const <ref refid="structregval__t" kindref="compound">regval_t</ref> &amp;idaapi</type>
        <definition>typedef const regval_t&amp; idaapi processor_t::regval_getter_t(const char *name, const regval_t *regvalues)</definition>
        <argsstring>(const char *name, const regval_t *regvalues)</argsstring>
        <name>regval_getter_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="548" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="548" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structprocessor__t_1ad15b68b6bdef844bb4481f9535878a2a" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 processor_t::version</definition>
        <argsstring></argsstring>
        <name>version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Expected kernel version, should be <ref refid="idp_8hpp_1af4b4e4966302754b758c8cc16f964a15" kindref="member">IDP_INTERFACE_VERSION</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="347" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1ad6df0facf50afe9dee4716f69739244f" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 processor_t::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>one of <ref refid="group___p_l_f_m__" kindref="compound">Processor IDs</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="349" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="349" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1a6542af67172bea21cda8b81c6671d775" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
        <definition>uint32 processor_t::flag</definition>
        <argsstring></argsstring>
        <name>flag</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group___p_r__" kindref="compound">Processor feature bits</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="426" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1ab9bbec9142e5695cda6294a9fe85a59c" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
        <definition>uint32 processor_t::flag2</definition>
        <argsstring></argsstring>
        <name>flag2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><ref refid="group___p_r2__" kindref="compound">Processor additional feature bits</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="479" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1ae86f81b3e716d4bf17f424688cf5aeab" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 processor_t::cnbits</definition>
        <argsstring></argsstring>
        <name>cnbits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of bits in a byte for code segments (usually 8). IDA supports values up to supported address bits size </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="508" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="508" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1a94c90b8e3ee733f9f843fc6297bd1977" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 processor_t::dnbits</definition>
        <argsstring></argsstring>
        <name>dnbits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of bits in a byte for non-code segments (usually 8). IDA supports values up to supported address bit size </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="512" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1a13faa23b7174cbdbae5da42c71602d24" prot="public" static="no" mutable="no">
        <type>const <ref refid="structasm__t" kindref="compound">asm_t</ref> *const  *</type>
        <definition>const asm_t* const* processor_t::assemblers</definition>
        <argsstring></argsstring>
        <name>assemblers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>pointer to array of target assembler definitions. You may change this array when current processor is changed. (NULL terminated) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="534" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="534" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1af61e0933fe94a51df832da1cf0eb25fd" prot="public" static="no" mutable="no">
        <type><ref refid="ida_8hpp_1acf012fe005690e1af26e799617fc98b7" kindref="member">hook_cb_t</ref> *</type>
        <definition>hook_cb_t* processor_t::_notify</definition>
        <argsstring></argsstring>
        <name>_notify</name>
        <briefdescription>
<para>Event notification handler. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1481" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1a0b75be7e30d134b1b288ab686c312307" prot="public" static="no" mutable="no">
        <type>const char *const  *</type>
        <definition>const char* const* processor_t::reg_names</definition>
        <argsstring></argsstring>
        <name>reg_names</name>
        <briefdescription>
<para>array of register names </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1634" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1634" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1aec3a26dcb0ced65a3db134e0b2f90557" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 processor_t::regs_num</definition>
        <argsstring></argsstring>
        <name>regs_num</name>
        <briefdescription>
<para>number of registers </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1635" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1635" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1a7a1ea672e493ec9b59b6d3d8e09d69e1" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t processor_t::tbyte_size</definition>
        <argsstring></argsstring>
        <name>tbyte_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Size of long double (tbyte) for this processor (meaningful only if {a_tbyte} != NULL) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1689" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1689" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1ab1ed6541f40864dcf175219db42afa90" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char processor_t::real_width[4]</definition>
        <argsstring>[4]</argsstring>
        <name>real_width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of digits in floating numbers after the decimal point. If an element of this array equals 0, then the corresponding floating point data is not used for the processor. This array is used to align numbers in the output.<itemizedlist>
<listitem><para>real_width[0] - number of digits for short floats (only PDP-11 has them)</para></listitem><listitem><para>real_width[1] - number of digits for &quot;float&quot;</para></listitem><listitem><para>real_width[2] - number of digits for &quot;double&quot;</para></listitem><listitem><para>real_width[3] - number of digits for &quot;long double&quot;</para></listitem></itemizedlist>
</para><para>Example: IBM PC module has { 0,7,15,19 } </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1701" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1701" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1ab497b14d9a38b3b5f04137d554c0e18d" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 processor_t::icode_return</definition>
        <argsstring></argsstring>
        <name>icode_return</name>
        <briefdescription>
<para>Icode of return instruction. It is ok to give any of possible return instructions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1704" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1704" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structprocessor__t_1a62aee2fa2fba2d3a642f730ff0e0c3e8" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* processor_t::unused_slot</definition>
        <argsstring></argsstring>
        <name>unused_slot</name>
        <briefdescription>
<para>Reserved, currently equals to NULL. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1707" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1707" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structprocessor__t_1a3e94679bdf9f1c003df71da06dad16ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool processor_t::has_idp_opts</definition>
        <argsstring>(void) const</argsstring>
        <name>has_idp_opts</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>#PR_IDP_OPTS </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="489" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="489" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a6afd8f35b1dd6073b629e5721b93df48" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool processor_t::has_realcvt</definition>
        <argsstring>(void) const</argsstring>
        <name>has_realcvt</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>#PR_REALCVT </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="490" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="490" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a748b4f1feee94973d69548147f2976f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool processor_t::has_segregs</definition>
        <argsstring>(void) const</argsstring>
        <name>has_segregs</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group___p_r___1gaa5d76a1fe1338a80404a0ca7a7ced6d0" kindref="member">PR_SEGS</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="491" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="491" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a6480962c2539adf539613d7258f2e6ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool processor_t::use32</definition>
        <argsstring>(void) const</argsstring>
        <name>use32</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group___p_r___1ga4641211435ce736ed30c9ff0a558cf01" kindref="member">PR_USE64</ref> or <ref refid="group___p_r___1gab86fc012cafb2de8b39fefc055941d17" kindref="member">PR_USE32</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="492" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="492" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a091dfba8a9fd2b3f473a7ea84bc2a0f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool processor_t::use64</definition>
        <argsstring>(void) const</argsstring>
        <name>use64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group___p_r___1ga4641211435ce736ed30c9ff0a558cf01" kindref="member">PR_USE64</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="493" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="493" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a4da3eacaa62ac6b4a03d2ba2493be59f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool processor_t::ti</definition>
        <argsstring>(void) const</argsstring>
        <name>ti</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group___p_r___1ga257f9d36eb8bf8c36a28e014f3deedc5" kindref="member">PR_TYPEINFO</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="494" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="494" bodyend="493"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a7cadc6b71ebc381378698c9013c0abc4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool processor_t::stkup</definition>
        <argsstring>(void) const</argsstring>
        <name>stkup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group___p_r___1ga6bd7458e91aaf2970f7e6e82b87b0c67" kindref="member">PR_STACK_UP</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="495" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="495" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a7e5ad4df4d0825ffbefceb583ac8a284" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool processor_t::use_tbyte</definition>
        <argsstring>(void) const</argsstring>
        <name>use_tbyte</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group___p_r___1ga196de44585ee70b23e01cb9266aff600" kindref="member">PR_USE_TBYTE</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="496" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="496" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a97dcc004db7d33f353ad903f4f5bce58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool processor_t::use_mappings</definition>
        <argsstring>(void) const</argsstring>
        <name>use_mappings</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group___p_r2___1ga50901ac40fe5f487dcdb5416068d9455" kindref="member">PR2_MAPPINGS</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="497" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="497" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a54dc160e62c6c5f649e65ffa4de31f7a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool processor_t::has_thumb</definition>
        <argsstring>(void) const</argsstring>
        <name>has_thumb</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para><ref refid="group___p_r2___1ga74011fc50648b8677793f813c74c023e" kindref="member">PR2_THUMB_BIT</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="498" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="498" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a13d69ecbf2a060f1a7e67eb3f53b32ff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int processor_t::get_segm_bitness</definition>
        <argsstring>(void) const</argsstring>
        <name>get_segm_bitness</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get segment bitness <parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>2</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___p_r___1ga51211ffe0d08c32dece2d318a462e139" kindref="member">PR_DEFSEG64</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___p_r___1ga91a0359d79ef2256ffb0b29ae7e481cb" kindref="member">PR_DEFSEG32</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>none specified </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="506" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="506" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a1bc5cc7a90ccdd6fc5ef088211bdcf62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::notify</definition>
        <argsstring>(event_t event_code,...)</argsstring>
        <name>notify</name>
        <param>
          <type><ref refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0" kindref="member">event_t</ref></type>
          <declname>event_code</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1482" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1482" bodyend="1489"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1afe4455b93927159bd4a739b1aceb9983" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::init</definition>
        <argsstring>(const char *idp_modname)</argsstring>
        <name>init</name>
        <param>
          <type>const char *</type>
          <declname>idp_modname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1492" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1724" bodyend="1727"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a6fdb462b00e97eda09f77262c0ee7d05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::term</definition>
        <argsstring>()</argsstring>
        <name>term</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1493" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1728" bodyend="1731"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a75cdb19403d2ec8d52dadcea9bde398c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::newprc</definition>
        <argsstring>(int pnum, bool keep_cfg)</argsstring>
        <name>newprc</name>
        <param>
          <type>int</type>
          <declname>pnum</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keep_cfg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1494" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1732" bodyend="1735"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a3c3f596cfa224ae0ea00941ce9a88668" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::newasm</definition>
        <argsstring>(int asmnum)</argsstring>
        <name>newasm</name>
        <param>
          <type>int</type>
          <declname>asmnum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1495" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1736" bodyend="1739"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ace44af71e6fd51d053ac4359b24b1e44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::newfile</definition>
        <argsstring>(const char *fname)</argsstring>
        <name>newfile</name>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1496" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1740" bodyend="1743"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a69bc2b0eadec32992263c68130e52a7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::oldfile</definition>
        <argsstring>(const char *fname)</argsstring>
        <name>oldfile</name>
        <param>
          <type>const char *</type>
          <declname>fname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1497" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1744" bodyend="1747"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a90f8feec9912fc3e904b2ce0e6b22882" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::newbinary</definition>
        <argsstring>(const char *filename, qoff64_t fileoff, ea_t basepara, ea_t binoff, uint64 nbytes)</argsstring>
        <name>newbinary</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a42ae75d34f73b9e691bd16aaddb897e5" kindref="member">qoff64_t</ref></type>
          <declname>fileoff</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>basepara</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>binoff</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1498" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1748" bodyend="1751"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a73b3ede69991121dde94fc93a3e6310a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::endbinary</definition>
        <argsstring>(bool ok)</argsstring>
        <name>endbinary</name>
        <param>
          <type>bool</type>
          <declname>ok</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1499" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1752" bodyend="1755"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ac1aa024d7c187aa63445d639d9f6ad08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::creating_segm</definition>
        <argsstring>(segment_t *seg)</argsstring>
        <name>creating_segm</name>
        <param>
          <type><ref refid="classsegment__t" kindref="compound">segment_t</ref> *</type>
          <declname>seg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1500" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1756" bodyend="1759"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a102ecc9c3a1f4cc4be0b09cdbd00682f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::assemble</definition>
        <argsstring>(uchar *_bin, ea_t ea, ea_t cs, ea_t ip, bool _use32, const char *line)</argsstring>
        <name>assemble</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> *</type>
          <declname>_bin</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>cs</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ip</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>_use32</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1501" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1760" bodyend="1763"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a1e0ed52c3b18846b77d1336e7b800020" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::ana_insn</definition>
        <argsstring>(insn_t *out)</argsstring>
        <name>ana_insn</name>
        <param>
          <type><ref refid="classinsn__t" kindref="compound">insn_t</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1502" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1764" bodyend="1767"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a73a1eac3d08be7b3c6669dbff4ed674c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::emu_insn</definition>
        <argsstring>(const insn_t &amp;insn)</argsstring>
        <name>emu_insn</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1503" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1768" bodyend="1771"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a25d4ea97428d53055fc0be13063006d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::out_header</definition>
        <argsstring>(outctx_t &amp;ctx)</argsstring>
        <name>out_header</name>
        <param>
          <type><ref refid="structoutctx__t" kindref="compound">outctx_t</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1504" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1772" bodyend="1775"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a8cdf757042f18bee56b4de1537361f92" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::out_footer</definition>
        <argsstring>(outctx_t &amp;ctx)</argsstring>
        <name>out_footer</name>
        <param>
          <type><ref refid="structoutctx__t" kindref="compound">outctx_t</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1505" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1776" bodyend="1779"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1acbd6a4db695b07493493be9bd04b66dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::out_segstart</definition>
        <argsstring>(outctx_t &amp;ctx, segment_t *seg)</argsstring>
        <name>out_segstart</name>
        <param>
          <type><ref refid="structoutctx__t" kindref="compound">outctx_t</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="classsegment__t" kindref="compound">segment_t</ref> *</type>
          <declname>seg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1506" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1780" bodyend="1783"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1aa0ef517defad729421ace2aaea7e9e3d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::out_segend</definition>
        <argsstring>(outctx_t &amp;ctx, segment_t *seg)</argsstring>
        <name>out_segend</name>
        <param>
          <type><ref refid="structoutctx__t" kindref="compound">outctx_t</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="classsegment__t" kindref="compound">segment_t</ref> *</type>
          <declname>seg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1507" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1784" bodyend="1787"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1af958c9d126dfa1fe321ed5d4c4e0c2da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::out_assumes</definition>
        <argsstring>(outctx_t &amp;ctx)</argsstring>
        <name>out_assumes</name>
        <param>
          <type><ref refid="structoutctx__t" kindref="compound">outctx_t</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1508" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1788" bodyend="1791"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a2456e602cd6efaf827d6435047fe6542" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::out_insn</definition>
        <argsstring>(outctx_t &amp;ctx)</argsstring>
        <name>out_insn</name>
        <param>
          <type><ref refid="structoutctx__t" kindref="compound">outctx_t</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1509" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1792" bodyend="1795"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1aa9fe55157acf58d4f160e7bf2d67e113" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::out_mnem</definition>
        <argsstring>(outctx_t &amp;ctx)</argsstring>
        <name>out_mnem</name>
        <param>
          <type><ref refid="structoutctx__t" kindref="compound">outctx_t</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1510" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1796" bodyend="1799"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a28bb10446bca9768f91a6387ea643f8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::out_operand</definition>
        <argsstring>(outctx_t &amp;ctx, const op_t &amp;op)</argsstring>
        <name>out_operand</name>
        <param>
          <type><ref refid="structoutctx__t" kindref="compound">outctx_t</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="classop__t" kindref="compound">op_t</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1511" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1800" bodyend="1803"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a60c612748f6fda218e44ea4cb018443c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::out_data</definition>
        <argsstring>(outctx_t &amp;ctx, bool analyze_only)</argsstring>
        <name>out_data</name>
        <param>
          <type><ref refid="structoutctx__t" kindref="compound">outctx_t</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>analyze_only</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1512" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1804" bodyend="1807"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a9c5d9adb678e9dde281f805a97b5df9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::out_label</definition>
        <argsstring>(outctx_t &amp;ctx, const char *colored_name)</argsstring>
        <name>out_label</name>
        <param>
          <type><ref refid="structoutctx__t" kindref="compound">outctx_t</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>colored_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1513" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1808" bodyend="1811"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a4ee2af27607fc7c121c240ed224bef95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::out_special_item</definition>
        <argsstring>(outctx_t &amp;ctx, uchar segtype)</argsstring>
        <name>out_special_item</name>
        <param>
          <type><ref refid="structoutctx__t" kindref="compound">outctx_t</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>segtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1514" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1812" bodyend="1815"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ab073c3da05fbf7cc4174164d2ce443a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::gen_stkvar_def</definition>
        <argsstring>(outctx_t &amp;ctx, const class member_t *mptr, sval_t v)</argsstring>
        <name>gen_stkvar_def</name>
        <param>
          <type><ref refid="structoutctx__t" kindref="compound">outctx_t</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const class <ref refid="classmember__t" kindref="compound">member_t</ref> *</type>
          <declname>mptr</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1515" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1816" bodyend="1819"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1af72ad3c218fd059153065a1a75cec325" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::gen_regvar_def</definition>
        <argsstring>(outctx_t &amp;ctx, regvar_t *v)</argsstring>
        <name>gen_regvar_def</name>
        <param>
          <type><ref refid="structoutctx__t" kindref="compound">outctx_t</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type><ref refid="structregvar__t" kindref="compound">regvar_t</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1516" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1820" bodyend="1823"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1aabbf45e468cd1e7b6a22d7ecacd64421" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::gen_src_file_lnnum</definition>
        <argsstring>(outctx_t &amp;ctx, const char *file, size_t lnnum)</argsstring>
        <name>gen_src_file_lnnum</name>
        <param>
          <type><ref refid="structoutctx__t" kindref="compound">outctx_t</ref> &amp;</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>lnnum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1517" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1824" bodyend="1827"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1af02e67df5efc18920e0bad7edf1344de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::rename</definition>
        <argsstring>(ea_t ea, const char *new_name, int flags)</argsstring>
        <name>rename</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>new_name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1518" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1828" bodyend="1831"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1aba5af536c87b32cb6b7bd14fef625388" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::may_show_sreg</definition>
        <argsstring>(ea_t current_ea)</argsstring>
        <name>may_show_sreg</name>
        <param>
          <type>ea_t</type>
          <declname>current_ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1519" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1832" bodyend="1835"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1af9b27ed6378b8fd45c704bfb3f5c4c37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::coagulate</definition>
        <argsstring>(ea_t start_ea)</argsstring>
        <name>coagulate</name>
        <param>
          <type>ea_t</type>
          <declname>start_ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1520" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1836" bodyend="1839"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a9bb3616729cfbca0713dd92767a12065" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void processor_t::auto_queue_empty</definition>
        <argsstring>(int type)</argsstring>
        <name>auto_queue_empty</name>
        <param>
          <type>int</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1521" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1840" bodyend="1843"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a58099ba9206ccb11760a1985e86f4bd5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::func_bounds</definition>
        <argsstring>(int *possible_return_code, func_t *pfn, ea_t max_func_end_ea)</argsstring>
        <name>func_bounds</name>
        <param>
          <type>int *</type>
          <declname>possible_return_code</declname>
        </param>
        <param>
          <type><ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>max_func_end_ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1523" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1844" bodyend="1847"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1af821b38249e800915e8bce8671bd05d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::may_be_func</definition>
        <argsstring>(const insn_t &amp;insn, int state)</argsstring>
        <name>may_be_func</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>state</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1524" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1848" bodyend="1851"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ad53599f2c48a87e32cd14661aeeb2449" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::is_sane_insn</definition>
        <argsstring>(const insn_t &amp;insn, int no_crefs)</argsstring>
        <name>is_sane_insn</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>no_crefs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1525" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1852" bodyend="1855"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a794c3d7186affb2d7906a812f7eda6e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::cmp_operands</definition>
        <argsstring>(const op_t &amp;op1, const op_t &amp;op2)</argsstring>
        <name>cmp_operands</name>
        <param>
          <type>const <ref refid="classop__t" kindref="compound">op_t</ref> &amp;</type>
          <declname>op1</declname>
        </param>
        <param>
          <type>const <ref refid="classop__t" kindref="compound">op_t</ref> &amp;</type>
          <declname>op2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1526" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1856" bodyend="1859"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a82efcd2d78094007ba01b896069680d2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::is_jump_func</definition>
        <argsstring>(func_t *pfn, ea_t *jump_target, ea_t *func_pointer)</argsstring>
        <name>is_jump_func</name>
        <param>
          <type><ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <param>
          <type>ea_t *</type>
          <declname>jump_target</declname>
        </param>
        <param>
          <type>ea_t *</type>
          <declname>func_pointer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1527" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1860" bodyend="1863"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ac200f8e343964827402c5a7ddc97370b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::is_basic_block_end</definition>
        <argsstring>(const insn_t &amp;insn, bool call_insn_stops_block)</argsstring>
        <name>is_basic_block_end</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>call_insn_stops_block</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1528" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1864" bodyend="1867"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a878d9447be6d7893c68acc8a7d86af2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::getreg</definition>
        <argsstring>(uval_t *rv, int regnum)</argsstring>
        <name>getreg</name>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> *</type>
          <declname>rv</declname>
        </param>
        <param>
          <type>int</type>
          <declname>regnum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1529" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1868" bodyend="1871"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a214f82f03f51c39fc7910d3e0f26fc4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::undefine</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>undefine</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1530" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1872" bodyend="1875"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1af99650932e10c825fe5f3e099740516a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::moving_segm</definition>
        <argsstring>(segment_t *seg, ea_t to, int flags)</argsstring>
        <name>moving_segm</name>
        <param>
          <type><ref refid="classsegment__t" kindref="compound">segment_t</ref> *</type>
          <declname>seg</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1531" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1876" bodyend="1879"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a4a4e543f76da81d49296b4826e0bf69e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::is_sp_based</definition>
        <argsstring>(const insn_t &amp;insn, const op_t &amp;x)</argsstring>
        <name>is_sp_based</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>const <ref refid="classop__t" kindref="compound">op_t</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1532" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1880" bodyend="1885"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ad78e1fca46a156b5c7e5e95e8b8778b3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::is_far_jump</definition>
        <argsstring>(int icode)</argsstring>
        <name>is_far_jump</name>
        <param>
          <type>int</type>
          <declname>icode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1533" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1886" bodyend="1889"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a4560c0ae3df7cd39f133601009b74935" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::is_call_insn</definition>
        <argsstring>(const insn_t &amp;insn)</argsstring>
        <name>is_call_insn</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1534" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1890" bodyend="1893"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1afd987acdacd3fe8d6e0146b4117d7af3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::is_ret_insn</definition>
        <argsstring>(const insn_t &amp;insn, bool strict)</argsstring>
        <name>is_ret_insn</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>strict</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1535" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1894" bodyend="1897"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a70f9f3a712f524e1027345970ec28874" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::is_align_insn</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>is_align_insn</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1536" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1898" bodyend="1901"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a09baad5c693a6389bdf31131f48aaae2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::can_have_type</definition>
        <argsstring>(const op_t &amp;op)</argsstring>
        <name>can_have_type</name>
        <param>
          <type>const <ref refid="classop__t" kindref="compound">op_t</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1537" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1902" bodyend="1905"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a9de0e633060f5493deddd8fc5e1a627d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::get_stkvar_scale_factor</definition>
        <argsstring>()</argsstring>
        <name>get_stkvar_scale_factor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1538" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1906" bodyend="1909"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ac73f75be94e1ca0af932acab98607582" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::demangle_name</definition>
        <argsstring>(int32 *res, qstring *out, const char *name, uint32 disable_mask, int demreq)</argsstring>
        <name>demangle_name</name>
        <param>
          <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>disable_mask</declname>
        </param>
        <param>
          <type>int</type>
          <declname>demreq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1539" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1910" bodyend="1913"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a631343e64c1c8a430a17475a73a6761d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::create_flat_group</definition>
        <argsstring>(ea_t image_base, int bitness, sel_t dataseg_sel)</argsstring>
        <name>create_flat_group</name>
        <param>
          <type>ea_t</type>
          <declname>image_base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bitness</declname>
        </param>
        <param>
          <type>sel_t</type>
          <declname>dataseg_sel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1540" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1914" bodyend="1917"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ae0cc4334a38a4b7fb2285fe38690a89c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::is_alloca_probe</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>is_alloca_probe</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1541" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1918" bodyend="1921"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1afaf89e018a27e8b74dca757320d84c4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::get_reg_name</definition>
        <argsstring>(qstring *buf, int reg, size_t width, int reghi)</argsstring>
        <name>get_reg_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reg</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reghi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1542" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1922" bodyend="1925"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a68b5134908d2957919ea3fb71e70a71f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::gen_asm_or_lst</definition>
        <argsstring>(bool starting, FILE *fp, bool is_asm, int flags, void *outline)</argsstring>
        <name>gen_asm_or_lst</name>
        <param>
          <type>bool</type>
          <declname>starting</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_asm</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>outline</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1543" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1926" bodyend="1929"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a84d13b140759388e5a7d164a51cb646b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::gen_map_file</definition>
        <argsstring>(int *nlines, FILE *fp)</argsstring>
        <name>gen_map_file</name>
        <param>
          <type>int *</type>
          <declname>nlines</declname>
        </param>
        <param>
          <type>FILE *</type>
          <declname>fp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1544" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1930" bodyend="1933"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ad3704c4a670f7f1c88952d841b82077b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::get_autocmt</definition>
        <argsstring>(qstring *buf, const insn_t &amp;insn)</argsstring>
        <name>get_autocmt</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1545" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1934" bodyend="1937"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a275ef4b9e0d43ca32ea9ffb71c2cfea4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::is_insn_table_jump</definition>
        <argsstring>(const insn_t &amp;insn)</argsstring>
        <name>is_insn_table_jump</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1546" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1938" bodyend="1941"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a225089e4b8fd141c9fa7a5f17fbeef23" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::loader_elf_machine</definition>
        <argsstring>(linput_t *li, int machine_type, const char **p_procname, proc_def_t **p_pd)</argsstring>
        <name>loader_elf_machine</name>
        <param>
          <type>linput_t *</type>
          <declname>li</declname>
        </param>
        <param>
          <type>int</type>
          <declname>machine_type</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>p_procname</declname>
        </param>
        <param>
          <type>proc_def_t **</type>
          <declname>p_pd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1547" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1942" bodyend="1945"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ab8ab54716e46491bee53031452bb6647" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::is_indirect_jump</definition>
        <argsstring>(const insn_t &amp;insn)</argsstring>
        <name>is_indirect_jump</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1548" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1946" bodyend="1949"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1afcae02a4f27ced49a33d8777cd61383d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::verify_noreturn</definition>
        <argsstring>(func_t *pfn)</argsstring>
        <name>verify_noreturn</name>
        <param>
          <type><ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1549" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1950" bodyend="1953"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ae67ccf3c1c851aabc99b38e45d8b7c6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::verify_sp</definition>
        <argsstring>(func_t *pfn)</argsstring>
        <name>verify_sp</name>
        <param>
          <type><ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1550" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1954" bodyend="1957"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a94aaeed2010a17765bfbee51a2badff1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::create_func_frame</definition>
        <argsstring>(func_t *pfn)</argsstring>
        <name>create_func_frame</name>
        <param>
          <type><ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1551" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1958" bodyend="1961"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a5678a9ccb588ae0f1293f272f1baf4ca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::get_frame_retsize</definition>
        <argsstring>(int *retsize, const func_t *pfn)</argsstring>
        <name>get_frame_retsize</name>
        <param>
          <type>int *</type>
          <declname>retsize</declname>
        </param>
        <param>
          <type>const <ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1552" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1962" bodyend="1965"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a3f2d29889d63b6339f65850abad123ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::analyze_prolog</definition>
        <argsstring>(ea_t fct_ea)</argsstring>
        <name>analyze_prolog</name>
        <param>
          <type>ea_t</type>
          <declname>fct_ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1553" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1966" bodyend="1969"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a0ff06716780f3c010dcf7cab0510a97c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::calc_spdelta</definition>
        <argsstring>(sval_t *spdelta, const insn_t &amp;ins)</argsstring>
        <name>calc_spdelta</name>
        <param>
          <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref> *</type>
          <declname>spdelta</declname>
        </param>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1554" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1970" bodyend="1973"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a90a5fe1543fe141cffa37f27d122e00b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::calcrel</definition>
        <argsstring>(bytevec_t *out, ea_t ea)</argsstring>
        <name>calcrel</name>
        <param>
          <type><ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1555" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1974" bodyend="1977"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a2b496cc4ca56c43de481378e3fc51d26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::find_reg_value</definition>
        <argsstring>(uval_t *out, const insn_t &amp;insn, int reg)</argsstring>
        <name>find_reg_value</name>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1556" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1978" bodyend="1981"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a349c65dc5c4204ed874ec04615542933" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::find_op_value</definition>
        <argsstring>(uval_t *out, const insn_t &amp;insn, int op)</argsstring>
        <name>find_op_value</name>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1557" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1982" bodyend="1985"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1adcdacad16663f79b0957978c94ee62d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::treat_hindering_item</definition>
        <argsstring>(ea_t hindering_item_ea, flags_t new_item_flags, ea_t new_item_ea, asize_t new_item_length)</argsstring>
        <name>treat_hindering_item</name>
        <param>
          <type>ea_t</type>
          <declname>hindering_item_ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>new_item_flags</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>new_item_ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>new_item_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1558" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1986" bodyend="1989"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a77a5009b32f51a909194731b6161eaa5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::extract_address</definition>
        <argsstring>(ea_t *out_ea, ea_t screen_ea, const char *string, size_t x)</argsstring>
        <name>extract_address</name>
        <param>
          <type>ea_t *</type>
          <declname>out_ea</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>screen_ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1559" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1990" bodyend="1993"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a3bf543ba00d87622e9faf2929a0b91ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::str2reg</definition>
        <argsstring>(const char *regname)</argsstring>
        <name>str2reg</name>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1560" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1994" bodyend="1997"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a5cede3a0bb6b279184b88668378a19bf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::is_switch</definition>
        <argsstring>(switch_info_t *si, const insn_t &amp;insn)</argsstring>
        <name>is_switch</name>
        <param>
          <type><ref refid="structswitch__info__t" kindref="compound">switch_info_t</ref> *</type>
          <declname>si</declname>
        </param>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1561" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1998" bodyend="2001"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a4d641dc226ea211d45d356958b6c62b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::create_switch_xrefs</definition>
        <argsstring>(ea_t jumpea, const switch_info_t &amp;si)</argsstring>
        <name>create_switch_xrefs</name>
        <param>
          <type>ea_t</type>
          <declname>jumpea</declname>
        </param>
        <param>
          <type>const <ref refid="structswitch__info__t" kindref="compound">switch_info_t</ref> &amp;</type>
          <declname>si</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1562" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2002" bodyend="2005"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ad00786d3a5112c0c701c0812b70cce7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::calc_switch_cases</definition>
        <argsstring>(void *casevec, eavec_t *targets, ea_t insn_ea, const switch_info_t &amp;si)</argsstring>
        <name>calc_switch_cases</name>
        <param>
          <type>void *</type>
          <declname>casevec</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a9f46d9d52bbfcc78bc1836f4f2683da4" kindref="member">eavec_t</ref> *</type>
          <declname>targets</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>insn_ea</declname>
        </param>
        <param>
          <type>const <ref refid="structswitch__info__t" kindref="compound">switch_info_t</ref> &amp;</type>
          <declname>si</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1563" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2006" bodyend="2009"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ad1b152f1569df75ff8b07475d0d61400" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::get_bg_color</definition>
        <argsstring>(bgcolor_t *color, ea_t ea)</argsstring>
        <name>get_bg_color</name>
        <param>
          <type><ref refid="pro_8h_1a3df5040891132e50157aee66affdf1de" kindref="member">bgcolor_t</ref> *</type>
          <declname>color</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1564" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2010" bodyend="2013"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a228b1e8ae1967aeed13c833505960841" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::validate_flirt_func</definition>
        <argsstring>(ea_t start_ea, const char *funcname)</argsstring>
        <name>validate_flirt_func</name>
        <param>
          <type>ea_t</type>
          <declname>start_ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>funcname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1565" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2014" bodyend="2017"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a1fe8ce656f1e2b0c182b4cca3fdf4ddb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::get_operand_string</definition>
        <argsstring>(qstring *buf, const insn_t &amp;insn, int opnum)</argsstring>
        <name>get_operand_string</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>opnum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1566" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2018" bodyend="2021"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ab23279d562549c187c11e03be7276ede" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::add_cref</definition>
        <argsstring>(ea_t from, ea_t to, cref_t type)</argsstring>
        <name>add_cref</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type><ref refid="group__xref__type_1ga44e2b79869a9595bbe6265ff2026aa98" kindref="member">cref_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1567" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2022" bodyend="2025"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a53858ff5ffd6177105af3b586a7b9ac2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::add_dref</definition>
        <argsstring>(ea_t from, ea_t to, dref_t type)</argsstring>
        <name>add_dref</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type><ref refid="group__xref__type_1ga78aab6d0d6bd9cb4904bbdbb5ac4fa71" kindref="member">dref_t</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1568" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2026" bodyend="2029"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a801ecdbeea89a3837b4f36cbed3e9731" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::del_cref</definition>
        <argsstring>(ea_t from, ea_t to, bool expand)</argsstring>
        <name>del_cref</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>expand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1569" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2030" bodyend="2033"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1abfd6cac468cc484e58f8b9d3d8ba119c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::del_dref</definition>
        <argsstring>(ea_t from, ea_t to)</argsstring>
        <name>del_dref</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1570" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2034" bodyend="2037"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ab60ba3abf604d807a566d90eb07f7951" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::coagulate_dref</definition>
        <argsstring>(ea_t from, ea_t to, bool may_define, ea_t *code_ea)</argsstring>
        <name>coagulate_dref</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>may_define</declname>
        </param>
        <param>
          <type>ea_t *</type>
          <declname>code_ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1571" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2038" bodyend="2041"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a6c9c046afe0a984c0c05bc330ebd3a53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * processor_t::set_idp_options</definition>
        <argsstring>(const char *keyword, int vtype, const void *value)</argsstring>
        <name>set_idp_options</name>
        <param>
          <type>const char *</type>
          <declname>keyword</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vtype</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1572" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2042" bodyend="2047"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ab6d1a97c50ce5628b96cf83ab5e1966e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::set_proc_options</definition>
        <argsstring>(const char *options, int confidence)</argsstring>
        <name>set_proc_options</name>
        <param>
          <type>const char *</type>
          <declname>options</declname>
        </param>
        <param>
          <type>int</type>
          <declname>confidence</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1573" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2048" bodyend="2051"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a67e3f0e75719891fd0fc77a04d8f4d1e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::adjust_libfunc_ea</definition>
        <argsstring>(const idasgn_t &amp;sig, const libfunc_t &amp;libfun, ea_t *ea)</argsstring>
        <name>adjust_libfunc_ea</name>
        <param>
          <type>const <ref refid="classidasgn__t" kindref="compound">idasgn_t</ref> &amp;</type>
          <declname>sig</declname>
        </param>
        <param>
          <type>const <ref refid="structlibfunc__t" kindref="compound">libfunc_t</ref> &amp;</type>
          <declname>libfun</declname>
        </param>
        <param>
          <type>ea_t *</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1574" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2052" bodyend="2055"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a4371fdb4cf6f689887cfcbd9e18f0c54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::realcvt</definition>
        <argsstring>(void *m, unsigned short *e, unsigned short swt)</argsstring>
        <name>realcvt</name>
        <param>
          <type>void *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>unsigned short *</type>
          <declname>e</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>swt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1575" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2056" bodyend="2059"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ac766e36c7fcc1e50bd2702a4e5f6eb97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::delay_slot_insn</definition>
        <argsstring>(ea_t *ea, bool *bexec, bool *fexec)</argsstring>
        <name>delay_slot_insn</name>
        <param>
          <type>ea_t *</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>bexec</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>fexec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1576" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2060" bodyend="2063"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1aaf3813014133afb596fa535507da8b13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::adjust_refinfo</definition>
        <argsstring>(refinfo_t *ri, ea_t ea, int n, const fixup_data_t &amp;fd)</argsstring>
        <name>adjust_refinfo</name>
        <param>
          <type><ref refid="structrefinfo__t" kindref="compound">refinfo_t</ref> *</type>
          <declname>ri</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="structfixup__data__t" kindref="compound">fixup_data_t</ref> &amp;</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1577" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2064" bodyend="2067"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a53ba085249f03d19e71da9a0c682f745" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::is_cond_insn</definition>
        <argsstring>(const insn_t &amp;insn)</argsstring>
        <name>is_cond_insn</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1578" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2068" bodyend="2071"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ae5dc1c11df02efdbc887058c43e2a7bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::next_exec_insn</definition>
        <argsstring>(ea_t *target, ea_t ea, int tid, regval_getter_t *_getreg, const regval_t &amp;regvalues)</argsstring>
        <name>next_exec_insn</name>
        <param>
          <type>ea_t *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tid</declname>
        </param>
        <param>
          <type>regval_getter_t *</type>
          <declname>_getreg</declname>
        </param>
        <param>
          <type>const <ref refid="structregval__t" kindref="compound">regval_t</ref> &amp;</type>
          <declname>regvalues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1579" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2072" bodyend="2075"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1abc297252269d28783d8de07a9ae5edb9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::calc_step_over</definition>
        <argsstring>(ea_t *target, ea_t ip)</argsstring>
        <name>calc_step_over</name>
        <param>
          <type>ea_t *</type>
          <declname>target</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1580" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2076" bodyend="2079"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ad5e1bd1a431a9cdd609c3ae7efc4d4f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::get_macro_insn_head</definition>
        <argsstring>(ea_t *head, ea_t ip)</argsstring>
        <name>get_macro_insn_head</name>
        <param>
          <type>ea_t *</type>
          <declname>head</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1581" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2080" bodyend="2083"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ade0511005068143520af107e4b5c3b87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::get_dbr_opnum</definition>
        <argsstring>(int *opnum, const insn_t &amp;insn)</argsstring>
        <name>get_dbr_opnum</name>
        <param>
          <type>int *</type>
          <declname>opnum</declname>
        </param>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1582" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2084" bodyend="2087"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a438356b412773f944dad961cbe478972" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::insn_reads_tbit</definition>
        <argsstring>(const insn_t &amp;insn, regval_getter_t *_getreg, const regval_t &amp;regvalues)</argsstring>
        <name>insn_reads_tbit</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>regval_getter_t *</type>
          <declname>_getreg</declname>
        </param>
        <param>
          <type>const <ref refid="structregval__t" kindref="compound">regval_t</ref> &amp;</type>
          <declname>regvalues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1583" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2088" bodyend="2091"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1aca0b2efa4b12d83851d0fc8375273ef5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::get_idd_opinfo</definition>
        <argsstring>(idd_opinfo_t *opinf, ea_t ea, int n, int thread_id, regval_getter_t *_getreg, const regval_t &amp;regvalues)</argsstring>
        <name>get_idd_opinfo</name>
        <param>
          <type><ref refid="structidd__opinfo__t" kindref="compound">idd_opinfo_t</ref> *</type>
          <declname>opinf</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>thread_id</declname>
        </param>
        <param>
          <type>regval_getter_t *</type>
          <declname>_getreg</declname>
        </param>
        <param>
          <type>const <ref refid="structregval__t" kindref="compound">regval_t</ref> &amp;</type>
          <declname>regvalues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1584" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2092" bodyend="2095"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a5f4633e0ee514204edf08003c09cb9f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::calc_next_eas</definition>
        <argsstring>(eavec_t *res, const insn_t &amp;insn, bool over)</argsstring>
        <name>calc_next_eas</name>
        <param>
          <type><ref refid="pro_8h_1a9f46d9d52bbfcc78bc1836f4f2683da4" kindref="member">eavec_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>over</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1585" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2096" bodyend="2099"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a23a8c993a7f25cad72a542a2f60a3c44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::clean_tbit</definition>
        <argsstring>(ea_t ea, regval_getter_t *_getreg, const regval_t &amp;regvalues)</argsstring>
        <name>clean_tbit</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>regval_getter_t *</type>
          <declname>_getreg</declname>
        </param>
        <param>
          <type>const <ref refid="structregval__t" kindref="compound">regval_t</ref> &amp;</type>
          <declname>regvalues</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1586" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2100" bodyend="2103"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a435d35e9d9ef5a708c565024ab514feb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::get_reg_info</definition>
        <argsstring>(const char **main_regname, bitrange_t *bitrange, const char *regname)</argsstring>
        <name>get_reg_info</name>
        <param>
          <type>const char **</type>
          <declname>main_regname</declname>
        </param>
        <param>
          <type><ref refid="classbitrange__t" kindref="compound">bitrange_t</ref> *</type>
          <declname>bitrange</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>regname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1587" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2104" bodyend="2107"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a498288d0b0eae31e23cd7a1275e87506" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::setup_til</definition>
        <argsstring>()</argsstring>
        <name>setup_til</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1588" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2108" bodyend="2111"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a6339fd474606e98afb912ced953f90ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::max_ptr_size</definition>
        <argsstring>()</argsstring>
        <name>max_ptr_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1589" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2112" bodyend="2115"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ade850127e6bf2394e070577ddacf0a6b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::get_default_enum_size</definition>
        <argsstring>(cm_t cm)</argsstring>
        <name>get_default_enum_size</name>
        <param>
          <type><ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1590" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2116" bodyend="2119"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ac20e7e184653527a2bae6289d617aa59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::calc_cdecl_purged_bytes</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>calc_cdecl_purged_bytes</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1591" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2120" bodyend="2123"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a83a75bfe85ebc547b7f9b986b62c038e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::get_stkarg_offset</definition>
        <argsstring>()</argsstring>
        <name>get_stkarg_offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1592" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2124" bodyend="2127"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a54754ec1de88b7a5474a20cad3451d6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::equal_reglocs</definition>
        <argsstring>(const argloc_t &amp;a1, const argloc_t &amp;a2)</argsstring>
        <name>equal_reglocs</name>
        <param>
          <type>const <ref refid="classargloc__t" kindref="compound">argloc_t</ref> &amp;</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>const <ref refid="classargloc__t" kindref="compound">argloc_t</ref> &amp;</type>
          <declname>a2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1593" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2128" bodyend="2131"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a2de2b62b2c8ab178465fcb7a28ba284a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::decorate_name</definition>
        <argsstring>(qstring *outbuf, const char *name, bool mangle, cm_t cc, const tinfo_t &amp;type)</argsstring>
        <name>decorate_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>outbuf</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>mangle</declname>
        </param>
        <param>
          <type><ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
          <declname>cc</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1594" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2132" bodyend="2135"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ab2d463eb05b2e3a885cbab2aa6cd8bc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::calc_retloc</definition>
        <argsstring>(argloc_t *retloc, const tinfo_t &amp;rettype, cm_t cc)</argsstring>
        <name>calc_retloc</name>
        <param>
          <type><ref refid="classargloc__t" kindref="compound">argloc_t</ref> *</type>
          <declname>retloc</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>rettype</declname>
        </param>
        <param>
          <type><ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
          <declname>cc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1595" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2136" bodyend="2139"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1ae320436b85a408a6dcc5dd23d427448a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::calc_varglocs</definition>
        <argsstring>(func_type_data_t *ftd, regobjs_t *regs, relobj_t *stkargs, int nfixed)</argsstring>
        <name>calc_varglocs</name>
        <param>
          <type><ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> *</type>
          <declname>ftd</declname>
        </param>
        <param>
          <type><ref refid="structregobjs__t" kindref="compound">regobjs_t</ref> *</type>
          <declname>regs</declname>
        </param>
        <param>
          <type><ref refid="structrelobj__t" kindref="compound">relobj_t</ref> *</type>
          <declname>stkargs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>nfixed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1596" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2140" bodyend="2143"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a5182d510ab4bdc120fdf496be32cc258" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::calc_arglocs</definition>
        <argsstring>(func_type_data_t *fti)</argsstring>
        <name>calc_arglocs</name>
        <param>
          <type><ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> *</type>
          <declname>fti</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1597" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2144" bodyend="2147"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a09ffbd809485b6b700094e3cd9b7d36f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::use_stkarg_type</definition>
        <argsstring>(ea_t ea, const funcarg_t &amp;arg)</argsstring>
        <name>use_stkarg_type</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const <ref refid="structfuncarg__t" kindref="compound">funcarg_t</ref> &amp;</type>
          <declname>arg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1598" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2148" bodyend="2151"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a19b7c2da8779fef5d70223cf4b61ed3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::use_regarg_type</definition>
        <argsstring>(int *idx, ea_t ea, void *rargs)</argsstring>
        <name>use_regarg_type</name>
        <param>
          <type>int *</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>rargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1599" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2152" bodyend="2155"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1adf7a5f3f545b57cac7544785c23833c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::use_arg_types</definition>
        <argsstring>(ea_t ea, func_type_data_t *fti, void *rargs)</argsstring>
        <name>use_arg_types</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> *</type>
          <declname>fti</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>rargs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1600" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2156" bodyend="2159"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1afb438896cb5f4d324a1ad0b85c998aa7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::calc_purged_bytes</definition>
        <argsstring>(int *p_purged_bytes, const func_type_data_t &amp;fti)</argsstring>
        <name>calc_purged_bytes</name>
        <param>
          <type>int *</type>
          <declname>p_purged_bytes</declname>
        </param>
        <param>
          <type>const <ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> &amp;</type>
          <declname>fti</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1601" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2160" bodyend="2163"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a651aaefc3eebe70057a967c3fad3096f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::shadow_args_size</definition>
        <argsstring>(int *shadow_size, func_t *pfn)</argsstring>
        <name>shadow_args_size</name>
        <param>
          <type>int *</type>
          <declname>shadow_size</declname>
        </param>
        <param>
          <type><ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1602" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2164" bodyend="2167"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a351577f6b72869301c5f4615ed25c0b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::get_cc_regs</definition>
        <argsstring>(callregs_t *regs, cm_t cc)</argsstring>
        <name>get_cc_regs</name>
        <param>
          <type><ref refid="classcallregs__t" kindref="compound">callregs_t</ref> *</type>
          <declname>regs</declname>
        </param>
        <param>
          <type><ref refid="ida_8hpp_1a3e05fd8860fadc8f72329fc410c8f6b9" kindref="member">cm_t</ref></type>
          <declname>cc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1603" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2168" bodyend="2171"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1aa1baac2e3217b150f98f2357e981badb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::get_simd_types</definition>
        <argsstring>(void *out, const simd_info_t *simd_attrs, const argloc_t *argloc, bool create_tifs)</argsstring>
        <name>get_simd_types</name>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="structsimd__info__t" kindref="compound">simd_info_t</ref> *</type>
          <declname>simd_attrs</declname>
        </param>
        <param>
          <type>const <ref refid="classargloc__t" kindref="compound">argloc_t</ref> *</type>
          <declname>argloc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>create_tifs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1604" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2172" bodyend="2175"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a669da29a2a5a97cc93ea001519ee7c8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::arg_addrs_ready</definition>
        <argsstring>(ea_t caller, int n, const tinfo_t &amp;tif, ea_t *addrs)</argsstring>
        <name>arg_addrs_ready</name>
        <param>
          <type>ea_t</type>
          <declname>caller</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> &amp;</type>
          <declname>tif</declname>
        </param>
        <param>
          <type>ea_t *</type>
          <declname>addrs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1605" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2176" bodyend="2179"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a5bbbc88582a2915e87441569264c4208" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::adjust_argloc</definition>
        <argsstring>(argloc_t *argloc, const tinfo_t *type, int size)</argsstring>
        <name>adjust_argloc</name>
        <param>
          <type><ref refid="classargloc__t" kindref="compound">argloc_t</ref> *</type>
          <declname>argloc</declname>
        </param>
        <param>
          <type>const <ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1606" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2180" bodyend="2183"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1a6dbdfae149a1fd6417fdce6b90494461" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::lower_func_type</definition>
        <argsstring>(intvec_t *argnums, func_type_data_t *fti)</argsstring>
        <name>lower_func_type</name>
        <param>
          <type><ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref> *</type>
          <declname>argnums</declname>
        </param>
        <param>
          <type><ref refid="structfunc__type__data__t" kindref="compound">func_type_data_t</ref> *</type>
          <declname>fti</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1607" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2184" bodyend="2187"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1adc8043e53c1cfe729c6039e494098643" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t processor_t::get_abi_info</definition>
        <argsstring>(qstrvec_t *abi_names, qstrvec_t *abi_opts, comp_t comp)</argsstring>
        <name>get_abi_info</name>
        <param>
          <type><ref refid="pro_8h_1a823b67c620f6cdca97e1d969ea4a9b02" kindref="member">qstrvec_t</ref> *</type>
          <declname>abi_names</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a823b67c620f6cdca97e1d969ea4a9b02" kindref="member">qstrvec_t</ref> *</type>
          <declname>abi_opts</declname>
        </param>
        <param>
          <type><ref refid="ida_8hpp_1ae36605f575cb0bd001d6b89877734fa2" kindref="member">comp_t</ref></type>
          <declname>comp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1608" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="2188" bodyend="2191"/>
      </memberdef>
      <memberdef kind="function" id="structprocessor__t_1abe691f9f3c80817bd9d1e19e8ee5f926" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int processor_t::get_stkvar_scale</definition>
        <argsstring>(void)</argsstring>
        <name>get_stkvar_scale</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the stack variable scaling factor. Useful for processors who refer to the stack with implicit scaling factor. TMS320C55 for example: SP(#1) really refers to (SP+2) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="1621" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="1621" bodyend="1631"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Describes a processor module (IDP). An IDP file may have only one such structure called LPH. The kernel will copy it to <ref refid="idp_8hpp_1a1b22cd8cccc4c04160172a9fdc95626b" kindref="member">ph</ref> structure and use <ref refid="idp_8hpp_1a1b22cd8cccc4c04160172a9fdc95626b" kindref="member">ph</ref>. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="2916">
        <label>bytes_t</label>
        <link refid="structbytes__t"/>
      </node>
      <node id="2918">
        <label>asm_t</label>
        <link refid="structasm__t"/>
      </node>
      <node id="2917">
        <label>instruc_t</label>
        <link refid="structinstruc__t"/>
      </node>
      <node id="2915">
        <label>processor_t</label>
        <link refid="structprocessor__t"/>
        <childnode refid="2916" relation="usage">
          <edgelabel>retcodes</edgelabel>
          <edgelabel>codestart</edgelabel>
        </childnode>
        <childnode refid="2917" relation="usage">
          <edgelabel>instruc</edgelabel>
        </childnode>
        <childnode refid="2918" relation="usage">
          <edgelabel>assemblers</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" line="346" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/idp.hpp" bodystart="345" bodyend="1708"/>
    <listofallmembers>
      <member refid="structprocessor__t_1af61e0933fe94a51df832da1cf0eb25fd" prot="public" virt="non-virtual"><scope>processor_t</scope><name>_notify</name></member>
      <member refid="structprocessor__t_1ab23279d562549c187c11e03be7276ede" prot="public" virt="non-virtual"><scope>processor_t</scope><name>add_cref</name></member>
      <member refid="structprocessor__t_1a53858ff5ffd6177105af3b586a7b9ac2" prot="public" virt="non-virtual"><scope>processor_t</scope><name>add_dref</name></member>
      <member refid="structprocessor__t_1a5bbbc88582a2915e87441569264c4208" prot="public" virt="non-virtual"><scope>processor_t</scope><name>adjust_argloc</name></member>
      <member refid="structprocessor__t_1a67e3f0e75719891fd0fc77a04d8f4d1e" prot="public" virt="non-virtual"><scope>processor_t</scope><name>adjust_libfunc_ea</name></member>
      <member refid="structprocessor__t_1aaf3813014133afb596fa535507da8b13" prot="public" virt="non-virtual"><scope>processor_t</scope><name>adjust_refinfo</name></member>
      <member refid="structprocessor__t_1a1e0ed52c3b18846b77d1336e7b800020" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ana_insn</name></member>
      <member refid="structprocessor__t_1a3f2d29889d63b6339f65850abad123ab" prot="public" virt="non-virtual"><scope>processor_t</scope><name>analyze_prolog</name></member>
      <member refid="structprocessor__t_1a669da29a2a5a97cc93ea001519ee7c8a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>arg_addrs_ready</name></member>
      <member refid="structprocessor__t_1a102ecc9c3a1f4cc4be0b09cdbd00682f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>assemble</name></member>
      <member refid="structprocessor__t_1a13faa23b7174cbdbae5da42c71602d24" prot="public" virt="non-virtual"><scope>processor_t</scope><name>assemblers</name></member>
      <member refid="structprocessor__t_1a9bb3616729cfbca0713dd92767a12065" prot="public" virt="non-virtual"><scope>processor_t</scope><name>auto_queue_empty</name></member>
      <member refid="structprocessor__t_1a5182d510ab4bdc120fdf496be32cc258" prot="public" virt="non-virtual"><scope>processor_t</scope><name>calc_arglocs</name></member>
      <member refid="structprocessor__t_1ac20e7e184653527a2bae6289d617aa59" prot="public" virt="non-virtual"><scope>processor_t</scope><name>calc_cdecl_purged_bytes</name></member>
      <member refid="structprocessor__t_1a5f4633e0ee514204edf08003c09cb9f4" prot="public" virt="non-virtual"><scope>processor_t</scope><name>calc_next_eas</name></member>
      <member refid="structprocessor__t_1afb438896cb5f4d324a1ad0b85c998aa7" prot="public" virt="non-virtual"><scope>processor_t</scope><name>calc_purged_bytes</name></member>
      <member refid="structprocessor__t_1ab2d463eb05b2e3a885cbab2aa6cd8bc3" prot="public" virt="non-virtual"><scope>processor_t</scope><name>calc_retloc</name></member>
      <member refid="structprocessor__t_1a0ff06716780f3c010dcf7cab0510a97c" prot="public" virt="non-virtual"><scope>processor_t</scope><name>calc_spdelta</name></member>
      <member refid="structprocessor__t_1abc297252269d28783d8de07a9ae5edb9" prot="public" virt="non-virtual"><scope>processor_t</scope><name>calc_step_over</name></member>
      <member refid="structprocessor__t_1ad00786d3a5112c0c701c0812b70cce7b" prot="public" virt="non-virtual"><scope>processor_t</scope><name>calc_switch_cases</name></member>
      <member refid="structprocessor__t_1ae320436b85a408a6dcc5dd23d427448a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>calc_varglocs</name></member>
      <member refid="structprocessor__t_1a90a5fe1543fe141cffa37f27d122e00b" prot="public" virt="non-virtual"><scope>processor_t</scope><name>calcrel</name></member>
      <member refid="structprocessor__t_1a09baad5c693a6389bdf31131f48aaae2" prot="public" virt="non-virtual"><scope>processor_t</scope><name>can_have_type</name></member>
      <member refid="structprocessor__t_1a33f991813d3e0cc28375d5330dd246f3" prot="public" virt="non-virtual"><scope>processor_t</scope><name>cbsize</name></member>
      <member refid="structprocessor__t_1a23a8c993a7f25cad72a542a2f60a3c44" prot="public" virt="non-virtual"><scope>processor_t</scope><name>clean_tbit</name></member>
      <member refid="structprocessor__t_1a794c3d7186affb2d7906a812f7eda6e8" prot="public" virt="non-virtual"><scope>processor_t</scope><name>cmp_operands</name></member>
      <member refid="structprocessor__t_1ae86f81b3e716d4bf17f424688cf5aeab" prot="public" virt="non-virtual"><scope>processor_t</scope><name>cnbits</name></member>
      <member refid="structprocessor__t_1af9b27ed6378b8fd45c704bfb3f5c4c37" prot="public" virt="non-virtual"><scope>processor_t</scope><name>coagulate</name></member>
      <member refid="structprocessor__t_1ab60ba3abf604d807a566d90eb07f7951" prot="public" virt="non-virtual"><scope>processor_t</scope><name>coagulate_dref</name></member>
      <member refid="structprocessor__t_1a9414a4e585ab47514144871a585cc120" prot="public" virt="non-virtual"><scope>processor_t</scope><name>codestart</name></member>
      <member refid="structprocessor__t_1a631343e64c1c8a430a17475a73a6761d" prot="public" virt="non-virtual"><scope>processor_t</scope><name>create_flat_group</name></member>
      <member refid="structprocessor__t_1a94aaeed2010a17765bfbee51a2badff1" prot="public" virt="non-virtual"><scope>processor_t</scope><name>create_func_frame</name></member>
      <member refid="structprocessor__t_1a4d641dc226ea211d45d356958b6c62b6" prot="public" virt="non-virtual"><scope>processor_t</scope><name>create_switch_xrefs</name></member>
      <member refid="structprocessor__t_1ac1aa024d7c187aa63445d639d9f6ad08" prot="public" virt="non-virtual"><scope>processor_t</scope><name>creating_segm</name></member>
      <member refid="structprocessor__t_1a3d79d528bb32036ab8d76d102ee0037f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>dbsize</name></member>
      <member refid="structprocessor__t_1a2de2b62b2c8ab178465fcb7a28ba284a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>decorate_name</name></member>
      <member refid="structprocessor__t_1a801ecdbeea89a3837b4f36cbed3e9731" prot="public" virt="non-virtual"><scope>processor_t</scope><name>del_cref</name></member>
      <member refid="structprocessor__t_1abfd6cac468cc484e58f8b9d3d8ba119c" prot="public" virt="non-virtual"><scope>processor_t</scope><name>del_dref</name></member>
      <member refid="structprocessor__t_1ac766e36c7fcc1e50bd2702a4e5f6eb97" prot="public" virt="non-virtual"><scope>processor_t</scope><name>delay_slot_insn</name></member>
      <member refid="structprocessor__t_1ac73f75be94e1ca0af932acab98607582" prot="public" virt="non-virtual"><scope>processor_t</scope><name>demangle_name</name></member>
      <member refid="structprocessor__t_1a94c90b8e3ee733f9f843fc6297bd1977" prot="public" virt="non-virtual"><scope>processor_t</scope><name>dnbits</name></member>
      <member refid="structprocessor__t_1a73a1eac3d08be7b3c6669dbff4ed674c" prot="public" virt="non-virtual"><scope>processor_t</scope><name>emu_insn</name></member>
      <member refid="structprocessor__t_1a73b3ede69991121dde94fc93a3e6310a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>endbinary</name></member>
      <member refid="structprocessor__t_1a54754ec1de88b7a5474a20cad3451d6a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>equal_reglocs</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a6362bc58103da0a115d1c15c3ce41fe1" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_add_cref</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a64a7c332726e8a44498b879162e4d24f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_add_dref</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae6d879a79e41acf6c15241f8a8616413" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_adjust_argloc</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a1cf0dcb7a9e11a5220863ddb8722bd09" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_adjust_libfunc_ea</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0abf55189dd21fab945f35eab8fa9088cf" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_adjust_refinfo</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a108d52b9133787bd01c5ca8a7550f2e9" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_ana_insn</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ada84ccdbecd828227cf5891289d4a442" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_analyze_prolog</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a63c06a7cbeccfbc66ba9981ccde80e77" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_arg_addrs_ready</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a5f2ba1e8f4586958cc9cef0f514667e2" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_assemble</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a0ca73f0b4d8eb1c319f668cb8c520b86" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_auto_queue_empty</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a8db94c9ea9bd7e6039821e897b952f82" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_calc_arglocs</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae4a7bab1ce8d51fef3323630c8ab5986" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_calc_cdecl_purged_bytes</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a15f393eb309882f724a87ba8680ed8b2" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_calc_next_eas</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a04dc0f7ffee5e8ce6d9bd2659f5fb48d" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_calc_purged_bytes</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a0d69f230a16256b7c97ec87e16a6f814" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_calc_retloc</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ad634ef51985fc184b924840188825199" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_calc_spdelta</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aa552c713d33cbf8b7088aa1279316279" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_calc_step_over</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a98ff2357b62ae2783e781073a9549578" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_calc_switch_cases</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a4537faf41cc6bd81946ec4cfd4b2db5a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_calc_varglocs</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a44113b21d13cb880233a52c38a84bea9" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_calcrel</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a9b1b28b1c71c8d77861f528c78eade90" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_can_have_type</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a731a21b42e23b3a93212acc929590a44" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_clean_tbit</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a2996b08408addef7f16b01180e2efdc3" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_cmp_operands</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a08fe9e01fa7424bd80e734a963c1b16a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_coagulate</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a00c056a442c9524d2c7f7e90669c8275" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_coagulate_dref</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a5fa3981e47a82bf57567c9e17fc69344" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_create_flat_group</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a4e97147365c7e9487f57ffc2bd82894a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_create_func_frame</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ab1fe188a32b7e4eeedbbbcbe5066af56" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_create_switch_xrefs</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a50e477c14c432b24b7415aa3d96f4a9d" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_creating_segm</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a8341bbf9f53b19f61d4d7adcdc51783b" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_decorate_name</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a58ace401d909f95b24a1e8fcae9810d4" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_del_cref</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0affd5e295fef35e6175c3db5150ca5396" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_del_dref</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0af754550ff044ee8ba2bf4b90037eb4b1" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_delay_slot_insn</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ad1283662b4901e2ea7d85af70bc7f817" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_demangle_name</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a82b81ce84c2257cb5a9176648e2fd6fc" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_emu_insn</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a0886df8414100bfdcaacf87a8ae165e7" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_endbinary</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aacf3158cd80a47e0f87786c60f6f1b6a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_equal_reglocs</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0abe5d814d671bf8564be4212cefb61238" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_extract_address</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ac0cdca25f97d06dfa6630abfd371cfea" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_find_op_value</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a05a8170fb8a243187c118dbcaa1fd954" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_find_reg_value</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a54a6dfcb795c6d8167ebdb5116bcf579" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_func_bounds</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a87a749b6180d2fc6c4b4436df4eddc2f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_gen_asm_or_lst</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ac4729fbc053f45a29a9370369eda3c21" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_gen_map_file</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a44268c939ffcc2e8c4c54a1c75796bc0" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_gen_regvar_def</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a0b636852302fb6ded9309c69cb984f75" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_gen_src_file_lnnum</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a1790c885236860f938b0c7e983fac38f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_gen_stkvar_def</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aa97519e3d4a7c838b5bea894471d1605" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_get_abi_info</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a0fa6560db645bbc4751b5cee7760cf30" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_get_autocmt</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a0de30b0749ce3401ec930a1904bcb274" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_get_bg_color</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a4d4579748c4e9235161552951f41243e" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_get_cc_regs</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae19b6e2ec1f0f8dff6822e23d26ecf6f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_get_dbr_opnum</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a445f041d8992406148c70d2265aeeaeb" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_get_default_enum_size</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a73d90e8e78294379f7efdb58e0fa4ca9" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_get_frame_retsize</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a4c99f3d0cae242c834db12429824c412" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_get_idd_opinfo</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a2f4da6daaf29d96db466f024a41b6cd6" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_get_macro_insn_head</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae7391e79329dedc4bd100a629e61f569" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_get_operand_string</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ac3cc0f61a972f10943ffcb9b512bbfcd" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_get_reg_info</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a8dcc2b7307fb19045e6acf6d6016d89d" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_get_reg_name</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0afa23f72943023fbb22dbc682beca757c" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_get_simd_types</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a47951bf3b092b3fbc1750c48988a00a0" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_get_stkarg_offset</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae3c289592a68b9362e83fab157097cbf" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_get_stkvar_scale_factor</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a5b7199e3af11fa25303602ba6093f307" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_getreg</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a8902d365f396d75e96a81c73b02ca13c" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_init</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a744ce375c380a22ef248cb5c8b2fe91e" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_insn_reads_tbit</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a4d200c0f82f9d32c4bda426aadc3e9dc" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_is_align_insn</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ad25720c4c15166242743be03127e0a84" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_is_alloca_probe</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a978a9e36b842dfe0e7380c3521fa2e1d" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_is_basic_block_end</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aa62d5d4207c7aee3967ab8abddb8c3c1" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_is_call_insn</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0addaf1f6a31bbefb8033c27edc0950cb8" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_is_cond_insn</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aa0a7a527f9e9cba6c406358fad2d4ab1" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_is_far_jump</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a11d97a517b214dfde194a1de69e5e5ab" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_is_indirect_jump</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0adeb44139bfc91c40cb8e3bd93659ca8e" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_is_insn_table_jump</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a1f6f7128d8213f4433c5c94e16635aa7" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_is_jump_func</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0abec6210c7336a864b70a7e5e94a9ac9d" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_is_ret_insn</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aca1ba6609e0e3814c499511d513eb099" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_is_sane_insn</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aef2ae5d93a83201e69e626f1308ca21f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_is_sp_based</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a9d42d8c2836dceec7666e4b8eb6f71a1" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_is_switch</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a5776ce7324886d47497e6b55fa985c2f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_last_cb_before_debugger</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a9d927bdb68089f7d1b1bcf95b1680ce3" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_last_cb_before_type_callbacks</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a562fb16cff7e5e0c0f5750788c24d99c" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_loader</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a268f12ba7873a0778460826a59e268aa" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_loader_elf_machine</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0af54f85e43c332ae869c5e9015e1f3203" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_lower_func_type</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aa72e8b0fefe1ccb4f97c3ab7d963403e" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_max_ptr_size</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a2e378dfbfccdef3feaa2da1bab69326e" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_may_be_func</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a1edb3d05f21feee48cf7d271032dcbc2" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_may_show_sreg</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aa3c9018493b02e6d0e2b5a4ac7b7549b" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_moving_segm</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0af0b69a407fcdc6e5627901c6b3e5f4a6" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_newasm</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a20b00ee7b8f4f3ce47579430ce3fa1c0" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_newbinary</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0af544684794ac0f908ba551b0085482a9" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_newfile</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a190f0300a7e6ad8e090389f7b986e9f8" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_newprc</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a035854be86d6e113db368eba96ec6a44" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_next_exec_insn</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae9430716ca6d6e53548863cce8fd839f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_oldfile</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0abf9364c0e642488fac29f61f2b6d0e00" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_out_assumes</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a960b08cf65ab07718b9c1eeab0f3288b" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_out_data</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae78a32919dde7288ed2e816658081c2a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_out_footer</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ac286cd442f5f923d434a9a420d2639e8" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_out_header</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a8edf4ec2bd23d42d3db641761b3156de" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_out_insn</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a4fc4ad04d596de2dbea5694286bd461e" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_out_label</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a25783c63147edce4591595cba57d1fb3" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_out_mnem</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a8312057bdefad72948a26885372af286" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_out_operand</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a9153e7bd063780720b8761a8e7371a25" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_out_segend</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae9a7ac704447bbbd50dface52b617807" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_out_segstart</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a15733589357bcc46d558536220edcb81" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_out_special_item</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a5cccab69e499642d3873649769de31cf" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_realcvt</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a2a2bb0b58f0b5ab62748063b0e601a0e" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_rename</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a77fb9c9858c9519da17acd2a2bc60391" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_set_idp_options</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a47bcbd0313ef457a9ff2b6330ab80af3" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_set_proc_options</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ab943223f3ca8d738c6a33aa2d1d5d5b2" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_setup_til</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a81a915a392ccbe061321cf7fd8bb3091" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_shadow_args_size</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aaddd272c33f61d746f850746a5451a9f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_str2reg</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a93a414d2d7ac3eeee04c19853b53bd27" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_term</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae96a0913cd051a9a7861ff2d3514a370" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_treat_hindering_item</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a326c50bb55c58af34774e6fbab74214c" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_undefine</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a97d8ef8f70c0d9e0e53726ab6cea7671" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_use_arg_types</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a239afca977e96df72bf4680c8843662a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_use_regarg_type</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a5551d04ee2e1a9f77a06ea2da02e5ffc" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_use_stkarg_type</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0aac26bb0ae2ef530084cbeb8c3078bd43" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_validate_flirt_func</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0ae161c5b9fbb789a4ed5a9e88539802f7" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_verify_noreturn</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0a726a4a238e3c41a53777e5e04b911029" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ev_verify_sp</name></member>
      <member refid="structprocessor__t_1a2d184a313fab28b517e82c1717d562a0" prot="public" virt="non-virtual"><scope>processor_t</scope><name>event_t</name></member>
      <member refid="structprocessor__t_1a77a5009b32f51a909194731b6161eaa5" prot="public" virt="non-virtual"><scope>processor_t</scope><name>extract_address</name></member>
      <member refid="structprocessor__t_1a349c65dc5c4204ed874ec04615542933" prot="public" virt="non-virtual"><scope>processor_t</scope><name>find_op_value</name></member>
      <member refid="structprocessor__t_1a2b496cc4ca56c43de481378e3fc51d26" prot="public" virt="non-virtual"><scope>processor_t</scope><name>find_reg_value</name></member>
      <member refid="structprocessor__t_1a6542af67172bea21cda8b81c6671d775" prot="public" virt="non-virtual"><scope>processor_t</scope><name>flag</name></member>
      <member refid="structprocessor__t_1ab9bbec9142e5695cda6294a9fe85a59c" prot="public" virt="non-virtual"><scope>processor_t</scope><name>flag2</name></member>
      <member refid="structprocessor__t_1a58099ba9206ccb11760a1985e86f4bd5" prot="public" virt="non-virtual"><scope>processor_t</scope><name>func_bounds</name></member>
      <member refid="structprocessor__t_1a68b5134908d2957919ea3fb71e70a71f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>gen_asm_or_lst</name></member>
      <member refid="structprocessor__t_1a84d13b140759388e5a7d164a51cb646b" prot="public" virt="non-virtual"><scope>processor_t</scope><name>gen_map_file</name></member>
      <member refid="structprocessor__t_1af72ad3c218fd059153065a1a75cec325" prot="public" virt="non-virtual"><scope>processor_t</scope><name>gen_regvar_def</name></member>
      <member refid="structprocessor__t_1aabbf45e468cd1e7b6a22d7ecacd64421" prot="public" virt="non-virtual"><scope>processor_t</scope><name>gen_src_file_lnnum</name></member>
      <member refid="structprocessor__t_1ab073c3da05fbf7cc4174164d2ce443a5" prot="public" virt="non-virtual"><scope>processor_t</scope><name>gen_stkvar_def</name></member>
      <member refid="structprocessor__t_1adc8043e53c1cfe729c6039e494098643" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_abi_info</name></member>
      <member refid="structprocessor__t_1ad3704c4a670f7f1c88952d841b82077b" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_autocmt</name></member>
      <member refid="structprocessor__t_1ad1b152f1569df75ff8b07475d0d61400" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_bg_color</name></member>
      <member refid="structprocessor__t_1a351577f6b72869301c5f4615ed25c0b5" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_cc_regs</name></member>
      <member refid="structprocessor__t_1ade0511005068143520af107e4b5c3b87" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_dbr_opnum</name></member>
      <member refid="structprocessor__t_1ade850127e6bf2394e070577ddacf0a6b" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_default_enum_size</name></member>
      <member refid="structprocessor__t_1a5678a9ccb588ae0f1293f272f1baf4ca" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_frame_retsize</name></member>
      <member refid="structprocessor__t_1aca0b2efa4b12d83851d0fc8375273ef5" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_idd_opinfo</name></member>
      <member refid="structprocessor__t_1ad5e1bd1a431a9cdd609c3ae7efc4d4f0" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_macro_insn_head</name></member>
      <member refid="structprocessor__t_1a1fe8ce656f1e2b0c182b4cca3fdf4ddb" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_operand_string</name></member>
      <member refid="structprocessor__t_1a435d35e9d9ef5a708c565024ab514feb" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_reg_info</name></member>
      <member refid="structprocessor__t_1afaf89e018a27e8b74dca757320d84c4e" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_reg_name</name></member>
      <member refid="structprocessor__t_1a13d69ecbf2a060f1a7e67eb3f53b32ff" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_segm_bitness</name></member>
      <member refid="structprocessor__t_1aa1baac2e3217b150f98f2357e981badb" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_simd_types</name></member>
      <member refid="structprocessor__t_1a83a75bfe85ebc547b7f9b986b62c038e" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_stkarg_offset</name></member>
      <member refid="structprocessor__t_1abe691f9f3c80817bd9d1e19e8ee5f926" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_stkvar_scale</name></member>
      <member refid="structprocessor__t_1a9de0e633060f5493deddd8fc5e1a627d" prot="public" virt="non-virtual"><scope>processor_t</scope><name>get_stkvar_scale_factor</name></member>
      <member refid="structprocessor__t_1a878d9447be6d7893c68acc8a7d86af2f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>getreg</name></member>
      <member refid="structprocessor__t_1a3e94679bdf9f1c003df71da06dad16ea" prot="public" virt="non-virtual"><scope>processor_t</scope><name>has_idp_opts</name></member>
      <member refid="structprocessor__t_1a6afd8f35b1dd6073b629e5721b93df48" prot="public" virt="non-virtual"><scope>processor_t</scope><name>has_realcvt</name></member>
      <member refid="structprocessor__t_1a748b4f1feee94973d69548147f2976f1" prot="public" virt="non-virtual"><scope>processor_t</scope><name>has_segregs</name></member>
      <member refid="structprocessor__t_1a54dc160e62c6c5f649e65ffa4de31f7a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>has_thumb</name></member>
      <member refid="structprocessor__t_1ab497b14d9a38b3b5f04137d554c0e18d" prot="public" virt="non-virtual"><scope>processor_t</scope><name>icode_return</name></member>
      <member refid="structprocessor__t_1ad6df0facf50afe9dee4716f69739244f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>id</name></member>
      <member refid="structprocessor__t_1afe4455b93927159bd4a739b1aceb9983" prot="public" virt="non-virtual"><scope>processor_t</scope><name>init</name></member>
      <member refid="structprocessor__t_1a438356b412773f944dad961cbe478972" prot="public" virt="non-virtual"><scope>processor_t</scope><name>insn_reads_tbit</name></member>
      <member refid="structprocessor__t_1a6fb7cfbf39771b646cfc5e5d43259175" prot="public" virt="non-virtual"><scope>processor_t</scope><name>instruc</name></member>
      <member refid="structprocessor__t_1a5bc594ff4b32014972b205b5c9b07deb" prot="public" virt="non-virtual"><scope>processor_t</scope><name>instruc_end</name></member>
      <member refid="structprocessor__t_1a35f080945b61116baab1bfc67f195f62" prot="public" virt="non-virtual"><scope>processor_t</scope><name>instruc_start</name></member>
      <member refid="structprocessor__t_1a70f9f3a712f524e1027345970ec28874" prot="public" virt="non-virtual"><scope>processor_t</scope><name>is_align_insn</name></member>
      <member refid="structprocessor__t_1ae0cc4334a38a4b7fb2285fe38690a89c" prot="public" virt="non-virtual"><scope>processor_t</scope><name>is_alloca_probe</name></member>
      <member refid="structprocessor__t_1ac200f8e343964827402c5a7ddc97370b" prot="public" virt="non-virtual"><scope>processor_t</scope><name>is_basic_block_end</name></member>
      <member refid="structprocessor__t_1a4560c0ae3df7cd39f133601009b74935" prot="public" virt="non-virtual"><scope>processor_t</scope><name>is_call_insn</name></member>
      <member refid="structprocessor__t_1a461e26b10900db7a5e6b843fe8ce7434" prot="public" virt="non-virtual"><scope>processor_t</scope><name>is_canon_insn</name></member>
      <member refid="structprocessor__t_1a53ba085249f03d19e71da9a0c682f745" prot="public" virt="non-virtual"><scope>processor_t</scope><name>is_cond_insn</name></member>
      <member refid="structprocessor__t_1ad78e1fca46a156b5c7e5e95e8b8778b3" prot="public" virt="non-virtual"><scope>processor_t</scope><name>is_far_jump</name></member>
      <member refid="structprocessor__t_1ab8ab54716e46491bee53031452bb6647" prot="public" virt="non-virtual"><scope>processor_t</scope><name>is_indirect_jump</name></member>
      <member refid="structprocessor__t_1a275ef4b9e0d43ca32ea9ffb71c2cfea4" prot="public" virt="non-virtual"><scope>processor_t</scope><name>is_insn_table_jump</name></member>
      <member refid="structprocessor__t_1a82efcd2d78094007ba01b896069680d2" prot="public" virt="non-virtual"><scope>processor_t</scope><name>is_jump_func</name></member>
      <member refid="structprocessor__t_1afd987acdacd3fe8d6e0146b4117d7af3" prot="public" virt="non-virtual"><scope>processor_t</scope><name>is_ret_insn</name></member>
      <member refid="structprocessor__t_1ad53599f2c48a87e32cd14661aeeb2449" prot="public" virt="non-virtual"><scope>processor_t</scope><name>is_sane_insn</name></member>
      <member refid="structprocessor__t_1a4a4e543f76da81d49296b4826e0bf69e" prot="public" virt="non-virtual"><scope>processor_t</scope><name>is_sp_based</name></member>
      <member refid="structprocessor__t_1a5cede3a0bb6b279184b88668378a19bf" prot="public" virt="non-virtual"><scope>processor_t</scope><name>is_switch</name></member>
      <member refid="structprocessor__t_1a225089e4b8fd141c9fa7a5f17fbeef23" prot="public" virt="non-virtual"><scope>processor_t</scope><name>loader_elf_machine</name></member>
      <member refid="structprocessor__t_1a6dbdfae149a1fd6417fdce6b90494461" prot="public" virt="non-virtual"><scope>processor_t</scope><name>lower_func_type</name></member>
      <member refid="structprocessor__t_1a6339fd474606e98afb912ced953f90ae" prot="public" virt="non-virtual"><scope>processor_t</scope><name>max_ptr_size</name></member>
      <member refid="structprocessor__t_1af821b38249e800915e8bce8671bd05d4" prot="public" virt="non-virtual"><scope>processor_t</scope><name>may_be_func</name></member>
      <member refid="structprocessor__t_1aba5af536c87b32cb6b7bd14fef625388" prot="public" virt="non-virtual"><scope>processor_t</scope><name>may_show_sreg</name></member>
      <member refid="structprocessor__t_1af99650932e10c825fe5f3e099740516a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>moving_segm</name></member>
      <member refid="structprocessor__t_1a3c3f596cfa224ae0ea00941ce9a88668" prot="public" virt="non-virtual"><scope>processor_t</scope><name>newasm</name></member>
      <member refid="structprocessor__t_1a90f8feec9912fc3e904b2ce0e6b22882" prot="public" virt="non-virtual"><scope>processor_t</scope><name>newbinary</name></member>
      <member refid="structprocessor__t_1ace44af71e6fd51d053ac4359b24b1e44" prot="public" virt="non-virtual"><scope>processor_t</scope><name>newfile</name></member>
      <member refid="structprocessor__t_1a75cdb19403d2ec8d52dadcea9bde398c" prot="public" virt="non-virtual"><scope>processor_t</scope><name>newprc</name></member>
      <member refid="structprocessor__t_1ae5dc1c11df02efdbc887058c43e2a7bd" prot="public" virt="non-virtual"><scope>processor_t</scope><name>next_exec_insn</name></member>
      <member refid="structprocessor__t_1a1bc5cc7a90ccdd6fc5ef088211bdcf62" prot="public" virt="non-virtual"><scope>processor_t</scope><name>notify</name></member>
      <member refid="structprocessor__t_1a69bc2b0eadec32992263c68130e52a7b" prot="public" virt="non-virtual"><scope>processor_t</scope><name>oldfile</name></member>
      <member refid="structprocessor__t_1af958c9d126dfa1fe321ed5d4c4e0c2da" prot="public" virt="non-virtual"><scope>processor_t</scope><name>out_assumes</name></member>
      <member refid="structprocessor__t_1a60c612748f6fda218e44ea4cb018443c" prot="public" virt="non-virtual"><scope>processor_t</scope><name>out_data</name></member>
      <member refid="structprocessor__t_1a8cdf757042f18bee56b4de1537361f92" prot="public" virt="non-virtual"><scope>processor_t</scope><name>out_footer</name></member>
      <member refid="structprocessor__t_1a25d4ea97428d53055fc0be13063006d7" prot="public" virt="non-virtual"><scope>processor_t</scope><name>out_header</name></member>
      <member refid="structprocessor__t_1a2456e602cd6efaf827d6435047fe6542" prot="public" virt="non-virtual"><scope>processor_t</scope><name>out_insn</name></member>
      <member refid="structprocessor__t_1a9c5d9adb678e9dde281f805a97b5df9c" prot="public" virt="non-virtual"><scope>processor_t</scope><name>out_label</name></member>
      <member refid="structprocessor__t_1aa9fe55157acf58d4f160e7bf2d67e113" prot="public" virt="non-virtual"><scope>processor_t</scope><name>out_mnem</name></member>
      <member refid="structprocessor__t_1a28bb10446bca9768f91a6387ea643f8d" prot="public" virt="non-virtual"><scope>processor_t</scope><name>out_operand</name></member>
      <member refid="structprocessor__t_1aa0ef517defad729421ace2aaea7e9e3d" prot="public" virt="non-virtual"><scope>processor_t</scope><name>out_segend</name></member>
      <member refid="structprocessor__t_1acbd6a4db695b07493493be9bd04b66dd" prot="public" virt="non-virtual"><scope>processor_t</scope><name>out_segstart</name></member>
      <member refid="structprocessor__t_1a4ee2af27607fc7c121c240ed224bef95" prot="public" virt="non-virtual"><scope>processor_t</scope><name>out_special_item</name></member>
      <member refid="structprocessor__t_1adb54cc1d2faab6891ad190e2e5b7bf08" prot="public" virt="non-virtual"><scope>processor_t</scope><name>plnames</name></member>
      <member refid="structprocessor__t_1a7f36c9be272d994bc341b3fcb78726f6" prot="public" virt="non-virtual"><scope>processor_t</scope><name>psnames</name></member>
      <member refid="structprocessor__t_1ab1ed6541f40864dcf175219db42afa90" prot="public" virt="non-virtual"><scope>processor_t</scope><name>real_width</name></member>
      <member refid="structprocessor__t_1a4371fdb4cf6f689887cfcbd9e18f0c54" prot="public" virt="non-virtual"><scope>processor_t</scope><name>realcvt</name></member>
      <member refid="structprocessor__t_1a8c1090cef7d02b379600a8049cd4d25f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>reg_code_sreg</name></member>
      <member refid="structprocessor__t_1af0bc236f72fe8f6b2b06a8342de8c7ab" prot="public" virt="non-virtual"><scope>processor_t</scope><name>reg_data_sreg</name></member>
      <member refid="structprocessor__t_1a4206e35bf99d211c18d53bd1035eb2e3" prot="public" virt="non-virtual"><scope>processor_t</scope><name>reg_first_sreg</name></member>
      <member refid="structprocessor__t_1aa2f70771df2d04aefdfe0d9b7e546d4e" prot="public" virt="non-virtual"><scope>processor_t</scope><name>reg_last_sreg</name></member>
      <member refid="structprocessor__t_1a0b75be7e30d134b1b288ab686c312307" prot="public" virt="non-virtual"><scope>processor_t</scope><name>reg_names</name></member>
      <member refid="structprocessor__t_1aec3a26dcb0ced65a3db134e0b2f90557" prot="public" virt="non-virtual"><scope>processor_t</scope><name>regs_num</name></member>
      <member refid="structprocessor__t_1a6d4346317d32879e39e894f3d9d616b2" prot="public" virt="non-virtual"><scope>processor_t</scope><name>regval_getter_t</name></member>
      <member refid="structprocessor__t_1af02e67df5efc18920e0bad7edf1344de" prot="public" virt="non-virtual"><scope>processor_t</scope><name>rename</name></member>
      <member refid="structprocessor__t_1ab3849caf742c36dc743f0aa88267221a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>retcodes</name></member>
      <member refid="structprocessor__t_1a811665eba68bd3606023c09af8f85705" prot="public" virt="non-virtual"><scope>processor_t</scope><name>segreg_size</name></member>
      <member refid="structprocessor__t_1a6c9c046afe0a984c0c05bc330ebd3a53" prot="public" virt="non-virtual"><scope>processor_t</scope><name>set_idp_options</name></member>
      <member refid="structprocessor__t_1ab6d1a97c50ce5628b96cf83ab5e1966e" prot="public" virt="non-virtual"><scope>processor_t</scope><name>set_proc_options</name></member>
      <member refid="structprocessor__t_1a498288d0b0eae31e23cd7a1275e87506" prot="public" virt="non-virtual"><scope>processor_t</scope><name>setup_til</name></member>
      <member refid="structprocessor__t_1a651aaefc3eebe70057a967c3fad3096f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>shadow_args_size</name></member>
      <member refid="structprocessor__t_1a7cadc6b71ebc381378698c9013c0abc4" prot="public" virt="non-virtual"><scope>processor_t</scope><name>stkup</name></member>
      <member refid="structprocessor__t_1a3bf543ba00d87622e9faf2929a0b91ff" prot="public" virt="non-virtual"><scope>processor_t</scope><name>str2reg</name></member>
      <member refid="structprocessor__t_1a7a1ea672e493ec9b59b6d3d8e09d69e1" prot="public" virt="non-virtual"><scope>processor_t</scope><name>tbyte_size</name></member>
      <member refid="structprocessor__t_1a6fdb462b00e97eda09f77262c0ee7d05" prot="public" virt="non-virtual"><scope>processor_t</scope><name>term</name></member>
      <member refid="structprocessor__t_1a4da3eacaa62ac6b4a03d2ba2493be59f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>ti</name></member>
      <member refid="structprocessor__t_1adcdacad16663f79b0957978c94ee62d3" prot="public" virt="non-virtual"><scope>processor_t</scope><name>treat_hindering_item</name></member>
      <member refid="structprocessor__t_1a214f82f03f51c39fc7910d3e0f26fc4c" prot="public" virt="non-virtual"><scope>processor_t</scope><name>undefine</name></member>
      <member refid="structprocessor__t_1a62aee2fa2fba2d3a642f730ff0e0c3e8" prot="public" virt="non-virtual"><scope>processor_t</scope><name>unused_slot</name></member>
      <member refid="structprocessor__t_1a6480962c2539adf539613d7258f2e6ee" prot="public" virt="non-virtual"><scope>processor_t</scope><name>use32</name></member>
      <member refid="structprocessor__t_1a091dfba8a9fd2b3f473a7ea84bc2a0f7" prot="public" virt="non-virtual"><scope>processor_t</scope><name>use64</name></member>
      <member refid="structprocessor__t_1adf7a5f3f545b57cac7544785c23833c3" prot="public" virt="non-virtual"><scope>processor_t</scope><name>use_arg_types</name></member>
      <member refid="structprocessor__t_1a97dcc004db7d33f353ad903f4f5bce58" prot="public" virt="non-virtual"><scope>processor_t</scope><name>use_mappings</name></member>
      <member refid="structprocessor__t_1a19b7c2da8779fef5d70223cf4b61ed3a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>use_regarg_type</name></member>
      <member refid="structprocessor__t_1a09ffbd809485b6b700094e3cd9b7d36f" prot="public" virt="non-virtual"><scope>processor_t</scope><name>use_stkarg_type</name></member>
      <member refid="structprocessor__t_1a7e5ad4df4d0825ffbefceb583ac8a284" prot="public" virt="non-virtual"><scope>processor_t</scope><name>use_tbyte</name></member>
      <member refid="structprocessor__t_1a228b1e8ae1967aeed13c833505960841" prot="public" virt="non-virtual"><scope>processor_t</scope><name>validate_flirt_func</name></member>
      <member refid="structprocessor__t_1afcae02a4f27ced49a33d8777cd61383d" prot="public" virt="non-virtual"><scope>processor_t</scope><name>verify_noreturn</name></member>
      <member refid="structprocessor__t_1ae67ccf3c1c851aabc99b38e45d8b7c6a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>verify_sp</name></member>
      <member refid="structprocessor__t_1ad15b68b6bdef844bb4481f9535878a2a" prot="public" virt="non-virtual"><scope>processor_t</scope><name>version</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
