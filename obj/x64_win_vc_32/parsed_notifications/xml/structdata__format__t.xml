<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="structdata__format__t" kind="struct" language="C++" prot="public">
    <compoundname>data_format_t</compoundname>
    <includes refid="bytes_8hpp" local="no">bytes.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structdata__format__t_1a67ebc26b36fad8bbe721c9f65b77b93d" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 data_format_t::cbsize</definition>
        <argsstring></argsstring>
        <name>cbsize</name>
        <briefdescription>
<para>size of this structure </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1801" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1801" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdata__format__t_1aa3ab0a40a4a3bce97271fb46708b944d" prot="public" static="no" mutable="no">
        <type>void *</type>
        <definition>void* data_format_t::ud</definition>
        <argsstring></argsstring>
        <name>ud</name>
        <briefdescription>
<para>user-defined data to be passed to callbacks </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1802" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1802" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdata__format__t_1a439e0ff26331d56f8995ab634f7b21e8" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int data_format_t::props</definition>
        <argsstring></argsstring>
        <name>props</name>
        <briefdescription>
<para>properties (currently 0) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1803" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1803" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdata__format__t_1a83d482dde654e19f1b74fef2922e0556" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* data_format_t::name</definition>
        <argsstring></argsstring>
        <name>name</name>
        <briefdescription>
<para>Format name, must be unique. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1804" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1804" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdata__format__t_1a9f79a6e4fa3b1a1efb96fb84f9015624" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* data_format_t::menu_name</definition>
        <argsstring></argsstring>
        <name>menu_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visible format name to use in menus if NULL, no menu item will be created </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1805" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1805" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdata__format__t_1ad0a1bca214d3f3ee2171211bafff77ef" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* data_format_t::hotkey</definition>
        <argsstring></argsstring>
        <name>hotkey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Hotkey for the corresponding menu item if NULL, no hotkey will be associated with the menu item </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1807" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1807" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdata__format__t_1a484363fae7730c346c2f9488ac0d16f6" prot="public" static="no" mutable="no">
        <type>asize_t</type>
        <definition>asize_t data_format_t::value_size</definition>
        <argsstring></argsstring>
        <name>value_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>size of the value in bytes 0 means any size is ok data formats that are registered for standard types (dtid 0) may be called with any value_size (instruction operands only) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1809" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1809" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdata__format__t_1a090ec0dfa9be4ba580d38f0a07453458" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 data_format_t::text_width</definition>
        <argsstring></argsstring>
        <name>text_width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Usual width of the text representation This value is used to calculate the width of the control to display values of this type </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1813" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1813" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdata__format__t_1ae5bad612e2e8fc2c59d4a5a215fddf21" prot="public" static="no" mutable="no">
        <type>bool(idaapi *</type>
        <definition>bool(idaapi * data_format_t::print) (void *ud, qstring *out, const void *value, asize_t size, ea_t current_ea, int operand_num, int dtid)</definition>
        <argsstring>)(void *ud, qstring *out, const void *value, asize_t size, ea_t current_ea, int operand_num, int dtid)</argsstring>
        <name>print</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert to colored string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ud</parametername>
</parameternamelist>
<parameterdescription>
<para>user-defined data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer. may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to print. may not be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of value in 8-bit bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>current address (BADADDR if unknown) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operand_num</parametername>
</parameternamelist>
<parameterdescription>
<para>current operand number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dtid</parametername>
</parameternamelist>
<parameterdescription>
<para>custom data type id (0-standard built-in data type) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1830" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1830" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdata__format__t_1ac0336b9ad3c7d8a707d0fe1a2bcfeaf3" prot="public" static="no" mutable="no">
        <type>bool(idaapi *</type>
        <definition>bool(idaapi * data_format_t::scan) (void *ud, bytevec_t *value, const char *input, ea_t current_ea, int operand_num, qstring *errstr)</definition>
        <argsstring>)(void *ud, bytevec_t *value, const char *input, ea_t current_ea, int operand_num, qstring *errstr)</argsstring>
        <name>scan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert from uncolored string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ud</parametername>
</parameternamelist>
<parameterdescription>
<para>user-defined data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer. may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>input string. may not be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>current address (BADADDR if unknown) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operand_num</parametername>
</parameternamelist>
<parameterdescription>
<para>current operand number (-1 if unknown) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>errstr</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer for error message </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1847" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structdata__format__t_1a405ca626635f15131422f2d67fa9b178" prot="public" static="no" mutable="no">
        <type>void(idaapi *</type>
        <definition>void(idaapi * data_format_t::analyze) (void *ud, ea_t current_ea, int operand_num)</definition>
        <argsstring>)(void *ud, ea_t current_ea, int operand_num)</argsstring>
        <name>analyze</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Analyze custom data format occurrence This callback can be used to create xrefs from the current item. This callback may be missing. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ud</parametername>
</parameternamelist>
<parameterdescription>
<para>user-defined data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>current_ea</parametername>
</parameternamelist>
<parameterdescription>
<para>current address (BADADDR if unknown) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>operand_num</parametername>
</parameternamelist>
<parameterdescription>
<para>current operand number </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1861" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1861" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdata__format__t_1a7fa842df71d8f4fca282ced64c3b632e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool data_format_t::is_present_in_menus</definition>
        <argsstring>() const</argsstring>
        <name>is_present_in_menus</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Should this format be shown in UI menus <simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1819" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1819" bodyend="1819"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Information about a data format. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" line="1800" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/bytes.hpp" bodystart="1799" bodyend="1865"/>
    <listofallmembers>
      <member refid="structdata__format__t_1a405ca626635f15131422f2d67fa9b178" prot="public" virt="non-virtual"><scope>data_format_t</scope><name>analyze</name></member>
      <member refid="structdata__format__t_1a67ebc26b36fad8bbe721c9f65b77b93d" prot="public" virt="non-virtual"><scope>data_format_t</scope><name>cbsize</name></member>
      <member refid="structdata__format__t_1ad0a1bca214d3f3ee2171211bafff77ef" prot="public" virt="non-virtual"><scope>data_format_t</scope><name>hotkey</name></member>
      <member refid="structdata__format__t_1a7fa842df71d8f4fca282ced64c3b632e" prot="public" virt="non-virtual"><scope>data_format_t</scope><name>is_present_in_menus</name></member>
      <member refid="structdata__format__t_1a9f79a6e4fa3b1a1efb96fb84f9015624" prot="public" virt="non-virtual"><scope>data_format_t</scope><name>menu_name</name></member>
      <member refid="structdata__format__t_1a83d482dde654e19f1b74fef2922e0556" prot="public" virt="non-virtual"><scope>data_format_t</scope><name>name</name></member>
      <member refid="structdata__format__t_1ae5bad612e2e8fc2c59d4a5a215fddf21" prot="public" virt="non-virtual"><scope>data_format_t</scope><name>print</name></member>
      <member refid="structdata__format__t_1a439e0ff26331d56f8995ab634f7b21e8" prot="public" virt="non-virtual"><scope>data_format_t</scope><name>props</name></member>
      <member refid="structdata__format__t_1ac0336b9ad3c7d8a707d0fe1a2bcfeaf3" prot="public" virt="non-virtual"><scope>data_format_t</scope><name>scan</name></member>
      <member refid="structdata__format__t_1a090ec0dfa9be4ba580d38f0a07453458" prot="public" virt="non-virtual"><scope>data_format_t</scope><name>text_width</name></member>
      <member refid="structdata__format__t_1aa3ab0a40a4a3bce97271fb46708b944d" prot="public" virt="non-virtual"><scope>data_format_t</scope><name>ud</name></member>
      <member refid="structdata__format__t_1a484363fae7730c346c2f9488ac0d16f6" prot="public" virt="non-virtual"><scope>data_format_t</scope><name>value_size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
