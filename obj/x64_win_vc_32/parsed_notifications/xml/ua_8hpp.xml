<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="ua_8hpp" kind="file" language="C++">
    <compoundname>ua.hpp</compoundname>
    <includes refid="kernwin_8hpp" local="no">kernwin.hpp</includes>
    <includes refid="lines_8hpp" local="no">lines.hpp</includes>
    <includes refid="xref_8hpp" local="no">xref.hpp</includes>
    <includes refid="bytes_8hpp" local="no">bytes.hpp</includes>
    <includedby refid="jumptable_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/jumptable.hpp</includedby>
    <includedby refid="idp_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/idp.hpp</includedby>
    <includedby refid="intel_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/intel.hpp</includedby>
    <includedby refid="idd_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/idd.hpp</includedby>
    <incdepgraph>
      <node id="1512">
        <label>sys/stat.h</label>
      </node>
      <node id="1496">
        <label>stdarg.h</label>
      </node>
      <node id="1499">
        <label>assert.h</label>
      </node>
      <node id="1493">
        <label>ida.hpp</label>
        <link refid="ida_8hpp"/>
        <childnode refid="1494" relation="include">
        </childnode>
        <childnode refid="1514" relation="include">
        </childnode>
      </node>
      <node id="1495">
        <label>stdlib.h</label>
      </node>
      <node id="1490">
        <label>obj/x64_linux_gcc_32_opt/idasdk/ua.hpp</label>
        <link refid="ua_8hpp"/>
        <childnode refid="1491" relation="include">
        </childnode>
        <childnode refid="1492" relation="include">
        </childnode>
        <childnode refid="1515" relation="include">
        </childnode>
        <childnode refid="1516" relation="include">
        </childnode>
      </node>
      <node id="1507">
        <label>io.h</label>
      </node>
      <node id="1510">
        <label>fcntl.h</label>
      </node>
      <node id="1513">
        <label>llong.hpp</label>
        <link refid="llong_8hpp_source"/>
      </node>
      <node id="1505">
        <label>malloc.h</label>
      </node>
      <node id="1504">
        <label>string</label>
      </node>
      <node id="1509">
        <label>map</label>
      </node>
      <node id="1508">
        <label>direct.h</label>
      </node>
      <node id="1497">
        <label>stddef.h</label>
      </node>
      <node id="1517">
        <label>nalt.hpp</label>
        <link refid="nalt_8hpp"/>
        <childnode refid="1493" relation="include">
        </childnode>
        <childnode refid="1518" relation="include">
        </childnode>
      </node>
      <node id="1492">
        <label>lines.hpp</label>
        <link refid="lines_8hpp"/>
        <childnode refid="1493" relation="include">
        </childnode>
      </node>
      <node id="1500">
        <label>limits.h</label>
      </node>
      <node id="1511">
        <label>sys/types.h</label>
      </node>
      <node id="1506">
        <label>string.h</label>
      </node>
      <node id="1503">
        <label>new</label>
      </node>
      <node id="1515">
        <label>xref.hpp</label>
        <link refid="xref_8hpp"/>
      </node>
      <node id="1494">
        <label>pro.h</label>
        <link refid="pro_8h"/>
        <childnode refid="1495" relation="include">
        </childnode>
        <childnode refid="1496" relation="include">
        </childnode>
        <childnode refid="1497" relation="include">
        </childnode>
        <childnode refid="1498" relation="include">
        </childnode>
        <childnode refid="1499" relation="include">
        </childnode>
        <childnode refid="1500" relation="include">
        </childnode>
        <childnode refid="1501" relation="include">
        </childnode>
        <childnode refid="1502" relation="include">
        </childnode>
        <childnode refid="1503" relation="include">
        </childnode>
        <childnode refid="1504" relation="include">
        </childnode>
        <childnode refid="1505" relation="include">
        </childnode>
        <childnode refid="1506" relation="include">
        </childnode>
        <childnode refid="1507" relation="include">
        </childnode>
        <childnode refid="1508" relation="include">
        </childnode>
        <childnode refid="1509" relation="include">
        </childnode>
        <childnode refid="1510" relation="include">
        </childnode>
        <childnode refid="1511" relation="include">
        </childnode>
        <childnode refid="1512" relation="include">
        </childnode>
        <childnode refid="1513" relation="include">
        </childnode>
      </node>
      <node id="1502">
        <label>time.h</label>
      </node>
      <node id="1516">
        <label>bytes.hpp</label>
        <link refid="bytes_8hpp"/>
        <childnode refid="1517" relation="include">
        </childnode>
        <childnode refid="1492" relation="include">
        </childnode>
        <childnode refid="1514" relation="include">
        </childnode>
      </node>
      <node id="1501">
        <label>ctype.h</label>
      </node>
      <node id="1514">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
      </node>
      <node id="1518">
        <label>netnode.hpp</label>
        <link refid="netnode_8hpp"/>
        <childnode refid="1514" relation="include">
        </childnode>
      </node>
      <node id="1491">
        <label>kernwin.hpp</label>
        <link refid="kernwin_8hpp"/>
      </node>
      <node id="1498">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1527">
        <label>obj/x64_linux_gcc_32_opt/idasdk/intel.hpp</label>
        <link refid="intel_8hpp_source"/>
      </node>
      <node id="1519">
        <label>obj/x64_linux_gcc_32_opt/idasdk/ua.hpp</label>
        <link refid="ua_8hpp"/>
        <childnode refid="1520" relation="include">
        </childnode>
        <childnode refid="1521" relation="include">
        </childnode>
        <childnode refid="1527" relation="include">
        </childnode>
        <childnode refid="1532" relation="include">
        </childnode>
      </node>
      <node id="1530">
        <label>obj/x64_linux_gcc_32_opt/idasdk/ida_highlighter.hpp</label>
        <link refid="ida__highlighter_8hpp_source"/>
      </node>
      <node id="1532">
        <label>obj/x64_linux_gcc_32_opt/idasdk/idd.hpp</label>
        <link refid="idd_8hpp"/>
        <childnode refid="1522" relation="include">
        </childnode>
      </node>
      <node id="1521">
        <label>obj/x64_linux_gcc_32_opt/idasdk/idp.hpp</label>
        <link refid="idp_8hpp"/>
        <childnode refid="1522" relation="include">
        </childnode>
        <childnode refid="1523" relation="include">
        </childnode>
        <childnode refid="1524" relation="include">
        </childnode>
        <childnode refid="1526" relation="include">
        </childnode>
        <childnode refid="1528" relation="include">
        </childnode>
        <childnode refid="1529" relation="include">
        </childnode>
      </node>
      <node id="1522">
        <label>obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp</label>
        <link refid="dbg_8hpp"/>
      </node>
      <node id="1520">
        <label>obj/x64_linux_gcc_32_opt/idasdk/jumptable.hpp</label>
        <link refid="jumptable_8hpp_source"/>
      </node>
      <node id="1528">
        <label>obj/x64_linux_gcc_32_opt/idasdk/graph.hpp</label>
        <link refid="graph_8hpp"/>
      </node>
      <node id="1531">
        <label>obj/x64_linux_gcc_32_opt/idasdk/tstfeat.hpp</label>
        <link refid="tstfeat_8hpp_source"/>
      </node>
      <node id="1529">
        <label>obj/x64_linux_gcc_32_opt/idasdk/expr.hpp</label>
        <link refid="expr_8hpp"/>
        <childnode refid="1530" relation="include">
        </childnode>
        <childnode refid="1531" relation="include">
        </childnode>
      </node>
      <node id="1523">
        <label>obj/x64_linux_gcc_32_opt/idasdk/frame.hpp</label>
        <link refid="frame_8hpp"/>
      </node>
      <node id="1524">
        <label>obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp</label>
        <link refid="typeinf_8hpp"/>
        <childnode refid="1525" relation="include">
        </childnode>
        <childnode refid="1526" relation="include">
        </childnode>
        <childnode refid="1527" relation="include">
        </childnode>
      </node>
      <node id="1526">
        <label>obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp</label>
        <link refid="hexrays_8hpp_source"/>
      </node>
      <node id="1525">
        <label>obj/x64_linux_gcc_32_opt/idasdk/lumina.hpp</label>
        <link refid="lumina_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classop__t" prot="public">op_t</innerclass>
    <innerclass refid="classinsn__t" prot="public">insn_t</innerclass>
    <innerclass refid="unionvalue__u" prot="public">value_u</innerclass>
    <innerclass refid="structvalue__u_1_1dq__t" prot="public">value_u::dq_t</innerclass>
    <innerclass refid="structvalue__u_1_1dt__t" prot="public">value_u::dt_t</innerclass>
    <innerclass refid="structvalue__u_1_1d128__t" prot="public">value_u::d128_t</innerclass>
    <innerclass refid="structoutctx__base__t" prot="public">outctx_base_t</innerclass>
    <innerclass refid="structoutctx__t" prot="public">outctx_t</innerclass>
      <sectiondef kind="user-defined">
      <header>Address translation</header>
      <description><para>The following functions can be used by processor modules to map addresses from one region to another. They are especially useful for microprocessors that map the same memory region to multiple address ranges or use memory bank switching. The user can use the following techniques to desribe address translations:<itemizedlist>
<listitem><para>some processors support the segment transation feature. the user can specify the mapping in Edit, Segments, Change segment translation</para></listitem><listitem><para>the user can specify mapping for an individual direct call instruction by specifying it as an offset (Edit, Operand types, Offset)</para></listitem><listitem><para>specify the value of the data segment virtual register (ds). it will be used to calculate data addresses </para></listitem></itemizedlist>
</para></description>
      <memberdef kind="function" id="ua_8hpp_1a6c6e3e05aec87c39975384b2518ac197" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export calc_dataseg</definition>
        <argsstring>(const insn_t &amp;insn, int n=-1, int rgnum=-1)</argsstring>
        <name>calc_dataseg</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>rgnum</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get data segment for the instruction operand. &apos;opnum&apos; and &apos;rgnum&apos; are meaningful only if the processor has segment registers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="652" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1ade94ed050ba6d52abf9967b536a2c0ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t</type>
        <definition>ea_t map_data_ea</definition>
        <argsstring>(const insn_t &amp;insn, ea_t addr, int opnum=-1)</argsstring>
        <name>map_data_ea</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>opnum</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Map a data address. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>the current instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>the referenced address to map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opnum</parametername>
</parameternamelist>
<parameterdescription>
<para>operand number </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="659" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="659" bodyend="662"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1a8a4487760b81aef27c8029c9452d6464" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t</type>
        <definition>ea_t map_data_ea</definition>
        <argsstring>(const insn_t &amp;insn, const op_t &amp;op)</argsstring>
        <name>map_data_ea</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>const <ref refid="classop__t" kindref="compound">op_t</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="664" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="664" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1a1ef618838a811385a5f2564bcab4e762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export map_code_ea</definition>
        <argsstring>(const insn_t &amp;insn, ea_t addr, int opnum)</argsstring>
        <name>map_code_ea</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>opnum</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Map a code address. This function takes into account the segment translations. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>the current instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>the referenced address to map </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>opnum</parametername>
</parameternamelist>
<parameterdescription>
<para>operand number </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="675" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1afa49f3bb68dae8ec7d68a4627eb12d86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t</type>
        <definition>ea_t map_code_ea</definition>
        <argsstring>(const insn_t &amp;insn, const op_t &amp;op)</argsstring>
        <name>map_code_ea</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>const <ref refid="classop__t" kindref="compound">op_t</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="677" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="677" bodyend="680"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1ac0fe7653a06bf90b5f72468d7194efbb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t</type>
        <definition>ea_t map_ea</definition>
        <argsstring>(const insn_t &amp;insn, const op_t &amp;op, bool iscode)</argsstring>
        <name>map_ea</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>const <ref refid="classop__t" kindref="compound">op_t</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>iscode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="682" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="682" bodyend="685"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1ac13deafc52f2df587276728bd44587c4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ea_t</type>
        <definition>ea_t map_ea</definition>
        <argsstring>(const insn_t &amp;insn, ea_t addr, int opnum, bool iscode)</argsstring>
        <name>map_ea</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>opnum</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>iscode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="687" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="687" bodyend="690"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Emulator helpers</header>
      <memberdef kind="define" id="group___s_t_k_v_a_r__2_1gadea83308bbe3028f66bde2b06d3931e1" prot="public" static="no">
        <name>STKVAR_VALID_SIZE</name>
        <initializer>0x0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>x.dtype contains correct variable type (for insns like &apos;lea&apos; this bit must be off) in general, dr_O references do not allow to determine the variable size </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="498" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="498" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___o_f___1ga09d3b330d2aa9edbde91549fc19525ab" prot="public" static="no">
        <name>OF_NO_BASE_DISP</name>
        <initializer>0x80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>base displacement doesn&apos;t exist. meaningful only for <ref refid="group__o___1ga2ae70c4ac00043f25a469a506a6f504f" kindref="member">o_displ</ref> type. if set, base displacement (<ref refid="classop__t_1acaaeff517df0b7156b4b8521a3900cdc" kindref="member">op_t::addr</ref>) doesn&apos;t exist. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="195" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_f___1gaf5cdb56eaaa72c4beacc2c87a67eefc8" prot="public" static="no">
        <name>OF_OUTER_DISP</name>
        <initializer>0x40</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>outer displacement exists. meaningful only for <ref refid="group__o___1ga2ae70c4ac00043f25a469a506a6f504f" kindref="member">o_displ</ref> type. if set, outer displacement (<ref refid="classop__t_1a6baa38b521c143a794640d82df109ae2" kindref="member">op_t::value</ref>) exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="199" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_f___1ga7156131859baf6b3db9ff3351eae834b" prot="public" static="no">
        <name>PACK_FORM_DEF</name>
        <initializer>0x20</initializer>
        <briefdescription>
<para>(!<ref refid="group__o___1gab490f48c733f3d29c700bb5d70ecc198" kindref="member">o_reg</ref> + <ref refid="group__dt___1gae74028429ed869e7420e452dcef43317" kindref="member">dt_packreal</ref>) </para>        </briefdescription>
        <detaileddescription>
<para>packed factor defined. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="202" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_f___1ga0fd70126cf669c8c0618d890f43640bd" prot="public" static="no">
        <name>OF_NUMBER</name>
        <initializer>0x10</initializer>
        <briefdescription>
<para>the operand can be converted to a number only </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="204" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_f___1ga0b79d1666f5843ac4599ebb3d158adee" prot="public" static="no">
        <name>OF_SHOW</name>
        <initializer>0x08</initializer>
        <briefdescription>
<para>should the operand be displayed? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="205" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1ga7b3131e3cc11e88be1e80a439829b293" prot="public" static="no">
        <name>dt_byte</name>
        <initializer>0</initializer>
        <briefdescription>
<para>8 bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="224" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1gabb5cde4fad79943866df6e120315c98c" prot="public" static="no">
        <name>dt_word</name>
        <initializer>1</initializer>
        <briefdescription>
<para>16 bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="225" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1ga39d680a96eebfed96dbbd9c20d7066c3" prot="public" static="no">
        <name>dt_dword</name>
        <initializer>2</initializer>
        <briefdescription>
<para>32 bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="226" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1gaad9eb178bad28892ed548f9e56d90dc9" prot="public" static="no">
        <name>dt_float</name>
        <initializer>3</initializer>
        <briefdescription>
<para>4 byte </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="227" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1ga8cb6ffc96fb9fec3a6fb00b57316bac9" prot="public" static="no">
        <name>dt_double</name>
        <initializer>4</initializer>
        <briefdescription>
<para>8 byte </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="228" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1gac7069d33cabaaddb5191cc7e53252222" prot="public" static="no">
        <name>dt_tbyte</name>
        <initializer>5</initializer>
        <briefdescription>
<para>variable size ({tbyte_size}) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="229" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1gae74028429ed869e7420e452dcef43317" prot="public" static="no">
        <name>dt_packreal</name>
        <initializer>6</initializer>
        <briefdescription>
<para>packed real format for mc68040 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="230" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1gaa10505ff3777d1c702dc0fcb486a6f79" prot="public" static="no">
        <name>dt_qword</name>
        <initializer>7</initializer>
        <briefdescription>
<para>64 bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="232" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1ga3bd291eb83aaa19325154d5f45637d6d" prot="public" static="no">
        <name>dt_byte16</name>
        <initializer>8</initializer>
        <briefdescription>
<para>128 bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="233" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1ga268be91f07064dcff0353727c59c8cdf" prot="public" static="no">
        <name>dt_code</name>
        <initializer>9</initializer>
        <briefdescription>
<para>ptr to code (not used?) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="234" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1ga1c6c4bf7dd30fcd7f2e47de52325da4c" prot="public" static="no">
        <name>dt_void</name>
        <initializer>10</initializer>
        <briefdescription>
<para>none </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="235" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1ga91b41c919ba1d4c42ea307ea6e8d4e81" prot="public" static="no">
        <name>dt_fword</name>
        <initializer>11</initializer>
        <briefdescription>
<para>48 bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="236" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1gab211db421bf77e573550e7fda075028c" prot="public" static="no">
        <name>dt_bitfild</name>
        <initializer>12</initializer>
        <briefdescription>
<para>bit field (mc680x0) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="237" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1ga46f3a4c39450bc50572ea6d2dd51c2f2" prot="public" static="no">
        <name>dt_string</name>
        <initializer>13</initializer>
        <briefdescription>
<para>pointer to asciiz string </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="238" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1ga846b51cfcb3d1ce299ad9f891a2b20b0" prot="public" static="no">
        <name>dt_unicode</name>
        <initializer>14</initializer>
        <briefdescription>
<para>pointer to unicode string </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="239" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1gaccb3747e107f807c752e9929a1433886" prot="public" static="no">
        <name>dt_ldbl</name>
        <initializer>15</initializer>
        <briefdescription>
<para>long double (which may be different from tbyte) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="240" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1ga4f1f6d814f621a30c37e3d9a613d14c9" prot="public" static="no">
        <name>dt_byte32</name>
        <initializer>16</initializer>
        <briefdescription>
<para>256 bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="241" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__dt___1ga70b4ee93fa2b39ad741baea204dba8b7" prot="public" static="no">
        <name>dt_byte64</name>
        <initializer>17</initializer>
        <briefdescription>
<para>512 bit </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="242" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a8726ede152c47736e053bb1a9295cc89" prot="public" static="no">
        <name>DECLARE_INSN_HELPERS</name>
        <param><defname>decl</defname></param>
        <initializer>decl bool ida_export insn_create_op_data(const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;insn, ea_t ea, int opoff, op_dtype_t dtype); \
decl void ida_export insn_add_cref(const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;insn, ea_t to, int opoff, <ref refid="group__xref__type_1ga44e2b79869a9595bbe6265ff2026aa98" kindref="member">cref_t</ref> type); \
decl void ida_export insn_add_dref(const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;insn, ea_t to, int opoff, <ref refid="group__xref__type_1ga78aab6d0d6bd9cb4904bbdbb5ac4fa71" kindref="member">dref_t</ref> type); \
decl ea_t ida_export insn_add_off_drefs(const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;insn, const <ref refid="classop__t" kindref="compound">op_t</ref> &amp;x, <ref refid="group__xref__type_1ga78aab6d0d6bd9cb4904bbdbb5ac4fa71" kindref="member">dref_t</ref> type, int outf); \
decl bool ida_export insn_create_stkvar(const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;insn, const <ref refid="classop__t" kindref="compound">op_t</ref> &amp;x, adiff_t v, int flags);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="336" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="336" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___op___1ga9229071681a63b57e4308c4fa8c4cb5c" prot="public" static="no">
        <name>Op1</name>
        <initializer>ops[0]</initializer>
        <briefdescription>
<para>first operand </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="393" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___op___1ga010684d73163b019663a7013e66c8926" prot="public" static="no">
        <name>Op2</name>
        <initializer>ops[1]</initializer>
        <briefdescription>
<para>second operand </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="394" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="394" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___op___1ga50ecf7316b68a12bfcd65a7686e6560d" prot="public" static="no">
        <name>Op3</name>
        <initializer>ops[2]</initializer>
        <briefdescription>
<para>third operand </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="395" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="395" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___op___1ga133099d9d2d29ceec44e6a12baa42e92" prot="public" static="no">
        <name>Op4</name>
        <initializer>ops[3]</initializer>
        <briefdescription>
<para>fourth operand </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="396" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="396" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___op___1ga6c9ed2ec0b745467f8b9d6ca8e621ca0" prot="public" static="no">
        <name>Op5</name>
        <initializer>ops[4]</initializer>
        <briefdescription>
<para>fifth operand </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="397" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="397" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___op___1gac40c5ce9202dd94d453925c9db459288" prot="public" static="no">
        <name>Op6</name>
        <initializer>ops[5]</initializer>
        <briefdescription>
<para>sixth operand </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="398" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="398" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___op___1gafae201d14b8aaa7428b7d15609e6c88b" prot="public" static="no">
        <name>Op7</name>
        <initializer>ops[6]</initializer>
        <briefdescription>
<para>seventh operand </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="399" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="399" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___op___1ga76030b6778e1bccd0be27207a0afe375" prot="public" static="no">
        <name>Op8</name>
        <initializer>ops[7]</initializer>
        <briefdescription>
<para>eighth operand </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="400" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i_n_s_n___1gab4130af67f276bd184f8102e27cfb1f2" prot="public" static="no">
        <name>INSN_MACRO</name>
        <initializer>0x01</initializer>
        <briefdescription>
<para>macro instruction </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="407" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i_n_s_n___1ga87aa3b5c2d1953db2656ef1e72e90e0f" prot="public" static="no">
        <name>INSN_MODMAC</name>
        <initializer>0x02</initializer>
        <briefdescription>
<para>may modify the database to make room for the macro insn </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="408" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___i_n_s_n___1gab0505c608e47fbd9eb5111141171aa19" prot="public" static="no">
        <name>INSN_64BIT</name>
        <initializer>0x04</initializer>
        <briefdescription>
<para>belongs to 64bit segment? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="409" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="409" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a7e4bb3c8142d309b3eb9fc03bebcc39a" prot="public" static="no">
        <name>CTXF_MAIN</name>
        <initializer>0x00001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="719" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="719" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a4f14c21a26be62964c502f70521c4af5" prot="public" static="no">
        <name>CTXF_MULTI</name>
        <initializer>0x00002</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="720" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="720" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1af0a02bd57072d8760c198f6e8d7ce654" prot="public" static="no">
        <name>CTXF_CODE</name>
        <initializer>0x00004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="721" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="721" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a95462858956639ba524d80aebb1448e8" prot="public" static="no">
        <name>CTXF_STACK</name>
        <initializer>0x00008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="722" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="722" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a210cf2aa63374ca529b59db39c6a177a" prot="public" static="no">
        <name>CTXF_GEN_XREFS</name>
        <initializer>0x00010</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="723" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="723" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a38462b156ad5ea70a9231490cc3e2a9f" prot="public" static="no">
        <name>CTXF_XREF_STATE</name>
        <initializer>0x00060</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="724" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="724" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a65edcba790f567d885aebc00e8416ff3" prot="public" static="no">
        <name>XREFSTATE_NONE</name>
        <initializer>0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="725" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a970f22634082b5f901bce7c1a15a1382" prot="public" static="no">
        <name>XREFSTATE_GO</name>
        <initializer>0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="726" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="726" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a56b5e6ac478e158d331d1f9547a520d1" prot="public" static="no">
        <name>XREFSTATE_DONE</name>
        <initializer>0x40</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="727" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="727" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a720733ae13ff295bfd2a10df5c52666a" prot="public" static="no">
        <name>CTXF_GEN_CMT</name>
        <initializer>0x00080</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="728" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="728" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1ad85bbbf8a2c9bd563f566d9d1bdae2a1" prot="public" static="no">
        <name>CTXF_CMT_STATE</name>
        <initializer>0x00300</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="729" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="729" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a579e00b514a831af7668151b3455ceaf" prot="public" static="no">
        <name>COMMSTATE_NONE</name>
        <initializer>0x000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="730" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="730" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a2d348a89e87f67d9354be4c3f583332b" prot="public" static="no">
        <name>COMMSTATE_GO</name>
        <initializer>0x100</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="731" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="731" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1ad7d37aaa0f71275cf21daf43d069df18" prot="public" static="no">
        <name>COMMSTATE_DONE</name>
        <initializer>0x200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="732" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="732" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a073844275f22cdab369f87562ab22d49" prot="public" static="no">
        <name>CTXF_VOIDS</name>
        <initializer>0x00400</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="733" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="733" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a2d914d9586d194fd09a71f009f3016f4" prot="public" static="no">
        <name>CTXF_NORMAL_LABEL</name>
        <initializer>0x00800</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="734" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="734" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1abb84afac5542343c68ebd0a24101c139" prot="public" static="no">
        <name>CTXF_DEMANGLED_LABEL</name>
        <initializer>0x01000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="735" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="735" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a5b792fe9c5ad26ea4687eb11ccbcff7b" prot="public" static="no">
        <name>CTXF_LABEL_OK</name>
        <initializer>0x02000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="736" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a6022fac5cbfbd6d2a63c65ac1b1fa68c" prot="public" static="no">
        <name>CTXF_DEMANGLED_OK</name>
        <initializer>0x04000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="737" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1afcedc3741861cbcf20505e6173974c31" prot="public" static="no">
        <name>CTXF_OVSTORE_PRNT</name>
        <initializer>0x08000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="738" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="738" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1aa698b3785e0e8ce8b191500fed078184" prot="public" static="no">
        <name>CTXF_OUTCTX_T</name>
        <initializer>0x10000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="739" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="739" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a199569d933bc3d8fe26bb12343ac336f" prot="public" static="no">
        <name>CTXF_DBLIND_OPND</name>
        <initializer>0x20000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="740" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="740" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1gaf62d714a88009dc2861e9f14bc8e38da" prot="public" static="no">
        <name>OOF_SIGNMASK</name>
        <initializer>0x0003</initializer>
        <briefdescription>
<para>sign symbol (+/-) output </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="830" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="830" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1ga0d65e3bfe751bb1c4cd95c3b6f4db987" prot="public" static="no">
        <name>OOFS_IFSIGN</name>
        <initializer>0x0000</initializer>
        <briefdescription>
<para>output sign if needed </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="831" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="831" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1gad5c2da3b028e65d27b852996302336d6" prot="public" static="no">
        <name>OOFS_NOSIGN</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>don&apos;t output sign, forbid the user to change the sign </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="832" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="832" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1ga126dea1949acdfb77903ed80006b6842" prot="public" static="no">
        <name>OOFS_NEEDSIGN</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>always out sign (+-) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="833" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="833" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1ga119895f29c138475abfec9adb753bf09" prot="public" static="no">
        <name>OOF_SIGNED</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>output as signed if &lt; 0 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="834" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1ga56f31a0886e3b81b816815a7536fff19" prot="public" static="no">
        <name>OOF_NUMBER</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>always as a number </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="835" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="835" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1ga187816d238afd7f7b96f07712bf0a784" prot="public" static="no">
        <name>OOF_WIDTHMASK</name>
        <initializer>0x0070</initializer>
        <briefdescription>
<para>width of value in bits </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="836" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="836" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1ga11f4bc8957ed36319aada42a61c79d08" prot="public" static="no">
        <name>OOFW_IMM</name>
        <initializer>0x0000</initializer>
        <briefdescription>
<para>take from x.dtype </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="837" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="837" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1ga527a9a359a40bdfbacc4c653ca510355" prot="public" static="no">
        <name>OOFW_8</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para>8 bit width </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="838" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="838" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1ga37805325965708bea6c2c29199074299" prot="public" static="no">
        <name>OOFW_16</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>16 bit width </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="839" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="839" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1gaa37ea29398ba78be04abe2aab07429c6" prot="public" static="no">
        <name>OOFW_24</name>
        <initializer>0x0030</initializer>
        <briefdescription>
<para>24 bit width </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="840" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="840" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1gada7c52e05bbe02cc5598f2454ece94e4" prot="public" static="no">
        <name>OOFW_32</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para>32 bit width </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="841" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="841" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1ga9b2d00f4eeedf24e09b37f3ed9e9ee88" prot="public" static="no">
        <name>OOFW_64</name>
        <initializer>0x0050</initializer>
        <briefdescription>
<para>64 bit width </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="842" column="11" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="842" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1ga08f0c8f9c6066b5ce737b3a302b92428" prot="public" static="no">
        <name>OOF_ADDR</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>output x.addr, otherwise x.value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="843" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="843" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1gad3258572886342d6cfc46fc2d3382fdc" prot="public" static="no">
        <name>OOF_OUTER</name>
        <initializer>0x0100</initializer>
        <briefdescription>
<para>output outer operand </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="844" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="844" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1ga3412449a27b5d790ab96499d7a852399" prot="public" static="no">
        <name>OOF_ZSTROFF</name>
        <initializer>0x0200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>meaningful only if is_stroff(uFlag) append a struct field name if the field offset is zero? if <ref refid="group___a_f_l___1gae2a9146154dc578eb2d9e75efe0d5d18" kindref="member">AFL_ZSTROFF</ref> is set, then this flag is ignored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="845" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="845" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1ga0d5b3b1e64051f6f0e7c45be39c05d77" prot="public" static="no">
        <name>OOF_NOBNOT</name>
        <initializer>0x0400</initializer>
        <briefdescription>
<para>prohibit use of binary not </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="850" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1ga26333835719800be2bda18272dbcef57" prot="public" static="no">
        <name>OOF_SPACES</name>
        <initializer>0x0800</initializer>
        <briefdescription>
<para>currently works only for floating point numbers </para>        </briefdescription>
        <detaileddescription>
<para>do not suppress leading spaces </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="851" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="851" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___o_o_f___1ga3ef802ac7b013e5cbfa6ef74e2a0a1c1" prot="public" static="no">
        <name>OOF_ANYSERIAL</name>
        <initializer>0x1000</initializer>
        <briefdescription>
<para>if enum: select first available serial </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="853" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="853" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a838d7aa7cd790f3ba20749d536744579" prot="public" static="no">
        <name>MAKELINE_NONE</name>
        <initializer>0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1049" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1049" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a9c25d885de0e4913a26d24a7f9f825dd" prot="public" static="no">
        <name>MAKELINE_BINPREF</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1050" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1050" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1aff61a2ed75a47200ebd8c26f94c26757" prot="public" static="no">
        <name>MAKELINE_VOID</name>
        <initializer>0x02</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1051" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1051" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a762ef493cc67b0fe0b50efadd95df8b6" prot="public" static="no">
        <name>MAKELINE_STACK</name>
        <initializer>0x04</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1052" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1052" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a5b755c28af95c1e047b3611cff08a7ae" prot="public" static="no">
        <name>GH_PRINT_PROC</name>
        <initializer>(1 &lt;&lt; 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1178" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a854594cb909e866c28fe1cff9a54f259" prot="public" static="no">
        <name>GH_PRINT_ASM</name>
        <initializer>(1 &lt;&lt; 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1179" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a2ee3222bace7e74253b842413234e7e5" prot="public" static="no">
        <name>GH_PRINT_BYTESEX</name>
        <initializer>(1 &lt;&lt; 2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1180" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a6b9038d6f1d03d0ce9c2a4358557adfa" prot="public" static="no">
        <name>GH_PRINT_HEADER</name>
        <initializer>(1 &lt;&lt; 3)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1181" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a5813f073fe3b527fec1f8bc19b58b1cc" prot="public" static="no">
        <name>GH_BYTESEX_HAS_HIGHBYTE</name>
        <initializer>(1 &lt;&lt; 4)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1182" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1ad286096ff12f61f6761bbee30be4bd0e" prot="public" static="no">
        <name>GH_PRINT_PROC_AND_ASM</name>
        <initializer>(GH_PRINT_PROC | GH_PRINT_ASM)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1183" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1183" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a45aab726516fe6d59959ad0cd62d485d" prot="public" static="no">
        <name>GH_PRINT_PROC_ASM_AND_BYTESEX</name>
        <initializer>(GH_PRINT_PROC_AND_ASM | GH_PRINT_BYTESEX)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1184" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a9c096da6d45861d4caed00bff9e0bb37" prot="public" static="no">
        <name>GH_PRINT_ALL</name>
        <initializer>(GH_PRINT_PROC_ASM_AND_BYTESEX | GH_PRINT_HEADER)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1185" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="ua_8hpp_1a1ed8b2069a0ffb817215f6a0a82c093a" prot="public" static="no">
        <name>GH_PRINT_ALL_BUT_BYTESEX</name>
        <initializer>(GH_PRINT_PROC_AND_ASM | GH_PRINT_HEADER)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1186" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1186" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_c_b_f___1ga34668fd0ee73350682e2346921d4d083" prot="public" static="no">
        <name>FCBF_CONT</name>
        <initializer>0x00000001</initializer>
        <briefdescription>
<para>don&apos;t stop on decoding, or any other kind of error </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1212" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_c_b_f___1gade12a73e40ac1eca4b7683df6ef7e4ff" prot="public" static="no">
        <name>FCBF_ERR_REPL</name>
        <initializer>0x00000002</initializer>
        <briefdescription>
<para>of a hex representation of the problematic byte </para>        </briefdescription>
        <detaileddescription>
<para>in case of an error, use a CP_REPLCHAR instead </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1213" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_c_b_f___1ga4cb0dc45d944e3510206e3b60058fd14" prot="public" static="no">
        <name>FCBF_FF_LIT</name>
        <initializer>0x00000004</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>in case of codepoints == 0xFF, use it as-is (i.e., LATIN SMALL LETTER Y WITH DIAERESIS) If both this, and FCBF_REPL are specified, this will take precedence </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1216" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___f_c_b_f___1gaa53af4e8051895e290128a0fe25e7e7f" prot="public" static="no">
        <name>FCBF_DELIM</name>
        <initializer>0x00000008</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>add the &apos;ash&apos;-specified delimiters around the generated data. Note: if those are not defined and the INFFL_ALLASM is not set, <ref refid="ua_8hpp_1a93a85e22952f1e255da4e432cb22ea89" kindref="member">format_charlit()</ref> will return an error </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1220" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1220" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="ua_8hpp_1aaf9da6ae7e8b201108fc225adf13b4d9" prot="public" static="no">
        <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
        <definition>typedef uchar optype_t</definition>
        <argsstring></argsstring>
        <name>optype_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>see <ref refid="group__o__" kindref="compound">Operand types</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="64" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__o___1gad68bb114d00bf1541955467158677fa6" prot="public" static="no" mutable="no">
        <type>const <ref refid="ua_8hpp_1aaf9da6ae7e8b201108fc225adf13b4d9" kindref="member">optype_t</ref></type>
        <definition>const optype_t o_void</definition>
        <argsstring></argsstring>
        <name>o_void</name>
        <initializer>=  0</initializer>
        <briefdescription>
<para>No Operand. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="80" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__o___1gab490f48c733f3d29c700bb5d70ecc198" prot="public" static="no" mutable="no">
        <type>const <ref refid="ua_8hpp_1aaf9da6ae7e8b201108fc225adf13b4d9" kindref="member">optype_t</ref></type>
        <definition>o_reg</definition>
        <argsstring></argsstring>
        <name>o_reg</name>
        <initializer>=  1</initializer>
        <briefdescription>
<para>General Register (al,ax,es,ds...). </para>        </briefdescription>
        <detaileddescription>
<para>The register number should be stored in <ref refid="classop__t_1a428edf0d3e487135e3d08bd5a65772e4" kindref="member">op_t::reg</ref>. All processor registers, including special registers, can be represented by this operand type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="81" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__o___1gac180aea251826e5e5e484905e116c4cc" prot="public" static="no" mutable="no">
        <type>const <ref refid="ua_8hpp_1aaf9da6ae7e8b201108fc225adf13b4d9" kindref="member">optype_t</ref></type>
        <definition>o_mem</definition>
        <argsstring></argsstring>
        <name>o_mem</name>
        <initializer>=  2</initializer>
        <briefdescription>
<para>Direct Memory Reference (DATA). </para>        </briefdescription>
        <detaileddescription>
<para>A direct memory data reference whose target address is known at compilation time. The target virtual address is stored in <ref refid="classop__t_1acaaeff517df0b7156b4b8521a3900cdc" kindref="member">op_t::addr</ref> and the full address is calculated as to_ea( {cs}, <ref refid="classop__t_1acaaeff517df0b7156b4b8521a3900cdc" kindref="member">op_t::addr</ref> ). For the processors with complex memory organization the final address can be calculated using other segment registers. For flat memories, <ref refid="classop__t_1acaaeff517df0b7156b4b8521a3900cdc" kindref="member">op_t::addr</ref> is the final address and {cs} is usually equal to zero. In any case, the address within the segment should be stored in <ref refid="classop__t_1acaaeff517df0b7156b4b8521a3900cdc" kindref="member">op_t::addr</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="82" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__o___1ga622c0d3c3c8af0bed284a02b496ec288" prot="public" static="no" mutable="no">
        <type>const <ref refid="ua_8hpp_1aaf9da6ae7e8b201108fc225adf13b4d9" kindref="member">optype_t</ref></type>
        <definition>o_phrase</definition>
        <argsstring></argsstring>
        <name>o_phrase</name>
        <initializer>=  3</initializer>
        <briefdescription>
<para>Memory Ref [Base Reg + Index Reg]. </para>        </briefdescription>
        <detaileddescription>
<para>A memory reference using register contents. Indexed, register based, and other addressing modes can be represented with the operand type. This addressing mode can not contain immediate values (use <ref refid="group__o___1ga2ae70c4ac00043f25a469a506a6f504f" kindref="member">o_displ</ref> instead). The phrase number should be stored in <ref refid="classop__t_1a583f4819af0dc38593765cd7e6ce17cf" kindref="member">op_t::phrase</ref>. To denote the pre-increment and similar features please use additional operand fields like op_t::specflag... Usually <ref refid="classop__t_1a583f4819af0dc38593765cd7e6ce17cf" kindref="member">op_t::phrase</ref> contains the register number and additional information is stored in op_t::specflags... Please note that this operand type can not contain immediate values (except the scaling coefficients). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="83" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__o___1ga2ae70c4ac00043f25a469a506a6f504f" prot="public" static="no" mutable="no">
        <type>const <ref refid="ua_8hpp_1aaf9da6ae7e8b201108fc225adf13b4d9" kindref="member">optype_t</ref></type>
        <definition>o_displ</definition>
        <argsstring></argsstring>
        <name>o_displ</name>
        <initializer>=  4</initializer>
        <briefdescription>
<para>Memory Reg [Base Reg + Index Reg + Displacement]. </para>        </briefdescription>
        <detaileddescription>
<para>A memory reference using register contents with displacement. The displacement should be stored in the <ref refid="classop__t_1acaaeff517df0b7156b4b8521a3900cdc" kindref="member">op_t::addr</ref> field. The rest of information is stored the same way as in <ref refid="group__o___1ga622c0d3c3c8af0bed284a02b496ec288" kindref="member">o_phrase</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="84" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__o___1ga85e77bd8098a47465cd8e1193b6e154c" prot="public" static="no" mutable="no">
        <type>const <ref refid="ua_8hpp_1aaf9da6ae7e8b201108fc225adf13b4d9" kindref="member">optype_t</ref></type>
        <definition>o_imm</definition>
        <argsstring></argsstring>
        <name>o_imm</name>
        <initializer>=  5</initializer>
        <briefdescription>
<para>Immediate Value. </para>        </briefdescription>
        <detaileddescription>
<para>Any operand consisting of only a number is represented by this operand type. The value should be stored in <ref refid="classop__t_1a6baa38b521c143a794640d82df109ae2" kindref="member">op_t::value</ref>. You may sign extend short (1-2 byte) values. In any case don&apos;t forget to specify <ref refid="classop__t_1a9d0ea64a2929fc998bca6cebd1b91c09" kindref="member">op_t::dtype</ref> (should be set for all operand types). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="85" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__o___1gac4a43a41f9a3a31b7bb6193e6d3cc447" prot="public" static="no" mutable="no">
        <type>const <ref refid="ua_8hpp_1aaf9da6ae7e8b201108fc225adf13b4d9" kindref="member">optype_t</ref></type>
        <definition>o_far</definition>
        <argsstring></argsstring>
        <name>o_far</name>
        <initializer>=  6</initializer>
        <briefdescription>
<para>Immediate Far Address (CODE). </para>        </briefdescription>
        <detaileddescription>
<para>If the current processor has a special addressing mode for inter-segment references, then this operand type should be used instead of <ref refid="group__o___1ga05209644e1ec11a2b0d96809bb60d6d8" kindref="member">o_near</ref>. If you want, you may use <ref refid="group___p_r___1ga884adc60ef0e7236192b78ec4f900f0e" kindref="member">PR_CHK_XREF</ref> in {flag} to disable inter-segment calls if <ref refid="group__o___1ga05209644e1ec11a2b0d96809bb60d6d8" kindref="member">o_near</ref> operand type is used. Currently only IBM PC uses this flag. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="86" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__o___1ga05209644e1ec11a2b0d96809bb60d6d8" prot="public" static="no" mutable="no">
        <type>const <ref refid="ua_8hpp_1aaf9da6ae7e8b201108fc225adf13b4d9" kindref="member">optype_t</ref></type>
        <definition>o_near</definition>
        <argsstring></argsstring>
        <name>o_near</name>
        <initializer>=  7</initializer>
        <briefdescription>
<para>Immediate Near Address (CODE). </para>        </briefdescription>
        <detaileddescription>
<para>A direct memory code reference whose target address is known at the compilation time. The target virtual address is stored in <ref refid="classop__t_1acaaeff517df0b7156b4b8521a3900cdc" kindref="member">op_t::addr</ref> and the final address is always to_ea({cs}, <ref refid="classop__t_1acaaeff517df0b7156b4b8521a3900cdc" kindref="member">op_t::addr</ref>). Usually this operand type is used for the branches and calls whose target address is known. If the current processor has 2 different types of references for inter-segment and intra-segment references, then this should be used only for intra-segment references.</para><para>If the above operand types do not cover all possible addressing modes, then use o_idpspec... operand types. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="87" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__o___1ga93c65fe52df27c2cf286579834e89f1c" prot="public" static="no" mutable="no">
        <type>const <ref refid="ua_8hpp_1aaf9da6ae7e8b201108fc225adf13b4d9" kindref="member">optype_t</ref></type>
        <definition>const optype_t o_idpspec0</definition>
        <argsstring></argsstring>
        <name>o_idpspec0</name>
        <initializer>=  8</initializer>
        <briefdescription>
<para>processor specific type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="88" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__o___1ga28544d70e5118d18bc443b1551bfb0d4" prot="public" static="no" mutable="no">
        <type>const <ref refid="ua_8hpp_1aaf9da6ae7e8b201108fc225adf13b4d9" kindref="member">optype_t</ref></type>
        <definition>const optype_t o_idpspec1</definition>
        <argsstring></argsstring>
        <name>o_idpspec1</name>
        <initializer>=  9</initializer>
        <briefdescription>
<para>processor specific type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="89" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__o___1ga6aeffb56e320e7815d2fa9d2788f7512" prot="public" static="no" mutable="no">
        <type>const <ref refid="ua_8hpp_1aaf9da6ae7e8b201108fc225adf13b4d9" kindref="member">optype_t</ref></type>
        <definition>const optype_t o_idpspec2</definition>
        <argsstring></argsstring>
        <name>o_idpspec2</name>
        <initializer>= 10</initializer>
        <briefdescription>
<para>processor specific type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="90" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__o___1ga38b52acb452efd50718bcc910bc9dce7" prot="public" static="no" mutable="no">
        <type>const <ref refid="ua_8hpp_1aaf9da6ae7e8b201108fc225adf13b4d9" kindref="member">optype_t</ref></type>
        <definition>const optype_t o_idpspec3</definition>
        <argsstring></argsstring>
        <name>o_idpspec3</name>
        <initializer>= 11</initializer>
        <briefdescription>
<para>processor specific type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="91" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__o___1ga8ea529384422fe137b199e9d849182c0" prot="public" static="no" mutable="no">
        <type>const <ref refid="ua_8hpp_1aaf9da6ae7e8b201108fc225adf13b4d9" kindref="member">optype_t</ref></type>
        <definition>const optype_t o_idpspec4</definition>
        <argsstring></argsstring>
        <name>o_idpspec4</name>
        <initializer>= 12</initializer>
        <briefdescription>
<para>processor specific type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="92" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__o___1ga610f9018ae82af4151f4270fca95be68" prot="public" static="no" mutable="no">
        <type>const <ref refid="ua_8hpp_1aaf9da6ae7e8b201108fc225adf13b4d9" kindref="member">optype_t</ref></type>
        <definition>const optype_t o_idpspec5</definition>
        <argsstring></argsstring>
        <name>o_idpspec5</name>
        <initializer>= 13</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>processor specific type. (there can be more processor specific types) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="93" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="ua_8hpp_1ae5931c5d9066c7082df66cab0f16fdce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman size_t ida_export</type>
        <definition>idaman size_t ida_export get_immvals</definition>
        <argsstring>(uval_t *out, ea_t ea, int n, flags_t F, insn_t *cache=NULL)</argsstring>
        <name>get_immvals</name>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="classinsn__t" kindref="compound">insn_t</ref> *</type>
          <declname>cache</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get immediate values at the specified address. This function decodes instruction at the specified address or inspects the data item. It finds immediate values and copies them to &apos;out&apos;. This function will store the original value of the operands in &apos;out&apos;, unless the last bits of &apos;F&apos; are &quot;...0 11111111&quot;, in which case the transformed values (as needed for printing) will be stored instead. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>array of immediate values (at least 2*<ref refid="ida_8hpp_1ae2018a7cee04a8a790fc5fc445fb473a" kindref="member">UA_MAXOP</ref> elements) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>address to analyze </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand (0..<ref refid="ida_8hpp_1ae2018a7cee04a8a790fc5fc445fb473a" kindref="member">UA_MAXOP</ref>-1), -1 means all operands </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>flags for the specified address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cache</parametername>
</parameternamelist>
<parameterdescription>
<para>optional already decoded instruction or buffer for it. if the cache does not contain the decoded instruction, it will be updated (useful if we call get_immvals for the same address multiple times) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of immediate values (0..2*<ref refid="ida_8hpp_1ae2018a7cee04a8a790fc5fc445fb473a" kindref="member">UA_MAXOP</ref>) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="588" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1a99fcb9056351d06d39933043f3a1a83b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t get_printable_immvals</definition>
        <argsstring>(uval_t *out, ea_t ea, int n, flags_t F, insn_t *cache=NULL)</argsstring>
        <name>get_printable_immvals</name>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
        </param>
        <param>
          <type><ref refid="classinsn__t" kindref="compound">insn_t</ref> *</type>
          <declname>cache</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get immediate ready-to-print values at the specified address <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>array of immediate values (at least 2*<ref refid="ida_8hpp_1ae2018a7cee04a8a790fc5fc445fb473a" kindref="member">UA_MAXOP</ref> elements) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>address to analyze </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand (0..<ref refid="ida_8hpp_1ae2018a7cee04a8a790fc5fc445fb473a" kindref="member">UA_MAXOP</ref>-1), -1 means all operands </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>F</parametername>
</parameternamelist>
<parameterdescription>
<para>flags for the specified address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cache</parametername>
</parameternamelist>
<parameterdescription>
<para>optional already decoded instruction or buffer for it. if the cache does not contain the decoded instruction, it will be updated (useful if we call get_immvals for the same address multiple times) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of immediate values (0..2*<ref refid="ida_8hpp_1ae2018a7cee04a8a790fc5fc445fb473a" kindref="member">UA_MAXOP</ref>) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="607" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="607" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1a059a23df8db91c9efdf671ab746f5dd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export get_lookback</definition>
        <argsstring>(void)</argsstring>
        <name>get_lookback</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Number of instructions to look back. This variable is not used by the kernel. Its value may be specified in ida.cfg: LOOKBACK = &lt;number&gt;. IDP may use it as you like it. (TMS module uses it) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="627" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1afce3853e267ffe25b65a3dd82aee0a51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="structoutctx__base__t" kindref="compound">outctx_base_t</ref> *ida_export</type>
        <definition>idaman outctx_base_t* ida_export create_outctx</definition>
        <argsstring>(ea_t ea, flags_t F=0, int suspop=0)</argsstring>
        <name>create_outctx</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>F</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>suspop</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new output context. To delete it, just use &quot;delete pctx&quot; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1a402aa11dc2b647150905fa46acd063e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export print_insn_mnem</definition>
        <argsstring>(qstring *out, ea_t ea)</argsstring>
        <name>print_insn_mnem</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print instruction mnemonics. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of the instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1a93a85e22952f1e255da4e432cb22ea89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export format_charlit</definition>
        <argsstring>(qstring *out, const uchar **ptr, size_t size, uint32 flags=0, int encidx=0)</argsstring>
        <name>format_charlit</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref> **</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>encidx</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Format character literal.</para><para>Try and format &apos;size&apos; bytes pointed to by &apos;*ptr&apos;, as literal characters, using the &apos;encidx&apos; encoding, and with the specified &apos;flags&apos; directives.</para><para>By default, <ref refid="ua_8hpp_1a93a85e22952f1e255da4e432cb22ea89" kindref="member">format_charlit()</ref> will fail and return an error, in any of the following cases:<itemizedlist>
<listitem><para>a byte cannot be decoded using the specified (or default) encoding</para></listitem><listitem><para>a codepoint is &lt; 0x20 (i.e., &apos; &apos;)</para></listitem><listitem><para>a codepoint is present in &apos;ash.esccodes&apos;</para></listitem><listitem><para>a codepoint is 0xFF</para></listitem><listitem><para>a codepoint is &gt;= 0x80, and AS_NHIAS was specified in ash.flag The function can be told to keep going instead of bailing out, for any of these situations, by using one of the FCBF_*_OK flags.</para></listitem></itemizedlist>
</para><para>If the function is told to proceed on a specific error, by default it will format the byte as a C-encoded byte value (i.e., &apos;&apos;), unless the corresponding FCBF_*_REPL flag is passed, in which case the problematic byte/codepoint will be replaced by the Unicode replacement character in the output.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer (can be NULL) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to pointer to bytes to print (will be advanced by the number of bytes that were successfully printed) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of input value in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___f_c_b_f__" kindref="compound">format flags</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>encidx</parametername>
</parameternamelist>
<parameterdescription>
<para>the 1 byte-per-unit encoding to use (or 0 to use the default 1 BPU encoding) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1a091725df85169dc0f25a40ba62a6304e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export print_fpval</definition>
        <argsstring>(char *buf, size_t bufsize, const void *v, int size)</argsstring>
        <name>print_fpval</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bufsize</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>v</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print a floating point value. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer. may be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bufsize</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>floating point value in processor native format </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the value in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true ok </para></simplesect>
<simplesect kind="return"><para>false can&apos;t represent as floating point number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1a7d8f5b848e3b18b7bfb26e9a31f23d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> ida_export</type>
        <definition>idaman flags_t ida_export get_dtype_flag</definition>
        <argsstring>(op_dtype_t dtype)</argsstring>
        <name>get_dtype_flag</name>
        <param>
          <type>op_dtype_t</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
<para>Get flags for <ref refid="classop__t_1a9d0ea64a2929fc998bca6cebd1b91c09" kindref="member">op_t::dtype</ref> field. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1ad440689adc40a924d8cf303b7d23dd88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman size_t ida_export</type>
        <definition>idaman size_t ida_export get_dtype_size</definition>
        <argsstring>(op_dtype_t dtype)</argsstring>
        <name>get_dtype_size</name>
        <param>
          <type>op_dtype_t</type>
          <declname>dtype</declname>
        </param>
        <briefdescription>
<para>Get size of opt_::dtype field. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1ad062f64942bc6de694f2c684db306111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman op_dtype_t ida_export</type>
        <definition>idaman op_dtype_t ida_export get_dtype_by_size</definition>
        <argsstring>(asize_t size)</argsstring>
        <name>get_dtype_by_size</name>
        <param>
          <type>asize_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Get <ref refid="classop__t_1a9d0ea64a2929fc998bca6cebd1b91c09" kindref="member">op_t::dtype</ref> from size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1a6e879b8ca7ebc610fb694d36be975922" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export create_insn</definition>
        <argsstring>(ea_t ea, insn_t *out=NULL)</argsstring>
        <name>create_insn</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="classinsn__t" kindref="compound">insn_t</ref> *</type>
          <declname>out</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an instruction at the specified address. This function checks if an instruction is present at the specified address and will try to create one if there is none. It will fail if there is a data item or other items hindering the creation of the new instruction. This function will also fill the &apos;out&apos; structure. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length of the instruction or 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1af83aad26f4b3e39e7fbda441100f15cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export decode_insn</definition>
        <argsstring>(insn_t *out, ea_t ea)</argsstring>
        <name>decode_insn</name>
        <param>
          <type><ref refid="classinsn__t" kindref="compound">insn_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Analyze the specified address and fill &apos;out&apos;. This function does not modify the database. It just tries to interpret the specified address as an instruction and fills the &apos;out&apos; structure. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length of the (possible) instruction or 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1aecb13f7c9c45e7098a438ffbaf51fc1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool can_decode</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>can_decode</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Can the bytes at address &apos;ea&apos; be decoded as instruction? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether or not the contents at that address could be a valid instruction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1313" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1313" bodyend="1313"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1a65483e473d279d4d2046b3dab55db250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export print_operand</definition>
        <argsstring>(qstring *out, ea_t ea, int n, int getn_flags=0, struct printop_t *newtype=NULL)</argsstring>
        <name>print_operand</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int</type>
          <declname>getn_flags</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>struct <ref refid="structprintop__t" kindref="compound">printop_t</ref> *</type>
          <declname>newtype</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate text representation for operand #n. This function will generate the text representation of the specified operand (includes color codes.) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>the item address (instruction or data) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>operand number (0,1,2...). meaningful only for instructions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___g_e_t_n__" kindref="compound">Name expression flags</ref> Currently only <ref refid="group___g_e_t_n___1ga087e60e7f734e12197cbd6f3fd0238eb" kindref="member">GETN_NODUMMY</ref> is accepted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>newtype</parametername>
</parameternamelist>
<parameterdescription>
<para>if specified, print the operand using the specified type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1aa2e41a09ae3fbbdc017e6f06df6015cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export decode_prev_insn</definition>
        <argsstring>(insn_t *out, ea_t ea)</argsstring>
        <name>decode_prev_insn</name>
        <param>
          <type><ref refid="classinsn__t" kindref="compound">insn_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decode previous instruction if it exists, fill &apos;out&apos;. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>the address to decode the previous instruction from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the previous instruction address (<ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref>-no such insn) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1a7af8005f410c8436f938da3c28eeb685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export decode_preceding_insn</definition>
        <argsstring>(insn_t *out, ea_t ea, bool *p_farref=NULL)</argsstring>
        <name>decode_preceding_insn</name>
        <param>
          <type><ref refid="classinsn__t" kindref="compound">insn_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>p_farref</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Decode preceding instruction in the execution flow. Prefer far xrefs from addresses &lt; the current to ordinary flows. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>the address to decode the preceding instruction from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>the resulting instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the preceding instruction address (<ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref>-no such insn) and &apos;out&apos;. *p_farref will contain &apos;true&apos; if followed an xref, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1ae47fd4a188e72fcd6d7bb0b021f655b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export construct_macro</definition>
        <argsstring>(insn_t &amp;insn, bool enable, bool(idaapi *build_macro)(insn_t &amp;insn, bool may_go_forward))</argsstring>
        <name>construct_macro</name>
        <param>
          <type><ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>enable</declname>
        </param>
        <param>
          <type>bool(idaapi *)(<ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;insn, bool may_go_forward)</type>
          <declname>build_macro</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct a macro instruction. This function may be called from ana() to generate a macro instruction.</para><para>The real work is done by the &apos;build_macro()&apos; parameter. This callback should be provided by the module writer.</para><para>Here we just create the instruction in the database when the macro generation is turned on/off.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>the instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>enable</parametername>
</parameternamelist>
<parameterdescription>
<para>enable macro generation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>build_macro</parametername>
</parameternamelist>
<parameterdescription>
<para>try to grow the instruction in &apos;insn&apos; to a macro </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>true</parametername>
</parameternamelist>
<parameterdescription>
<para>the macro instruction is generated in &apos;out&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>false</parametername>
</parameternamelist>
<parameterdescription>
<para>no macro </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1a322fc39fb22cfb5b94ab6b09e3d1e8c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export guess_table_address</definition>
        <argsstring>(const insn_t &amp;insn)</argsstring>
        <name>guess_table_address</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <briefdescription>
<para>Guess the jump table address (ibm pc specific) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1380" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1a0ba46ff394f3efe997b785e0a8ece22b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman asize_t ida_export</type>
        <definition>idaman asize_t ida_export guess_table_size</definition>
        <argsstring>(const insn_t &amp;insn, ea_t jump_table)</argsstring>
        <name>guess_table_size</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>jump_table</declname>
        </param>
        <briefdescription>
<para>Guess the jump table size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1384" column="1"/>
      </memberdef>
      <memberdef kind="function" id="ua_8hpp_1a02a4561e4f07baf3751b23f5636e440f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export get_spoiled_reg</definition>
        <argsstring>(const insn_t &amp;insn, const uint32 *regs, size_t n)</argsstring>
        <name>get_spoiled_reg</name>
        <param>
          <type>const <ref refid="classinsn__t" kindref="compound">insn_t</ref> &amp;</type>
          <declname>insn</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref> *</type>
          <declname>regs</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Does the instruction spoil any register from &apos;regs&apos;?. This function checks the <ref refid="group___c_f__" kindref="compound">Instruction feature bits</ref> flags from the instructions array. Only <ref refid="group__o___1gab490f48c733f3d29c700bb5d70ecc198" kindref="member">o_reg</ref> operand types are consulted. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>insn</parametername>
</parameternamelist>
<parameterdescription>
<para>the instruction </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>index in the &apos;regs&apos; array or -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1393" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions that deal with the disassembling of program instructions. </para>    </briefdescription>
    <detaileddescription>
<para>There are 2 kinds of functions:<itemizedlist>
<listitem><para>functions that are called from the kernel to disassemble an instruction. These functions call IDP module for it.</para></listitem><listitem><para>functions that are called from IDP module to disassemble an instruction. We will call them &apos;helper functions&apos;.</para></listitem></itemizedlist>
</para><para>Disassembly of an instruction is made in three steps:<orderedlist>
<listitem><para>analysis: ana.cpp</para></listitem><listitem><para>emulation: emu.cpp</para></listitem><listitem><para>conversion to text: out.cpp</para></listitem></orderedlist>
</para><para>The kernel calls the IDP module to perform these steps. At first, the kernel always calls analysis. The analyzer must decode the instruction and fill the <ref refid="classinsn__t" kindref="compound">insn_t</ref> instance that it receives through its callback. It has no rights to change anything in the database.</para><para>The second step, emulation, is called for each instruction. This step must make necessary changes to the database, plan analysis of subsequent instructions, track register values, memory contents, etc. However, the kernel may call the emulation step for any address in the program - there is no ordering of addresses. Usually, the emulation is called necessary for subsequent addresses but this is not guaranteed. The main goal of emulation step is to track down execution flow and to plan conversion of necessary bytes to instructions.</para><para>The last step, conversion to text, is called each time an instruction is displayed on the screen. The kernel will always call the analysis step first (the analysis should be very fast) and then will call conversion to text. The emulation and conversion steps should use information stored in the <ref refid="classinsn__t" kindref="compound">insn_t</ref> instance they receive. They should not access the bytes of the instruction and decode it again - this should only be done in the analysis step. </para>    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp"/>
  </compounddef>
</doxygen>
