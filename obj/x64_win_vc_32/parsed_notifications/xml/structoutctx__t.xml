<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="structoutctx__t" kind="struct" language="C++" prot="public">
    <compoundname>outctx_t</compoundname>
    <basecompoundref refid="structoutctx__base__t" prot="public" virt="non-virtual">outctx_base_t</basecompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structoutctx__t_1a08505ab16cb573e4b0c1060d2bdc88e2" prot="public" static="no" mutable="no">
        <type>ea_t</type>
        <definition>ea_t outctx_t::bin_ea</definition>
        <argsstring></argsstring>
        <name>bin_ea</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1085" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1085" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__t_1a9163cb8053faec80d9b16134211c2668" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char outctx_t::bin_state</definition>
        <argsstring></argsstring>
        <name>bin_state</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1086" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1086" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__t_1a03c52e76426a194a153d18e2a42f5c60" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int outctx_t::gl_bpsize</definition>
        <argsstring></argsstring>
        <name>gl_bpsize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1087" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1087" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__t_1a010346539c3999893849a3a6f76d48e7" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int outctx_t::bin_width</definition>
        <argsstring></argsstring>
        <name>bin_width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1088" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1088" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__t_1a9da50acd172514d35a3e90b84c5e723a" prot="public" static="no" mutable="no">
        <type><ref refid="classinsn__t" kindref="compound">insn_t</ref></type>
        <definition>insn_t outctx_t::insn</definition>
        <argsstring></argsstring>
        <name>insn</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1091" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1091" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__t_1a091baafad27385c80bd77941f995f6ad" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref></type>
        <definition>qstring outctx_t::curlabel</definition>
        <argsstring></argsstring>
        <name>curlabel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1094" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1094" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structoutctx__t_1abe22ab68eb9d898598eb93a2de8d61e7" prot="public" static="no" mutable="no">
        <type>const <ref refid="structprintop__t" kindref="compound">printop_t</ref> *</type>
        <definition>const printop_t* outctx_t::wif</definition>
        <argsstring></argsstring>
        <name>wif</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1097" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1097" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structoutctx__t_1a9f391521334499641673f1421bd61cc0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>outctx_t::outctx_t</definition>
        <argsstring>(ea_t ea, flags_t flags=0, int _suspop=0, const printop_t *_wif=NULL)</argsstring>
        <name>outctx_t</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>_suspop</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>const <ref refid="structprintop__t" kindref="compound">printop_t</ref> *</type>
          <declname>_wif</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1099" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1099" bodyend="1104"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1a77b86f52c56701be0e7d69db8abbfb86" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>outctx_t::~outctx_t</definition>
        <argsstring>(void)</argsstring>
        <name>~outctx_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1105" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1105" bodyend="1107"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1af2a2da4311f76bcf77f98d5d71684b76" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>void idaapi outctx_t::setup_outctx</definition>
        <argsstring>(const char *prefix, int flags)</argsstring>
        <name>setup_outctx</name>
        <reimplements refid="structoutctx__base__t_1a1f66b8e1f5d886844a256194bf6e5233">setup_outctx</reimplements>
        <param>
          <type>const char *</type>
          <declname>prefix</declname>
        </param>
        <param>
          <type>int</type>
          <declname>makeline_flags</declname>
        </param>
        <briefdescription>
<para>Initialization; normally used only by the kernel. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1aa76c4ebb2a861fb9e179ed66decbb213" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>ssize_t idaapi outctx_t::retrieve_cmt</definition>
        <argsstring>(void)</argsstring>
        <name>retrieve_cmt</name>
        <reimplements refid="structoutctx__base__t_1a2cf6a4045a526681613e07bff2c28e43">retrieve_cmt</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1a847f402c44a82aefeb34ecc7a87bc086" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>ssize_t idaapi outctx_t::retrieve_name</definition>
        <argsstring>(qstring *, color_t *)</argsstring>
        <name>retrieve_name</name>
        <reimplements refid="structoutctx__base__t_1acd2074e477517775857f3a743f5cc47c">retrieve_name</reimplements>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
        </param>
        <param>
          <type><ref refid="kernwin_8hpp_1a051016ac92685c95d47a7c1850c19632" kindref="member">color_t</ref> *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1a61e7f1fa3032032e11035f72dd49a3bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool idaapi</type>
        <definition>bool idaapi outctx_t::gen_xref_lines</definition>
        <argsstring>(void)</argsstring>
        <name>gen_xref_lines</name>
        <reimplements refid="structoutctx__base__t_1acda40f38f852f9662a31541a7dc30ef1">gen_xref_lines</reimplements>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1a2a62cba34ef84856d2bb2e4c98d88b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_t::out_mnem</definition>
        <argsstring>(int width=8, const char *postfix=NULL)</argsstring>
        <name>out_mnem</name>
        <param>
          <type>int</type>
          <declname>width</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>postfix</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output instruction mnemonic for &apos;insn&apos; using information in &apos;ph.instruc&apos; array. This function outputs a colored text. It should be called from {ev_out_insn()} or {ev_out_mnem()} handler. It will output at least one space after the instruction. mnemonic even if the specified &apos;width&apos; is not enough. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>width of field with mnemonic. if &lt; 0, then &apos;postfix&apos; will be output before the mnemonic, i.e. as a prefix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>postfix</parametername>
</parameternamelist>
<parameterdescription>
<para>optional postfix added to the instruction mnemonic </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1a4197363b7d6bf84de574c1208e9b3a45" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_t::out_custom_mnem</definition>
        <argsstring>(const char *mnem, int width=8, const char *postfix=NULL)</argsstring>
        <name>out_custom_mnem</name>
        <param>
          <type>const char *</type>
          <declname>mnem</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>postfix</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output custom mnemonic for &apos;insn&apos;. E.g. if it should differ from the one in &apos;ph.instruc&apos;. This function outputs colored text. See <ref refid="structoutctx__t_1a2a62cba34ef84856d2bb2e4c98d88b1f" kindref="member">out_mnem</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mnem</parametername>
</parameternamelist>
<parameterdescription>
<para>custom mnemonic </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>width of field with mnemonic. if &lt; 0, then &apos;postfix&apos; will be output before the mnemonic, i.e. as a prefix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>postfix</parametername>
</parameternamelist>
<parameterdescription>
<para>optional postfix added to &apos;mnem&apos; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1a48fa693e7a5aee77cb5443f76374f687" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_t::out_mnemonic</definition>
        <argsstring>(void)</argsstring>
        <name>out_mnemonic</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Output instruction mnemonic using information in &apos;insn&apos;. It should be called from {ev_out_insn()} and it will call {ev_out_mnem()} or <ref refid="structoutctx__t_1a2a62cba34ef84856d2bb2e4c98d88b1f" kindref="member">out_mnem</ref>. This function outputs a colored text. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1afbd7efea0f5b2fda2dc001484944af40" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool idaapi</type>
        <definition>virtual bool idaapi outctx_t::out_one_operand</definition>
        <argsstring>(int n)</argsstring>
        <name>out_one_operand</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use this function to output an operand of an instruction. This function checks for the existence of a manually defined operand and will output it if it exists. It should be called from {ev_out_insn()} and it will call {ev_out_operand()}. This function outputs a colored text. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>operand is displayed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>operand is hidden </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1ab64ae8c3e060ce56c49dd6bcf90df726" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>size_t idaapi</type>
        <definition>virtual size_t idaapi outctx_t::get_immvals</definition>
        <argsstring>(uval_t *out, int i)</argsstring>
        <name>get_immvals</name>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the immediate values used at the specified address. This function can handle instructions and data items. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>array of values, size at least 2*UA_MAXOP </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>operand number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of immediate values </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1ad268cd1388c7098cedcc949f6ad56f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_t::out_immchar_cmts</definition>
        <argsstring>(void)</argsstring>
        <name>out_immchar_cmts</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print all operand values as commented character constants. This function is used to comment void operands with their representation in the form of character constants. This function outputs a colored text. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1a586e503c1da6e15db0718756c7415a20" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_t::gen_func_header</definition>
        <argsstring>(func_t *pfn)</argsstring>
        <name>gen_func_header</name>
        <param>
          <type><ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1a09fecf65c7a9d9127e9d75e54dd222fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_t::gen_func_footer</definition>
        <argsstring>(const func_t *pfn)</argsstring>
        <name>gen_func_footer</name>
        <param>
          <type>const <ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1aa0e626ce801637c74c3ac534b9e175cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_t::out_data</definition>
        <argsstring>(bool analyze_only)</argsstring>
        <name>out_data</name>
        <param>
          <type>bool</type>
          <declname>analyze_only</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1a03abf75828ef9203b5c1870f66f78ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool idaapi</type>
        <definition>virtual bool idaapi outctx_t::out_specea</definition>
        <argsstring>(uchar segtype)</argsstring>
        <name>out_specea</name>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>segtype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1a21c62181ae11c9934d925ecb74f73620" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_t::gen_header_extra</definition>
        <argsstring>()</argsstring>
        <name>gen_header_extra</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structoutctx__t_1a0590c3f76290ea96e41f94ed87c8cca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void idaapi</type>
        <definition>virtual void idaapi outctx_t::gen_header</definition>
        <argsstring>(int flags=GH_PRINT_PROC_AND_ASM, const char *proc_name=NULL, const char *proc_flavour=NULL)</argsstring>
        <name>gen_header</name>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>GH_PRINT_PROC_AND_ASM</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>proc_name</declname>
          <defval>NULL</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>proc_flavour</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1187" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2768">
        <label>outctx_t</label>
        <link refid="structoutctx__t"/>
        <childnode refid="2769" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2769">
        <label>outctx_base_t</label>
        <link refid="structoutctx__base__t"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2770">
        <label>outctx_t</label>
        <link refid="structoutctx__t"/>
        <childnode refid="2771" relation="public-inheritance">
        </childnode>
        <childnode refid="2773" relation="usage">
          <edgelabel>curlabel</edgelabel>
        </childnode>
        <childnode refid="2774" relation="usage">
          <edgelabel>insn</edgelabel>
        </childnode>
        <childnode refid="2776" relation="usage">
          <edgelabel>wif</edgelabel>
        </childnode>
      </node>
      <node id="2780">
        <label>strpath_t</label>
        <link refid="structstrpath__t"/>
      </node>
      <node id="2781">
        <label>enum_const_t</label>
        <link refid="structenum__const__t"/>
      </node>
      <node id="2771">
        <label>outctx_base_t</label>
        <link refid="structoutctx__base__t"/>
        <childnode refid="2772" relation="usage">
          <edgelabel>lnar</edgelabel>
        </childnode>
        <childnode refid="2773" relation="usage">
          <edgelabel>outbuf</edgelabel>
          <edgelabel>cmtbuf</edgelabel>
          <edgelabel>line_prefix</edgelabel>
        </childnode>
      </node>
      <node id="2779">
        <label>refinfo_t</label>
        <link refid="structrefinfo__t"/>
      </node>
      <node id="2772">
        <label>qvector&lt; qstring &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2774">
        <label>insn_t</label>
        <link refid="classinsn__t"/>
        <childnode refid="2775" relation="usage">
          <edgelabel>ops</edgelabel>
        </childnode>
      </node>
      <node id="2777">
        <label>opinfo_t</label>
        <link refid="unionopinfo__t"/>
        <childnode refid="2778" relation="usage">
          <edgelabel>cd</edgelabel>
        </childnode>
        <childnode refid="2779" relation="usage">
          <edgelabel>ri</edgelabel>
        </childnode>
        <childnode refid="2780" relation="usage">
          <edgelabel>path</edgelabel>
        </childnode>
        <childnode refid="2781" relation="usage">
          <edgelabel>ec</edgelabel>
        </childnode>
      </node>
      <node id="2775">
        <label>op_t</label>
        <link refid="classop__t"/>
      </node>
      <node id="2776">
        <label>printop_t</label>
        <link refid="structprintop__t"/>
        <childnode refid="2777" relation="usage">
          <edgelabel>ti</edgelabel>
        </childnode>
      </node>
      <node id="2773">
        <label>_qstring&lt; char &gt;</label>
        <link refid="class__qstring"/>
      </node>
      <node id="2778">
        <label>custom_data_type_ids_t</label>
        <link refid="structcustom__data__type__ids__t"/>
      </node>
    </collaborationgraph>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" line="1083" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/ua.hpp" bodystart="1082" bodyend="1192"/>
    <listofallmembers>
      <member refid="structoutctx__base__t_1af9cb330bbe46960c8069dd8e0a99e17f" prot="protected" virt="virtual"><scope>outctx_t</scope><name>add_aux_prefix</name></member>
      <member refid="structoutctx__base__t_1a6427b2fedd6b99c5dfd6fc30ee7ccbd4" prot="public" virt="virtual"><scope>outctx_t</scope><name>add_spaces</name></member>
      <member refid="structoutctx__base__t_1a60fd4ea0c60a5eb0561d1f2f4b98288e" prot="protected" virt="virtual"><scope>outctx_t</scope><name>append_user_prefix</name></member>
      <member refid="structoutctx__t_1a08505ab16cb573e4b0c1060d2bdc88e2" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>bin_ea</name></member>
      <member refid="structoutctx__t_1a9163cb8053faec80d9b16134211c2668" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>bin_state</name></member>
      <member refid="structoutctx__t_1a010346539c3999893849a3a6f76d48e7" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>bin_width</name></member>
      <member refid="structoutctx__base__t_1a5b38a4f57046a4d3a03a80adde91acd1" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>close_comment</name></member>
      <member refid="structoutctx__base__t_1a3f7f7d9e86c94541bfcbd83a43953534" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>clr_gen_label</name></member>
      <member refid="structoutctx__base__t_1a69ef671cf90d3be0fbf37e8131060287" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>cmt_ea</name></member>
      <member refid="structoutctx__base__t_1a2b6b6294fe87cf127b8fef7910435885" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>cmtbuf</name></member>
      <member refid="structoutctx__base__t_1a5a5aebda0aa2b284a57909356b8e65c3" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>cmtcolor</name></member>
      <member refid="structoutctx__base__t_1ad1e18db803944e57a76651d1bfe23660" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>cmtptr</name></member>
      <member refid="structoutctx__base__t_1a99f2f3cf97eb5afc579f61b759ed5f08" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>ctxflags</name></member>
      <member refid="structoutctx__t_1a091baafad27385c80bd77941f995f6ad" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>curlabel</name></member>
      <member refid="structoutctx__base__t_1a9f0f2d523968ad07a08d40a8337f353c" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>default_lnnum</name></member>
      <member refid="structoutctx__base__t_1a81de957da1f6f5d77fbfb38a3abc6f66" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>display_voids</name></member>
      <member refid="structoutctx__base__t_1a04543bea9eb62a3440e3534288c15b87" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>F</name></member>
      <member refid="structoutctx__base__t_1a960a0e7a7816440ff95cb6e7591df3c2" prot="protected" virt="virtual"><scope>outctx_t</scope><name>flush_and_reinit</name></member>
      <member refid="structoutctx__base__t_1a6e1373993b585eea1536fba376f9eaad" prot="public" virt="virtual"><scope>outctx_t</scope><name>flush_buf</name></member>
      <member refid="structoutctx__base__t_1a697aef3f367c1a6873c5a3f60c754a9e" prot="public" virt="virtual"><scope>outctx_t</scope><name>flush_outbuf</name></member>
      <member refid="structoutctx__base__t_1af916ab628deaa2088b1e359bedab71e1" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>forbid_annotations</name></member>
      <member refid="structoutctx__base__t_1af3c142ad3affbbad30093156b0854954" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>force_code</name></member>
      <member refid="structoutctx__base__t_1a7d401281f5d9bc0b9ed928887785b0d0" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>GCC_DIAG_OFF</name></member>
      <member refid="structoutctx__base__t_1a094dfadba896cac7737e91f896220477" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>GCC_DIAG_ON</name></member>
      <member refid="structoutctx__base__t_1a6f52709e1de03a4efc5ef3ea490df00a" prot="public" virt="virtual"><scope>outctx_t</scope><name>gen_block_cmt</name></member>
      <member refid="structoutctx__base__t_1a86bb1d1afcd92eac0d9136321bf8f126" prot="public" virt="virtual"><scope>outctx_t</scope><name>gen_border_line</name></member>
      <member refid="structoutctx__base__t_1a1866737882988e2a05fdc9127cbdff90" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>gen_cmt_line</name></member>
      <member refid="structoutctx__base__t_1adcb9c7c1c6b14a510bc21c03c320257e" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>gen_cmt_line_v</name></member>
      <member refid="structoutctx__base__t_1afce0e2b5a36547e42e6d28a1d3d8b0cf" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>gen_collapsed_line</name></member>
      <member refid="structoutctx__base__t_1a5e08eef2ca0bea912fcf69693b0329aa" prot="public" virt="virtual"><scope>outctx_t</scope><name>gen_colored_cmt_line_v</name></member>
      <member refid="structoutctx__base__t_1a3f521d06ae6564f71ab3f38a827cd4ed" prot="public" virt="virtual"><scope>outctx_t</scope><name>gen_empty_line</name></member>
      <member refid="structoutctx__base__t_1ac820c2171a30f696a59d7d72c5d64804" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>gen_empty_line_without_annotations</name></member>
      <member refid="structoutctx__t_1a09fecf65c7a9d9127e9d75e54dd222fc" prot="public" virt="virtual"><scope>outctx_t</scope><name>gen_func_footer</name></member>
      <member refid="structoutctx__t_1a586e503c1da6e15db0718756c7415a20" prot="public" virt="virtual"><scope>outctx_t</scope><name>gen_func_header</name></member>
      <member refid="structoutctx__t_1a0590c3f76290ea96e41f94ed87c8cca4" prot="public" virt="virtual"><scope>outctx_t</scope><name>gen_header</name></member>
      <member refid="structoutctx__t_1a21c62181ae11c9934d925ecb74f73620" prot="public" virt="virtual"><scope>outctx_t</scope><name>gen_header_extra</name></member>
      <member refid="structoutctx__base__t_1af0f0f71a15e8ac7fbe65b5af59db9431" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>gen_printf</name></member>
      <member refid="structoutctx__base__t_1a2e6c7ced3298b77b8eaba2ab4d4b5858" prot="public" virt="virtual"><scope>outctx_t</scope><name>gen_vprintf</name></member>
      <member refid="structoutctx__t_1a61e7f1fa3032032e11035f72dd49a3bf" prot="public" virt="virtual"><scope>outctx_t</scope><name>gen_xref_lines</name></member>
      <member refid="structoutctx__base__t_1a0c3694c01abf9acccd3531402caecc79" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>get_cmtgen_state</name></member>
      <member refid="structoutctx__t_1ab64ae8c3e060ce56c49dd6bcf90df726" prot="public" virt="virtual"><scope>outctx_t</scope><name>get_immvals</name></member>
      <member refid="structoutctx__base__t_1ad9d4d1e51adbed57e51950a75fbf1625" prot="public" virt="virtual"><scope>outctx_t</scope><name>get_stkvar</name></member>
      <member refid="structoutctx__base__t_1af98a7747489eea3a308304ad700f7196" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>get_xrefgen_state</name></member>
      <member refid="structoutctx__t_1a03c52e76426a194a153d18e2a42f5c60" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>gl_bpsize</name></member>
      <member refid="structoutctx__base__t_1af4f8545e34946821930e420164971232" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>ind0</name></member>
      <member refid="structoutctx__base__t_1ac39cce0149cbd1ba7d7bd7d84465f616" prot="public" virt="virtual"><scope>outctx_t</scope><name>init_lines_array</name></member>
      <member refid="structoutctx__t_1a9da50acd172514d35a3e90b84c5e723a" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>insn</name></member>
      <member refid="structoutctx__base__t_1ae45c594e564e7b5b8e8d4cf201149b43" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>insn_ea</name></member>
      <member refid="structoutctx__base__t_1a7f8363ea5bb198ac7ade1b3681174024" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>kern_data</name></member>
      <member refid="structoutctx__base__t_1a2a9c77c8d1e10f4608c105134a38cdb2" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>line_prefix</name></member>
      <member refid="structoutctx__base__t_1ac2768cee6e0696a7f1c23466c11ebf6b" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>lnar</name></member>
      <member refid="structoutctx__base__t_1aa12eef115ba89f37c696497cc17956b5" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>lnar_maxsize</name></member>
      <member refid="structoutctx__base__t_1a0cfa825b0ebb53b884c5f2b8c3a76460" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>multiline</name></member>
      <member refid="structoutctx__base__t_1aba5186c07b048b28e86ff8e8e25ec84d" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>nowarn_out_printf</name></member>
      <member refid="structoutctx__base__t_1a60132d346ec19157b14b0df4908887cc" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>only_main_line</name></member>
      <member refid="structoutctx__base__t_1aa66e3b29c5d4ad87c2a54cb600aa2e0f" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_addr_tag</name></member>
      <member refid="structoutctx__base__t_1a89bd26ae3352f4bea2a1d31c0e183221" prot="protected" virt="virtual"><scope>outctx_t</scope><name>out_aux_cmts</name></member>
      <member refid="structoutctx__base__t_1ade9771d59237aa100555a3e0ef118a4c" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_btoa</name></member>
      <member refid="structoutctx__base__t_1a1d1ae88f3273ea6024a5ce45a077b05a" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_char</name></member>
      <member refid="structoutctx__base__t_1ac196e4fdd5bfe5419ef8d08ff7ed8018" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_chars</name></member>
      <member refid="structoutctx__base__t_1a90b35141c0c7d292a505b9d1f08ed51a" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_colored_register_line</name></member>
      <member refid="structoutctx__t_1a4197363b7d6bf84de574c1208e9b3a45" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_custom_mnem</name></member>
      <member refid="structoutctx__t_1aa0e626ce801637c74c3ac534b9e175cc" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_data</name></member>
      <member refid="structoutctx__t_1ad268cd1388c7098cedcc949f6ad56f39" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_immchar_cmts</name></member>
      <member refid="structoutctx__base__t_1aaf5d60224ce9c38e32ade7ff96e8ecc6" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>out_keyword</name></member>
      <member refid="structoutctx__base__t_1ab3304de2da2c793b5ff64bdedf5a2bff" prot="protected" virt="virtual"><scope>outctx_t</scope><name>out_label_addr_tag</name></member>
      <member refid="structoutctx__base__t_1a5a3440052da5ee0a3fcb41c5b8b1a552" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_line</name></member>
      <member refid="structoutctx__base__t_1aad62ea121d09c779b4cd141ef50b7662" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_long</name></member>
      <member refid="structoutctx__t_1a2a62cba34ef84856d2bb2e4c98d88b1f" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_mnem</name></member>
      <member refid="structoutctx__t_1a48fa693e7a5aee77cb5443f76374f687" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_mnemonic</name></member>
      <member refid="structoutctx__base__t_1a973687090ecbc5a5f6cb11975c06e702" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_name_expr</name></member>
      <member refid="structoutctx__t_1afbd7efea0f5b2fda2dc001484944af40" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_one_operand</name></member>
      <member refid="structoutctx__base__t_1a77b6e4d8ec2f88b8b2acf9e56c763c0f" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>out_printf</name></member>
      <member refid="structoutctx__base__t_1a2f8e21d5a1936f71cffd6e206538ac7b" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>out_register</name></member>
      <member refid="structoutctx__base__t_1a7c0d0e1324960936eab349a52d5d1d93" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>out_spaces</name></member>
      <member refid="structoutctx__t_1a03abf75828ef9203b5c1870f66f78ece" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_specea</name></member>
      <member refid="structoutctx__base__t_1a6451645d64a0df3e91a94df355b490c9" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_symbol</name></member>
      <member refid="structoutctx__base__t_1a47f50df01582acaa9bbfa7716fac4977" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_tagoff</name></member>
      <member refid="structoutctx__base__t_1a639513d26c34ce5f4c2fc30b95bbe5b3" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_tagon</name></member>
      <member refid="structoutctx__base__t_1a3fc65e57973d2014015df8c252d9f9a2" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_value</name></member>
      <member refid="structoutctx__base__t_1aa54d2f1b003ff95abd24b32628ca900b" prot="public" virt="virtual"><scope>outctx_t</scope><name>out_vprintf</name></member>
      <member refid="structoutctx__base__t_1a95cd703a31059d26329d81b46220e814" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>outbuf</name></member>
      <member refid="structoutctx__base__t_1a632d679e88e2630e906dd0d0c3e9ae58" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>outctx_base_t</name></member>
      <member refid="structoutctx__t_1a9f391521334499641673f1421bd61cc0" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>outctx_t</name></member>
      <member refid="structoutctx__base__t_1a4d05ebb172c6792a931a60107a40299a" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>outvalue_getn_flags</name></member>
      <member refid="structoutctx__base__t_1ad16d3b1cfb12df80bdc5f1802035878f" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>outvalues</name></member>
      <member refid="structoutctx__base__t_1a5e7fb9b29852ac388b92c1659710e39f" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>prefix_len</name></member>
      <member refid="structoutctx__base__t_1ae91b7a0b72b6aa69d8656e49eea1438d" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>print_label_now</name></member>
      <member refid="structoutctx__base__t_1a30caec0b0ce566cdb32830c6c6f54988" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>regname_idx</name></member>
      <member refid="structoutctx__base__t_1ade9993a8cc84bc2a62cca96fa32bfa4e" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>restore_ctxflags</name></member>
      <member refid="structoutctx__t_1aa76c4ebb2a861fb9e179ed66decbb213" prot="public" virt="virtual"><scope>outctx_t</scope><name>retrieve_cmt</name></member>
      <member refid="structoutctx__t_1a847f402c44a82aefeb34ecc7a87bc086" prot="public" virt="virtual"><scope>outctx_t</scope><name>retrieve_name</name></member>
      <member refid="structoutctx__base__t_1a3eb8dc81c261f7c8695a147b6a70a666" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>set_comment_addr</name></member>
      <member refid="structoutctx__base__t_1aa52a96aeab2982c352e5818bdda5d502" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>set_dlbind_opnd</name></member>
      <member refid="structoutctx__base__t_1a892d1e938c18de6d8badeeef0cb1bc7e" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>set_gen_cmt</name></member>
      <member refid="structoutctx__base__t_1a516f09039cc9c59d8f525822f724c170" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>set_gen_demangled_label</name></member>
      <member refid="structoutctx__base__t_1ac9fd33270b5cf13438d0c108a7a2bb41" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>set_gen_label</name></member>
      <member refid="structoutctx__base__t_1a82d2d67d25940b8c3197113aebc7730b" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>set_gen_xrefs</name></member>
      <member refid="structoutctx__t_1af2a2da4311f76bcf77f98d5d71684b76" prot="public" virt="virtual"><scope>outctx_t</scope><name>setup_outctx</name></member>
      <member refid="structoutctx__base__t_1af3c27da0e67083e509d5f214033ce747" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>stack_view</name></member>
      <member refid="structoutctx__base__t_1ace442da79670b4aa0154736701d2dae4" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>suspop</name></member>
      <member refid="structoutctx__base__t_1a3b29803edf4262bd1e0b1afd895a3416" prot="public" virt="virtual"><scope>outctx_t</scope><name>term_outctx</name></member>
      <member refid="structoutctx__base__t_1a93f2660553765adc140553cc64121f8a" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>user_data</name></member>
      <member refid="structoutctx__t_1abe22ab68eb9d898598eb93a2de8d61e7" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>wif</name></member>
      <member refid="structoutctx__base__t_1aa933e525a872d6129b39ff0a68322118" prot="public" virt="virtual"><scope>outctx_t</scope><name>~outctx_base_t</name></member>
      <member refid="structoutctx__t_1a77b86f52c56701be0e7d69db8abbfb86" prot="public" virt="non-virtual"><scope>outctx_t</scope><name>~outctx_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
