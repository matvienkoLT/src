<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="structcfunc__t" kind="struct" language="C++" prot="public">
    <compoundname>cfunc_t</compoundname>
    <includes refid="hexrays_8hpp" local="no">hexrays.hpp</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structcfunc__t_1ad05afa3ba925dd66f9b9832865200cdc" prot="public" static="no" mutable="no">
        <type>ea_t</type>
        <definition>ea_t cfunc_t::entry_ea</definition>
        <argsstring></argsstring>
        <name>entry_ea</name>
        <briefdescription>
<para>function entry address </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6410" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1a096dc4e6bb0ae959dddb5ca7abf68d50" prot="public" static="no" mutable="no">
        <type><ref refid="classmbl__array__t" kindref="compound">mbl_array_t</ref> *</type>
        <definition>mbl_array_t* cfunc_t::mba</definition>
        <argsstring></argsstring>
        <name>mba</name>
        <briefdescription>
<para>underlying microcode </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6411" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6411" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1ad625fe1f26c6ed7e640f338850eb3860" prot="public" static="no" mutable="no">
        <type><ref refid="structcinsn__t" kindref="compound">cinsn_t</ref></type>
        <definition>cinsn_t cfunc_t::body</definition>
        <argsstring></argsstring>
        <name>body</name>
        <briefdescription>
<para>function body, must be a block </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6412" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6412" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1a7756f54b10d8682348967969dc8ad83f" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref> &amp;</type>
        <definition>intvec_t&amp; cfunc_t::argidx</definition>
        <argsstring></argsstring>
        <name>argidx</name>
        <briefdescription>
<para>list of arguments (indexes into vars) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6413" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6413" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1a7105bc7f76feb7a6827fe42e84616417" prot="public" static="no" mutable="no">
        <type>ctree_maturity_t</type>
        <definition>ctree_maturity_t cfunc_t::maturity</definition>
        <argsstring></argsstring>
        <name>maturity</name>
        <briefdescription>
<para>maturity level </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6414" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6414" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1a98ed8124970f6a5c55b23588fa5c0a39" prot="public" static="no" mutable="no">
        <type>user_labels_t *</type>
        <definition>user_labels_t* cfunc_t::user_labels</definition>
        <argsstring></argsstring>
        <name>user_labels</name>
        <briefdescription>
<para>user-defined labels. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6417" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6417" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1a0b88f1f919aabc064f5a733da0b5f594" prot="public" static="no" mutable="no">
        <type>user_cmts_t *</type>
        <definition>user_cmts_t* cfunc_t::user_cmts</definition>
        <argsstring></argsstring>
        <name>user_cmts</name>
        <briefdescription>
<para>user-defined comments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6418" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1a69ff81fbb85c423005ca7fc3dcdeb1d6" prot="public" static="no" mutable="no">
        <type>user_numforms_t *</type>
        <definition>user_numforms_t* cfunc_t::numforms</definition>
        <argsstring></argsstring>
        <name>numforms</name>
        <briefdescription>
<para>user-defined number formats. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6419" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1a42c8b41cd45bd3cb747d8b2845c75ecc" prot="public" static="no" mutable="no">
        <type>user_iflags_t *</type>
        <definition>user_iflags_t* cfunc_t::user_iflags</definition>
        <argsstring></argsstring>
        <name>user_iflags</name>
        <briefdescription>
<para>user-defined item flags <ref refid="group___c_i_t__" kindref="compound">ctree item iflags bits</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6420" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1a0bfa2bb42fdc6fab28b20ff5aa5cde51" prot="public" static="no" mutable="no">
        <type>user_unions_t *</type>
        <definition>user_unions_t* cfunc_t::user_unions</definition>
        <argsstring></argsstring>
        <name>user_unions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>user-defined union field selections. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6421" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1a990b11ccc1ccf3435d70bbe2e06444c6" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cfunc_t::refcnt</definition>
        <argsstring></argsstring>
        <name>refcnt</name>
        <briefdescription>
<para>reference count to this object. use cfuncptr_t </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6426" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6426" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1a7ff4bcf31d5c69718badb20fff1d9759" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cfunc_t::statebits</definition>
        <argsstring></argsstring>
        <name>statebits</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>current <ref refid="structcfunc__t" kindref="compound">cfunc_t</ref> state. see <ref refid="group___c_f_s__" kindref="compound">cfunc state bits</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6427" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1a5b4c46d19262d058d1bbef63cefd538a" prot="public" static="no" mutable="no">
        <type>eamap_t *</type>
        <definition>eamap_t* cfunc_t::eamap</definition>
        <argsstring></argsstring>
        <name>eamap</name>
        <briefdescription>
<para>ea-&gt;insn map. use <ref refid="structcfunc__t_1a776c6ac9ad01f7b9fdb746167ee78c22" kindref="member">get_eamap</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6432" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1a7d564bc91aeade9ff2f5cb307fc5113b" prot="public" static="no" mutable="no">
        <type>boundaries_t *</type>
        <definition>boundaries_t* cfunc_t::boundaries</definition>
        <argsstring></argsstring>
        <name>boundaries</name>
        <briefdescription>
<para>map of instruction boundaries. use <ref refid="structcfunc__t_1a366e580718e0fd10e9d87a4670d07e8e" kindref="member">get_boundaries</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6433" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1a225b99917d27f6e52ea3841b4c39c246" prot="public" static="no" mutable="no">
        <type><ref refid="group__simpleline_1gac893a23d04b0b0ddc10cc44f4f9f01e6" kindref="member">strvec_t</ref></type>
        <definition>strvec_t cfunc_t::sv</definition>
        <argsstring></argsstring>
        <name>sv</name>
        <briefdescription>
<para>decompilation output: function text. use <ref refid="structcfunc__t_1a913af4f3aad3e024518fa1169154309d" kindref="member">get_pseudocode</ref> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6434" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1a5324f1bcfdcd089cfd54f272123ce5bd" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int cfunc_t::hdrlines</definition>
        <argsstring></argsstring>
        <name>hdrlines</name>
        <briefdescription>
<para>number of lines in the declaration area </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6435" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structcfunc__t_1ab7322ac4333bfe68317155d118ef7ce7" prot="public" static="no" mutable="yes">
        <type><ref refid="classqvector" kindref="compound">ctree_items_t</ref></type>
        <definition>ctree_items_t cfunc_t::treeitems</definition>
        <argsstring></argsstring>
        <name>treeitems</name>
        <briefdescription>
<para>vector of ctree items </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6436" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6436" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structcfunc__t_1ab66d5c583aa0f2ac46421fe7dc2e9841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>cfunc_t::cfunc_t</definition>
        <argsstring>(mbl_array_t *mba)</argsstring>
        <name>cfunc_t</name>
        <param>
          <type><ref refid="classmbl__array__t" kindref="compound">mbl_array_t</ref> *</type>
          <declname>mba</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1ac717f3fbc083bf624ae3605531f8386e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>cfunc_t::~cfunc_t</definition>
        <argsstring>(void)</argsstring>
        <name>~cfunc_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6440" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6440" bodyend="6440"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a1239b4763b2b657f510670decca8f4c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cfunc_t::release</definition>
        <argsstring>(void)</argsstring>
        <name>release</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6441" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6441" bodyend="6441"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a35a7aafff6af24cfc59649f6f592634e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void cfunc_t::build_c_tree</definition>
        <argsstring>(void)</argsstring>
        <name>build_c_tree</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Generate the function body. This function (re)generates the function body from the underlying microcode. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6446" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11137" bodyend="11140"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1ade32ec1d399185e7fabc7f4bc1066a75" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void cfunc_t::verify</definition>
        <argsstring>(allow_unused_labels_t aul, bool even_without_debugger) const</argsstring>
        <name>verify</name>
        <param>
          <type>allow_unused_labels_t</type>
          <declname>aul</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>even_without_debugger</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Verify the ctree. This function verifies the ctree. If the ctree is malformed, an internal error is generated. Use it to verify the ctree after your modifications. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aul</parametername>
</parameternamelist>
<parameterdescription>
<para>Are unused labels acceptable? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>even_without_debugger</parametername>
</parameternamelist>
<parameterdescription>
<para>if false and there is no debugger, the verification will be skipped </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6453" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11143" bodyend="11146"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a5836654444c75d691d73ad0a94972b78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void cfunc_t::print_dcl</definition>
        <argsstring>(qstring *vout) const</argsstring>
        <name>print_dcl</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>vout</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print function prototype. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vout</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6457" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11149" bodyend="11152"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a27e97a1b29aa820db4b2bc29f0f0c5b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void cfunc_t::print_func</definition>
        <argsstring>(vc_printer_t &amp;vp) const</argsstring>
        <name>print_func</name>
        <param>
          <type><ref refid="structvc__printer__t" kindref="compound">vc_printer_t</ref> &amp;</type>
          <declname>vp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print function text. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vp</parametername>
</parameternamelist>
<parameterdescription>
<para>printer helper class to receive the generated text. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6461" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11155" bodyend="11158"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1af11df93f2258a30cd27e1896956015c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool cfunc_t::get_func_type</definition>
        <argsstring>(tinfo_t *type) const</argsstring>
        <name>get_func_type</name>
        <param>
          <type><ref refid="classtinfo__t" kindref="compound">tinfo_t</ref> *</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the function type. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>variable where the function type is returned </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6466" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11161" bodyend="11164"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1aca8f5219c5a45d7740bd0cc85a484c77" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structlvars__t" kindref="compound">lvars_t</ref> *hexapi</type>
        <definition>lvars_t * cfunc_t::get_lvars</definition>
        <argsstring>(void)</argsstring>
        <name>get_lvars</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get vector of local variables. <simplesect kind="return"><para>pointer to the vector of local variables. If you modify this vector, the ctree must be regenerated in order to have correct cast operators. Use <ref refid="structcfunc__t_1a35a7aafff6af24cfc59649f6f592634e" kindref="member">build_c_tree()</ref> for that. Removing lvars should be done carefully: all references in ctree and microcode must be corrected after that. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6474" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11167" bodyend="11170"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1aa047e230da22f5cc54b9c209a611646d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref> hexapi</type>
        <definition>sval_t cfunc_t::get_stkoff_delta</definition>
        <argsstring>(void)</argsstring>
        <name>get_stkoff_delta</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get stack offset delta. The local variable stack offsets retrieved by v.location.stkoff() should be adjusted before being used as stack frame offsets in IDA. <simplesect kind="return"><para>the delta to apply. example: ida_stkoff = v.location.stkoff() - f-&gt;<ref refid="structcfunc__t_1aa047e230da22f5cc54b9c209a611646d" kindref="member">get_stkoff_delta()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6481" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11173" bodyend="11178"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a964493102162faea1f5d5673d42f1d39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structcitem__t" kindref="compound">citem_t</ref> *hexapi</type>
        <definition>citem_t * cfunc_t::find_label</definition>
        <argsstring>(int label)</argsstring>
        <name>find_label</name>
        <param>
          <type>int</type>
          <declname>label</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the label. <simplesect kind="return"><para>pointer to the ctree item with the specified label number. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6485" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11181" bodyend="11184"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1af71a25ad79746336fefa8a60c91053fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void cfunc_t::remove_unused_labels</definition>
        <argsstring>(void)</argsstring>
        <name>remove_unused_labels</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove unused labels. This function check what labels are really used by the function and removes the unused ones. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6490" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11187" bodyend="11190"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a10706b042b122094164075a3b5bca142" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *hexapi</type>
        <definition>const char * cfunc_t::get_user_cmt</definition>
        <argsstring>(const treeloc_t &amp;loc, cmt_retrieval_type_t rt) const</argsstring>
        <name>get_user_cmt</name>
        <param>
          <type>const <ref refid="structtreeloc__t" kindref="compound">treeloc_t</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>cmt_retrieval_type_t</type>
          <declname>rt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a user defined comment. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>ctree location </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rt</parametername>
</parameternamelist>
<parameterdescription>
<para>should already retrieved comments retrieved again? </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the comment string or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6496" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11193" bodyend="11196"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1ac69c7a795de52c7858c88084dae91fa6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void cfunc_t::set_user_cmt</definition>
        <argsstring>(const treeloc_t &amp;loc, const char *cmt)</argsstring>
        <name>set_user_cmt</name>
        <param>
          <type>const <ref refid="structtreeloc__t" kindref="compound">treeloc_t</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>cmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a user defined comment. This function stores the specified comment in the <ref refid="structcfunc__t" kindref="compound">cfunc_t</ref> structure. The <ref refid="structcfunc__t_1a5750da6d0b4a3dfc9e606ecbe565ee65" kindref="member">save_user_cmts()</ref> function must be called after it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>ctree location </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmt</parametername>
</parameternamelist>
<parameterdescription>
<para>new comment. if empty or NULL, then an existing comment is deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6503" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11199" bodyend="11202"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1afde4549cbcf97aa0b3fe486ec947e57f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref> hexapi</type>
        <definition>int32 cfunc_t::get_user_iflags</definition>
        <argsstring>(const citem_locator_t &amp;loc) const</argsstring>
        <name>get_user_iflags</name>
        <param>
          <type>const <ref refid="structcitem__locator__t" kindref="compound">citem_locator_t</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve citem iflags. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>citem locator </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___c_i_t__" kindref="compound">ctree item iflags bits</ref> or 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6508" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11205" bodyend="11208"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a4cfa4cda48eaf9271556f7787cf05ad4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void cfunc_t::set_user_iflags</definition>
        <argsstring>(const citem_locator_t &amp;loc, int32 iflags)</argsstring>
        <name>set_user_iflags</name>
        <param>
          <type>const <ref refid="structcitem__locator__t" kindref="compound">citem_locator_t</ref> &amp;</type>
          <declname>loc</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
          <declname>iflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set citem iflags. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>loc</parametername>
</parameternamelist>
<parameterdescription>
<para>citem locator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>iflags</parametername>
</parameternamelist>
<parameterdescription>
<para>new iflags </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6513" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11211" bodyend="11214"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a4a37f6a5a5abfe37a0ad80be821c1f20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool cfunc_t::has_orphan_cmts</definition>
        <argsstring>(void) const</argsstring>
        <name>has_orphan_cmts</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Check if there are orphan comments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6516" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11217" bodyend="11220"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a8edb7f75cc636bc60d5d523e36b04bf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int hexapi</type>
        <definition>int cfunc_t::del_orphan_cmts</definition>
        <argsstring>(void)</argsstring>
        <name>del_orphan_cmts</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Delete all orphan comments. The <ref refid="structcfunc__t_1a5750da6d0b4a3dfc9e606ecbe565ee65" kindref="member">save_user_cmts()</ref> function must be called after this call. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6520" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11223" bodyend="11226"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a9d09a019bb1233ac0598f13ebdaf142c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool cfunc_t::get_user_union_selection</definition>
        <argsstring>(ea_t ea, intvec_t *path)</argsstring>
        <name>get_user_union_selection</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref> *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Retrieve a user defined union field selection. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>out: path describing the union selection. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the path or NULL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6526" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11229" bodyend="11232"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a036da2431075de87930cc749e9063fca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void cfunc_t::set_user_union_selection</definition>
        <argsstring>(ea_t ea, const intvec_t &amp;path)</argsstring>
        <name>set_user_union_selection</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref> &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set a union field selection. The <ref refid="structcfunc__t_1aff030667d4614fb6f7a5fe6e92ca02ea" kindref="member">save_user_unions()</ref> function must be called after calling this function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>in: path describing the union selection. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6532" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11235" bodyend="11238"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a4f55dbb78f75c9ae2b80c430f06d4285" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cfunc_t::save_user_labels</definition>
        <argsstring>(void) const</argsstring>
        <name>save_user_labels</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Save user-defined labels into the database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6535" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6535" bodyend="6535"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a5750da6d0b4a3dfc9e606ecbe565ee65" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cfunc_t::save_user_cmts</definition>
        <argsstring>(void) const</argsstring>
        <name>save_user_cmts</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Save user-defined comments into the database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6537" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6537" bodyend="6537"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a716776ab6c8cdfdd061b087735dfdaf6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cfunc_t::save_user_numforms</definition>
        <argsstring>(void) const</argsstring>
        <name>save_user_numforms</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Save user-defined number formats into the database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6539" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6539" bodyend="6539"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1aa8ff9e9b988d8ffb581071b528b77fbd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cfunc_t::save_user_iflags</definition>
        <argsstring>(void) const</argsstring>
        <name>save_user_iflags</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Save user-defined iflags into the database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6541" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6541" bodyend="6541"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1aff030667d4614fb6f7a5fe6e92ca02ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void cfunc_t::save_user_unions</definition>
        <argsstring>(void) const</argsstring>
        <name>save_user_unions</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Save user-defined union field selections into the database. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6543" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6543" bodyend="6543"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a3b0bca6c157187d0dfbe5d3e9dc134db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool cfunc_t::get_line_item</definition>
        <argsstring>(const char *line, int x, bool is_ctree_line, ctree_item_t *phead, ctree_item_t *pitem, ctree_item_t *ptail)</argsstring>
        <name>get_line_item</name>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_ctree_line</declname>
        </param>
        <param>
          <type><ref refid="structctree__item__t" kindref="compound">ctree_item_t</ref> *</type>
          <declname>phead</declname>
        </param>
        <param>
          <type><ref refid="structctree__item__t" kindref="compound">ctree_item_t</ref> *</type>
          <declname>pitem</declname>
        </param>
        <param>
          <type><ref refid="structctree__item__t" kindref="compound">ctree_item_t</ref> *</type>
          <declname>ptail</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get ctree item for the specified cursor position. <simplesect kind="return"><para>false if failed to get the current item </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>line of decompilation text (element of <ref refid="structcfunc__t_1a225b99917d27f6e52ea3841b4c39c246" kindref="member">sv</ref>) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x cursor coordinate in the line </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_ctree_line</parametername>
</parameternamelist>
<parameterdescription>
<para>does the line belong to statement area? (if not, it is assumed to belong to the declaration area) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phead</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to the first item on the line (used to attach block comments). May be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pitem</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to the current item. May be NULL </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ptail</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to the last item on the line (used to attach indented comments). May be NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="structvdui__t_1a7b5be4a134aeb567b1f786b50e77640e" kindref="member">vdui_t::get_current_item()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6554" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11241" bodyend="11244"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1ab8b548fbe35bddb65bf4565ff373089d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classqvector" kindref="compound">hexwarns_t</ref> &amp;hexapi</type>
        <definition>hexwarns_t &amp; cfunc_t::get_warnings</definition>
        <argsstring>(void)</argsstring>
        <name>get_warnings</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get information about decompilation warnings. <simplesect kind="return"><para>reference to the vector of warnings </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6558" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11247" bodyend="11250"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a776c6ac9ad01f7b9fdb746167ee78c22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>eamap_t &amp;hexapi</type>
        <definition>eamap_t &amp; cfunc_t::get_eamap</definition>
        <argsstring>(void)</argsstring>
        <name>get_eamap</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pointer to ea-&gt;insn map. This function initializes eamap if not done yet. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6562" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11253" bodyend="11256"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a366e580718e0fd10e9d87a4670d07e8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>boundaries_t &amp;hexapi</type>
        <definition>boundaries_t &amp; cfunc_t::get_boundaries</definition>
        <argsstring>(void)</argsstring>
        <name>get_boundaries</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pointer to map of instruction boundaries. This function initializes the boundary map if not done yet. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6566" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11259" bodyend="11262"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1a913af4f3aad3e024518fa1169154309d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="group__simpleline_1gac893a23d04b0b0ddc10cc44f4f9f01e6" kindref="member">strvec_t</ref> &amp;hexapi</type>
        <definition>const strvec_t &amp; cfunc_t::get_pseudocode</definition>
        <argsstring>(void)</argsstring>
        <name>get_pseudocode</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get pointer to decompilation output: the pseudocode. This function generates pseudocode if not done yet. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6570" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11265" bodyend="11268"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1aab634c20ce794def5ed56fa312ee11a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool cfunc_t::gather_derefs</definition>
        <argsstring>(const ctree_item_t &amp;ci, udt_type_data_t *udm=NULL) const</argsstring>
        <name>gather_derefs</name>
        <param>
          <type>const <ref refid="structctree__item__t" kindref="compound">ctree_item_t</ref> &amp;</type>
          <declname>ci</declname>
        </param>
        <param>
          <type><ref refid="structudt__type__data__t" kindref="compound">udt_type_data_t</ref> *</type>
          <declname>udm</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6572" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11271" bodyend="11274"/>
      </memberdef>
      <memberdef kind="function" id="structcfunc__t_1ad50faba04fca2aef57c4ab8bf46944e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool cfunc_t::find_item_coords</definition>
        <argsstring>(const citem_t *item, int *px, int *py)</argsstring>
        <name>find_item_coords</name>
        <param>
          <type>const <ref refid="structcitem__t" kindref="compound">citem_t</ref> *</type>
          <declname>item</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>px</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>py</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6573" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11277" bodyend="11280"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structcfunc__t_1ae350bde5483aca1ad2f3e1d52161c62f" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void cfunc_t::cleanup</definition>
        <argsstring>(void)</argsstring>
        <name>cleanup</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cleanup. Properly delete all children and free memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6577" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="11283" bodyend="11286"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Decompiled function. Decompilation result is kept here. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="748">
        <label>ivl_tpl&lt; uval_t &gt;</label>
        <link refid="structivl__tpl"/>
      </node>
      <node id="722">
        <label>bitset_t</label>
        <link refid="classbitset__t"/>
      </node>
      <node id="762">
        <label>cinsn_t</label>
        <link refid="structcinsn__t"/>
        <childnode refid="763" relation="public-inheritance">
        </childnode>
        <childnode refid="764" relation="usage">
          <edgelabel>cexpr</edgelabel>
        </childnode>
        <childnode refid="770" relation="usage">
          <edgelabel>cwhile</edgelabel>
        </childnode>
        <childnode refid="773" relation="usage">
          <edgelabel>cswitch</edgelabel>
        </childnode>
        <childnode refid="776" relation="usage">
          <edgelabel>cfor</edgelabel>
        </childnode>
        <childnode refid="777" relation="usage">
          <edgelabel>cdo</edgelabel>
        </childnode>
        <childnode refid="778" relation="usage">
          <edgelabel>casm</edgelabel>
        </childnode>
        <childnode refid="780" relation="usage">
          <edgelabel>cblock</edgelabel>
        </childnode>
        <childnode refid="782" relation="usage">
          <edgelabel>creturn</edgelabel>
        </childnode>
        <childnode refid="783" relation="usage">
          <edgelabel>cif</edgelabel>
        </childnode>
        <childnode refid="784" relation="usage">
          <edgelabel>cgoto</edgelabel>
        </childnode>
      </node>
      <node id="760">
        <label>qvector&lt; simpleline_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="720">
        <label>mlist_t</label>
        <link refid="structmlist__t"/>
        <childnode refid="717" relation="usage">
          <edgelabel>mem</edgelabel>
        </childnode>
        <childnode refid="721" relation="usage">
          <edgelabel>reg</edgelabel>
        </childnode>
      </node>
      <node id="746">
        <label>ivl_with_name_t</label>
        <link refid="structivl__with__name__t"/>
        <childnode refid="747" relation="usage">
          <edgelabel>ivl</edgelabel>
        </childnode>
      </node>
      <node id="734">
        <label>tinfo_t</label>
        <link refid="classtinfo__t"/>
      </node>
      <node id="780">
        <label>cblock_t</label>
        <link refid="structcblock__t"/>
        <childnode refid="781" relation="public-inheritance">
        </childnode>
      </node>
      <node id="781">
        <label>qlist&lt; cinsn_t &gt;</label>
        <link refid="classqlist"/>
      </node>
      <node id="736">
        <label>mop_addr_t</label>
        <link refid="classmop__addr__t"/>
        <childnode refid="727" relation="public-inheritance">
        </childnode>
      </node>
      <node id="758">
        <label>netnode</label>
        <link refid="classnetnode"/>
      </node>
      <node id="774">
        <label>ccases_t</label>
        <link refid="structccases__t"/>
        <childnode refid="775" relation="public-inheritance">
        </childnode>
      </node>
      <node id="740">
        <label>qvector&lt; mop_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="717">
        <label>ivlset_t</label>
        <link refid="structivlset__t"/>
        <childnode refid="718" relation="public-inheritance">
        </childnode>
      </node>
      <node id="767">
        <label>carglist_t</label>
        <link refid="structcarglist__t"/>
        <childnode refid="768" relation="public-inheritance">
        </childnode>
        <childnode refid="734" relation="usage">
          <edgelabel>functype</edgelabel>
        </childnode>
      </node>
      <node id="725">
        <label>mblock_t</label>
        <link refid="classmblock__t"/>
        <childnode refid="713" relation="usage">
          <edgelabel>mba</edgelabel>
        </childnode>
        <childnode refid="720" relation="usage">
          <edgelabel>maybuse</edgelabel>
          <edgelabel>dnu</edgelabel>
          <edgelabel>maybdef</edgelabel>
          <edgelabel>mustbuse</edgelabel>
          <edgelabel>mustbdef</edgelabel>
          <edgelabel>dead_at_start</edgelabel>
        </childnode>
        <childnode refid="723" relation="usage">
          <edgelabel>succset</edgelabel>
          <edgelabel>predset</edgelabel>
        </childnode>
        <childnode refid="726" relation="usage">
          <edgelabel>head</edgelabel>
          <edgelabel>tail</edgelabel>
        </childnode>
        <childnode refid="725" relation="usage">
          <edgelabel>nextb</edgelabel>
          <edgelabel>prevb</edgelabel>
        </childnode>
      </node>
      <node id="757">
        <label>rangevec_base_t</label>
        <link refid="classqvector"/>
      </node>
      <node id="776">
        <label>cfor_t</label>
        <link refid="structcfor__t"/>
        <childnode refid="771" relation="public-inheritance">
        </childnode>
        <childnode refid="764" relation="usage">
          <edgelabel>step</edgelabel>
          <edgelabel>init</edgelabel>
        </childnode>
      </node>
      <node id="743">
        <label>operand_locator_t</label>
        <link refid="structoperand__locator__t"/>
      </node>
      <node id="765">
        <label>cnumber_t</label>
        <link refid="structcnumber__t"/>
        <childnode refid="766" relation="usage">
          <edgelabel>nf</edgelabel>
        </childnode>
      </node>
      <node id="719">
        <label>qvector&lt; ivl_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="712">
        <label>qvector&lt; citem_t * &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="744">
        <label>mcases_t</label>
        <link refid="classmcases__t"/>
        <childnode refid="723" relation="usage">
          <edgelabel>targets</edgelabel>
        </childnode>
      </node>
      <node id="739">
        <label>qvector&lt; mcallarg_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="770">
        <label>cwhile_t</label>
        <link refid="structcwhile__t"/>
        <childnode refid="771" relation="public-inheritance">
        </childnode>
      </node>
      <node id="782">
        <label>creturn_t</label>
        <link refid="structcreturn__t"/>
        <childnode refid="772" relation="public-inheritance">
        </childnode>
      </node>
      <node id="750">
        <label>func_t</label>
        <link refid="classfunc__t"/>
        <childnode refid="751" relation="public-inheritance">
        </childnode>
        <childnode refid="752" relation="usage">
          <edgelabel>regargs</edgelabel>
        </childnode>
        <childnode refid="753" relation="usage">
          <edgelabel>points</edgelabel>
        </childnode>
        <childnode refid="751" relation="usage">
          <edgelabel>tails</edgelabel>
        </childnode>
        <childnode refid="754" relation="usage">
          <edgelabel>regvars</edgelabel>
        </childnode>
        <childnode refid="755" relation="usage">
          <edgelabel>llabels</edgelabel>
        </childnode>
      </node>
      <node id="727">
        <label>mop_t</label>
        <link refid="classmop__t"/>
        <childnode refid="728" relation="usage">
          <edgelabel>scif</edgelabel>
        </childnode>
        <childnode refid="735" relation="usage">
          <edgelabel>fpc</edgelabel>
        </childnode>
        <childnode refid="736" relation="usage">
          <edgelabel>a</edgelabel>
        </childnode>
        <childnode refid="737" relation="usage">
          <edgelabel>pair</edgelabel>
        </childnode>
        <childnode refid="738" relation="usage">
          <edgelabel>f</edgelabel>
        </childnode>
        <childnode refid="726" relation="usage">
          <edgelabel>d</edgelabel>
        </childnode>
        <childnode refid="741" relation="usage">
          <edgelabel>l</edgelabel>
        </childnode>
        <childnode refid="742" relation="usage">
          <edgelabel>nnn</edgelabel>
        </childnode>
        <childnode refid="744" relation="usage">
          <edgelabel>c</edgelabel>
        </childnode>
        <childnode refid="745" relation="usage">
          <edgelabel>s</edgelabel>
        </childnode>
      </node>
      <node id="761">
        <label>qvector&lt; T &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="779">
        <label>eavec_t</label>
        <link refid="classqvector"/>
      </node>
      <node id="737">
        <label>mop_pair_t</label>
        <link refid="classmop__pair__t"/>
        <childnode refid="727" relation="usage">
          <edgelabel>hop</edgelabel>
          <edgelabel>lop</edgelabel>
        </childnode>
      </node>
      <node id="769">
        <label>var_ref_t</label>
        <link refid="structvar__ref__t"/>
        <childnode refid="713" relation="usage">
          <edgelabel>mba</edgelabel>
        </childnode>
      </node>
      <node id="778">
        <label>casm_t</label>
        <link refid="structcasm__t"/>
        <childnode refid="779" relation="public-inheritance">
        </childnode>
      </node>
      <node id="752">
        <label>regarg_t</label>
        <link refid="structregarg__t"/>
      </node>
      <node id="764">
        <label>cexpr_t</label>
        <link refid="structcexpr__t"/>
        <childnode refid="763" relation="public-inheritance">
        </childnode>
        <childnode refid="764" relation="usage">
          <edgelabel>x</edgelabel>
          <edgelabel>y</edgelabel>
          <edgelabel>z</edgelabel>
        </childnode>
        <childnode refid="735" relation="usage">
          <edgelabel>fpc</edgelabel>
        </childnode>
        <childnode refid="765" relation="usage">
          <edgelabel>n</edgelabel>
        </childnode>
        <childnode refid="767" relation="usage">
          <edgelabel>a</edgelabel>
        </childnode>
        <childnode refid="734" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
        <childnode refid="762" relation="usage">
          <edgelabel>insn</edgelabel>
        </childnode>
        <childnode refid="769" relation="usage">
          <edgelabel>v</edgelabel>
        </childnode>
      </node>
      <node id="775">
        <label>qvector&lt; ccase_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="766">
        <label>number_format_t</label>
        <link refid="structnumber__format__t"/>
        <childnode refid="716" relation="usage">
          <edgelabel>type_name</edgelabel>
        </childnode>
      </node>
      <node id="735">
        <label>fnumber_t</label>
        <link refid="structfnumber__t"/>
      </node>
      <node id="713">
        <label>mbl_array_t</label>
        <link refid="classmbl__array__t"/>
        <childnode refid="714" relation="usage">
          <edgelabel>vars</edgelabel>
        </childnode>
        <childnode refid="716" relation="usage">
          <edgelabel>label</edgelabel>
          <edgelabel>error_strarg</edgelabel>
        </childnode>
        <childnode refid="717" relation="usage">
          <edgelabel>gotoff_stkvars</edgelabel>
          <edgelabel>restricted_memory</edgelabel>
          <edgelabel>aliased_memory</edgelabel>
        </childnode>
        <childnode refid="720" relation="usage">
          <edgelabel>spoiled_list</edgelabel>
          <edgelabel>nodel_memory</edgelabel>
        </childnode>
        <childnode refid="723" relation="usage">
          <edgelabel>argidx</edgelabel>
        </childnode>
        <childnode refid="724" relation="usage">
          <edgelabel>idb_spoiled</edgelabel>
        </childnode>
        <childnode refid="725" relation="usage">
          <edgelabel>blocks</edgelabel>
          <edgelabel>natural</edgelabel>
        </childnode>
        <childnode refid="721" relation="usage">
          <edgelabel>consumed_argregs</edgelabel>
        </childnode>
        <childnode refid="746" relation="usage">
          <edgelabel>std_ivls</edgelabel>
        </childnode>
        <childnode refid="734" relation="usage">
          <edgelabel>idb_type</edgelabel>
        </childnode>
        <childnode refid="749" relation="usage">
          <edgelabel>mbr</edgelabel>
        </childnode>
        <childnode refid="758" relation="usage">
          <edgelabel>idb_node</edgelabel>
        </childnode>
        <childnode refid="759" relation="usage">
          <edgelabel>notes</edgelabel>
        </childnode>
        <childnode refid="747" relation="usage">
          <edgelabel>aliased_args</edgelabel>
          <edgelabel>aliased_vars</edgelabel>
        </childnode>
      </node>
      <node id="738">
        <label>mcallinfo_t</label>
        <link refid="classmcallinfo__t"/>
        <childnode refid="717" relation="usage">
          <edgelabel>visible_memory</edgelabel>
        </childnode>
        <childnode refid="720" relation="usage">
          <edgelabel>pass_regs</edgelabel>
          <edgelabel>spoiled</edgelabel>
          <edgelabel>dead_regs</edgelabel>
          <edgelabel>return_regs</edgelabel>
        </childnode>
        <childnode refid="739" relation="usage">
          <edgelabel>args</edgelabel>
        </childnode>
        <childnode refid="734" relation="usage">
          <edgelabel>return_type</edgelabel>
        </childnode>
        <childnode refid="740" relation="usage">
          <edgelabel>retregs</edgelabel>
        </childnode>
        <childnode refid="730" relation="usage">
          <edgelabel>return_argloc</edgelabel>
        </childnode>
      </node>
      <node id="749">
        <label>mba_ranges_t</label>
        <link refid="structmba__ranges__t"/>
        <childnode refid="750" relation="usage">
          <edgelabel>pfn</edgelabel>
        </childnode>
        <childnode refid="756" relation="usage">
          <edgelabel>ranges</edgelabel>
        </childnode>
      </node>
      <node id="718">
        <label>ivlset_tpl&lt; ivl_t, uval_t &gt;</label>
        <link refid="classivlset__tpl"/>
        <childnode refid="719" relation="usage">
          <edgelabel>bag</edgelabel>
        </childnode>
      </node>
      <node id="773">
        <label>cswitch_t</label>
        <link refid="structcswitch__t"/>
        <childnode refid="772" relation="public-inheritance">
        </childnode>
        <childnode refid="774" relation="usage">
          <edgelabel>cases</edgelabel>
        </childnode>
        <childnode refid="765" relation="usage">
          <edgelabel>mvnf</edgelabel>
        </childnode>
      </node>
      <node id="728">
        <label>scif_t</label>
        <link refid="structscif__t"/>
        <childnode refid="729" relation="public-inheritance">
        </childnode>
        <childnode refid="713" relation="usage">
          <edgelabel>mba</edgelabel>
        </childnode>
        <childnode refid="716" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="734" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
      </node>
      <node id="723">
        <label>qvector&lt; int &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="753">
        <label>stkpnt_t</label>
        <link refid="structstkpnt__t"/>
      </node>
      <node id="716">
        <label>_qstring&lt; char &gt;</label>
        <link refid="class__qstring"/>
      </node>
      <node id="768">
        <label>qvector&lt; carg_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="726">
        <label>minsn_t</label>
        <link refid="classminsn__t"/>
        <childnode refid="726" relation="usage">
          <edgelabel>prev</edgelabel>
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="727" relation="usage">
          <edgelabel>l</edgelabel>
          <edgelabel>r</edgelabel>
          <edgelabel>d</edgelabel>
        </childnode>
      </node>
      <node id="763">
        <label>citem_t</label>
        <link refid="structcitem__t"/>
      </node>
      <node id="731">
        <label>scattered_aloc_t</label>
        <link refid="classscattered__aloc__t"/>
        <childnode refid="732" relation="public-inheritance">
        </childnode>
      </node>
      <node id="732">
        <label>qvector&lt; argpart_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="751">
        <label>range_t</label>
        <link refid="structrange__t"/>
      </node>
      <node id="729">
        <label>vdloc_t</label>
        <link refid="classvdloc__t"/>
        <childnode refid="730" relation="public-inheritance">
        </childnode>
      </node>
      <node id="754">
        <label>regvar_t</label>
        <link refid="structregvar__t"/>
        <childnode refid="751" relation="public-inheritance">
        </childnode>
      </node>
      <node id="759">
        <label>qvector&lt; hexwarn_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="742">
        <label>mnumber_t</label>
        <link refid="structmnumber__t"/>
        <childnode refid="743" relation="public-inheritance">
        </childnode>
      </node>
      <node id="714">
        <label>lvars_t</label>
        <link refid="structlvars__t"/>
        <childnode refid="715" relation="public-inheritance">
        </childnode>
      </node>
      <node id="730">
        <label>argloc_t</label>
        <link refid="classargloc__t"/>
        <childnode refid="731" relation="usage">
          <edgelabel>dist</edgelabel>
        </childnode>
        <childnode refid="733" relation="usage">
          <edgelabel>rrel</edgelabel>
        </childnode>
      </node>
      <node id="784">
        <label>cgoto_t</label>
        <link refid="structcgoto__t"/>
      </node>
      <node id="755">
        <label>llabel_t</label>
        <link refid="structllabel__t"/>
      </node>
      <node id="741">
        <label>lvar_ref_t</label>
        <link refid="structlvar__ref__t"/>
        <childnode refid="713" relation="usage">
          <edgelabel>mba</edgelabel>
        </childnode>
      </node>
      <node id="715">
        <label>qvector&lt; lvar_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="745">
        <label>stkvar_ref_t</label>
        <link refid="structstkvar__ref__t"/>
        <childnode refid="713" relation="usage">
          <edgelabel>mba</edgelabel>
        </childnode>
      </node>
      <node id="724">
        <label>qvector&lt; reg_info_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="733">
        <label>rrel_t</label>
        <link refid="structrrel__t"/>
      </node>
      <node id="777">
        <label>cdo_t</label>
        <link refid="structcdo__t"/>
        <childnode refid="771" relation="public-inheritance">
        </childnode>
      </node>
      <node id="772">
        <label>ceinsn_t</label>
        <link refid="structceinsn__t"/>
        <childnode refid="764" relation="usage">
          <edgelabel>expr</edgelabel>
        </childnode>
      </node>
      <node id="721">
        <label>rlist_t</label>
        <link refid="classrlist__t"/>
        <childnode refid="722" relation="public-inheritance">
        </childnode>
      </node>
      <node id="783">
        <label>cif_t</label>
        <link refid="structcif__t"/>
        <childnode refid="772" relation="public-inheritance">
        </childnode>
        <childnode refid="762" relation="usage">
          <edgelabel>ithen</edgelabel>
          <edgelabel>ielse</edgelabel>
        </childnode>
      </node>
      <node id="771">
        <label>cloop_t</label>
        <link refid="structcloop__t"/>
        <childnode refid="772" relation="public-inheritance">
        </childnode>
        <childnode refid="762" relation="usage">
          <edgelabel>body</edgelabel>
        </childnode>
      </node>
      <node id="747">
        <label>ivl_t</label>
        <link refid="structivl__t"/>
        <childnode refid="748" relation="public-inheritance">
        </childnode>
        <childnode refid="747" relation="usage">
          <edgelabel>allmem</edgelabel>
        </childnode>
      </node>
      <node id="711">
        <label>cfunc_t</label>
        <link refid="structcfunc__t"/>
        <childnode refid="712" relation="usage">
          <edgelabel>treeitems</edgelabel>
        </childnode>
        <childnode refid="713" relation="usage">
          <edgelabel>mba</edgelabel>
        </childnode>
        <childnode refid="760" relation="usage">
          <edgelabel>sv</edgelabel>
        </childnode>
        <childnode refid="761" relation="usage">
          <edgelabel>argidx</edgelabel>
        </childnode>
        <childnode refid="762" relation="usage">
          <edgelabel>body</edgelabel>
        </childnode>
      </node>
      <node id="756">
        <label>rangevec_t</label>
        <link refid="structrangevec__t"/>
        <childnode refid="757" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="6409" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="6408" bodyend="6579"/>
    <listofallmembers>
      <member refid="structcfunc__t_1a7756f54b10d8682348967969dc8ad83f" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>argidx</name></member>
      <member refid="structcfunc__t_1ad625fe1f26c6ed7e640f338850eb3860" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>body</name></member>
      <member refid="structcfunc__t_1a7d564bc91aeade9ff2f5cb307fc5113b" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>boundaries</name></member>
      <member refid="structcfunc__t_1a35a7aafff6af24cfc59649f6f592634e" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>build_c_tree</name></member>
      <member refid="structcfunc__t_1ab66d5c583aa0f2ac46421fe7dc2e9841" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>cfunc_t</name></member>
      <member refid="structcfunc__t_1ae350bde5483aca1ad2f3e1d52161c62f" prot="private" virt="non-virtual"><scope>cfunc_t</scope><name>cleanup</name></member>
      <member refid="structcfunc__t_1a8edb7f75cc636bc60d5d523e36b04bf8" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>del_orphan_cmts</name></member>
      <member refid="structcfunc__t_1a5b4c46d19262d058d1bbef63cefd538a" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>eamap</name></member>
      <member refid="structcfunc__t_1ad05afa3ba925dd66f9b9832865200cdc" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>entry_ea</name></member>
      <member refid="structcfunc__t_1ad50faba04fca2aef57c4ab8bf46944e7" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>find_item_coords</name></member>
      <member refid="structcfunc__t_1a964493102162faea1f5d5673d42f1d39" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>find_label</name></member>
      <member refid="structcfunc__t_1aab634c20ce794def5ed56fa312ee11a6" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>gather_derefs</name></member>
      <member refid="structcfunc__t_1a366e580718e0fd10e9d87a4670d07e8e" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>get_boundaries</name></member>
      <member refid="structcfunc__t_1a776c6ac9ad01f7b9fdb746167ee78c22" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>get_eamap</name></member>
      <member refid="structcfunc__t_1af11df93f2258a30cd27e1896956015c9" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>get_func_type</name></member>
      <member refid="structcfunc__t_1a3b0bca6c157187d0dfbe5d3e9dc134db" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>get_line_item</name></member>
      <member refid="structcfunc__t_1aca8f5219c5a45d7740bd0cc85a484c77" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>get_lvars</name></member>
      <member refid="structcfunc__t_1a913af4f3aad3e024518fa1169154309d" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>get_pseudocode</name></member>
      <member refid="structcfunc__t_1aa047e230da22f5cc54b9c209a611646d" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>get_stkoff_delta</name></member>
      <member refid="structcfunc__t_1a10706b042b122094164075a3b5bca142" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>get_user_cmt</name></member>
      <member refid="structcfunc__t_1afde4549cbcf97aa0b3fe486ec947e57f" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>get_user_iflags</name></member>
      <member refid="structcfunc__t_1a9d09a019bb1233ac0598f13ebdaf142c" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>get_user_union_selection</name></member>
      <member refid="structcfunc__t_1ab8b548fbe35bddb65bf4565ff373089d" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>get_warnings</name></member>
      <member refid="structcfunc__t_1a4a37f6a5a5abfe37a0ad80be821c1f20" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>has_orphan_cmts</name></member>
      <member refid="structcfunc__t_1a5324f1bcfdcd089cfd54f272123ce5bd" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>hdrlines</name></member>
      <member refid="structcfunc__t_1a7105bc7f76feb7a6827fe42e84616417" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>maturity</name></member>
      <member refid="structcfunc__t_1a096dc4e6bb0ae959dddb5ca7abf68d50" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>mba</name></member>
      <member refid="structcfunc__t_1a69ff81fbb85c423005ca7fc3dcdeb1d6" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>numforms</name></member>
      <member refid="structcfunc__t_1a5836654444c75d691d73ad0a94972b78" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>print_dcl</name></member>
      <member refid="structcfunc__t_1a27e97a1b29aa820db4b2bc29f0f0c5b2" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>print_func</name></member>
      <member refid="structcfunc__t_1a990b11ccc1ccf3435d70bbe2e06444c6" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>refcnt</name></member>
      <member refid="structcfunc__t_1a1239b4763b2b657f510670decca8f4c1" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>release</name></member>
      <member refid="structcfunc__t_1af71a25ad79746336fefa8a60c91053fe" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>remove_unused_labels</name></member>
      <member refid="structcfunc__t_1a5750da6d0b4a3dfc9e606ecbe565ee65" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>save_user_cmts</name></member>
      <member refid="structcfunc__t_1aa8ff9e9b988d8ffb581071b528b77fbd" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>save_user_iflags</name></member>
      <member refid="structcfunc__t_1a4f55dbb78f75c9ae2b80c430f06d4285" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>save_user_labels</name></member>
      <member refid="structcfunc__t_1a716776ab6c8cdfdd061b087735dfdaf6" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>save_user_numforms</name></member>
      <member refid="structcfunc__t_1aff030667d4614fb6f7a5fe6e92ca02ea" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>save_user_unions</name></member>
      <member refid="structcfunc__t_1ac69c7a795de52c7858c88084dae91fa6" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>set_user_cmt</name></member>
      <member refid="structcfunc__t_1a4cfa4cda48eaf9271556f7787cf05ad4" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>set_user_iflags</name></member>
      <member refid="structcfunc__t_1a036da2431075de87930cc749e9063fca" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>set_user_union_selection</name></member>
      <member refid="structcfunc__t_1a7ff4bcf31d5c69718badb20fff1d9759" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>statebits</name></member>
      <member refid="structcfunc__t_1a225b99917d27f6e52ea3841b4c39c246" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>sv</name></member>
      <member refid="structcfunc__t_1ab7322ac4333bfe68317155d118ef7ce7" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>treeitems</name></member>
      <member refid="structcfunc__t_1a0b88f1f919aabc064f5a733da0b5f594" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>user_cmts</name></member>
      <member refid="structcfunc__t_1a42c8b41cd45bd3cb747d8b2845c75ecc" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>user_iflags</name></member>
      <member refid="structcfunc__t_1a98ed8124970f6a5c55b23588fa5c0a39" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>user_labels</name></member>
      <member refid="structcfunc__t_1a0bfa2bb42fdc6fab28b20ff5aa5cde51" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>user_unions</name></member>
      <member refid="structcfunc__t_1ade32ec1d399185e7fabc7f4bc1066a75" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>verify</name></member>
      <member refid="structcfunc__t_1ac717f3fbc083bf624ae3605531f8386e" prot="public" virt="non-virtual"><scope>cfunc_t</scope><name>~cfunc_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
