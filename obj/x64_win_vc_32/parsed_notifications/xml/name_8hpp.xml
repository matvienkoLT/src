<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="name_8hpp" kind="file" language="C++">
    <compoundname>name.hpp</compoundname>
    <includes refid="ida_8hpp" local="no">ida.hpp</includes>
    <includedby refid="typeinf_8hpp" local="no">obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp</includedby>
    <incdepgraph>
      <node id="1068">
        <label>sys/stat.h</label>
      </node>
      <node id="1052">
        <label>stdarg.h</label>
      </node>
      <node id="1055">
        <label>assert.h</label>
      </node>
      <node id="1049">
        <label>ida.hpp</label>
        <link refid="ida_8hpp"/>
        <childnode refid="1050" relation="include">
        </childnode>
        <childnode refid="1070" relation="include">
        </childnode>
      </node>
      <node id="1051">
        <label>stdlib.h</label>
      </node>
      <node id="1063">
        <label>io.h</label>
      </node>
      <node id="1066">
        <label>fcntl.h</label>
      </node>
      <node id="1069">
        <label>llong.hpp</label>
        <link refid="llong_8hpp_source"/>
      </node>
      <node id="1061">
        <label>malloc.h</label>
      </node>
      <node id="1060">
        <label>string</label>
      </node>
      <node id="1065">
        <label>map</label>
      </node>
      <node id="1064">
        <label>direct.h</label>
      </node>
      <node id="1053">
        <label>stddef.h</label>
      </node>
      <node id="1048">
        <label>obj/x64_linux_gcc_32_opt/idasdk/name.hpp</label>
        <link refid="name_8hpp"/>
        <childnode refid="1049" relation="include">
        </childnode>
      </node>
      <node id="1056">
        <label>limits.h</label>
      </node>
      <node id="1067">
        <label>sys/types.h</label>
      </node>
      <node id="1062">
        <label>string.h</label>
      </node>
      <node id="1059">
        <label>new</label>
      </node>
      <node id="1050">
        <label>pro.h</label>
        <link refid="pro_8h"/>
        <childnode refid="1051" relation="include">
        </childnode>
        <childnode refid="1052" relation="include">
        </childnode>
        <childnode refid="1053" relation="include">
        </childnode>
        <childnode refid="1054" relation="include">
        </childnode>
        <childnode refid="1055" relation="include">
        </childnode>
        <childnode refid="1056" relation="include">
        </childnode>
        <childnode refid="1057" relation="include">
        </childnode>
        <childnode refid="1058" relation="include">
        </childnode>
        <childnode refid="1059" relation="include">
        </childnode>
        <childnode refid="1060" relation="include">
        </childnode>
        <childnode refid="1061" relation="include">
        </childnode>
        <childnode refid="1062" relation="include">
        </childnode>
        <childnode refid="1063" relation="include">
        </childnode>
        <childnode refid="1064" relation="include">
        </childnode>
        <childnode refid="1065" relation="include">
        </childnode>
        <childnode refid="1066" relation="include">
        </childnode>
        <childnode refid="1067" relation="include">
        </childnode>
        <childnode refid="1068" relation="include">
        </childnode>
        <childnode refid="1069" relation="include">
        </childnode>
      </node>
      <node id="1058">
        <label>time.h</label>
      </node>
      <node id="1057">
        <label>ctype.h</label>
      </node>
      <node id="1070">
        <label>range.hpp</label>
        <link refid="range_8hpp"/>
      </node>
      <node id="1054">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1075">
        <label>obj/x64_linux_gcc_32_opt/idasdk/intel.hpp</label>
        <link refid="intel_8hpp_source"/>
      </node>
      <node id="1071">
        <label>obj/x64_linux_gcc_32_opt/idasdk/name.hpp</label>
        <link refid="name_8hpp"/>
        <childnode refid="1072" relation="include">
        </childnode>
      </node>
      <node id="1072">
        <label>obj/x64_linux_gcc_32_opt/idasdk/typeinf.hpp</label>
        <link refid="typeinf_8hpp"/>
        <childnode refid="1073" relation="include">
        </childnode>
        <childnode refid="1074" relation="include">
        </childnode>
        <childnode refid="1075" relation="include">
        </childnode>
      </node>
      <node id="1074">
        <label>obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp</label>
        <link refid="hexrays_8hpp_source"/>
      </node>
      <node id="1073">
        <label>obj/x64_linux_gcc_32_opt/idasdk/lumina.hpp</label>
        <link refid="lumina_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structgetname__info__t" prot="public">getname_info_t</innerclass>
    <innerclass refid="structea__name__t" prot="public">ea_name_t</innerclass>
      <sectiondef kind="user-defined">
      <header>Delete a name of a program item</header>
      <description><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok, name is deleted </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>failure, invalid address </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></description>
      <memberdef kind="function" id="name_8hpp_1a40259b9687b2e45798e5dc439d24b6d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool del_global_name</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>del_global_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="96" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1abc47ae3db754c532ad98c1aa49ca5d9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool del_local_name</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>del_local_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="97" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="97" bodyend="97"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Set/Clear bit in flags for &apos;autogenerated but meaningful name&apos;</header>
      <description><para>This bit affects value of <ref refid="group___f_f__statespecf_1ga85d4e8aefc0c09fe2d2da36956314dd5" kindref="member">has_user_name()</ref>, <ref refid="group___f_f__statespecf_1gaf532d282f0e3e784897d4ed4ceaf9581" kindref="member">has_auto_name()</ref> functions. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>no meaningful name is present at the specified address </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></description>
      <memberdef kind="function" id="name_8hpp_1a2d8da22d2983d1afb5e40f0bfc99a2eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export make_name_auto</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>make_name_auto</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a288047cb739f54c49cb0f5b09a334b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export make_name_user</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>make_name_user</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="117" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Work with publicness of a name</header>
      <memberdef kind="function" id="name_8hpp_1a3025d6af37336d312cde70d55e31c35c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_public_name</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>is_public_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="607" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1aa0ff78eb1604b37f3dcad2fd68a50f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export make_name_public</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>make_name_public</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="608" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1afa2b3fb8776e0b9e665d8080be27c767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export make_name_non_public</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>make_name_non_public</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="609" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Work with weak names.</header>
      <memberdef kind="function" id="name_8hpp_1a2e3710e212d4ae4211994a48146011f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_weak_name</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>is_weak_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="615" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1ae376f4da9664b9f9b93c969f35ebbbc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export make_name_weak</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>make_name_weak</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="616" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a4fae415f3714ca7bb96a894483953b48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export make_name_non_weak</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>make_name_non_weak</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="617" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Work with the list of names</header>
      <memberdef kind="function" id="name_8hpp_1a59799ac73e4ae519643bfde48dd02fb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman size_t ida_export</type>
        <definition>idaman size_t ida_export get_nlist_size</definition>
        <argsstring>(void)</argsstring>
        <name>get_nlist_size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number of names in the list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a571b1f7ad5b466b232fd22d8f63a1d0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman size_t ida_export</type>
        <definition>idaman size_t ida_export get_nlist_idx</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>get_nlist_idx</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get index of the name in the list <simplesect kind="warning"><para>returns the closest match. may return idx &gt;= size. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="631" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a398e166b60176265fa4066f17359a0d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_in_nlist</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>is_in_nlist</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Is name included into names list? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="635" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a8d7750bac059fcd9c476c1dfde964357" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_nlist_ea</definition>
        <argsstring>(size_t idx)</argsstring>
        <name>get_nlist_ea</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get address from the list at &apos;idx&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="639" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1afefc7604b355e26debcedf1eeeb2cea6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman const char *ida_export</type>
        <definition>idaman const char* ida_export get_nlist_name</definition>
        <argsstring>(size_t idx)</argsstring>
        <name>get_nlist_name</name>
        <param>
          <type>size_t</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Get name using idx. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="643" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1ae0c4fd5dd29e834a7c35d5ccfefb84ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export rebuild_nlist</definition>
        <argsstring>(void)</argsstring>
        <name>rebuild_nlist</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Rebuild names list. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="647" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Debug names</header>
      <description><para>Debug names exist during the debugging session. The kernel does not verify them for anything and happily accepts any string as a name. </para></description>
      <memberdef kind="function" id="name_8hpp_1aa244e9ea1eb8f4b93fac3974dea6a9f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export set_debug_names</definition>
        <argsstring>(const ea_t *addrs, const char *const *names, int qty)</argsstring>
        <name>set_debug_names</name>
        <param>
          <type>const ea_t *</type>
          <declname>addrs</declname>
        </param>
        <param>
          <type>const char *const *</type>
          <declname>names</declname>
        </param>
        <param>
          <type>int</type>
          <declname>qty</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="679" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a45ca5f6570272ce65f7e4d2ebef00edc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_debug_name</definition>
        <argsstring>(ea_t ea, const char *name)</argsstring>
        <name>set_debug_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="680" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1aee67bb690cf96a69917ad7278e91735e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_debug_name</definition>
        <argsstring>(qstring *out, ea_t *ea_ptr, debug_name_how_t how)</argsstring>
        <name>get_debug_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t *</type>
          <declname>ea_ptr</declname>
        </param>
        <param>
          <type><ref refid="name_8hpp_1ab2ce188a7de5d24751a51619142bc3cd" kindref="member">debug_name_how_t</ref></type>
          <declname>how</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="681" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a88a3f5605e8e4fb8be15a77cbcb80593" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export del_debug_names</definition>
        <argsstring>(ea_t ea1, ea_t ea2)</argsstring>
        <name>del_debug_names</name>
        <param>
          <type>ea_t</type>
          <declname>ea1</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="685" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a26f185e2b6edba7d5a8737952f20a7df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_debug_name_ea</definition>
        <argsstring>(const char *name)</argsstring>
        <name>get_debug_name_ea</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="686" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1aa65ed57830ceaa0edcec48749302ebb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export get_debug_names</definition>
        <argsstring>(ea_name_vec_t *names, ea_t ea1, ea_t ea2)</argsstring>
        <name>get_debug_names</name>
        <param>
          <type><ref refid="name_8hpp_1a0a08d5152cc3fcc5cba155b300892674" kindref="member">ea_name_vec_t</ref> *</type>
          <declname>names</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea1</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="687" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="name_8hpp_1a56739a38cf3fb0c5d7d842fe94f96f86" prot="public" static="no">
        <name>MAXNAMELEN</name>
        <initializer>512</initializer>
        <briefdescription>
<para>Maximum length of a name in IDA (with the trailing zero) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="27" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="name_8hpp_1a9d81345c315a8aeedfdf7fc00496d395" prot="public" static="no">
        <name>FUNC_IMPORT_PREFIX</name>
        <initializer>&quot;__imp_&quot;</initializer>
        <briefdescription>
<para>Name prefix used by IDA for the imported functions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="31" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_n___1ga1458a641d26514c3464c986b74d003aa" prot="public" static="no">
        <name>SN_CHECK</name>
        <initializer>0x00</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="57" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_n___1gad7882b24fb8463d16e80274851e0e203" prot="public" static="no">
        <name>SN_NOCHECK</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Don&apos;t fail if the name contains invalid characters. If this bit is clear, all invalid chars (those !is_ident_cp()) will be replaced by SUBSTCHAR List of valid characters is defined in ida.cfg </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="58" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_n___1ga0867a80ae5531d5a6f37e9b8ca2078d8" prot="public" static="no">
        <name>SN_PUBLIC</name>
        <initializer>0x02</initializer>
        <briefdescription>
<para>if set, make name public </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="63" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_n___1gaa682721856e47459dd83249ce69e84f4" prot="public" static="no">
        <name>SN_NON_PUBLIC</name>
        <initializer>0x04</initializer>
        <briefdescription>
<para>if set, make name non-public </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="64" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_n___1ga6a3e06b901908b81c01a9f0062e9b71b" prot="public" static="no">
        <name>SN_WEAK</name>
        <initializer>0x08</initializer>
        <briefdescription>
<para>if set, make name weak </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="65" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_n___1ga3dc2cae373dd31ec2dc329afbaf0d3e9" prot="public" static="no">
        <name>SN_NON_WEAK</name>
        <initializer>0x10</initializer>
        <briefdescription>
<para>if set, make name non-weak </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="66" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_n___1ga649469af3f3ed0924be751921e29d60e" prot="public" static="no">
        <name>SN_AUTO</name>
        <initializer>0x20</initializer>
        <briefdescription>
<para>if set, make name autogenerated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="67" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_n___1ga5839893e37d57ecdea4964f844ed019d" prot="public" static="no">
        <name>SN_NON_AUTO</name>
        <initializer>0x40</initializer>
        <briefdescription>
<para>if set, make name non-autogenerated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="68" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_n___1ga68ba63b7a7a9a881df414b7bfdce7447" prot="public" static="no">
        <name>SN_NOLIST</name>
        <initializer>0x80</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if set, exclude name from the list. if not set, then include the name into the list (however, if other bits are set, the name might be immediately excluded from the list). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="69" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_n___1ga84c416eb3ed6bc386932d8da15bb134b" prot="public" static="no">
        <name>SN_NOWARN</name>
        <initializer>0x100</initializer>
        <briefdescription>
<para>don&apos;t display a warning if failed </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="74" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_n___1ga6052ebef5e57c6e905fe9f902188401d" prot="public" static="no">
        <name>SN_LOCAL</name>
        <initializer>0x200</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>create local name. a function should exist. local names can&apos;t be public or weak. also they are not included into the list of names they can&apos;t have dummy prefixes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="75" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_n___1gabb4de680eb13eaaf581e4082ce7524f3" prot="public" static="no">
        <name>SN_IDBENC</name>
        <initializer>0x400</initializer>
        <briefdescription>
<para>non-ASCII bytes will be decoded accordingly </para>        </briefdescription>
        <detaileddescription>
<para>the name is given in the IDB encoding; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="79" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___s_n___1gabdc1743c42551da5864b7073b41438f8" prot="public" static="no">
        <name>SN_FORCE</name>
        <initializer>0x800</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if the specified name is already present in the database, try variations with a numerical suffix like &quot;_123&quot; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="81" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t___1ga4de219a37da79e15eef267e9c2779c99" prot="public" static="no">
        <name>NT_NONE</name>
        <initializer>0</initializer>
        <briefdescription>
<para>name doesn&apos;t exist or has no value </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="273" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="273" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t___1ga7cb20321455bb23e97b9a01a7b894cfa" prot="public" static="no">
        <name>NT_BYTE</name>
        <initializer>1</initializer>
        <briefdescription>
<para>name is byte name (regular name) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="274" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t___1ga3f0fef47f0ff2129d0c97b6deac0ec84" prot="public" static="no">
        <name>NT_LOCAL</name>
        <initializer>2</initializer>
        <briefdescription>
<para>name is local label </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="275" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t___1ga8df1731f818635633fb4f778be4e0e0a" prot="public" static="no">
        <name>NT_STKVAR</name>
        <initializer>3</initializer>
        <briefdescription>
<para>name is stack variable name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="276" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t___1gab96c9ab46de6d8a989c982e94cd0c5b9" prot="public" static="no">
        <name>NT_ENUM</name>
        <initializer>4</initializer>
        <briefdescription>
<para>name is symbolic constant </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="277" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t___1ga6468e1435a25f7b2156f1be7eacc1e5e" prot="public" static="no">
        <name>NT_ABS</name>
        <initializer>5</initializer>
        <briefdescription>
<para>name is absolute symbol (<ref refid="group___s_e_g___1ga5c130d299e48ff537068e03e8ae23d71" kindref="member">SEG_ABSSYM</ref>) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="278" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t___1ga72908de84dbd9fe5cefe18ace88f484e" prot="public" static="no">
        <name>NT_SEG</name>
        <initializer>6</initializer>
        <briefdescription>
<para>name is segment or segment register name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="279" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="279" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t___1ga64c2fde5a1cbc8a7cf3da8b10bae1467" prot="public" static="no">
        <name>NT_STROFF</name>
        <initializer>7</initializer>
        <briefdescription>
<para>name is structure member </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="280" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="280" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t___1ga36fb600ff0ae72ab4ae0662e4a37f785" prot="public" static="no">
        <name>NT_BMASK</name>
        <initializer>8</initializer>
        <briefdescription>
<para>name is a bit group mask name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="281" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___n_t___1ga29201df21dd3954b735cbf0219b10781" prot="public" static="no">
        <name>NT_REGVAR</name>
        <initializer>9</initializer>
        <briefdescription>
<para>name is a renamed register (*value is idx into pfn-&gt;regvars) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="282" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="282" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n___1ga80ddb516744c3c8a33bac41c5f4ac819" prot="public" static="no">
        <name>GN_VISIBLE</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>replace forbidden characters by SUBSTCHAR </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="317" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n___1gaae1c5de165b2519941f5d2cd40f74d4c" prot="public" static="no">
        <name>GN_COLORED</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>return colored name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="318" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n___1gafa9c3a59e99c5c7460007521b2a29638" prot="public" static="no">
        <name>GN_DEMANGLED</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>return demangled name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="319" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n___1gaa7a436f17eead3c46517b66fd839618b" prot="public" static="no">
        <name>GN_STRICT</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>fail if can not demangle </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="320" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="320" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n___1ga495df041aa5fb753d624be86eb505c15" prot="public" static="no">
        <name>GN_SHORT</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para>use short form of demangled name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="321" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n___1ga0d5863fe8b0fb7e2611a256b1522c0c2" prot="public" static="no">
        <name>GN_LONG</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>use long form of demangled name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="322" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="322" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n___1gac0715adddc8d76104b20380d0f1622d3" prot="public" static="no">
        <name>GN_LOCAL</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para>try to get local name first; if failed, get global </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="323" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="323" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n___1gac32e0fd595f03d14856a3cb0d3ad3c97" prot="public" static="no">
        <name>GN_ISRET</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>for dummy names: use retloc </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="324" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n___1gaa1bc14f872a9e5f14dfe51d82f191367" prot="public" static="no">
        <name>GN_NOT_ISRET</name>
        <initializer>0x0100</initializer>
        <briefdescription>
<para>for dummy names: do not use retloc </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="325" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n___1gaaceacd365212162c953a17a1ed27be84" prot="public" static="no">
        <name>GN_NOT_DUMMY</name>
        <initializer>0x0200</initializer>
        <briefdescription>
<para>do not return a dummy name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="326" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_e_t_n___1ga1d81af73461e98bd691ef1337d72a018" prot="public" static="no">
        <name>GETN_APPZERO</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>append a struct field name if the field offset is zero? </para>        </briefdescription>
        <detaileddescription>
<para>meaningful only if the name refers to a structure. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="489" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="489" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_e_t_n___1gab02954d083735a275dab62ea9952e0a1" prot="public" static="no">
        <name>GETN_NOFIXUP</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>ignore the fixup information when producing the name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="491" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="491" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_e_t_n___1ga087e60e7f734e12197cbd6f3fd0238eb" prot="public" static="no">
        <name>GETN_NODUMMY</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>do not create a new dummy name but pretend it exists </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="492" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="492" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n_c_n___1ga44b6c1a0d3546db59f574c7e68b934da" prot="public" static="no">
        <name>GNCN_NOSEG</name>
        <initializer>0x0001</initializer>
        <briefdescription>
<para>ignore the segment prefix when producing the name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="543" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="543" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n_c_n___1ga76af16b8c4d15883f80523c618a15b2b" prot="public" static="no">
        <name>GNCN_NOCOLOR</name>
        <initializer>0x0002</initializer>
        <briefdescription>
<para>generate an uncolored name </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="544" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n_c_n___1ga552dbc7d9e0d506c4c0360c0f19d7d1a" prot="public" static="no">
        <name>GNCN_NOLABEL</name>
        <initializer>0x0004</initializer>
        <briefdescription>
<para>don&apos;t generate labels </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="545" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="545" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n_c_n___1ga2d69b354412585de23922860c32d0b96" prot="public" static="no">
        <name>GNCN_NOFUNC</name>
        <initializer>0x0008</initializer>
        <briefdescription>
<para>don&apos;t generate funcname+... expressions </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="546" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="546" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n_c_n___1ga62a1f20aa3defaea4e8a9416b2a276a9" prot="public" static="no">
        <name>GNCN_SEG_FUNC</name>
        <initializer>0x0010</initializer>
        <briefdescription>
<para>generate both segment and function names (default is to omit segment name if a function name is present) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="547" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="547" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n_c_n___1ga145d608439ef507a7c3d45d7aee1f292" prot="public" static="no">
        <name>GNCN_SEGNUM</name>
        <initializer>0x0020</initializer>
        <briefdescription>
<para>segment part is displayed as a hex number </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="548" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="548" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n_c_n___1ga628dd91bed5b223a3225d85a1e928f51" prot="public" static="no">
        <name>GNCN_REQFUNC</name>
        <initializer>0x0040</initializer>
        <briefdescription>
<para>return 0 if the address does not belong to a function </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="549" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="549" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n_c_n___1ga1fb1ec69833035cfef4b8efd7111ccdd" prot="public" static="no">
        <name>GNCN_REQNAME</name>
        <initializer>0x0080</initializer>
        <briefdescription>
<para>return 0 if the address can only be represented as a hex number </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="550" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="550" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n_c_n___1ga948d62d2ff4e200046a7aa62c49e4d4c" prot="public" static="no">
        <name>GNCN_NODBGNM</name>
        <initializer>0x0100</initializer>
        <briefdescription>
<para>don&apos;t use debug names </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="551" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="551" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group___g_n_c_n___1ga2605fc8cdf3194881c10f9925a10aa01" prot="public" static="no">
        <name>GNCN_PREFDBG</name>
        <initializer>0x0200</initializer>
        <briefdescription>
<para>if using debug names, prefer debug names over function names </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="552" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="552" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="name_8hpp_1ac223d46b7ab8f7f3cff17602e0d920a7" prot="public" static="no">
        <name>CN_KEEP_TRAILING__DIGITS</name>
        <initializer>0x01</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="772" column="9" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="772" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="name_8hpp_1aaf20e76cc52c1bd020f4534c17eb7fb6" prot="public" static="no">
        <name>ucdr_kind_t</name>
        <enumvalue id="name_8hpp_1aaf20e76cc52c1bd020f4534c17eb7fb6add2d409d859bc34348a1a0f73e1c6710" prot="public">
          <name>URK_NameChars</name>
          <initializer>= 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="name_8hpp_1aaf20e76cc52c1bd020f4534c17eb7fb6a8e7ec8e5bec8e04735871f4fba835f5c" prot="public">
          <name>URK_MangleChars</name>
          <initializer>= 0x2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="name_8hpp_1aaf20e76cc52c1bd020f4534c17eb7fb6ad773b34fd4d8dc5c44e404fafa2c06f8" prot="public">
          <name>URK_StrlitChars</name>
          <initializer>= 0x4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="name_8hpp_1aaf20e76cc52c1bd020f4534c17eb7fb6a79b796ee9c260f7b79047f821724a2a8" prot="public">
          <name>URK_TypeNameChars</name>
          <initializer>= 0x8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="123" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="122" bodyend="128"/>
      </memberdef>
      <memberdef kind="enum" id="name_8hpp_1a8988c06f7c3477a71db92be5c947a782" prot="public" static="no">
        <name>nametype_t</name>
        <enumvalue id="name_8hpp_1a8988c06f7c3477a71db92be5c947a782aff7db8cff7a9769b6d31de707bc16c23" prot="public">
          <name>VNT_IDENT</name>
          <initializer>= URK_NameChars|URK_MangleChars</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="name_8hpp_1a8988c06f7c3477a71db92be5c947a782ab977a94be25c246f65fc23cb9b745cc0" prot="public">
          <name>VNT_TYPE</name>
          <initializer>= URK_TypeNameChars</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="name_8hpp_1a8988c06f7c3477a71db92be5c947a782acae2f451a32ff060c9c89c5b69a883b9" prot="public">
          <name>VNT_UDTMEM</name>
          <initializer>= URK_NameChars</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="name_8hpp_1a8988c06f7c3477a71db92be5c947a782acd636d2babd627255866bcd3a1d847d9" prot="public">
          <name>VNT_STRLIT</name>
          <initializer>= URK_StrlitChars</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="name_8hpp_1a8988c06f7c3477a71db92be5c947a782a2f391b75be1e41a6088ceebaca012a61" prot="public">
          <name>VNT_VISIBLE</name>
          <initializer>= VNT_UDTMEM</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="131" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="130" bodyend="141"/>
      </memberdef>
      <memberdef kind="enum" id="name_8hpp_1ab2ce188a7de5d24751a51619142bc3cd" prot="public" static="no">
        <name>debug_name_how_t</name>
        <enumvalue id="name_8hpp_1ab2ce188a7de5d24751a51619142bc3cda07919bfad7fbbe1cbaa5bd395263743b" prot="public">
          <name>DEBNAME_EXACT</name>
          <briefdescription>
<para>find a name at exactly the specified address </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="name_8hpp_1ab2ce188a7de5d24751a51619142bc3cda450e6b033e4dfc8132f1afde00d27ff6" prot="public">
          <name>DEBNAME_LOWER</name>
          <briefdescription>
<para>find a name with the address &gt;= the specified address </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="name_8hpp_1ab2ce188a7de5d24751a51619142bc3cda234a853dad3bf08d8de43c1039a57901" prot="public">
          <name>DEBNAME_UPPER</name>
          <briefdescription>
<para>find a name with the address &gt; the specified address </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="name_8hpp_1ab2ce188a7de5d24751a51619142bc3cda6fe3df259439fb5db48bc7183d736c3f" prot="public">
          <name>DEBNAME_NICE</name>
          <briefdescription>
<para>find a name with the address &lt;= the specified address </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Specify strategy for retrieving debug names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="656" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="655" bodyend="661"/>
      </memberdef>
      <memberdef kind="enum" id="name_8hpp_1afb78c30f35664f57311d5baa00360434" prot="public" static="no">
        <name>demreq_type_t</name>
        <enumvalue id="name_8hpp_1afb78c30f35664f57311d5baa00360434a9de91c19e78c2ebb6bd134f15b1a234c" prot="public">
          <name>DQT_NPURGED_8</name>
          <initializer>= -8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="name_8hpp_1afb78c30f35664f57311d5baa00360434aa19d7d421a0eb7be5d5de106ee495f85" prot="public">
          <name>DQT_NPURGED_4</name>
          <initializer>= -4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="name_8hpp_1afb78c30f35664f57311d5baa00360434af1988322720215a3edbaa9ff0d8c2552" prot="public">
          <name>DQT_NPURGED_2</name>
          <initializer>= -2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="name_8hpp_1afb78c30f35664f57311d5baa00360434a3308704a79df6510fb3e0eb78db03059" prot="public">
          <name>DQT_COMPILER</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="name_8hpp_1afb78c30f35664f57311d5baa00360434a9c8d6de1e67d1b3bd1a598ce2a4faa8a" prot="public">
          <name>DQT_NAME_TYPE</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="name_8hpp_1afb78c30f35664f57311d5baa00360434ab0f57ea55aba7fba64b0e4c468a95dff" prot="public">
          <name>DQT_FULL</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="692" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="691" bodyend="699"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="name_8hpp_1a051016ac92685c95d47a7c1850c19632" prot="public" static="no">
        <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
        <definition>typedef uchar color_t</definition>
        <argsstring></argsstring>
        <name>color_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="23" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="name_8hpp_1a0a08d5152cc3fcc5cba155b300892674" prot="public" static="no">
        <type><ref refid="classqvector" kindref="compound">qvector</ref>&lt; <ref refid="structea__name__t" kindref="compound">ea_name_t</ref> &gt;</type>
        <definition>typedef qvector&lt;ea_name_t&gt; ea_name_vec_t</definition>
        <argsstring></argsstring>
        <name>ea_name_vec_t</name>
        <briefdescription>
<para>vector of ea,name pairs </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="672" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="671" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="name_8hpp_1a1c11cf6f91e87c2f20aa0ead93361a56" prot="public" static="no">
        <type>int</type>
        <definition>typedef int ignore_name_def_t</definition>
        <argsstring></argsstring>
        <name>ignore_name_def_t</name>
        <briefdescription>
<para>What name types to ignore. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="733" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="733" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="name_8hpp_1ac6c3b1c6a967597499df1154ba284af4" prot="public" static="no" mutable="no">
        <type>const <ref refid="name_8hpp_1a1c11cf6f91e87c2f20aa0ead93361a56" kindref="member">ignore_name_def_t</ref></type>
        <definition>const ignore_name_def_t ignore_none</definition>
        <argsstring></argsstring>
        <name>ignore_none</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="735" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="735" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="name_8hpp_1a1655dddc2cdca53d5d4b900b1fc3830d" prot="public" static="no" mutable="no">
        <type>const <ref refid="name_8hpp_1a1c11cf6f91e87c2f20aa0ead93361a56" kindref="member">ignore_name_def_t</ref></type>
        <definition>const ignore_name_def_t ignore_regvar</definition>
        <argsstring></argsstring>
        <name>ignore_regvar</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="736" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="736" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="name_8hpp_1a7bf065d7fde6393e875ddc471caed5a3" prot="public" static="no" mutable="no">
        <type>const <ref refid="name_8hpp_1a1c11cf6f91e87c2f20aa0ead93361a56" kindref="member">ignore_name_def_t</ref></type>
        <definition>const ignore_name_def_t ignore_llabel</definition>
        <argsstring></argsstring>
        <name>ignore_llabel</name>
        <initializer>= 2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="737" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="737" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="name_8hpp_1a547abffc73cd33cf03d6897c223ba7cb" prot="public" static="no" mutable="no">
        <type>const <ref refid="name_8hpp_1a1c11cf6f91e87c2f20aa0ead93361a56" kindref="member">ignore_name_def_t</ref></type>
        <definition>const ignore_name_def_t ignore_stkvar</definition>
        <argsstring></argsstring>
        <name>ignore_stkvar</name>
        <initializer>= 3</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="738" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="738" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="name_8hpp_1acfc0b8c549c5622a39ae1787cc5c3515" prot="public" static="no" mutable="no">
        <type>const <ref refid="name_8hpp_1a1c11cf6f91e87c2f20aa0ead93361a56" kindref="member">ignore_name_def_t</ref></type>
        <definition>const ignore_name_def_t ignore_glabel</definition>
        <argsstring></argsstring>
        <name>ignore_glabel</name>
        <initializer>= 4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="739" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="739" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="name_8hpp_1aa75fb1ba89bb22f323472e329eb4a486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_name</definition>
        <argsstring>(ea_t ea, const char *name, int flags=0)</argsstring>
        <name>set_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set or delete name of an item at the specified address. An item can be anything: instruction, function, data byte, word, string, structure, etc... Include name into the list of names. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address. do nothing if ea is not valid (return 0). tail bytes can&apos;t have names. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>new name.<itemizedlist>
<listitem><para>NULL: do nothing (return 0).</para></listitem><listitem><para>&quot;&quot; : delete name.</para></listitem><listitem><para>otherwise this is a new name. </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___s_n__" kindref="compound">Set name flags</ref>. If a bit is not specified, then the corresponding action is not performed and the name will retain the same bits as before calling this function. For new names, default is: non-public, non-weak, non-auto. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok, name is changed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>failure, a warning is displayed </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1aa126bf5a647bde94b176277a0936c3b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool force_name</definition>
        <argsstring>(ea_t ea, const char *name, int flags=0)</argsstring>
        <name>force_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="86" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="86" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1afa940671bab6958b3772cbf834d9e8d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export set_dummy_name</definition>
        <argsstring>(ea_t from, ea_t ea)</argsstring>
        <name>set_dummy_name</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Give an autogenerated (dummy) name. Autogenerated names have special prefixes (loc_...). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of the operand which references to the address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>ok, dummy name is generated or the byte already had a name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>failure, invalid address or tail byte </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a023a7105c003b3ed6d812e0ef713539b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export validate_name</definition>
        <argsstring>(qstring *name, nametype_t type, int flags=0)</argsstring>
        <name>validate_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>nametype_t</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Validate a name. This function replaces all invalid characters in the name with SUBSTCHAR. However, it will return false if name is valid but not allowed to be an identifier (is a register name).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">name</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to name. the name will be modified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of name we want to validate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>see SN_* . Only SN_IDBENC is currently considered</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a71f909040338d267a372937c8e07d8b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_valid_cp</definition>
        <argsstring>(wchar32_t cp, nametype_t kind, void *data=NULL)</argsstring>
        <name>is_valid_cp</name>
        <param>
          <type>wchar32_t</type>
          <declname>cp</declname>
        </param>
        <param>
          <type>nametype_t</type>
          <declname>kind</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>data</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
<para>Is the given codepoint acceptable in the given context? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a7015469eb9998dd7b2f49f5c7817820e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export set_cp_validity</definition>
        <argsstring>(ucdr_kind_t kind, wchar32_t cp, wchar32_t endcp=BADCP, bool valid=true)</argsstring>
        <name>set_cp_validity</name>
        <param>
          <type>ucdr_kind_t</type>
          <declname>kind</declname>
        </param>
        <param>
          <type>wchar32_t</type>
          <declname>cp</declname>
        </param>
        <param>
          <type>wchar32_t</type>
          <declname>endcp</declname>
          <defval>BADCP</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>valid</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Mark the given codepoint (or range) as acceptable or unacceptable in the given context If &apos;endcp&apos; is not BADCP, it is considered to be the end of the range: [cp, endcp), and is not included in the range </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a76e64321c277a5c8f90cad23f418a16c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_ident_cp</definition>
        <argsstring>(wchar32_t cp)</argsstring>
        <name>is_ident_cp</name>
        <param>
          <type>wchar32_t</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
<para>Can a character appear in a name? (present in ::NameChars or ::MangleChars) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="174" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a911535193c54be3266c48d0f66bade46" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_strlit_cp</definition>
        <argsstring>(wchar32_t cp, const rangeset_crefvec_t *specific_ranges=NULL)</argsstring>
        <name>is_strlit_cp</name>
        <param>
          <type>wchar32_t</type>
          <declname>cp</declname>
        </param>
        <param>
          <type>const <ref refid="classqvector" kindref="compound">rangeset_crefvec_t</ref> *</type>
          <declname>specific_ranges</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Can a character appear in a string literal (present in ::StrlitChars) If &apos;specific_ranges&apos; are specified, those will be used instead of the ones corresponding to the current culture (only if ::StrlitChars is configured to use the current culture) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="182" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="182" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a4c03716b0d191d94fd8ca99f1a14eb14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool is_visible_cp</definition>
        <argsstring>(wchar32_t cp)</argsstring>
        <name>is_visible_cp</name>
        <param>
          <type>wchar32_t</type>
          <declname>cp</declname>
        </param>
        <briefdescription>
<para>Can a character be displayed in a name? (present in ::NameChars) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="188" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="188" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a474a81ed7d871c6045ef009955db712b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_ident</definition>
        <argsstring>(const char *name)</argsstring>
        <name>is_ident</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Is a valid name? (including ::MangleChars) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a1cac1f791aadbaf4699c672e2a371483" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_uname</definition>
        <argsstring>(const char *name)</argsstring>
        <name>is_uname</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is valid user-specified name? (valid name &amp; !dummy prefix). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name to test. may be NULL. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>yes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>no </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a3271b2d04d48bf0d8b2126cda8152b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_valid_typename</definition>
        <argsstring>(const char *name)</argsstring>
        <name>is_valid_typename</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is valid type name? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name to test. may be NULL. </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>1</parametername>
</parameternamelist>
<parameterdescription>
<para>yes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>no </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a7861ff00288a2f91688761305c901d34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export dummy_name_ea</definition>
        <argsstring>(const char *name)</argsstring>
        <name>dummy_name_ea</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is dummy name? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name to test. may be NULL. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> if not, otherwise the address denoted by the name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a5c3b4ea81944925c0689be2557e2f501" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export extract_name</definition>
        <argsstring>(qstring *out, const char *line, int x)</argsstring>
        <name>extract_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>line</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Extract a name or address from the specified string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the identifier </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>input string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>x coordinate of cursor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>-1 if can not extract. otherwise length of the name </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1ad57ff60cd0ee8a0aa6283d88a88743cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export hide_name</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>hide_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove name from the list of names <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the name </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1aafbdb624ecada9f02b129f85031ab4d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export show_name</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>show_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Insert name to the list of names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1ad14a47ac26d57e3926296e9c0c729075" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_name_ea</definition>
        <argsstring>(ea_t from, const char *name)</argsstring>
        <name>get_name_ea</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get address of the name. Dummy names (like byte_xxxx where xxxx are hex digits) are parsed by this function to obtain the address. The database is not consulted for them. This function works only with regular names. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address where the name is used. if not applicable, then should be <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>any name in the program or NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>address of the name or <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1aacdcd86fbe8f292b62b0cb97a749d205" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman ea_t ida_export</type>
        <definition>idaman ea_t ida_export get_name_base_ea</definition>
        <argsstring>(ea_t from, ea_t to)</argsstring>
        <name>get_name_base_ea</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get address of the name used in the expression for the address <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>address of the operand which references to the address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>to</parametername>
</parameternamelist>
<parameterdescription>
<para>the referenced address </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>address of the name used to represent the operand </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a610d30c00b8ec32d1d9147589d75c0a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export get_name_value</definition>
        <argsstring>(uval_t *value, ea_t from, const char *name)</argsstring>
        <name>get_name_value</name>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get value of the name. This function knows about: regular names, enums, special segments, etc. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">value</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to variable with answer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address where the name is used if not applicable, then should be BADADDR </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>any name in the program or NULL </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="group___n_t__" kindref="compound">Name value result codes</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a6051c8467e9c050a8823b4d0b991d2b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_ea_name</definition>
        <argsstring>(qstring *out, ea_t ea, int gtn_flags=0, getname_info_t *gtni=NULL)</argsstring>
        <name>get_ea_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <param>
          <type><ref refid="structgetname__info__t" kindref="compound">getname_info_t</ref> *</type>
          <declname>gtni</declname>
          <defval>NULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get name at the specified address. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to hold the name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gtn_flags</parametername>
</parameternamelist>
<parameterdescription>
<para>how exactly the name should be retrieved. combination of <ref refid="group___g_n__" kindref="compound">bits for get_ea_name() function. There is a convenience</ref> bits </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gtni</parametername>
</parameternamelist>
<parameterdescription>
<para>additional information for name demangling Please use the convenience functions declared below instead of calling get_ea_name directly. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1aa575b3bcc4c1203ffbf0c0ebb7eaa16c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref></type>
        <definition>ssize_t get_name</definition>
        <argsstring>(qstring *out, ea_t ea, int gtn_flags=0)</argsstring>
        <name>get_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="332" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="332" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a874f4e97d730d5375365e1bf8221444f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>ssize_t idaapi get_visible_name</definition>
        <argsstring>(qstring *out, ea_t ea, int gtn_flags=0)</argsstring>
        <name>get_visible_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="337" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="337" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a816e88b679a0f0c8cb37bce3aa712420" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>ssize_t idaapi get_colored_name</definition>
        <argsstring>(qstring *out, ea_t ea, int gtn_flags=0)</argsstring>
        <name>get_colored_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="342" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="342" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1acc4e26cf3997699391cce8d6ff888885" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>ssize_t idaapi get_short_name</definition>
        <argsstring>(qstring *out, ea_t ea, int gtn_flags=0)</argsstring>
        <name>get_short_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="347" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="347" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1ad27d842500bf774fbdd073aea2b3f403" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>ssize_t idaapi get_long_name</definition>
        <argsstring>(qstring *out, ea_t ea, int gtn_flags=0)</argsstring>
        <name>get_long_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="352" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="352" bodyend="355"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a033a9d0509114e4f97fdaeab1a9cdde8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>ssize_t idaapi get_colored_short_name</definition>
        <argsstring>(qstring *out, ea_t ea, int gtn_flags=0)</argsstring>
        <name>get_colored_short_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="357" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="357" bodyend="360"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1ab717ea9badda3fda7d6818d28d2467c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>ssize_t idaapi get_colored_long_name</definition>
        <argsstring>(qstring *out, ea_t ea, int gtn_flags=0)</argsstring>
        <name>get_colored_long_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="362" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="362" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1ab686aff2c7d57504cd626422a4c45217" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>ssize_t idaapi get_demangled_name</definition>
        <argsstring>(qstring *out, ea_t ea, int32 inhibitor, int demform, int gtn_flags=0)</argsstring>
        <name>get_demangled_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
          <declname>inhibitor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>demform</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="367" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="367" bodyend="379"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a9f640271f3d6e66b652c54775aa17709" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> idaapi</type>
        <definition>ssize_t idaapi get_colored_demangled_name</definition>
        <argsstring>(qstring *out, ea_t ea, int32 inhibitor, int demform, int gtn_flags=0)</argsstring>
        <name>get_colored_demangled_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
          <declname>inhibitor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>demform</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="381" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="381" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a24fe80f985595cc95960891b5edcd296" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref></type>
        <definition>qstring get_name</definition>
        <argsstring>(ea_t ea, int gtn_flags=0)</argsstring>
        <name>get_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="393" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="393" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a5e9f91331dadbd70ff2da64b1e19cded" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref></type>
        <definition>qstring get_visible_name</definition>
        <argsstring>(ea_t ea, int gtn_flags=0)</argsstring>
        <name>get_visible_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="400" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="400" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a85346c5d02c6ceaee845ef5c64f7f2f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> idaapi</type>
        <definition>qstring idaapi get_colored_name</definition>
        <argsstring>(ea_t ea, int gtn_flags=0)</argsstring>
        <name>get_colored_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="407" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="407" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1adcbd26275d56c5ec7ff3090f8b3443e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> idaapi</type>
        <definition>qstring idaapi get_short_name</definition>
        <argsstring>(ea_t ea, int gtn_flags=0)</argsstring>
        <name>get_short_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="414" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="414" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a51fb60538b597a3d6ac7933311895425" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> idaapi</type>
        <definition>qstring idaapi get_long_name</definition>
        <argsstring>(ea_t ea, int gtn_flags=0)</argsstring>
        <name>get_long_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="421" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="421" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a163738740c8b61cc152557cbe762ec68" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> idaapi</type>
        <definition>qstring idaapi get_colored_short_name</definition>
        <argsstring>(ea_t ea, int gtn_flags=0)</argsstring>
        <name>get_colored_short_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="428" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="428" bodyend="433"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a9523be0fb8ae3ac26c44c88945873dbd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> idaapi</type>
        <definition>qstring idaapi get_colored_long_name</definition>
        <argsstring>(ea_t ea, int gtn_flags=0)</argsstring>
        <name>get_colored_long_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="435" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="435" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1abb614d8e189b6889309f3e0763e2cd8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> idaapi</type>
        <definition>qstring idaapi get_demangled_name</definition>
        <argsstring>(ea_t ea, int32 inhibitor, int demform, int gtn_flags=0)</argsstring>
        <name>get_demangled_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
          <declname>inhibitor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>demform</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="442" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="442" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a9a848cfedeb8b31040407d0e5c35a096" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> idaapi</type>
        <definition>qstring idaapi get_colored_demangled_name</definition>
        <argsstring>(ea_t ea, int32 inhibitor, int demform, int gtn_flags=0)</argsstring>
        <name>get_colored_demangled_name</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
          <declname>inhibitor</declname>
        </param>
        <param>
          <type>int</type>
          <declname>demform</declname>
        </param>
        <param>
          <type>int</type>
          <declname>gtn_flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="457" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="457" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1aabdd8c2bcc41b1246c83c020eee512c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="kernwin_8hpp_1a051016ac92685c95d47a7c1850c19632" kindref="member">color_t</ref> ida_export</type>
        <definition>idaman color_t ida_export get_name_color</definition>
        <argsstring>(ea_t from, ea_t ea)</argsstring>
        <name>get_name_color</name>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Calculate flags for <ref refid="name_8hpp_1a6051c8467e9c050a8823b4d0b991d2b6" kindref="member">get_ea_name()</ref> function. </para>        </briefdescription>
        <detaileddescription>
<para>Get name color. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address where the name is used. if not applicable, then should be <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref>. The kernel returns a local name color if the reference is within a function, i.e. &apos;from&apos; and &apos;ea&apos; belong to the same function. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a5dbd29ee7ba50fa1d5ccf46922757b70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_name_expr</definition>
        <argsstring>(qstring *out, ea_t from, int n, ea_t ea, uval_t off, int flags=GETN_APPZERO)</argsstring>
        <name>get_name_expr</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>from</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1aef265b11f25357d520dcfd40aa8c18f3" kindref="member">uval_t</ref></type>
          <declname>off</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval><ref refid="group___g_e_t_n___1ga1d81af73461e98bd691ef1337d72a018" kindref="member">GETN_APPZERO</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert address to name expression (name with a displacement). This function takes into account fixup information and returns a colored name expression (in the form &lt;name&gt; +/- &lt;offset&gt;). It also knows about structure members and arrays. If the specified address doesn&apos;t have a name, a dummy name is generated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer for the name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of instruction operand or data referring to the name. This address will be used to get fixup information, so it should point to exact position of the operand in the instruction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of referencing operand. for data items specify 0 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>address to convert to name expression </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of name expression. this parameter is used only to check that the name expression will have the wanted value. &apos;off&apos; may be equal to BADADDR but this is discouraged because it prohibits checks. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___g_e_t_n__" kindref="compound">Name expression flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>&lt; 0 if address is not valid, no segment or other failure. otherwise the length of the name expression in characters. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1ad76ccaa62d5c6280ad61dcd372eaa44f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1ab65ed42d67e6c517c746ff2a6a187016" kindref="member">ssize_t</ref> ida_export</type>
        <definition>idaman ssize_t ida_export get_nice_colored_name</definition>
        <argsstring>(qstring *buf, ea_t ea, int flags=0)</argsstring>
        <name>get_nice_colored_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get a nice colored name at the specified address. Ex:<itemizedlist>
<listitem><para>segment:sub+offset</para></listitem><listitem><para>segment:sub:local_label</para></listitem><listitem><para>segment:label</para></listitem><listitem><para>segment:address</para></listitem><listitem><para>segment:address+offset <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">buf</parametername>
</parameternamelist>
<parameterdescription>
<para>buffer to hold the name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group___g_n_c_n__" kindref="compound">Nice colored name flags</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the length of the generated name in bytes. </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a377a4b1fabcb3a6c0a79c5e2c76ae409" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref> ida_export</type>
        <definition>idaman flags_t ida_export append_struct_fields</definition>
        <argsstring>(qstring *out, adiff_t *disp, int n, const tid_t *path, int plen, flags_t flags, adiff_t delta, bool appzero)</argsstring>
        <name>append_struct_fields</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>adiff_t *</type>
          <declname>disp</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1ad8791d30d19843bc09b78bdf01a852ec" kindref="member">tid_t</ref> *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>plen</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a55dd00e03168fb5180830e87ef0a2c57" kindref="member">flags_t</ref></type>
          <declname>flags</declname>
        </param>
        <param>
          <type>adiff_t</type>
          <declname>delta</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>appzero</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append names of struct fields to a name if the name is a struct name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to the output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>disp</parametername>
</parameternamelist>
<parameterdescription>
<para>displacement from the name </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand n which the name appears </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>path in the struct. path is an array of id&apos;s. maximal length of array is <ref refid="nalt_8hpp_1a0be69d167c3b2004f3b786540982e174" kindref="member">MAXSTRUCPATH</ref>. the first element of the array is the structure id. consecutive elements are id&apos;s of used union members (if any). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>plen</parametername>
</parameternamelist>
<parameterdescription>
<para>size of path array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>the input flags. they will be returned if the struct cannot be found. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>delta to add to displacement </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>appzero</parametername>
</parameternamelist>
<parameterdescription>
<para>should append a struct field name if the displacement is zero? </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>flags of the innermost struct member or the input flags </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="571" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1acab6142412589f0a1ce6fad1b372e479" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman int ida_export</type>
        <definition>idaman int ida_export get_struct_operand</definition>
        <argsstring>(adiff_t *disp, adiff_t *delta, tid_t *path, ea_t ea, int n)</argsstring>
        <name>get_struct_operand</name>
        <param>
          <type>adiff_t *</type>
          <declname>disp</declname>
        </param>
        <param>
          <type>adiff_t *</type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1ad8791d30d19843bc09b78bdf01a852ec" kindref="member">tid_t</ref> *</type>
          <declname>path</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get offset within a structure if the operand refers to structure. Ex: {mov ax, somedata.field5-2 (before it was max ax, 3)} for this instruction, op #1 the function will return<itemizedlist>
<listitem><para>disp: the value of &apos;field5&apos;, i.e. 5</para></listitem><listitem><para>delta: -2</para></listitem><listitem><para>path: the existing path if any <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>disp</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to displacement (answer will be here) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delta</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to displacement delta (answer will be here) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>existing strpath (if any) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>linear address of instruction/data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>number of operand </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if success, then length of path + 1. if failed, then 0. </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="597" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a5ab9b3ede9deeafd060d038cedc993b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export reorder_dummy_names</definition>
        <argsstring>(void)</argsstring>
        <name>reorder_dummy_names</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Renumber dummy names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="652" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1aa9c7d3ed8cf3b79dca8ee2262c9f3b56" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman <ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref> ida_export</type>
        <definition>idaman int32 ida_export demangle_name</definition>
        <argsstring>(qstring *out, const char *name, uint32 disable_mask, demreq_type_t demreq=DQT_FULL)</argsstring>
        <name>demangle_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>disable_mask</declname>
        </param>
        <param>
          <type>demreq_type_t</type>
          <declname>demreq</declname>
          <defval>DQT_FULL</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Demangle a name. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>output buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name to demangle </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>disable_mask</parametername>
</parameternamelist>
<parameterdescription>
<para>bits to inhibit parts of demangled name (see MNG_). by the M_COMPILER bits a specific compiler can be selected (see MT_). </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ME_... or MT__ bitmasks from <ref refid="demangle_8hpp_source" kindref="compound">demangle.hpp</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="709" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a10755fe3bcc14191826d3381f10a7c3b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> idaapi</type>
        <definition>qstring idaapi demangle_name</definition>
        <argsstring>(const char *name, uint32 disable_mask, demreq_type_t demreq=DQT_FULL)</argsstring>
        <name>demangle_name</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>disable_mask</declname>
        </param>
        <param>
          <type>demreq_type_t</type>
          <declname>demreq</declname>
          <defval>DQT_FULL</defval>
        </param>
        <briefdescription>
<para>Demangle a name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="716" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="716" bodyend="724"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a2b42c669a152d98dbddb63b9f0ab6969" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1a56f1a81c92849566ae864511088eb7e8" kindref="member">int32</ref></type>
        <definition>int32 detect_compiler_using_demangler</definition>
        <argsstring>(const char *name)</argsstring>
        <name>detect_compiler_using_demangler</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="727" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" bodystart="727" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a093967cd658d6aa85af7f75a3d56c9da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_name_defined_locally</definition>
        <argsstring>(func_t *pfn, const char *name, ignore_name_def_t ignore_name_def, ea_t ea1=BADADDR, ea_t ea2=BADADDR)</argsstring>
        <name>is_name_defined_locally</name>
        <param>
          <type><ref refid="classfunc__t" kindref="compound">func_t</ref> *</type>
          <declname>pfn</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="name_8hpp_1a1c11cf6f91e87c2f20aa0ead93361a56" kindref="member">ignore_name_def_t</ref></type>
          <declname>ignore_name_def</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea1</declname>
          <defval><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref></defval>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea2</declname>
          <defval><ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the name defined locally in the specified function? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pfn</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to function </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ignore_name_def</parametername>
</parameternamelist>
<parameterdescription>
<para>which names to ignore when checking </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea1</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting address of the range inside the function (optional) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea2</parametername>
</parameternamelist>
<parameterdescription>
<para>the ending address of the range inside the function (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if the name has been defined </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="748" column="1"/>
      </memberdef>
      <memberdef kind="function" id="name_8hpp_1a1643196cfb62d1841e2c046d2e6931b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export cleanup_name</definition>
        <argsstring>(qstring *out, ea_t ea, const char *name, uint32 flags=0)</argsstring>
        <name>cleanup_name</name>
        <param>
          <type><ref refid="pro_8h_1a386c10c6aa4340f1d63df85f40454fce" kindref="member">qstring</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>flags</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp" line="766" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions that deal with names. </para>    </briefdescription>
    <detaileddescription>
<para>A non-tail address of the program may have a name. Tail addresses (i.e. the addresses in the middle of an instruction or data item) can not have names. </para>    </detaileddescription>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/name.hpp"/>
  </compounddef>
</doxygen>
