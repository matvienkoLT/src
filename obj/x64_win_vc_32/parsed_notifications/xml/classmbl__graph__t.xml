<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="classmbl__graph__t" kind="class" language="C++" prot="public">
    <compoundname>mbl_graph_t</compoundname>
    <basecompoundref refid="classsimple__graph__t" prot="public" virt="non-virtual">simple_graph_t</basecompoundref>
    <includes refid="hexrays_8hpp" local="no">hexrays.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmbl__graph__t_1a43f44bf848180e59a640dd0fc4c6edfb" prot="private" static="no" mutable="no">
        <type><ref refid="classmbl__array__t" kindref="compound">mbl_array_t</ref> *</type>
        <definition>mbl_array_t* mbl_graph_t::mba</definition>
        <argsstring></argsstring>
        <name>mba</name>
        <briefdescription>
<para>pointer to the mbl array </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4629" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4629" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmbl__graph__t_1ae61cbd76a1f8cc79b5f15e85ac8d0786" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int mbl_graph_t::dirty</definition>
        <argsstring></argsstring>
        <name>dirty</name>
        <briefdescription>
<para>what kinds of use-def chains are dirty? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4630" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4630" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmbl__graph__t_1a47895be61fc7b74264e579bcfb067b16" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int mbl_graph_t::chain_stamp</definition>
        <argsstring></argsstring>
        <name>chain_stamp</name>
        <briefdescription>
<para>we increment this counter each time chains are recalculated </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4631" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4631" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmbl__graph__t_1a232e2155163cf1ec39545fb215dc4688" prot="private" static="no" mutable="no">
        <type><ref refid="classgraph__chains__t" kindref="compound">graph_chains_t</ref></type>
        <definition>graph_chains_t mbl_graph_t::gcs[2 *GC_END]</definition>
        <argsstring>[2 *GC_END]</argsstring>
        <name>gcs</name>
        <briefdescription>
<para>cached use-def chains </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4632" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4632" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmbl__graph__t_1ae3a2036bce95db2ba190a537f9016114" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mbl_graph_t::is_accessed_globally</definition>
        <argsstring>(const mlist_t &amp;list, int b1, int b2, const minsn_t *m1, const minsn_t *m2, access_type_t access_type, maymust_t maymust) const</argsstring>
        <name>is_accessed_globally</name>
        <param>
          <type>const <ref refid="structmlist__t" kindref="compound">mlist_t</ref> &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b2</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>access_type_t</type>
          <declname>access_type</declname>
        </param>
        <param>
          <type>maymust_t</type>
          <declname>maymust</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is LIST accessed between two instructions? This function can analyze all path between the specified instructions and find if the specified list is used in any of them. The instructions may be located in different basic blocks. This function does not use use-def chains but use the graph for analysis. It may be slow in some cases but its advantage is that is does not require building the use-def chains. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>list to verify </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b1</parametername>
</parameternamelist>
<parameterdescription>
<para>starting block </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b2</parametername>
</parameternamelist>
<parameterdescription>
<para>ending block. may be -1, it means all possible paths from b1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m1</parametername>
</parameternamelist>
<parameterdescription>
<para>starting instruction (in b1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>m2</parametername>
</parameternamelist>
<parameterdescription>
<para>ending instruction (in b2). excluded. may be NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>access_type</parametername>
</parameternamelist>
<parameterdescription>
<para>read or write access? </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maymust</parametername>
</parameternamelist>
<parameterdescription>
<para>may access or must access? </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if found an access to the list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4649" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10547" bodyend="10550"/>
      </memberdef>
      <memberdef kind="function" id="classmbl__graph__t_1a45c58e1a29901ca761526a0741aca5c0" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mbl_graph_t::get_ud_gc_idx</definition>
        <argsstring>(gctype_t gctype) const</argsstring>
        <name>get_ud_gc_idx</name>
        <param>
          <type>gctype_t</type>
          <declname>gctype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4657" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4657" bodyend="4657"/>
      </memberdef>
      <memberdef kind="function" id="classmbl__graph__t_1a875c797b4b512f7f8d2c222df773a1f9" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mbl_graph_t::get_du_gc_idx</definition>
        <argsstring>(gctype_t gctype) const</argsstring>
        <name>get_du_gc_idx</name>
        <param>
          <type>gctype_t</type>
          <declname>gctype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4658" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4658" bodyend="4658"/>
      </memberdef>
      <memberdef kind="function" id="classmbl__graph__t_1a1682abe886111b28773c0c12d7a3ecb1" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mbl_graph_t::get_ud_dirty_bit</definition>
        <argsstring>(gctype_t gctype)</argsstring>
        <name>get_ud_dirty_bit</name>
        <param>
          <type>gctype_t</type>
          <declname>gctype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4659" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4659" bodyend="4659"/>
      </memberdef>
      <memberdef kind="function" id="classmbl__graph__t_1aba9853aa4eabe02c0b210618143046c7" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mbl_graph_t::get_du_dirty_bit</definition>
        <argsstring>(gctype_t gctype)</argsstring>
        <name>get_du_dirty_bit</name>
        <param>
          <type>gctype_t</type>
          <declname>gctype</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4660" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4660" bodyend="4660"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmbl__graph__t_1a9111a498f7aa60f242b31e21300185af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mbl_graph_t::is_ud_chain_dirty</definition>
        <argsstring>(gctype_t gctype)</argsstring>
        <name>is_ud_chain_dirty</name>
        <param>
          <type>gctype_t</type>
          <declname>gctype</declname>
        </param>
        <briefdescription>
<para>Is the use-def chain of the specified kind dirty? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4664" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4664" bodyend="4668"/>
      </memberdef>
      <memberdef kind="function" id="classmbl__graph__t_1adae3c61c777fb7c48babe7f7848b33d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mbl_graph_t::is_du_chain_dirty</definition>
        <argsstring>(gctype_t gctype)</argsstring>
        <name>is_du_chain_dirty</name>
        <param>
          <type>gctype_t</type>
          <declname>gctype</declname>
        </param>
        <briefdescription>
<para>Is the def-use chain of the specified kind dirty? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4671" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4671" bodyend="4675"/>
      </memberdef>
      <memberdef kind="function" id="classmbl__graph__t_1aa7f88752ff6b1a3a9fcc6b48a833bf6b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mbl_graph_t::get_chain_stamp</definition>
        <argsstring>(void) const</argsstring>
        <name>get_chain_stamp</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4676" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4676" bodyend="4676"/>
      </memberdef>
      <memberdef kind="function" id="classmbl__graph__t_1a4d7948b9c6856b19ceb6a9675c2b5911" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgraph__chains__t" kindref="compound">graph_chains_t</ref> *hexapi</type>
        <definition>graph_chains_t * mbl_graph_t::get_ud</definition>
        <argsstring>(gctype_t gctype)</argsstring>
        <name>get_ud</name>
        <param>
          <type>gctype_t</type>
          <declname>gctype</declname>
        </param>
        <briefdescription>
<para>Get use-def chains. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4679" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10553" bodyend="10556"/>
      </memberdef>
      <memberdef kind="function" id="classmbl__graph__t_1a693ee53a3f666ae99958ec1c0eddcd99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgraph__chains__t" kindref="compound">graph_chains_t</ref> *hexapi</type>
        <definition>graph_chains_t * mbl_graph_t::get_du</definition>
        <argsstring>(gctype_t gctype)</argsstring>
        <name>get_du</name>
        <param>
          <type>gctype_t</type>
          <declname>gctype</declname>
        </param>
        <briefdescription>
<para>Get def-use chains. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4682" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10559" bodyend="10562"/>
      </memberdef>
      <memberdef kind="function" id="classmbl__graph__t_1a3ed9328f11448f5f89f755bf70b791d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mbl_graph_t::is_redefined_globally</definition>
        <argsstring>(const mlist_t &amp;list, int b1, int b2, const minsn_t *m1, const minsn_t *m2, maymust_t maymust=MAY_ACCESS) const</argsstring>
        <name>is_redefined_globally</name>
        <param>
          <type>const <ref refid="structmlist__t" kindref="compound">mlist_t</ref> &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b2</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>maymust_t</type>
          <declname>maymust</declname>
          <defval>MAY_ACCESS</defval>
        </param>
        <briefdescription>
<para>Is LIST redefined in the graph? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4685" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4685" bodyend="4686"/>
      </memberdef>
      <memberdef kind="function" id="classmbl__graph__t_1ac251695d69538697af384e40a0dd38ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mbl_graph_t::is_used_globally</definition>
        <argsstring>(const mlist_t &amp;list, int b1, int b2, const minsn_t *m1, const minsn_t *m2, maymust_t maymust=MAY_ACCESS) const</argsstring>
        <name>is_used_globally</name>
        <param>
          <type>const <ref refid="structmlist__t" kindref="compound">mlist_t</ref> &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>b2</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>m1</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>m2</declname>
        </param>
        <param>
          <type>maymust_t</type>
          <declname>maymust</declname>
          <defval>MAY_ACCESS</defval>
        </param>
        <briefdescription>
<para>Is LIST used in the graph? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4689" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4689" bodyend="4690"/>
      </memberdef>
      <memberdef kind="function" id="classmbl__graph__t_1a59f71b2d22c319a529d3843e18b95808" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classmblock__t" kindref="compound">mblock_t</ref> *</type>
        <definition>mblock_t* mbl_graph_t::get_mblock</definition>
        <argsstring>(int n) const</argsstring>
        <name>get_mblock</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4692" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4692" bodyend="4692"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Control flow graph of microcode. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2129">
        <label>simple_graph_t</label>
        <link refid="classsimple__graph__t"/>
        <childnode refid="2130" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2130">
        <label>gdl_graph_t</label>
        <link refid="classgdl__graph__t"/>
      </node>
      <node id="2128">
        <label>mbl_graph_t</label>
        <link refid="classmbl__graph__t"/>
        <childnode refid="2129" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2132">
        <label>simple_graph_t</label>
        <link refid="classsimple__graph__t"/>
        <childnode refid="2133" relation="public-inheritance">
        </childnode>
        <childnode refid="2134" relation="usage">
          <edgelabel>title</edgelabel>
        </childnode>
      </node>
      <node id="2134">
        <label>_qstring&lt; char &gt;</label>
        <link refid="class__qstring"/>
      </node>
      <node id="2133">
        <label>gdl_graph_t</label>
        <link refid="classgdl__graph__t"/>
      </node>
      <node id="2131">
        <label>mbl_graph_t</label>
        <link refid="classmbl__graph__t"/>
        <childnode refid="2132" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="4628" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="4627" bodyend="4693"/>
    <listofallmembers>
      <member refid="classgdl__graph__t_1aed9c469ba507f9e65c97db4647311e62" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>begin</name></member>
      <member refid="classmbl__graph__t_1a47895be61fc7b74264e579bcfb067b16" prot="private" virt="non-virtual"><scope>mbl_graph_t</scope><name>chain_stamp</name></member>
      <member refid="classsimple__graph__t_1a5b003fc13cd962af79e1983c56020047" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>colored_gdl_edges</name></member>
      <member refid="classmbl__graph__t_1ae61cbd76a1f8cc79b5f15e85ac8d0786" prot="private" virt="non-virtual"><scope>mbl_graph_t</scope><name>dirty</name></member>
      <member refid="classgdl__graph__t_1a0a40e432f6cef47a21cab2a600e407d8" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>edge</name></member>
      <member refid="classgdl__graph__t_1afd89c2f37ca474eeb80266263c52a1fd" prot="public" virt="virtual"><scope>mbl_graph_t</scope><name>empty</name></member>
      <member refid="classgdl__graph__t_1a5b0ee999fad4d5a780fd3bf276715c7f" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>end</name></member>
      <member refid="classgdl__graph__t_1ac2c6eb82d3f53c7a0ec71803f691bc59" prot="public" virt="virtual"><scope>mbl_graph_t</scope><name>entry</name></member>
      <member refid="classgdl__graph__t_1a8e26312ef1b714a18198bef6d799c258" prot="public" virt="virtual"><scope>mbl_graph_t</scope><name>exists</name></member>
      <member refid="classgdl__graph__t_1a4860b7baf2db01da12f2b0c4f209bf9c" prot="public" virt="virtual"><scope>mbl_graph_t</scope><name>exit</name></member>
      <member refid="classgdl__graph__t_1aedc53d9164372f5aab637bf2b2e497a0" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>front</name></member>
      <member refid="classmbl__graph__t_1a232e2155163cf1ec39545fb215dc4688" prot="private" virt="non-virtual"><scope>mbl_graph_t</scope><name>gcs</name></member>
      <member refid="classgdl__graph__t_1ab13037817c391fd6f7f3b53f169a8009" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>gen_dot</name></member>
      <member refid="classgdl__graph__t_1a637ae3e6bed2ee4a4c5c1c3a36407bc0" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>gen_dot</name></member>
      <member refid="classgdl__graph__t_1afed62cde1549127e49b34a5c03a8e344" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>gen_gdl</name></member>
      <member refid="classgdl__graph__t_1a06e3dde67682f31cb54e30f612e1905b" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>gen_gdl</name></member>
      <member refid="classmbl__graph__t_1aa7f88752ff6b1a3a9fcc6b48a833bf6b" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>get_chain_stamp</name></member>
      <member refid="classmbl__graph__t_1a693ee53a3f666ae99958ec1c0eddcd99" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>get_du</name></member>
      <member refid="classmbl__graph__t_1aba9853aa4eabe02c0b210618143046c7" prot="private" virt="non-virtual"><scope>mbl_graph_t</scope><name>get_du_dirty_bit</name></member>
      <member refid="classmbl__graph__t_1a875c797b4b512f7f8d2c222df773a1f9" prot="private" virt="non-virtual"><scope>mbl_graph_t</scope><name>get_du_gc_idx</name></member>
      <member refid="classgdl__graph__t_1aadc912ba89cceed064de956bcf646d13" prot="public" virt="virtual"><scope>mbl_graph_t</scope><name>get_edge_color</name></member>
      <member refid="classmbl__graph__t_1a59f71b2d22c319a529d3843e18b95808" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>get_mblock</name></member>
      <member refid="classgdl__graph__t_1a87253fc6388e7c3bb2c4ad72ee651a52" prot="public" virt="virtual"><scope>mbl_graph_t</scope><name>get_node_color</name></member>
      <member refid="classgdl__graph__t_1a0ca7e78eb938af72407c106fde2b9778" prot="public" virt="virtual"><scope>mbl_graph_t</scope><name>get_node_label</name></member>
      <member refid="classmbl__graph__t_1a4d7948b9c6856b19ceb6a9675c2b5911" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>get_ud</name></member>
      <member refid="classmbl__graph__t_1a1682abe886111b28773c0c12d7a3ecb1" prot="private" virt="non-virtual"><scope>mbl_graph_t</scope><name>get_ud_dirty_bit</name></member>
      <member refid="classmbl__graph__t_1a45c58e1a29901ca761526a0741aca5c0" prot="private" virt="non-virtual"><scope>mbl_graph_t</scope><name>get_ud_gc_idx</name></member>
      <member refid="classmbl__graph__t_1ae3a2036bce95db2ba190a537f9016114" prot="private" virt="non-virtual"><scope>mbl_graph_t</scope><name>is_accessed_globally</name></member>
      <member refid="classmbl__graph__t_1adae3c61c777fb7c48babe7f7848b33d5" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>is_du_chain_dirty</name></member>
      <member refid="classmbl__graph__t_1a3ed9328f11448f5f89f755bf70b791d0" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>is_redefined_globally</name></member>
      <member refid="classmbl__graph__t_1a9111a498f7aa60f242b31e21300185af" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>is_ud_chain_dirty</name></member>
      <member refid="classmbl__graph__t_1ac251695d69538697af384e40a0dd38ec" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>is_used_globally</name></member>
      <member refid="classmbl__graph__t_1a43f44bf848180e59a640dd0fc4c6edfb" prot="private" virt="non-virtual"><scope>mbl_graph_t</scope><name>mba</name></member>
      <member refid="classgdl__graph__t_1a0e8cf052ce990f41454cfa618f318645" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>nedge</name></member>
      <member refid="classgdl__graph__t_1a62eb8090207b9cc4fa5220d4ee989596" prot="public" virt="virtual"><scope>mbl_graph_t</scope><name>node_qty</name></member>
      <member refid="classgdl__graph__t_1a0047a77ba26534621019e9b1e4a4380a" prot="public" virt="pure-virtual"><scope>mbl_graph_t</scope><name>npred</name></member>
      <member refid="classgdl__graph__t_1a689fddb9fec8ae4cd95ce962934809d7" prot="public" virt="pure-virtual"><scope>mbl_graph_t</scope><name>nsucc</name></member>
      <member refid="classgdl__graph__t_1ad6ad9937897af84731a3e9bbdeea75f4" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>path_exists</name></member>
      <member refid="classgdl__graph__t_1a1ff65cc040a928a19c2906757413b0da" prot="public" virt="pure-virtual"><scope>mbl_graph_t</scope><name>pred</name></member>
      <member refid="classgdl__graph__t_1a5f00823ba18caa2ef90f779adc27dbcb" prot="public" virt="virtual"><scope>mbl_graph_t</scope><name>print_edge</name></member>
      <member refid="classgdl__graph__t_1a4cde31a1b2c406d7813c09a839edd4ea" prot="public" virt="virtual"><scope>mbl_graph_t</scope><name>print_graph_attributes</name></member>
      <member refid="classgdl__graph__t_1ad1d859c9dacc717bb175e259a7ea3e70" prot="public" virt="virtual"><scope>mbl_graph_t</scope><name>print_node</name></member>
      <member refid="classgdl__graph__t_1a2097da98314a6608f372e03ed8978227" prot="public" virt="virtual"><scope>mbl_graph_t</scope><name>print_node_attributes</name></member>
      <member refid="classgdl__graph__t_1ab9bd673accc6dec4ec3d7c198eef8a78" prot="public" virt="pure-virtual"><scope>mbl_graph_t</scope><name>size</name></member>
      <member refid="classgdl__graph__t_1a9df8cfd864e97acfc9237ff5b0a5de69" prot="public" virt="pure-virtual"><scope>mbl_graph_t</scope><name>succ</name></member>
      <member refid="classsimple__graph__t_1abac06c2d89f9b70d3b0eac0a787ccaf7" prot="public" virt="non-virtual"><scope>mbl_graph_t</scope><name>title</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
