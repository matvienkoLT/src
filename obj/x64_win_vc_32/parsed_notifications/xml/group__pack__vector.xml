<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="group__pack__vector" kind="group">
    <compoundname>pack_vector</compoundname>
    <title>Vector packing</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__pack__vector_1ga20c2d8e74d9528be949acc2967fbcc05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> void</type>
        <definition>THREAD_SAFE void append_db</definition>
        <argsstring>(bytevec_t &amp;v, uchar x)</argsstring>
        <name>append_db</name>
        <param>
          <type><ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a65f85814a8290f9797005d3b28e7e5fc" kindref="member">uchar</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Append a byte to a bytevec. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" line="7188" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" bodystart="7188" bodyend="7191"/>
      </memberdef>
      <memberdef kind="function" id="group__pack__vector_1gabb85524b5f5cd86e38e24d77017b36e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> void</type>
        <definition>THREAD_SAFE void append_obj</definition>
        <argsstring>(bytevec_t &amp;v, const void *obj, size_t size)</argsstring>
        <name>append_obj</name>
        <param>
          <type><ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Append &apos;size&apos; bytes from &apos;obj&apos; to the bytevec;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" line="7196" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" bodystart="7196" bodyend="7199"/>
      </memberdef>
      <memberdef kind="function" id="group__pack__vector_1ga685a9afc95f52cee50f639351d1e05a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> void</type>
        <definition>THREAD_SAFE void append_dw</definition>
        <argsstring>(bytevec_t &amp;v, uint16 x)</argsstring>
        <name>append_dw</name>
        <param>
          <type><ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a05f6b0ae8f6a6e135b0e290c25fe0e4e" kindref="member">uint16</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Pack a word and append the result to the bytevec. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" line="7204" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" bodystart="7204" bodyend="7209"/>
      </memberdef>
      <memberdef kind="function" id="group__pack__vector_1ga04ed87b84bdb645ee6f620e86ff1c379" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> void</type>
        <definition>THREAD_SAFE void append_dd</definition>
        <argsstring>(bytevec_t &amp;v, uint32 x)</argsstring>
        <name>append_dd</name>
        <param>
          <type><ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Pack a double word and append the result to the bytevec. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" line="7214" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" bodystart="7214" bodyend="7219"/>
      </memberdef>
      <memberdef kind="function" id="group__pack__vector_1ga7bea2b838986079b66dd1e7cb208f0c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> void</type>
        <definition>THREAD_SAFE void append_dq</definition>
        <argsstring>(bytevec_t &amp;v, uint64 x)</argsstring>
        <name>append_dq</name>
        <param>
          <type><ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type><ref refid="pro_8h_1a2f5563986d7f95e4fad5876c17d9cdda" kindref="member">uint64</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Pack a quadword and append the result to the bytevec. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" line="7224" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" bodystart="7224" bodyend="7229"/>
      </memberdef>
      <memberdef kind="function" id="group__pack__vector_1ga7fce49a86450f8299d414a02e3422683" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> void</type>
        <definition>THREAD_SAFE void append_ea</definition>
        <argsstring>(bytevec_t &amp;v, ea_t x)</argsstring>
        <name>append_ea</name>
        <param>
          <type><ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Pack an ea value and append the result to the bytevec. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" line="7234" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" bodystart="7234" bodyend="7239"/>
      </memberdef>
      <memberdef kind="function" id="group__pack__vector_1ga53bf35f3e2eb067182a33d4c2bf845c0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> void</type>
        <definition>THREAD_SAFE void append_ds</definition>
        <argsstring>(bytevec_t &amp;v, const char *x)</argsstring>
        <name>append_ds</name>
        <param>
          <type><ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>x</declname>
        </param>
        <briefdescription>
<para>Pack a string and append the result to the bytevec. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" line="7244" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" bodystart="7244" bodyend="7252"/>
      </memberdef>
      <memberdef kind="function" id="group__pack__vector_1ga592ea1de382514899aaae075eadba456" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> void</type>
        <definition>THREAD_SAFE void append_buf</definition>
        <argsstring>(bytevec_t &amp;v, const void *buf, size_t len)</argsstring>
        <name>append_buf</name>
        <param>
          <type><ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Pack an object of size &apos;len&apos; and append the result to the bytevec. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" line="7257" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" bodystart="7257" bodyend="7264"/>
      </memberdef>
      <memberdef kind="function" id="group__pack__vector_1gadab98df14129693976278d438dd0aebb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="pro_8h_1acb0b22a01885ebdb9ac572343bbc4dab" kindref="member">THREAD_SAFE</ref> void</type>
        <definition>THREAD_SAFE void append_eavec</definition>
        <argsstring>(bytevec_t &amp;v, ea_t ea, const eavec_t &amp;insns)</argsstring>
        <name>append_eavec</name>
        <param>
          <type><ref refid="classbytevec__t" kindref="compound">bytevec_t</ref> &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>const <ref refid="pro_8h_1a9f46d9d52bbfcc78bc1836f4f2683da4" kindref="member">eavec_t</ref> &amp;</type>
          <declname>insns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pack an eavec and append the result to the bytevec. Also see <ref refid="kernwin_8hpp_1ab9de34cc4412f2ddc272860ffe07fc22" kindref="member">unpack_eavec()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>output vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ea</parametername>
</parameternamelist>
<parameterdescription>
<para>when we pack an eavec, we only store the differences between each value and this parameter. <linebreak/>
 This is because groups of ea values will likely be similar, and therefore the differences will usually be small. <linebreak/>
 A good example is packing the addresses of a function prologue. <linebreak/>
 One can pass the start ea of the function as this parameter, which results in a quick and efficient packing/unpacking. <linebreak/>
 (Just be sure to use the func&apos;s start ea when unpacking, of course) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>insns</parametername>
</parameternamelist>
<parameterdescription>
<para>eavec to pack </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" line="7280" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/kernwin.hpp" bodystart="7280" bodyend="7291"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Convenience functions for packing into vectors </para>    </detaileddescription>
  </compounddef>
</doxygen>
