<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="group__dbg__funcs__mem" kind="group">
    <compoundname>dbg_funcs_mem</compoundname>
    <title>Debugger memory functions for UI</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__dbg__funcs__mem_1gad1e4d0ddfde977a944d161f61742ef3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export set_dbgmem_source</definition>
        <argsstring>(range_t *(idaapi *dbg_get_memory_config)(int *n), int(idaapi *memory_read)(ea_t ea, void *buffer, int size), int(idaapi *memory_write)(ea_t ea, const void *buffer, int size))</argsstring>
        <name>set_dbgmem_source</name>
        <param>
          <type><ref refid="structrange__t" kindref="compound">range_t</ref> *(idaapi *)(int *n)</type>
          <declname>dbg_get_memory_config</declname>
        </param>
        <param>
          <type>int(idaapi *)(ea_t ea, void *buffer, int size)</type>
          <declname>memory_read</declname>
        </param>
        <param>
          <type>int(idaapi *)(ea_t ea, const void *buffer, int size)</type>
          <declname>memory_write</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the memory information source for IDA kernel. This function allows the kernel to use information coming from somewhere other than the database (from the debugger, for example) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dbg_get_memory_config</parametername>
</parameternamelist>
<parameterdescription>
<para>returns current memory configuration in the dynamic memory allocated by <ref refid="pro_8h_1a2806c6575b58eb42bb0d2b96f92fc39b" kindref="member">qalloc()</ref>. The kernel will <ref refid="pro_8h_1a69f9c35c61878b9b72795fa0f47afa26" kindref="member">qfree()</ref> it automatically. If this argument is NULL, then the debugged process memory is not used.<itemizedlist>
<listitem><para>n: number of <ref refid="structrange__t" kindref="compound">range_t</ref> elements in the answer </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_read</parametername>
</parameternamelist>
<parameterdescription>
<para>read bytes from the debugged process memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>memory_write</parametername>
</parameternamelist>
<parameterdescription>
<para>write bytes to the debugged process memory (don&apos;t forget to call <ref refid="group__dbg__funcs__mem_1gaf7dc084fa0edb1ea55add52947d7dcfd" kindref="member">invalidate_dbgmem_contents()</ref> from it) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__mem_1gaeb1edb73becff1b8483d32b3d0ef156d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export invalidate_dbgmem_config</definition>
        <argsstring>(void)</argsstring>
        <name>invalidate_dbgmem_config</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalidate the debugged process memory configuration. Call this function if the debugged process might have changed its memory layout (allocated more memory, for example) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2479" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__mem_1gaf7dc084fa0edb1ea55add52947d7dcfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman void ida_export</type>
        <definition>idaman void ida_export invalidate_dbgmem_contents</definition>
        <argsstring>(ea_t ea, asize_t size)</argsstring>
        <name>invalidate_dbgmem_contents</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <param>
          <type>asize_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalidate the debugged process memory contents. Call this function each time the process has been stopped or the process memory is modified. If ea == <ref refid="pro_8h_1a63a7c1cde5fb0cf0d0023d55c742dd4f" kindref="member">BADADDR</ref>, then the whole memory contents will be invalidated </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2487" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__mem_1ga065350680be8f3de3699534c292616c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_debugger_on</definition>
        <argsstring>(void)</argsstring>
        <name>is_debugger_on</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Is the debugger currently running? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2492" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__dbg__funcs__mem_1gae28d6f9d0a96fb5b4ae115c5f0d72c1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>idaman bool ida_export</type>
        <definition>idaman bool ida_export is_debugger_memory</definition>
        <argsstring>(ea_t ea)</argsstring>
        <name>is_debugger_memory</name>
        <param>
          <type>ea_t</type>
          <declname>ea</declname>
        </param>
        <briefdescription>
<para>Is the address mapped to debugger memory? </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/dbg.hpp" line="2497" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Inspect debugged process memory. </para>    </detaileddescription>
  </compounddef>
</doxygen>
