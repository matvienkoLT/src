<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.12">
  <compounddef id="classmblock__t" kind="class" language="C++" prot="public">
    <compoundname>mblock_t</compoundname>
    <includes refid="hexrays_8hpp" local="no">hexrays.hpp</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classmblock__t_1a17fc090e7d944e97c654c8ee3351bba9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class codegen_t</definition>
        <argsstring></argsstring>
        <name>codegen_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3567" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3567" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classmblock__t_1af1f1e8ca3c3977ac50ea8e001e6aa1b5" prot="public" static="no" mutable="no">
        <type><ref refid="classmblock__t" kindref="compound">mblock_t</ref> *</type>
        <definition>mblock_t* mblock_t::nextb</definition>
        <argsstring></argsstring>
        <name>nextb</name>
        <briefdescription>
<para>next block in the doubly linked list </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3571" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3571" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a60e04b551df83eeaa299ad9285c26abe" prot="public" static="no" mutable="no">
        <type><ref refid="classmblock__t" kindref="compound">mblock_t</ref> *</type>
        <definition>mblock_t* mblock_t::prevb</definition>
        <argsstring></argsstring>
        <name>prevb</name>
        <briefdescription>
<para>previous block in the doubly linked list </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3572" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1ab9866bc54150d834248168928474ec40" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a1134b580f8da4de94ca6b1de4d37975e" kindref="member">uint32</ref></type>
        <definition>uint32 mblock_t::flags</definition>
        <argsstring></argsstring>
        <name>flags</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>combination of <ref refid="group___m_b_l__" kindref="compound">Basic block properties</ref> bits </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3573" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3573" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a487007a5be5df295be029a26a3edecc5" prot="public" static="no" mutable="no">
        <type>ea_t</type>
        <definition>ea_t mblock_t::start</definition>
        <argsstring></argsstring>
        <name>start</name>
        <briefdescription>
<para>start address </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3595" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3595" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a00f0cc3ed6e59886e06bde9b93e265cf" prot="public" static="no" mutable="no">
        <type>ea_t</type>
        <definition>ea_t mblock_t::end</definition>
        <argsstring></argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>end address note: we can not rely on start/end addresses very much because instructions are propagated between blocks </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3596" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3596" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a0f28385f8d33694d7da495a0156f4845" prot="public" static="no" mutable="no">
        <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
        <definition>minsn_t* mblock_t::head</definition>
        <argsstring></argsstring>
        <name>head</name>
        <briefdescription>
<para>pointer to the first instruction of the block </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3600" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3600" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a11cd41090a8be89259e4b0d6f4b9f1c2" prot="public" static="no" mutable="no">
        <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
        <definition>minsn_t* mblock_t::tail</definition>
        <argsstring></argsstring>
        <name>tail</name>
        <briefdescription>
<para>pointer to the last instruction of the block </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3601" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3601" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1ae42017a58093a1ab9d613f02e02ad59b" prot="public" static="no" mutable="no">
        <type><ref refid="classmbl__array__t" kindref="compound">mbl_array_t</ref> *</type>
        <definition>mbl_array_t* mblock_t::mba</definition>
        <argsstring></argsstring>
        <name>mba</name>
        <briefdescription>
<para>the parent micro block array </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3602" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3602" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a2536ee2da70a32321869195be7570b3b" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int mblock_t::serial</definition>
        <argsstring></argsstring>
        <name>serial</name>
        <briefdescription>
<para>block number </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3603" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3603" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a22563a032b97764f3ef6558fa3327506" prot="public" static="no" mutable="no">
        <type>mblock_type_t</type>
        <definition>mblock_type_t mblock_t::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
<para>block type (BLT_NONE - not computed yet) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3604" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3604" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a947761fc255922c8c6ad1807259b2451" prot="public" static="no" mutable="no">
        <type><ref refid="structmlist__t" kindref="compound">mlist_t</ref></type>
        <definition>mlist_t mblock_t::dead_at_start</definition>
        <argsstring></argsstring>
        <name>dead_at_start</name>
        <briefdescription>
<para>data that is dead at the block entry </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3606" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3606" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a62243ff1c5b708a0748ee4fcd6458cba" prot="public" static="no" mutable="no">
        <type><ref refid="structmlist__t" kindref="compound">mlist_t</ref></type>
        <definition>mlist_t mblock_t::mustbuse</definition>
        <argsstring></argsstring>
        <name>mustbuse</name>
        <briefdescription>
<para>data that must be used by the block </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3607" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3607" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a7d9b2406a1a74f8cd3c15ed1585baeab" prot="public" static="no" mutable="no">
        <type><ref refid="structmlist__t" kindref="compound">mlist_t</ref></type>
        <definition>mlist_t mblock_t::maybuse</definition>
        <argsstring></argsstring>
        <name>maybuse</name>
        <briefdescription>
<para>data that may be used by the block </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3608" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3608" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a9f2084789d95586260284ff9446ded77" prot="public" static="no" mutable="no">
        <type><ref refid="structmlist__t" kindref="compound">mlist_t</ref></type>
        <definition>mlist_t mblock_t::mustbdef</definition>
        <argsstring></argsstring>
        <name>mustbdef</name>
        <briefdescription>
<para>data that must be defined by the block </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3609" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3609" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a89fa55debdcd0a6cc781b810be2d21f5" prot="public" static="no" mutable="no">
        <type><ref refid="structmlist__t" kindref="compound">mlist_t</ref></type>
        <definition>mlist_t mblock_t::maybdef</definition>
        <argsstring></argsstring>
        <name>maybdef</name>
        <briefdescription>
<para>data that may be defined by the block </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3610" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a011bd98525012a96cff0fa4ee56909e0" prot="public" static="no" mutable="no">
        <type><ref refid="structmlist__t" kindref="compound">mlist_t</ref></type>
        <definition>mlist_t mblock_t::dnu</definition>
        <argsstring></argsstring>
        <name>dnu</name>
        <briefdescription>
<para>data that is defined but not used in the block </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3611" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3611" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1aa6f5ff1c0c700140be08ea6ec3fb5976" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref></type>
        <definition>sval_t mblock_t::maxbsp</definition>
        <argsstring></argsstring>
        <name>maxbsp</name>
        <briefdescription>
<para>maximal sp value in the block (0...stacksize) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3613" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3613" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1ae8d261f11ff27813492a47832d6f9ac7" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref></type>
        <definition>sval_t mblock_t::minbstkref</definition>
        <argsstring></argsstring>
        <name>minbstkref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>lowest stack location accessible with indirect addressing (offset from the stack bottom) initially it is 0 (not computed) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3614" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3614" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a0989ce3a5fe5a1c922c0213e1b8b5617" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a430639fcfd4601cd6cb310ae71481fe1" kindref="member">sval_t</ref></type>
        <definition>sval_t mblock_t::minbargref</definition>
        <argsstring></argsstring>
        <name>minbargref</name>
        <briefdescription>
<para>the same for arguments </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3617" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3617" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a73cbe1adcd3480b5c428d2d91c78508e" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref></type>
        <definition>intvec_t mblock_t::predset</definition>
        <argsstring></argsstring>
        <name>predset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>control flow graph: list of our predecessors use <ref refid="classmblock__t_1ae799f46371439560827797873d5f0415" kindref="member">npred()</ref> and pred() to access it </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3619" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3619" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a27ee7b1f76dcf38dd3e9a91ee5fb9b85" prot="public" static="no" mutable="no">
        <type><ref refid="pro_8h_1a16a891be237a47eac68383da2ebc2fa6" kindref="member">intvec_t</ref></type>
        <definition>intvec_t mblock_t::succset</definition>
        <argsstring></argsstring>
        <name>succset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>control flow graph: list of our successors use <ref refid="classmblock__t_1ad60ec3dc2f13635c217efec1e209c776" kindref="member">nsucc()</ref> and succ() to access it </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3621" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3621" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classmblock__t_1a9c565734e5779d48e5dca53eec9fc150" prot="public" static="no" mutable="no">
        <type>char</type>
        <definition>char mblock_t::reserved[]</definition>
        <argsstring>[]</argsstring>
        <name>reserved</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3625" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3625" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classmblock__t_1a934c49f0dc6e36207275fe184a96c846" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mblock_t::init</definition>
        <argsstring>(void)</argsstring>
        <name>init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3569" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10263" bodyend="10266"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmblock__t_1a34e04e47ce16043a4d1bbf6e1aa82dbb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mblock_t::mark_lists_dirty</definition>
        <argsstring>(void)</argsstring>
        <name>mark_lists_dirty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3627" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3627" bodyend="3627"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1aeb949b91f0af4c5034820c24b9681397" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mblock_t::request_propagation</definition>
        <argsstring>(void)</argsstring>
        <name>request_propagation</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3628" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3628" bodyend="3628"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1ae3db26b105d6a706ef25ce8165c7ce06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mblock_t::needs_propagation</definition>
        <argsstring>(void) const</argsstring>
        <name>needs_propagation</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3629" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3629" bodyend="3629"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a8b94913f7fe5cb3c3640cefeb0cdc31d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mblock_t::request_demote64</definition>
        <argsstring>(void)</argsstring>
        <name>request_demote64</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3630" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3630" bodyend="3630"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a8af614670dbf40fcbcb1b8e904153f03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mblock_t::lists_dirty</definition>
        <argsstring>(void) const</argsstring>
        <name>lists_dirty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3631" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3631" bodyend="3631"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a953c9991a5374c2bcf5063d80a7b5dfd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mblock_t::lists_ready</definition>
        <argsstring>(void) const</argsstring>
        <name>lists_ready</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3632" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3632" bodyend="3632"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a96d903bd343d0b8d9a6618da56e5bab0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mblock_t::make_lists_ready</definition>
        <argsstring>(void)</argsstring>
        <name>make_lists_ready</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3633" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3633" bodyend="3638"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1ae799f46371439560827797873d5f0415" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mblock_t::npred</definition>
        <argsstring>(void) const</argsstring>
        <name>npred</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number of block predecessors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3641" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3641" bodyend="3641"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1ad60ec3dc2f13635c217efec1e209c776" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mblock_t::nsucc</definition>
        <argsstring>(void) const</argsstring>
        <name>nsucc</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Get number of block successors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3643" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3643" bodyend="3643"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1aa451703391a9c58150f4151861908331" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mblock_t::pred</definition>
        <argsstring>(int n) const</argsstring>
        <name>pred</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3645" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3645" bodyend="3645"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1af89902ab10ce6891c1d99b704655032e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int mblock_t::succ</definition>
        <argsstring>(int n) const</argsstring>
        <name>succ</name>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3647" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3647" bodyend="3647"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a2d2fafaa124585b70013b095f98fc25b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>mblock_t::mblock_t</definition>
        <argsstring>(void)</argsstring>
        <name>mblock_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3649" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3649" bodyend="3649"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a2345c503bd14966ea0e6d384694a4b26" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual mblock_t::~mblock_t</definition>
        <argsstring>(void)</argsstring>
        <name>~mblock_t</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3650" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1ad70b299613103addf22377341eb5412e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mblock_t::empty</definition>
        <argsstring>(void) const</argsstring>
        <name>empty</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3652" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3652" bodyend="3652"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a2cebc6e2205425b49e3cd9d2cbe71dc7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mblock_t::print</definition>
        <argsstring>(vd_printer_t &amp;vp) const</argsstring>
        <name>print</name>
        <param>
          <type><ref refid="structvd__printer__t" kindref="compound">vd_printer_t</ref> &amp;</type>
          <declname>vp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print block contents. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vp</parametername>
</parameternamelist>
<parameterdescription>
<para>print helpers class. it can be used to direct the printed info to any destination </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3657" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10269" bodyend="10272"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1af59a85a09e56a191eeb37a71578ee976" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mblock_t::dump</definition>
        <argsstring>(void) const</argsstring>
        <name>dump</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dump block info. This function is useful for debugging, see <ref refid="classmbl__array__t_1a79b0ef36941c6405b8cfec277f29c9aa" kindref="member">mbl_array_t::dump</ref> for info </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3661" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10275" bodyend="10278"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a4d15bca20ef69a03353b07eed282bfaa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mblock_t::vdump_block</definition>
        <argsstring>(const char *title, va_list va) const</argsstring>
        <name>vdump_block</name>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type>va_list</type>
          <declname>va</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3662" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10281" bodyend="10284"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a3afa1277c67b6c34c56acf33355f7357" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mblock_t::dump_block</definition>
        <argsstring>(const char *title,...) const</argsstring>
        <name>dump_block</name>
        <param>
          <type>const char *</type>
          <declname>title</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3663" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3663" bodyend="3669"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a2027004a8c3b95a46fe2f53b37cf3764" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *hexapi</type>
        <definition>minsn_t * mblock_t::insert_into_block</definition>
        <argsstring>(minsn_t *nm, minsn_t *om)</argsstring>
        <name>insert_into_block</name>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>nm</declname>
        </param>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>om</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert instruction into the doubly linked list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>nm</parametername>
</parameternamelist>
<parameterdescription>
<para>new instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>om</parametername>
</parameternamelist>
<parameterdescription>
<para>existing instruction, part of the doubly linked list if NULL, then the instruction will be inserted at the beginning of the list NM will be inserted immediately after OM </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to NM </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3683" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10287" bodyend="10290"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1aeb4e05f3e023865500d4be20beab2cd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *hexapi</type>
        <definition>minsn_t * mblock_t::remove_from_block</definition>
        <argsstring>(minsn_t *m)</argsstring>
        <name>remove_from_block</name>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove instruction from the doubly linked list <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>instruction to remove The removed iinstruction is not deleted, the caller gets its ownership </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the next instruction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3689" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10293" bodyend="10296"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1aa203fb316d392d0eb427691519ba91a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int hexapi</type>
        <definition>int mblock_t::for_all_insns</definition>
        <argsstring>(minsn_visitor_t &amp;mv)</argsstring>
        <name>for_all_insns</name>
        <param>
          <type><ref refid="structminsn__visitor__t" kindref="compound">minsn_visitor_t</ref> &amp;</type>
          <declname>mv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit all instructions. This function visits subinstructions too. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mv</parametername>
</parameternamelist>
<parameterdescription>
<para>instruction visitor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero or the value returned by mv.visit_insn() See also <ref refid="classmbl__array__t_1ab4b0ccc4533967674b195cab546eb36e" kindref="member">mbl_array_t::for_all_topinsns()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3699" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10299" bodyend="10302"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a463d097e1ad843160a811f26a3503f3a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int hexapi</type>
        <definition>int mblock_t::for_all_ops</definition>
        <argsstring>(mop_visitor_t &amp;mv)</argsstring>
        <name>for_all_ops</name>
        <param>
          <type><ref refid="structmop__visitor__t" kindref="compound">mop_visitor_t</ref> &amp;</type>
          <declname>mv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit all operands. This function visit subinstruction operands too. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mv</parametername>
</parameternamelist>
<parameterdescription>
<para>operand visitor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero or the value returned by mv.visit_mop() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3705" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10305" bodyend="10308"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1af8e47e7a61765cba812cd37020faeb00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int hexapi</type>
        <definition>int mblock_t::for_all_uses</definition>
        <argsstring>(mlist_t *list, minsn_t *i1, minsn_t *i2, mlist_mop_visitor_t &amp;mmv)</argsstring>
        <name>for_all_uses</name>
        <param>
          <type><ref refid="structmlist__t" kindref="compound">mlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i2</declname>
        </param>
        <param>
          <type><ref refid="structmlist__mop__visitor__t" kindref="compound">mlist_mop_visitor_t</ref> &amp;</type>
          <declname>mmv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Visit all operands that use LIST. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to the list of locations. it may be modified: parts that get redefined by the instructions in [i1,i2) will be deleted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>starting instruction. must be a top level insn. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para>ending instruction (excluded). must be a top level insn. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mmv</parametername>
</parameternamelist>
<parameterdescription>
<para>operand visitor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>zero or the value returned by mmv.visit_mop() </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3715" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10311" bodyend="10314"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a3a4f92154a64e00299acc9dbd611affa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int hexapi</type>
        <definition>int mblock_t::optimize_insn</definition>
        <argsstring>(minsn_t *m, int optflags=OPTI_MINSTKREF|OPTI_COMBINSNS)</argsstring>
        <name>optimize_insn</name>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>optflags</declname>
          <defval><ref refid="group___o_p_t_i___1gaaf4d77e28c2c47799ae30d7822ea62b0" kindref="member">OPTI_MINSTKREF</ref>|<ref refid="group___o_p_t_i___1ga7ae17560e84c49d82779694aeccbdee4" kindref="member">OPTI_COMBINSNS</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optimize one instruction in the context of the block. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>pointer to a top level instruction </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>optflags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___o_p_t_i__" kindref="compound">optimization flags</ref> bits </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of changes made to the block This function may change other instructions in the block too. However, it will not destroy top level instructions (it may convert them to nop&apos;s). See also <ref refid="classminsn__t_1a87275bb3a5d240b5dbc8066ff0713886" kindref="member">minsn_t::optimize_solo()</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3731" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10317" bodyend="10320"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a1d923aa111b97157b208e1c42e9407d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int hexapi</type>
        <definition>int mblock_t::optimize_block</definition>
        <argsstring>(void)</argsstring>
        <name>optimize_block</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Optimize a basic block. Usually there is no need to call this function explicitly because the decompiler will call it itself if <ref refid="structoptinsn__t_1a0f814ea05f0d2ea458ab42bb5f429a3b" kindref="member">optinsn_t::func</ref> or <ref refid="structoptblock__t_1a6f421e91e72ecb3b5c815a1aec7102d3" kindref="member">optblock_t::func</ref> return non-zero. <simplesect kind="return"><para>number of changes made to the block </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3738" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10323" bodyend="10326"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1af23ea9c2920585d4bd17304454089893" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int hexapi</type>
        <definition>int mblock_t::build_lists</definition>
        <argsstring>(bool kill_deads)</argsstring>
        <name>build_lists</name>
        <param>
          <type>bool</type>
          <declname>kill_deads</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build def-use lists and eliminate deads. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>kill_deads</parametername>
</parameternamelist>
<parameterdescription>
<para>do delete dead instructions? </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of eliminated instructions Better mblock_t::call make_lists_ready() rather than this function. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3744" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10329" bodyend="10332"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a112833e9a6ab8698412cd22fe9a49912" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mblock_t::append_use_list</definition>
        <argsstring>(mlist_t *list, const mop_t &amp;op, maymust_t maymust, bitrange_t mask=MAXRANGE) const</argsstring>
        <name>append_use_list</name>
        <param>
          <type><ref refid="structmlist__t" kindref="compound">mlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>maymust_t</type>
          <declname>maymust</declname>
        </param>
        <param>
          <type><ref refid="classbitrange__t" kindref="compound">bitrange_t</ref></type>
          <declname>mask</declname>
          <defval>MAXRANGE</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append use-list of an operand. This function calculates list of locations that may or must be used by the operand and appends it to LIST. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to the output buffer. we will append to it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>operand to calculate the use list of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maymust</parametername>
</parameternamelist>
<parameterdescription>
<para>should we calculate &apos;may-use&apos; or &apos;must-use&apos; list? see maymust_t for more details. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>if only part of the operand should be considered, a bitmask can be used to specify which part. example: op=AX,mask=0xFF means that we will consider only AL. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3761" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10335" bodyend="10338"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1ad2da681028b1d8ae742064ed8471eb7a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void hexapi</type>
        <definition>void mblock_t::append_def_list</definition>
        <argsstring>(mlist_t *list, const mop_t &amp;op, maymust_t maymust) const</argsstring>
        <name>append_def_list</name>
        <param>
          <type><ref refid="structmlist__t" kindref="compound">mlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type>maymust_t</type>
          <declname>maymust</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Append def-list of an operand. This function calculates list of locations that may or must be modified by the operand and appends it to LIST. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to the output buffer. we will append to it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>operand to calculate the def list of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maymust</parametername>
</parameternamelist>
<parameterdescription>
<para>should we calculate &apos;may-def&apos; or &apos;must-def&apos; list? see maymust_t for more details. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3774" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10341" bodyend="10344"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1af28ea62bf09ef50001112de387ace1c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmlist__t" kindref="compound">mlist_t</ref> hexapi</type>
        <definition>mlist_t mblock_t::build_use_list</definition>
        <argsstring>(const minsn_t &amp;ins, maymust_t maymust) const</argsstring>
        <name>build_use_list</name>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> &amp;</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>maymust_t</type>
          <declname>maymust</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build use-list of an instruction. This function calculates list of locations that may or must be used by the instruction. Examples: &quot;ldx ds.2, eax.4, ebx.4&quot;, may-list: all aliasable memory &quot;ldx ds.2, eax.4, ebx.4&quot;, must-list: empty Since LDX uses EAX for indirect access, it may access any aliasable memory. On the other hand, we can not tell for sure which memory cells will be accessed, this is why the must-list is empty. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ins</parametername>
</parameternamelist>
<parameterdescription>
<para>instruction to calculate the use list of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maymust</parametername>
</parameternamelist>
<parameterdescription>
<para>should we calculate &apos;may-use&apos; or &apos;must-use&apos; list? see maymust_t for more details. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the calculated use-list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3791" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10347" bodyend="10352"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a82f1c46815cc9cbe5817d2701da65263" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmlist__t" kindref="compound">mlist_t</ref> hexapi</type>
        <definition>mlist_t mblock_t::build_def_list</definition>
        <argsstring>(const minsn_t &amp;ins, maymust_t maymust) const</argsstring>
        <name>build_def_list</name>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> &amp;</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>maymust_t</type>
          <declname>maymust</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build def-list of an instruction. This function calculates list of locations that may or must be modified by the instruction. Examples: &quot;stx ebx.4, ds.2, eax.4&quot;, may-list: all aliasable memory &quot;stx ebx.4, ds.2, eax.4&quot;, must-list: empty Since STX uses EAX for indirect access, it may modify any aliasable memory. On the other hand, we can not tell for sure which memory cells will be modified, this is why the must-list is empty. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ins</parametername>
</parameternamelist>
<parameterdescription>
<para>instruction to calculate the def list of </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maymust</parametername>
</parameternamelist>
<parameterdescription>
<para>should we calculate &apos;may-def&apos; or &apos;must-def&apos; list? see maymust_t for more details. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the calculated def-list </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3805" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10355" bodyend="10360"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a4f7575967decd2e78d1964b2c2043abf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mblock_t::is_used</definition>
        <argsstring>(mlist_t *list, const minsn_t *i1, const minsn_t *i2, maymust_t maymust=MAY_ACCESS) const</argsstring>
        <name>is_used</name>
        <param>
          <type><ref refid="structmlist__t" kindref="compound">mlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>maymust_t</type>
          <declname>maymust</declname>
          <defval>MAY_ACCESS</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the list used by the specified instruction range? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>list of locations. LIST may be modified by the function: redefined locations will be removed from it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>starting instruction of the range (must be a top level insn) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para>end instruction of the range (must be a top level insn) i2 is excluded from the range. it can be specified as NULL. i1 and i2 must belong to the same block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maymust</parametername>
</parameternamelist>
<parameterdescription>
<para>should we search in &apos;may-access&apos; or &apos;must-access&apos; mode? </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3818" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3818" bodyend="3819"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a57a61611ad5a7bf237580dd58df6ad63" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *hexapi</type>
        <definition>const minsn_t * mblock_t::find_first_use</definition>
        <argsstring>(mlist_t *list, const minsn_t *i1, const minsn_t *i2, maymust_t maymust=MAY_ACCESS) const</argsstring>
        <name>find_first_use</name>
        <param>
          <type><ref refid="structmlist__t" kindref="compound">mlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>maymust_t</type>
          <declname>maymust</declname>
          <defval>MAY_ACCESS</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the first insn that uses the specified list in the insn range. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>list of locations. LIST may be modified by the function: redefined locations will be removed from it. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>starting instruction of the range (must be a top level insn) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para>end instruction of the range (must be a top level insn) i2 is excluded from the range. it can be specified as NULL. i1 and i2 must belong to the same block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maymust</parametername>
</parameternamelist>
<parameterdescription>
<para>should we search in &apos;may-access&apos; or &apos;must-access&apos; mode? </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to such instruction or NULL. Upon return LIST will contain only locations not redefined by insns [i1..result] </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3832" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10363" bodyend="10366"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a386158e49d8a10ec36bea527c0823ce4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
        <definition>minsn_t* mblock_t::find_first_use</definition>
        <argsstring>(mlist_t *list, minsn_t *i1, const minsn_t *i2, maymust_t maymust=MAY_ACCESS) const</argsstring>
        <name>find_first_use</name>
        <param>
          <type><ref refid="structmlist__t" kindref="compound">mlist_t</ref> *</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>maymust_t</type>
          <declname>maymust</declname>
          <defval>MAY_ACCESS</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3833" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3833" bodyend="3839"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1ac0388d6da894aa49b3d847e2e2384d4a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool mblock_t::is_redefined</definition>
        <argsstring>(const mlist_t &amp;list, const minsn_t *i1, const minsn_t *i2, maymust_t maymust=MAY_ACCESS) const</argsstring>
        <name>is_redefined</name>
        <param>
          <type>const <ref refid="structmlist__t" kindref="compound">mlist_t</ref> &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>maymust_t</type>
          <declname>maymust</declname>
          <defval>MAY_ACCESS</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the list redefined by the specified instructions? <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>list of locations to check. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>starting instruction of the range (must be a top level insn) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para>end instruction of the range (must be a top level insn) i2 is excluded from the range. it can be specified as NULL. i1 and i2 must belong to the same block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maymust</parametername>
</parameternamelist>
<parameterdescription>
<para>should we search in &apos;may-access&apos; or &apos;must-access&apos; mode? </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3848" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3848" bodyend="3855"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a313cdb0309147d1dfcaea33b85fee107" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *hexapi</type>
        <definition>const minsn_t * mblock_t::find_redefinition</definition>
        <argsstring>(const mlist_t &amp;list, const minsn_t *i1, const minsn_t *i2, maymust_t maymust=MAY_ACCESS) const</argsstring>
        <name>find_redefinition</name>
        <param>
          <type>const <ref refid="structmlist__t" kindref="compound">mlist_t</ref> &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>maymust_t</type>
          <declname>maymust</declname>
          <defval>MAY_ACCESS</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the first insn that redefines any part of the list in the insn range. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>list</parametername>
</parameternamelist>
<parameterdescription>
<para>list of locations to check. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>starting instruction of the range (must be a top level insn) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para>end instruction of the range (must be a top level insn) i2 is excluded from the range. it can be specified as NULL. i1 and i2 must belong to the same block. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maymust</parametername>
</parameternamelist>
<parameterdescription>
<para>should we search in &apos;may-access&apos; or &apos;must-access&apos; mode? </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to such instruction or NULL. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3865" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10369" bodyend="10372"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a30ee1bb53002229ca0867c87303f93de" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
        <definition>minsn_t* mblock_t::find_redefinition</definition>
        <argsstring>(const mlist_t &amp;list, minsn_t *i1, const minsn_t *i2, maymust_t maymust=MAY_ACCESS) const</argsstring>
        <name>find_redefinition</name>
        <param>
          <type>const <ref refid="structmlist__t" kindref="compound">mlist_t</ref> &amp;</type>
          <declname>list</declname>
        </param>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>maymust_t</type>
          <declname>maymust</declname>
          <defval>MAY_ACCESS</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3870" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3870" bodyend="3880"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a783d76984acddc5fcac6ea24794a2ed7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mblock_t::is_rhs_redefined</definition>
        <argsstring>(minsn_t *ins, minsn_t *i1, minsn_t *i2)</argsstring>
        <name>is_rhs_redefined</name>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>ins</declname>
        </param>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i1</declname>
        </param>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is the right hand side of the instruction redefined the insn range? &quot;right hand side&quot; corresponds to the source operands of the instruction. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ins</parametername>
</parameternamelist>
<parameterdescription>
<para>instruction to consider </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i1</parametername>
</parameternamelist>
<parameterdescription>
<para>starting instruction of the range (must be a top level insn) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para>end instruction of the range (must be a top level insn) i2 is excluded from the range. it can be specified as NULL. i1 and i2 must belong to the same block. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3889" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10375" bodyend="10378"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a74ebcfd579617ce6b08ee63c4c053372" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *hexapi</type>
        <definition>minsn_t * mblock_t::find_access</definition>
        <argsstring>(const mop_t &amp;op, minsn_t **parent, const minsn_t *mend, int fdflags) const</argsstring>
        <name>find_access</name>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> **</type>
          <declname>parent</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>mend</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fdflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find the instruction that accesses the specified operand. This function search inside one block. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para>operand to search for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>p_i1</parametername>
</parameternamelist>
<parameterdescription>
<para>ptr to ptr to a top level instruction. denotes the beginning of the search range. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i2</parametername>
</parameternamelist>
<parameterdescription>
<para>end instruction of the range (must be a top level insn) i2 is excluded from the range. it can be specified as NULL. i1 and i2 must belong to the same block.  combination of <ref refid="group___f_d__" kindref="compound">bits for mblock_t::find_access</ref> bits </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the instruction that accesses the operand. this instruction may be a sub-instruction. to find out the top level instruction, check out *p_i1. NULL means &apos;not found&apos;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3904" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10381" bodyend="10384"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1aede8b53783c9c567c381ace342985ace" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
        <definition>minsn_t* mblock_t::find_def</definition>
        <argsstring>(const mop_t &amp;op, minsn_t **p_i1, const minsn_t *i2, int fdflags)</argsstring>
        <name>find_def</name>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> **</type>
          <declname>p_i1</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fdflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3920" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3920" bodyend="3927"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a8a8e20e8ebd5ef788b68a8a3502ba55c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
        <definition>minsn_t* mblock_t::find_use</definition>
        <argsstring>(const mop_t &amp;op, minsn_t **p_i1, const minsn_t *i2, int fdflags)</argsstring>
        <name>find_use</name>
        <param>
          <type>const <ref refid="classmop__t" kindref="compound">mop_t</ref> &amp;</type>
          <declname>op</declname>
        </param>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> **</type>
          <declname>p_i1</declname>
        </param>
        <param>
          <type>const <ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>i2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fdflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3928" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3928" bodyend="3935"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1a9b7c695af6e3460550176a95f886e910" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool hexapi</type>
        <definition>bool mblock_t::get_valranges</definition>
        <argsstring>(valrng_t *res, const vivl_t &amp;vivl, int vrflags) const</argsstring>
        <name>get_valranges</name>
        <param>
          <type><ref refid="classvalrng__t" kindref="compound">valrng_t</ref> *</type>
          <declname>res</declname>
        </param>
        <param>
          <type>const <ref refid="structvivl__t" kindref="compound">vivl_t</ref> &amp;</type>
          <declname>vivl</declname>
        </param>
        <param>
          <type>int</type>
          <declname>vrflags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find possible values. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>res</parametername>
</parameternamelist>
<parameterdescription>
<para>set of value ranges </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>what to search for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vrflags</parametername>
</parameternamelist>
<parameterdescription>
<para>combination of <ref refid="group___v_r__" kindref="compound">bits for get_valranges</ref> bits </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3941" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="10387" bodyend="10390"/>
      </memberdef>
      <memberdef kind="function" id="classmblock__t_1adeefb92c2299bc8ea460b06e800edad3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void mblock_t::make_nop</definition>
        <argsstring>(minsn_t *m)</argsstring>
        <name>make_nop</name>
        <param>
          <type><ref refid="classminsn__t" kindref="compound">minsn_t</ref> *</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Erase the instruction (convert it to nop) and mark the lists dirty. This is the recommended function to use because it also marks the block use-def lists dirty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3954" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3954" bodyend="3954"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Microcode of one basic block. All blocks are part of a doubly linked list as well as can be addressed by indexing the mba-&gt;natural array. A block contains a doubly linked list of instructions, various localtion lists that are used for data flow analysis and other attributes. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="2151">
        <label>ivl_tpl&lt; uval_t &gt;</label>
        <link refid="structivl__tpl"/>
      </node>
      <node id="2146">
        <label>bitset_t</label>
        <link refid="classbitset__t"/>
      </node>
      <node id="2144">
        <label>mlist_t</label>
        <link refid="structmlist__t"/>
        <childnode refid="2141" relation="usage">
          <edgelabel>mem</edgelabel>
        </childnode>
        <childnode refid="2145" relation="usage">
          <edgelabel>reg</edgelabel>
        </childnode>
      </node>
      <node id="2149">
        <label>ivl_with_name_t</label>
        <link refid="structivl__with__name__t"/>
        <childnode refid="2150" relation="usage">
          <edgelabel>ivl</edgelabel>
        </childnode>
      </node>
      <node id="2152">
        <label>tinfo_t</label>
        <link refid="classtinfo__t"/>
      </node>
      <node id="2173">
        <label>mop_addr_t</label>
        <link refid="classmop__addr__t"/>
        <childnode refid="2165" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2162">
        <label>netnode</label>
        <link refid="classnetnode"/>
      </node>
      <node id="2177">
        <label>qvector&lt; mop_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2141">
        <label>ivlset_t</label>
        <link refid="structivlset__t"/>
        <childnode refid="2142" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2136">
        <label>mblock_t</label>
        <link refid="classmblock__t"/>
        <childnode refid="2137" relation="usage">
          <edgelabel>mba</edgelabel>
        </childnode>
        <childnode refid="2144" relation="usage">
          <edgelabel>maybuse</edgelabel>
          <edgelabel>dnu</edgelabel>
          <edgelabel>maybdef</edgelabel>
          <edgelabel>mustbuse</edgelabel>
          <edgelabel>mustbdef</edgelabel>
          <edgelabel>dead_at_start</edgelabel>
        </childnode>
        <childnode refid="2147" relation="usage">
          <edgelabel>succset</edgelabel>
          <edgelabel>predset</edgelabel>
        </childnode>
        <childnode refid="2164" relation="usage">
          <edgelabel>head</edgelabel>
          <edgelabel>tail</edgelabel>
        </childnode>
        <childnode refid="2136" relation="usage">
          <edgelabel>nextb</edgelabel>
          <edgelabel>prevb</edgelabel>
        </childnode>
      </node>
      <node id="2161">
        <label>rangevec_base_t</label>
        <link refid="classqvector"/>
      </node>
      <node id="2180">
        <label>operand_locator_t</label>
        <link refid="structoperand__locator__t"/>
      </node>
      <node id="2143">
        <label>qvector&lt; ivl_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2181">
        <label>mcases_t</label>
        <link refid="classmcases__t"/>
        <childnode refid="2147" relation="usage">
          <edgelabel>targets</edgelabel>
        </childnode>
      </node>
      <node id="2176">
        <label>qvector&lt; mcallarg_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2154">
        <label>func_t</label>
        <link refid="classfunc__t"/>
        <childnode refid="2155" relation="public-inheritance">
        </childnode>
        <childnode refid="2156" relation="usage">
          <edgelabel>regargs</edgelabel>
        </childnode>
        <childnode refid="2157" relation="usage">
          <edgelabel>points</edgelabel>
        </childnode>
        <childnode refid="2155" relation="usage">
          <edgelabel>tails</edgelabel>
        </childnode>
        <childnode refid="2158" relation="usage">
          <edgelabel>regvars</edgelabel>
        </childnode>
        <childnode refid="2159" relation="usage">
          <edgelabel>llabels</edgelabel>
        </childnode>
      </node>
      <node id="2165">
        <label>mop_t</label>
        <link refid="classmop__t"/>
        <childnode refid="2166" relation="usage">
          <edgelabel>scif</edgelabel>
        </childnode>
        <childnode refid="2172" relation="usage">
          <edgelabel>fpc</edgelabel>
        </childnode>
        <childnode refid="2173" relation="usage">
          <edgelabel>a</edgelabel>
        </childnode>
        <childnode refid="2174" relation="usage">
          <edgelabel>pair</edgelabel>
        </childnode>
        <childnode refid="2175" relation="usage">
          <edgelabel>f</edgelabel>
        </childnode>
        <childnode refid="2164" relation="usage">
          <edgelabel>d</edgelabel>
        </childnode>
        <childnode refid="2178" relation="usage">
          <edgelabel>l</edgelabel>
        </childnode>
        <childnode refid="2179" relation="usage">
          <edgelabel>nnn</edgelabel>
        </childnode>
        <childnode refid="2181" relation="usage">
          <edgelabel>c</edgelabel>
        </childnode>
        <childnode refid="2182" relation="usage">
          <edgelabel>s</edgelabel>
        </childnode>
      </node>
      <node id="2174">
        <label>mop_pair_t</label>
        <link refid="classmop__pair__t"/>
        <childnode refid="2165" relation="usage">
          <edgelabel>hop</edgelabel>
          <edgelabel>lop</edgelabel>
        </childnode>
      </node>
      <node id="2156">
        <label>regarg_t</label>
        <link refid="structregarg__t"/>
      </node>
      <node id="2172">
        <label>fnumber_t</label>
        <link refid="structfnumber__t"/>
      </node>
      <node id="2137">
        <label>mbl_array_t</label>
        <link refid="classmbl__array__t"/>
        <childnode refid="2138" relation="usage">
          <edgelabel>vars</edgelabel>
        </childnode>
        <childnode refid="2140" relation="usage">
          <edgelabel>label</edgelabel>
          <edgelabel>error_strarg</edgelabel>
        </childnode>
        <childnode refid="2141" relation="usage">
          <edgelabel>gotoff_stkvars</edgelabel>
          <edgelabel>restricted_memory</edgelabel>
          <edgelabel>aliased_memory</edgelabel>
        </childnode>
        <childnode refid="2144" relation="usage">
          <edgelabel>spoiled_list</edgelabel>
          <edgelabel>nodel_memory</edgelabel>
        </childnode>
        <childnode refid="2147" relation="usage">
          <edgelabel>argidx</edgelabel>
        </childnode>
        <childnode refid="2148" relation="usage">
          <edgelabel>idb_spoiled</edgelabel>
        </childnode>
        <childnode refid="2136" relation="usage">
          <edgelabel>blocks</edgelabel>
          <edgelabel>natural</edgelabel>
        </childnode>
        <childnode refid="2145" relation="usage">
          <edgelabel>consumed_argregs</edgelabel>
        </childnode>
        <childnode refid="2149" relation="usage">
          <edgelabel>std_ivls</edgelabel>
        </childnode>
        <childnode refid="2152" relation="usage">
          <edgelabel>idb_type</edgelabel>
        </childnode>
        <childnode refid="2153" relation="usage">
          <edgelabel>mbr</edgelabel>
        </childnode>
        <childnode refid="2162" relation="usage">
          <edgelabel>idb_node</edgelabel>
        </childnode>
        <childnode refid="2163" relation="usage">
          <edgelabel>notes</edgelabel>
        </childnode>
        <childnode refid="2150" relation="usage">
          <edgelabel>aliased_args</edgelabel>
          <edgelabel>aliased_vars</edgelabel>
        </childnode>
      </node>
      <node id="2175">
        <label>mcallinfo_t</label>
        <link refid="classmcallinfo__t"/>
        <childnode refid="2141" relation="usage">
          <edgelabel>visible_memory</edgelabel>
        </childnode>
        <childnode refid="2144" relation="usage">
          <edgelabel>pass_regs</edgelabel>
          <edgelabel>spoiled</edgelabel>
          <edgelabel>dead_regs</edgelabel>
          <edgelabel>return_regs</edgelabel>
        </childnode>
        <childnode refid="2176" relation="usage">
          <edgelabel>args</edgelabel>
        </childnode>
        <childnode refid="2152" relation="usage">
          <edgelabel>return_type</edgelabel>
        </childnode>
        <childnode refid="2177" relation="usage">
          <edgelabel>retregs</edgelabel>
        </childnode>
        <childnode refid="2168" relation="usage">
          <edgelabel>return_argloc</edgelabel>
        </childnode>
      </node>
      <node id="2153">
        <label>mba_ranges_t</label>
        <link refid="structmba__ranges__t"/>
        <childnode refid="2154" relation="usage">
          <edgelabel>pfn</edgelabel>
        </childnode>
        <childnode refid="2160" relation="usage">
          <edgelabel>ranges</edgelabel>
        </childnode>
      </node>
      <node id="2142">
        <label>ivlset_tpl&lt; ivl_t, uval_t &gt;</label>
        <link refid="classivlset__tpl"/>
        <childnode refid="2143" relation="usage">
          <edgelabel>bag</edgelabel>
        </childnode>
      </node>
      <node id="2166">
        <label>scif_t</label>
        <link refid="structscif__t"/>
        <childnode refid="2167" relation="public-inheritance">
        </childnode>
        <childnode refid="2137" relation="usage">
          <edgelabel>mba</edgelabel>
        </childnode>
        <childnode refid="2140" relation="usage">
          <edgelabel>name</edgelabel>
        </childnode>
        <childnode refid="2152" relation="usage">
          <edgelabel>type</edgelabel>
        </childnode>
      </node>
      <node id="2147">
        <label>qvector&lt; int &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2157">
        <label>stkpnt_t</label>
        <link refid="structstkpnt__t"/>
      </node>
      <node id="2140">
        <label>_qstring&lt; char &gt;</label>
        <link refid="class__qstring"/>
      </node>
      <node id="2164">
        <label>minsn_t</label>
        <link refid="classminsn__t"/>
        <childnode refid="2164" relation="usage">
          <edgelabel>prev</edgelabel>
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="2165" relation="usage">
          <edgelabel>l</edgelabel>
          <edgelabel>r</edgelabel>
          <edgelabel>d</edgelabel>
        </childnode>
      </node>
      <node id="2169">
        <label>scattered_aloc_t</label>
        <link refid="classscattered__aloc__t"/>
        <childnode refid="2170" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2170">
        <label>qvector&lt; argpart_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2155">
        <label>range_t</label>
        <link refid="structrange__t"/>
      </node>
      <node id="2167">
        <label>vdloc_t</label>
        <link refid="classvdloc__t"/>
        <childnode refid="2168" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2158">
        <label>regvar_t</label>
        <link refid="structregvar__t"/>
        <childnode refid="2155" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2163">
        <label>qvector&lt; hexwarn_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2179">
        <label>mnumber_t</label>
        <link refid="structmnumber__t"/>
        <childnode refid="2180" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2138">
        <label>lvars_t</label>
        <link refid="structlvars__t"/>
        <childnode refid="2139" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2168">
        <label>argloc_t</label>
        <link refid="classargloc__t"/>
        <childnode refid="2169" relation="usage">
          <edgelabel>dist</edgelabel>
        </childnode>
        <childnode refid="2171" relation="usage">
          <edgelabel>rrel</edgelabel>
        </childnode>
      </node>
      <node id="2159">
        <label>llabel_t</label>
        <link refid="structllabel__t"/>
      </node>
      <node id="2178">
        <label>lvar_ref_t</label>
        <link refid="structlvar__ref__t"/>
        <childnode refid="2137" relation="usage">
          <edgelabel>mba</edgelabel>
        </childnode>
      </node>
      <node id="2139">
        <label>qvector&lt; lvar_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2182">
        <label>stkvar_ref_t</label>
        <link refid="structstkvar__ref__t"/>
        <childnode refid="2137" relation="usage">
          <edgelabel>mba</edgelabel>
        </childnode>
      </node>
      <node id="2148">
        <label>qvector&lt; reg_info_t &gt;</label>
        <link refid="classqvector"/>
      </node>
      <node id="2171">
        <label>rrel_t</label>
        <link refid="structrrel__t"/>
      </node>
      <node id="2145">
        <label>rlist_t</label>
        <link refid="classrlist__t"/>
        <childnode refid="2146" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2150">
        <label>ivl_t</label>
        <link refid="structivl__t"/>
        <childnode refid="2151" relation="public-inheritance">
        </childnode>
        <childnode refid="2150" relation="usage">
          <edgelabel>allmem</edgelabel>
        </childnode>
      </node>
      <node id="2160">
        <label>rangevec_t</label>
        <link refid="structrangevec__t"/>
        <childnode refid="2161" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" line="3566" column="1" bodyfile="obj/x64_linux_gcc_32_opt/idasdk/hexrays.hpp" bodystart="3565" bodyend="3955"/>
    <listofallmembers>
      <member refid="classmblock__t_1ad2da681028b1d8ae742064ed8471eb7a" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>append_def_list</name></member>
      <member refid="classmblock__t_1a112833e9a6ab8698412cd22fe9a49912" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>append_use_list</name></member>
      <member refid="classmblock__t_1a82f1c46815cc9cbe5817d2701da65263" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>build_def_list</name></member>
      <member refid="classmblock__t_1af23ea9c2920585d4bd17304454089893" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>build_lists</name></member>
      <member refid="classmblock__t_1af28ea62bf09ef50001112de387ace1c0" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>build_use_list</name></member>
      <member refid="classmblock__t_1a17fc090e7d944e97c654c8ee3351bba9" prot="private" virt="non-virtual"><scope>mblock_t</scope><name>codegen_t</name></member>
      <member refid="classmblock__t_1a947761fc255922c8c6ad1807259b2451" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>dead_at_start</name></member>
      <member refid="classmblock__t_1a011bd98525012a96cff0fa4ee56909e0" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>dnu</name></member>
      <member refid="classmblock__t_1af59a85a09e56a191eeb37a71578ee976" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>dump</name></member>
      <member refid="classmblock__t_1a3afa1277c67b6c34c56acf33355f7357" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>dump_block</name></member>
      <member refid="classmblock__t_1ad70b299613103addf22377341eb5412e" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>empty</name></member>
      <member refid="classmblock__t_1a00f0cc3ed6e59886e06bde9b93e265cf" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>end</name></member>
      <member refid="classmblock__t_1a74ebcfd579617ce6b08ee63c4c053372" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>find_access</name></member>
      <member refid="classmblock__t_1aede8b53783c9c567c381ace342985ace" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>find_def</name></member>
      <member refid="classmblock__t_1a57a61611ad5a7bf237580dd58df6ad63" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>find_first_use</name></member>
      <member refid="classmblock__t_1a386158e49d8a10ec36bea527c0823ce4" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>find_first_use</name></member>
      <member refid="classmblock__t_1a313cdb0309147d1dfcaea33b85fee107" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>find_redefinition</name></member>
      <member refid="classmblock__t_1a30ee1bb53002229ca0867c87303f93de" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>find_redefinition</name></member>
      <member refid="classmblock__t_1a8a8e20e8ebd5ef788b68a8a3502ba55c" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>find_use</name></member>
      <member refid="classmblock__t_1ab9866bc54150d834248168928474ec40" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>flags</name></member>
      <member refid="classmblock__t_1aa203fb316d392d0eb427691519ba91a7" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>for_all_insns</name></member>
      <member refid="classmblock__t_1a463d097e1ad843160a811f26a3503f3a" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>for_all_ops</name></member>
      <member refid="classmblock__t_1af8e47e7a61765cba812cd37020faeb00" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>for_all_uses</name></member>
      <member refid="classmblock__t_1a9b7c695af6e3460550176a95f886e910" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>get_valranges</name></member>
      <member refid="classmblock__t_1a0f28385f8d33694d7da495a0156f4845" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>head</name></member>
      <member refid="classmblock__t_1a934c49f0dc6e36207275fe184a96c846" prot="private" virt="non-virtual"><scope>mblock_t</scope><name>init</name></member>
      <member refid="classmblock__t_1a2027004a8c3b95a46fe2f53b37cf3764" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>insert_into_block</name></member>
      <member refid="classmblock__t_1ac0388d6da894aa49b3d847e2e2384d4a" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>is_redefined</name></member>
      <member refid="classmblock__t_1a783d76984acddc5fcac6ea24794a2ed7" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>is_rhs_redefined</name></member>
      <member refid="classmblock__t_1a4f7575967decd2e78d1964b2c2043abf" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>is_used</name></member>
      <member refid="classmblock__t_1a8af614670dbf40fcbcb1b8e904153f03" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>lists_dirty</name></member>
      <member refid="classmblock__t_1a953c9991a5374c2bcf5063d80a7b5dfd" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>lists_ready</name></member>
      <member refid="classmblock__t_1a96d903bd343d0b8d9a6618da56e5bab0" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>make_lists_ready</name></member>
      <member refid="classmblock__t_1adeefb92c2299bc8ea460b06e800edad3" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>make_nop</name></member>
      <member refid="classmblock__t_1a34e04e47ce16043a4d1bbf6e1aa82dbb" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>mark_lists_dirty</name></member>
      <member refid="classmblock__t_1aa6f5ff1c0c700140be08ea6ec3fb5976" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>maxbsp</name></member>
      <member refid="classmblock__t_1a89fa55debdcd0a6cc781b810be2d21f5" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>maybdef</name></member>
      <member refid="classmblock__t_1a7d9b2406a1a74f8cd3c15ed1585baeab" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>maybuse</name></member>
      <member refid="classmblock__t_1ae42017a58093a1ab9d613f02e02ad59b" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>mba</name></member>
      <member refid="classmblock__t_1a2d2fafaa124585b70013b095f98fc25b" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>mblock_t</name></member>
      <member refid="classmblock__t_1a0989ce3a5fe5a1c922c0213e1b8b5617" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>minbargref</name></member>
      <member refid="classmblock__t_1ae8d261f11ff27813492a47832d6f9ac7" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>minbstkref</name></member>
      <member refid="classmblock__t_1a9f2084789d95586260284ff9446ded77" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>mustbdef</name></member>
      <member refid="classmblock__t_1a62243ff1c5b708a0748ee4fcd6458cba" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>mustbuse</name></member>
      <member refid="classmblock__t_1ae3db26b105d6a706ef25ce8165c7ce06" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>needs_propagation</name></member>
      <member refid="classmblock__t_1af1f1e8ca3c3977ac50ea8e001e6aa1b5" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>nextb</name></member>
      <member refid="classmblock__t_1ae799f46371439560827797873d5f0415" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>npred</name></member>
      <member refid="classmblock__t_1ad60ec3dc2f13635c217efec1e209c776" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>nsucc</name></member>
      <member refid="classmblock__t_1a1d923aa111b97157b208e1c42e9407d9" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>optimize_block</name></member>
      <member refid="classmblock__t_1a3a4f92154a64e00299acc9dbd611affa" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>optimize_insn</name></member>
      <member refid="classmblock__t_1aa451703391a9c58150f4151861908331" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>pred</name></member>
      <member refid="classmblock__t_1a73cbe1adcd3480b5c428d2d91c78508e" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>predset</name></member>
      <member refid="classmblock__t_1a60e04b551df83eeaa299ad9285c26abe" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>prevb</name></member>
      <member refid="classmblock__t_1a2cebc6e2205425b49e3cd9d2cbe71dc7" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>print</name></member>
      <member refid="classmblock__t_1aeb4e05f3e023865500d4be20beab2cd0" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>remove_from_block</name></member>
      <member refid="classmblock__t_1a8b94913f7fe5cb3c3640cefeb0cdc31d" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>request_demote64</name></member>
      <member refid="classmblock__t_1aeb949b91f0af4c5034820c24b9681397" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>request_propagation</name></member>
      <member refid="classmblock__t_1a9c565734e5779d48e5dca53eec9fc150" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>reserved</name></member>
      <member refid="classmblock__t_1a2536ee2da70a32321869195be7570b3b" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>serial</name></member>
      <member refid="classmblock__t_1a487007a5be5df295be029a26a3edecc5" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>start</name></member>
      <member refid="classmblock__t_1af89902ab10ce6891c1d99b704655032e" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>succ</name></member>
      <member refid="classmblock__t_1a27ee7b1f76dcf38dd3e9a91ee5fb9b85" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>succset</name></member>
      <member refid="classmblock__t_1a11cd41090a8be89259e4b0d6f4b9f1c2" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>tail</name></member>
      <member refid="classmblock__t_1a22563a032b97764f3ef6558fa3327506" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>type</name></member>
      <member refid="classmblock__t_1a4d15bca20ef69a03353b07eed282bfaa" prot="public" virt="non-virtual"><scope>mblock_t</scope><name>vdump_block</name></member>
      <member refid="classmblock__t_1a2345c503bd14966ea0e6d384694a4b26" prot="public" virt="virtual"><scope>mblock_t</scope><name>~mblock_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
